code,nl
return [ globalpath ] + list ( settings . LOCALE PATHS ),"for the call to the function upath , get the directory name of the resulting system path , join the result and string 'locale ' , into a valid file path , substitute it for globalpath . append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath , return it ."
return False,return boolean False .
self .  cache [ key ] = pickled,substitute pickled for value under the key key of self._cache dictionary .
"return is in stance ( other , self .   class   ) and ( self . limit value == other . limit value ) and ( self . message == other . message ) and ( self . code == other . code )","if other is an instance of self.__class__ and , self.limit_value equals to other.limit_value , and self.message equals to other.message ,"
  all   = [ STR_ ],__all__ is an list containing string 'SelectDateWidget ' .
else :,"if not ,"
"def   init   ( self , subject ) :",define the function next_space_index with 2 arguments : self and subject .
"def get ( self , key , default = None , version = None ) :","define the method get with 4 arguments , self class instance , key , default set to None and version set to None ."
if self . can delete and self .  should delete form ( form ) :,"if self.can_delete is true and call to the function self._should_delete_form with an argument form evaluates to true ,"
"from . html parser import HTMLParser , HTMLParseError",from .html_parser import HTMLParser and HTMLParseError into default name space .
else :,"if not ,"
"def  base set ( self , mode , key , value , timeout = DEFAULT TIMEOUT ) :","define the protected method _base_set with 4 arguments , self class instance , key , value and timeout set to DEFAULT_TIMEOUT ."
return False,return boolean False .
if retval :,"if retval is true ,"
import os,import module os .
class InvalidPage ( Exception ) :,derive the class InvalidPage from the Exception base class .
"from django . core . mail . utils import CachedDnsName , DNS NAME",from django.core.mail.utils import CachedDnsName and DNS_NAME into default name space .
else :,"if it does append it to targets list . if not ,"
"from django . core . exceptions import ImproperlyConfigured , DjangoRuntimeWarning",from django.core.exceptions import ImproperlyConfigured and DjangoRuntimeWarning into default name space .
if p >= NUM_ :,"if p is greater or equal to integer 0 ,"
value = datetime safe . new date ( value ),"call the method datetime_safe.new_date with an argument value , substitute the result for value ."
has bz2 = True,has_bz2 is boolean True .
memo = { },memo is an empty dictionary .
"block context . push ( self . name , push )",call the method block_context.push with 2 arguments : self.name and push .
yield d,yield d .
abspathu = abspath,substitute abspath for abspathu .
"raise ValueError ( "" STR_ "" "" STR_ "" % klass .   name   )","raise the exception ValueError , with string as argument , `` @ python_2_unicode_compatible can not be applied '' ,"
return self .   cast ( ) == other,"call the method self.__cast , if the result equals other , return boolean True , otherwise return boolean False ."
"result = super ( DateTimeField , self ) . to python ( value )","call the method to_python with an argument value from the base class of the DateTimeField class , substitute the result for result ."
def all locale paths ( ) :,define the function all_locale_paths .
"return metaclass ( cls .   name   , cls .   bases   , or ig vars )","return an instance of metaclass class , created with 3 arguments : cls.__name__ , cls.__bases__ and orig_vars ."
"yield parse boundary stream ( sub stream , NUM_ )","call the function parse_boundary_stream with 2 arguments : sub_stream and integer 1024 , yield the result as the return value of the generator ."
pass,do nothing .
context . render context . push ( ),call the method context.render_context.push .
pass,do nothing .
if  default is None :,"if _default is None ,"
elif t . token type == TOKEN VAR :,"otherwise if t.token_type equals TOKEN_VAR ,"
"def get supported language variant ( lang code , strict = False ) :",define the function get_supported_language_variant with 2 arguments : lang_code and strict set to boolean False .
"def resolve context ( self , context ) :",define the method resolve_context with 2 arguments : self and context .
want unicode = True,want_unicode is boolean True .
doy = self . year days [ self . data . month ] + self . data . day,"append self.data.day to the value under the self.data.month key of the self.year_days dictionary , substitute the result for doy ."
if locales :,"if locales is true ,"
continue,skip this loop iteration .
if STR_ in cc :,"for every el in split string cc_delim_re , with delimiter being the value of dictionary response under the key 'Cache-Control ' . if cc contains item 'max-age ' ,"
guessed filename += ext,append ext to guessed_filename .
self .  add local translations ( ),call the method self._add_local_translations .
in t part gd =,int_part_gd is an empty string .
if self . verbosity > NUM_ :,"if self.verbosity is greater than integer 0 ,"
if not var or in var :,"if var is false or whitespaces are contained in var ,"
try :,"try ,"
if cache choices is not None :,"if cache_choices is not None ,"
if is  relation :,"if is_relation ,"
try :,"try ,"
"sys . stderr = open ( err log , STR_ , buffering )","open err_log file in append mode with buffering size of the input buffer , substitute the result for sys.stderr ."
class Choice ( list ) :,"' ' for 's ' , ' x ' for 'S ' , ' x ' for ' W ' , ' ! ' for ' W ' and None for ' Z ' . derive the class Choice from list base class ."
@ register . tag,"register.tag decorator ,"
choice input class = None,choice_input_class is None .
field notes = [ ],field_notes is an empty list .
"t = s . split ( = , NUM_ )","split string s once , with '= ' as delimiter , substitute the result for t ."
elif template tuple is None :,"otherwise if template_tuple is None ,"
try :,"try ,"
return in t ( str ( value ) [ - arg ] ),"convert value into a string , take character at the negative arg index , convert it into an integer , return it ."
if default is not RAISE ERROR :,"if default is true and RAISE_ERROR is false ,"
"if answer ! = "" STR_ "" :","if answer equals a string ' y ' ,"
else :,"where ' % s ' are replaced with name and param . if not ,"
"result = super ( ChoiceField , self ) .   deepcopy   ( memo )","call the method __deepcopy__ from the base class of the class ChoiceField , with an argument memo , substitute the result for result ."
"httpd = httpd cls ( server address , WSGIRequestHandler , ipv6 = ipv6 )","call the httpd_cls function with 4 arguments : server_address , WSGIRequestHandler and ipv6 set to ipv6 , substitute the result for httpd ."
result = self . configurator . convert ( value ),"call the method self.configurator.convert with an argument value , substitute the result for result ."
"for ch , escaped in in put iter :","for every ch and escaped in input_iter ,"
if in valid apps :,"if invalid_apps in not empty ,"
pass,do nothing .
else :,"if not ,"
" func code = "" STR_ """,_func_code is a string `` __code__ '' .
"data = method ( self , * args , ** kwargs )","call the function method with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , substitute the result for data ."
if var . endswith ( STR_ ) :,"if var ends with ' . ' ,"
def  add local translations ( self ) :,define the method _add_local_translations with an argument self .
finally :,"finally perform ,"
elif not base url . endswith ( / ) :,"otherwise if base_url does not ends with '/ ' character ,"
code list . append ( foreground [ v ] ),append value under the key v of foreground dictionary to code_list .
def  ipython pre 100 ( self ) :,define the method _ipython_pre_100 with an argument self .
"def   newobj   ( cls , * args ) :",define the method __newobj__ with 2 arguments cls and unpacked list args .
"obj dict [ STR_ ] = dict ( ( k , self . getlist ( k ) ) for k in self )","value under '_data ' key of obj_dict is a dictionary created with tuples containing 2 elements : k and result of the function ,"
@ property,"property decorator ,"
self . reason phrase = reason,substitute reason for self.reason_phrase .
for obj in queryset . iterator ( ) :,"for every obj in result of the method queryset.iterator ,"
pad = b = * ( - len ( s ) % NUM_ ),"calculate negative length of s , by modulus integer 4 , use the result as the number of '= ' characters to be stored in pad ."
"def   deepcopy   ( self , memo ) :",define the method __deepcopy__ with 2 arguments : self and memo .
class Input ( Widget ) :,derive the class Input from the Widget base class .
"def receive data chunk ( self , raw data , start ) :","self.charset and self.content_type_extra . define the method receive_data_chunk with arguments : self , raw_data and start ."
"except ( LookupError , TypeError ) :","if LookupError or TypeError exceptions are caught ,"
content length = NUM_,content_length is integer 0 .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
@ property,property decorator .
known models = [ ],known_models is an empty list .
except KeyError :,"if KeyError exception is caught ,"
class FileField ( Field ) :,derive the class FileField from the base class Field class .
def has previous ( self ) :,define the method has_previous with an argument self .
arg vals . append ( mark safe ( arg ) ),"call the function mark_safe with an argument arg , append it to arg_vals ."
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
"self . stdout . write ( "" STR_ "" % plural form line )","replace ' % s ' in string `` copying plural forms : % s\n '' with plural_form_line , write it to self.stdout ."
import tempfile,import module tempfile .
return cached,return cached .
"elif action == "" STR_ "" :",otherwise if action equals to string `` unapply_success '' .
"def   init   ( self , data = None , files = None , auto id = STR_ , prefix = None , in itial = None , error class = ErrorList ) :","define the method __init__ with 7 arguments : self , data set to None , files set to None , auto_id set to an string 'id_ % s ' ,"
for key in c . keys ( ) :,"for every key in return value of the method c.keys call ,"
if not found and ( not line or plural forms re . search ( line ) ) :,"if found is false and , line is false or return value of the function plural_forms_re.search called with an argument line is false ,"
self . items = [ ],self.items is an empty list .
"if value in ( None , ) :","if vale is None or an empty string ,"
"msg = "" STR_ "" % ( self . log date time string ( ) , format % args )","msg is a string `` [ % s ] % s\n '' , where ' % s ' are replaced with return value of the method self.log_date_time_string and formated args ."
return NUM_,return integer 0 .
if self . to field :,"if self.to_field is true ,"
if self . feed [ STR_ ] is not None :,"if value under the 'feed_url ' key of the self.feed dictionary is not None ,"
"  , rest = token . contents . split ( None , NUM_ )","split into two parts token.contents by None , substitute the parts for _ and rest , respectively ."
"def get signed cookie ( self , key , default = RAISE ERROR , salt = , max age = None ) :","called with value under the 'QUERY_STRING ' key of the self.META dictionary and append it to string ' ? ' , append the result th the self.path converted into a string and return it , if the value under the 'QUERY_STRING ' key of the self.META dictionary is false , return self.path converted into a string . def the method get_signed_cookie with 5 arguments : self , key , default set to RAISE_ERROR , salt as an empty string ,"
"from django . db import connections , DEFAULT DB ALIAS",from django.db import connections and DEFAULT_DB_ALIAS into default name space .
"def   init   ( self , data = None , files = None , auto id = STR_ , prefix = None , queryset = None , ** kwargs ) :","define the method __init__ with 7 arguments : self , data set to None , files set to None , auto_id set to string 'id_ % s ' ,"
except IndexError :,"if IndexError exception is caught ,"
message = error . message,substitute error.message for message .
self . body = body,substitute body for self.body .
self . start serialization ( ),if the key doesnt exists substitute boolean False for self.use_natural_primary_keys . call the method self.start_serialization
def reload ( self ) :,define the method reload with an argument self .
  ne   = new method proxy ( operator . ne ),"call the function new_method_proxy with an argument operator.ne , substitute the result for __ne__ ."
try :,"try ,"
for key in self . bad cookies :,"for every key is self.bad_cookies ,"
status code = NUM_,status_code is an integer 400 .
@ encoding . setter,"encoding.setter decorator ,"
@ register . tag ( STR_ ),"register.tag decorator function with an argument 'filter ' ,"
def   getstate   ( self ) :,define the method __getstate__ with an argument self .
"def write ( self , content ) :",define the method write with 2 arguments : self and content .
"value , converted = convert old style list ( value )","call the function convert_old_style_list with an argument value , substitute the result for value and converted , respectively ."
output = [ ],substitute the resulting set for selected_choices . output is an empty list .
"result = super ( ChoiceField , self ) .   deepcopy   ( memo )","call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField , substitute the result for result ."
for loader name in settings . TEMPLATE LOADERS :,"for every loader_name in settings.TEMPLATE_LOADERS ,"
exclude = self .  get validation exclusions ( ),"call the method self._get_validation_exclusions , substitute the result for exclude ."
lookup view s = lookup view,substitute lookup_view for lookup_view_s .
class Command ( BaseCommand ) :,derive the class Command from the BaseCommand base class .
self . fields = fields,substitute fields for self.fields .
import re,import module re .
for line in self . handle inspection ( options ) :,"for every line in return value of the method self.handle_inspection called with an argument options ,"
return list ( self . itervalues ( ) ),"call the method self.itervalues , return the list of results ."
return list ( urlsplit ( url ) ),"call the urlsplit with an argument url , convert the result into a list and return it ."
tables = connection . in trospection . table names ( ),"call the method connection.introspection.table_names , substitute the result for tables ."
if number < NUM_ :,"if number is lesser than integer 1 ,"
return default,return default .
"signal . signal ( signal . SIGTTOU , old handler )","call the method signal.signal with signal.SIGTTOU and old_handler , as arguments ."
nodelist = self . create nodelist ( ),"call the method self.create_nodelist , substitute the result for nodelist ."
class Operator ( TokenBase ) :,derive the class Operator from the base class TokenBase .
global  supported,use global variable _supported .
default validators = [ validators . URLValidator ( ) ],"default_validators is a list with an element , return value of the validators.URLValidator method ."
except ImportError :,"if ImportError exception is caught ,"
elif args [ NUM_ ] [ NUM_ ] == STR_ :,"otherwise if first element of second row of args equals a string ' 4 ' ,"
"elif not is in stance ( end , str ) :","otherwise if end is not an instance of string type ,"
"return STR_ % ( self . prefix , in dex )","replace ' % s ' in sting ' % s- % s ' with self.prefix and index , return the result ."
self . attrs = attrs,substitute attrs for self.attrs .
"self .  client = self .  lib . Client ( self .  servers , pickleProtocol = pickle . HIGHEST PROTOCOL )","call the method self._lib.Client with self._servers and pickleProtocol set to pickle.HIGHEST_PROTOCOL as arguments , substitute the result for self._client ."
self . namespace = namespace,substitute namespace for self.namespace .
self . bcc = [ ],self.bcc is an empty list .
if STR_ in hextets [ - NUM_ ] :,"if ' . ' is contained in last elements of hextets ,"
return None,return None .
"if is in stance ( regex , six . string types ) :","if regex is an instance of six.string_types class ,"
widget . in put type = STR_,widget.input_type is a string 'hidden ' .
load template source . is  usable = True,load_template_source.is_usable is boolean True .
for tok in rules :,"for every tok in rules ,"
"return data . get ( name , None )","get the name key of the data dictionary , if the key exists return it , if not return None ."
"def   get   ( self , obj , tp ) :","define the method __get__ with 3 arguments : self , obj and tp ."
"raise TemplateSyntaxError ( "" STR_ "" % name )","raise an TemplateSyntaxError exception with an argument string `` No named cycles in template . ' % s ' is not defined '' ,"
"super ( RegexField , self ) .   init   ( max length , min length , * args , ** kwargs )","call the method __init__ from the base class of the class RegexField , with 4 arguments : max_length , min_length , unpacked list args ,"
"if is in stance ( widget , type ) :","if widget is an instance of type class ,"
class CharField ( Field ) :,derive the class CharField from the base class Field class .
"data value = field . widget . value from datadict ( self . data , self . files , prefixed name )","call the method field.widget.value_from_datadict with 3 arguments : self.data , self.files , prefixed_name , substitute the result for data_value ."
if self . feed [ STR_ ] is not None :,"if value under the 'feed_copyright ' key of the self.feed dictionary is not None ,"
return f,return f .
import socket,import module socket .
self . widget . choices = self . choices,substitute self.choices for self.widget.choices .
"return ( copyreg .  reconstructor , ( self .   class   , object , None ) , self .   getstate   ( ) )","return a tuple with 3 elements : copyreg._reconstructor , tuple with 3 elements : self.__class__ , object and None ,"
"child nodelists = ( STR_ , )",child_nodelists is an tuple with an element 'nodelist ' .
if self .  pk field == self . fk :,"if self._pk_field equals self.fk ,"
version = get complete version ( version ),"call the get_complete_version with an argument version , store the result in version ."
self . app name = app name,substitute app_name for self.app_name .
"if constant time compare ( sig , self . signature ( value ) ) :","call the function constant_time_compare with 2 arguments : sig and return value of the self.signature method with an argument value , if it evaluates to true ,"
else :,"if not ,"
filterer . addFilter ( self . config [ STR_ ] [ f ] ),"get the value under f key of dictionary under 'filters ' key of self.config dictionary ,"
return,"return an empty string ,"
class TemporaryUploadedFile ( UploadedFile ) :,derive the TemporaryUploadedFile class from the UploadedFile base class .
"def appendlist ( self , key , value ) :","define the method appendlist with 3 arguments : self , key and value ."
def F ( i ) :,define the function F with an argument i .
"filters = config . get ( STR_ , EMPTY DICT )","get config dictionary element under 'filters ' key , if it exists substitute it for filters , if not , filters is EMPTY_DICT ."
"return args , kwargs",return args and kwargs .
for path in data :,"for every path in data ,"
self . queryset = field . queryset,substitute field.queryset for self.queryset .
"prefixed = name + "" STR_ ""","append ' . ' to name , substitute the result for prefixed ."
try :,"try ,"
"while i < len ( subject ) and subject [ i ] not in ( , STR_ ) :","while i is lesser than length of subject and i-th element of subject is not an empty space or tab character ,"
import os,import module os .
"return command . execute ( * args , ** defaults )","call the command.execute method with arguments : unpacked list args and unpacked dictionary defaults , return the result ."
return,return nothing .
"from django . utils .  os import npath , upath",from django.utils._os import npath and upath into default name space .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = "" STR_ "" )","dest as a string 'use_default_ignore_patterns ' , default set to boolean True , and help as a string `` Do n't ignore the common glob-style patterns 'CVS ' , ' . * ' , '*~ ' and '*.pyc'. '' . call the method parser.add_argument with 5 arguments : string ' -- no-wrap ' , action as a string 'store_true ' , dest as a string 'no_wrap ' ,"
file size = data . size,substitute data.size for file_name .
"self . regexes [ state ] = re . compile ( "" | "" . join ( parts ) , re . MULTILINE | re . VERBOSE )","call the function re.compile with 2 arguments : elements of parts joined into a string , separated with '| ' ,"
from django . utils . encoding import force bytes,from django.utils.encoding import force_bytes into default name space .
"value = map ( force text , value )","map elements of value through mapping function force_text , substitute the result for value ."
"raise CommandError ( "" STR_ "" % errors )","raise an CommandError exception with an argument string `` errors happened while running msguniq\n % s '' , where ' % s ' is replaced with errors ."
return value,return value .
self . file . seek ( pos ),position file self.file pointer at the pos position .
"output . append ( "" STR_ "" % ( key , user settings [ key ] ) )","replace ' % s ' in string `` % s = % s '' with key and value under the key key of the user_setting dictionary , append it to the output ."
translation . activate ( settings . LANGUAGE CODE ),call the method translation.activate with an argument settings.LANGUAGE_CODE .
defaults [ STR_ ] = self . files,substitute self.files for value under the 'files ' key of the defaults dictionary .
class RssUserland091Feed ( RssFeed ) :,derive the class RssUserland091Feed from the RssFeed base class .
return self,return self .
return created models,"database set to connection.alias , skip_validation set to boolean True , app_label set to app_label and hide_empty set to boolean True . return created_models"
"def format ( value , format string ) :",define the function format with 2 arguments : value and format_string .
import os,import module os .
"def ungettext ( singular , plural , number ) :","define the function ungettext with 3 arguments : singular , plural and number ."
break,"break from the loop execution ,"
"parser . add argument ( STR_ , help = STR_ )","and help is a string 'App label of the application to squash migrations for. ' . call the method parser.add_argument with 2 arguments : string 'migration_name ' ,"
"buffer types = ( bytes , bytearray , memoryview )","buffer_types is a tuple with 3 elements : bytes , bytearray and memoryview ."
if value :,"if value is true ,"
if cc :,"if cc is true ,"
raise ValueError ( STR_ ),raise an ValueError with an argument string 'empty_label list/tuple must have 3 elements . ' .
pass,do nothing .
"s = s . replace ( STR_ , STR_ )",replace every occurrence of ' '' ' in s with ' & quot ; ' .
Module six moves urllib request .  moved attributes =  urllib request moved attributes,substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes .
def tell ( self ) :,define the method tell with an argument self .
result = datetime . datetime . combine ( * data list ),"call the method datetime.datetime.combine with unpacked list data_list , substitute the result for result ."
def dictvalue ( t ) :,"define function dictvale , with an argument t ."
try :,"try ,"
if not old style list :,"if old_style_list is false ,"
else :,"if not ,"
finally :,"finally perform ,"
domain = domain . encode ( STR_ ) . decode ( STR_ ),"call the method domain.encode with an argument string 'idna ' , call the method decode on the result with an argument string 'ascii ' ,"
url fields [ NUM_ ] =,third element of url_fields is an empty string .
except StopFutureHandlers :,if StopFutureHandlers exception is caught .
"def   init   ( self , fields = ( ) , * args , ** kwargs ) :","'Enter a list of values . ' for 'invalid ' and return value of the function _ called with an argument string , 'Enter a complete value . ' for 'incomplete ' . define the method __init__ with arguments self , fields set to an empty ilst , unpacked list args and unpacked dictionary kwargs ."
"from django . template . base import ( Node , NodeList , Template , Context , Library , TemplateSyntaxError , VariableDoesNotExist , InvalidTemplateLibrary , BLOCK TAG START , BLOCK TAG END , VARIABLE TAG START , VARIABLE TAG END , SINGLE BRACE START , SINGLE BRACE END , COMMENT TAG START , COMMENT TAG END , VARIABLE ATTRIBUTE SEPARATOR , get library , token kwargs , kwarg re , render value in context )","from django.template.base import Node , NodeList , Template , Context , Library , TemplateSyntaxError , VariableDoesNotExist ,"
if settings . TEMPLATE DEBUG and display name :,"if settings.TEMPLATE_DEBUG and display_name are both true ,"
comment = [ ],comment is an empty list .
return errors,return errors .
self . validate key ( key ),call the method self.validate_key with key as argument .
self . content type = content type,substitute content_type for self.content_type .
@ register . tag,"register.tag decorator ,"
self . data = data or { },"if data is true , substitute it for self.data , otherwise self.data is an empty dictionary ."
try :,"try ,"
pk value = form . in stance . pk,substitute form.instance.pk for pk_value .
try :,"where ' % s ' is replaced with taglib_module and e. try ,"
self .  servers = server,substitute server for self._servers .
"def   add   ( self , other ) :",define the method __add__ with arguments self and other .
def gettext ( message ) :,define the function gettext with an argument message .
"file = open ( file or path , STR_ )","open file named file_or_path for reading , store the file object handle in file ."
from django . core . management . base import BaseCommand,from django.core.management.base import BaseCommand into default name space .
encoding = self .  encoding,substitute self._encoding for encoding .
class DummyCache ( BaseCache ) :,derive the class DummyCache from the base class BaseCache .
"from django . db . migrations . questioner import MigrationQuestioner , InteractiveMigrationQuestioner",from django.db.migrations.questioner import MigrationQuestioner and InteractiveMigrationQuestioner into default name space .
return True,return boolean True .
"from django . core . urlresolvers import reverse , NoReverseMatch","from django.core.urlresolvers import reverse , NoReverseMatch ."
"from django . utils . translation import ungettext , ugettext as  ",from django.utils.translation import ungettext and ugettext as _ into default name space .
klass .   str   = lambda self : self .   unicode   ( ) . encode ( STR_ ),"define lambda function with self class instance as the argument , lambda function body encapsulates the call to the method ,"
"def set ( self , key , value , timeout = DEFAULT TIMEOUT , version = None ) :","define the method get with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None ."
if extend is True :,"if extend is boolean True ,"
"super ( BaseModelFormSet , self ) . add fields ( form , in dex )","created with 4 arguments : qs , initial as pk_value , required as boolean False and widget as widget . call the method add_fields from the base class of the class BaseModelFormSet , with 2 arguments : form and index ."
else :,"if not ,"
if calendar . is leap ( self . data . year ) :,"call the function calendar.isleap with an argument self.data.year , if it evaluates to true ,"
def hidden fields ( self ) :,define the method hidden_fields with an argument self .
if self . lookups is not None :,"if self.lookups is not None ,"
base lang = get language ( ) . split ( - ) [ NUM_ ],"call the function get_language , split the result by '- ' , substitute the first element of the result for base_lang ."
sent = self .  send ( message ),"call the method self._send with argument message , substitute the result for sent ."
elif char in STR_ :,"otherwise if char is contained in string 'dj ' ,"
if not  cached filenames and settings . USE I18N :,"if _cached_filenames is empty and settings.USE_I18N is True ,"
s = six . text type ( s ),"call the function six.text_type with s as an argument , substitute the result for s ."
if self . data . hour == NUM_ :,"if self.data.hour equals integer 0 ,"
pass,do nothing .
"exts = extensions if extensions else [ STR_ , STR_ ]","if extensions is false , substitute it for exts , otherwise exts is a list containing 2 elements : string 'html ' and string 'txt ' ."
words = allow lazy ( words ),"call the function allow_lazy with an argument words , substitute the result for words ."
def N ( self ) :,define the method N with an argument self .
yield meta line,yield meta_line as the result .
defaults . update ( kwargs ),update defaults dictionary with kwargs .
from django . utils . deprecation import RemovedInDjango20Warning,from django.utils.deprecation import RemovedInDjango20Warning into default name space .
doublecolon start = in dex,substitute index for doublecolon_start .
self . current app = current app,substitute current_app for self.current_app .
"elif args [ - NUM_ ] == "" as "" :","if second from the end element of args equals a string 'as ' ,"
def  set response etag ( response ) :,"define the function _set_response_etag , with response as an argument ."
writer = MigrationWriter ( new migration ),"that occupies minimum 4 places within a string , and app_label , substitute the result for new_migration . writer is instance of MigrationWriter class , created with new_migration argument ."
"return self . as widget ( self . field . hidden widget ( ) , attrs , ** kwargs )","call the method self.as_widget with 3 arguments : return value of the method self.field.hidden_widget , attrs ,"
return self .  coerce ( value ),"call the method self._coerce with an argument value , return the result ."
if script url :,"if script_url is true ,"
"if hasattr ( self , STR_ ) :","if self has an '_post ' attribute ,"
if cmd . endswith ( ext ) :,"if cmd ends with ext ,"
if self . cleaned data . get ( name ) is not None and self . cleaned data [ name ] .  state . adding :,"if value under the name key of self.cleaned_data dictionary is not None ,"
if failures :,"if failures is true ,"
space = line . find ( ) + NUM_,"find first index of whitespace occurrence in line , add integer 1 to it , substitute the result for space ."
sub =,sub is an empty string .
"return  CacheInfo ( stats [ HITS ] , stats [ MISSES ] , maxsize , len ( cache ) )","return an instance of _CacheInfo class , created with 4 arguments : value under the HITS key of the stats dictionary ,"
"WSGIServer ( get internal wsgi application ( ) , ** wsgi opts ) . run ( )","create the object WSGIServer with 2 arguments : get_internal_wsgi_application return value and unpacked dictionary wsgi_opts , call the method run on it ."
"field type = "" STR_ "" % rel to","append rel_to to string 'ForeignKey ( , append character `` ' '' to it , substitute the result for field_type ."
def capfirst ( value ) :,define the function capfirst with an argument value .
ser fmts = serializers . get public serializer formats ( ) if ser fmt is None else [ ser fmt ],"otherwise cmp_fmts is a list containing cmp_fmt . call the method serializers.get_public_serializer_formats , substitute the result for ser_fmts if ser_fmt is None ,"
"return STR_ if os . environ . get ( "" STR_ "" ) == "" STR_ "" else STR_","return string 'https ' if value under the `` HTTPS '' key of the os.environ dictionary equals string 'on ' , if not return 'http ' ."
  dispatch = None,__dispatch is None .
self . attrs = attrs,substitute attrs for self.attrs .
"self . handle file complete ( old field name , counters )","call the method self.handle_file_complete with arguments old_field_name , counters ."
try :,"try ,"
"def render ( self , context ) :",define the method render with 2 arguments self and context .
"def configure root ( self , config , in cremental = False ) :","define the method configure_root with 3 arguments : self , config and incremental set to boolean False ."
except MultiPartParserError :,"if MultiPartParserError exception is caught ,"
elif basetype == STR_ and subtype == STR_ :,"otherwise if basetype equals a string 'message ' and subtype equals a string 'rfc822 ' ,"
break,break from the loop execution .
year val = month val = day val = None,year_val and month_val and day_val are set to None .
"if len ( bits ) not in ( NUM_ , NUM_ ) :","if length of bits is not integer 2 or 3 ,"
from django . core . files import locks,from django.core.files import locks into default name space .
"if sys . version info [ : NUM_ ] >= ( NUM_ , NUM_ ) :","if first and second element of sys.version_info are equal to integers 3 and 4 , respectively ,"
"def   ne   ( self , other ) :","return boolean True , otherwise return boolean False . define private method __ne__ with self class instance and other as arguments ."
"return super ( DateField , self ) . to python ( value )","call the method to_python with an argument value from the base class of the DateField class , return the result ."
"return re newlines . sub ( STR_ , text )","call the method re_newlines.sub with 2 arguments : '\n ' and text , return the result ."
tok = STR_ + guts + STR_,"substitute the result for guts . concatenate string ' '' ' , guts and string ' '' ' , substitute the result for tok ."
return commands,return commands .
from django . utils . module loading import import string,from django.utils.module_loading import import_string into default name space .
"if is in stance ( value , Field ) :","if value is an instance of Field class ,"
import functools,import module functools .
if representative is None :,"if representative is None ,"
return s,return s .
"m = dict ( zip ( new keys , keys ) )","zip together new_keys and keys , convert it to dictionary , assign it to m ."
return False,return boolean False .
"decorated = Node ( syms . decorated , [ decorator , klass ] , prefix = node . prefix )","and instance of Name class created with an argument string 'python_2_unicode_compatible ' . decorated is an instance of class Node , created with 3 arguments : syms.decorated , list with 2 arguments : decorator and klass ,"
self . literal = float ( var ),"convert var into an floating point number , substitute it for self.literal ."
if m :,"if m is true ,"
table names = [ ],table_names is an empty list .
quant = quant [ : - NUM_ ],remove last element for quant .
else :,"if not ,"
try :,"try ,"
"return [ STR_ , STR_ , STR_ , STR_ , STR_ ]","return a list with 5 elements : strings 'parse ' , 'error ' , 'request ' , 'response ' and 'robotparser ' ."
"migration = executor . loader . get migration by prefix ( app label , migration name )","call the executor.loader.get_migration_by_prefix with app_label and migration_name , substitute the result for migration ."
return  default,return _default .
if STR_ not in ip str :,if ' : ' is not contained in ip_str .
else :,"if not ,"
"print ( . join ( sorted ( filter ( lambda x : x . startswith ( curr ) , subcommands ) ) ) )","filter all the subcommands element through the lambda function with an argument x , that evaluates the method x.startswith ,"
"def model to dict ( in stance , fields = None , exclude = None ) :","define the function model_to_dict with 3 arguments : instance , fields set to None and exclude set None ."
try :,"try ,"
def   len   ( self ) :,define the method __len__ with an argument self .
"def extract ( self , filename ) :",define the function with arguments self and filename .
"return mark safe ( re . sub ( STR_ , - , value ) )","and convert it to lowercase , substitute the result for value . call the function re.sub with 3 arguments : string ' [ -\s ] + ' , string '- ' and value , use the result as an argument for the call to the ,"
"def do include ( parser , token ) :",define the function do_include with 2 arguments parser and token .
continue,skip this loop iteration .
"super ( QueryDict , self ) . clear ( )","call the method clear from the base class of the class QueryDict , return the result ."
"if is in stance ( server , six . string types ) :","if server is an instance of six.string_types ,"
self .  count = self . object list . count ( ),substitute the return value of the method self.object_list.count for self._count .
return key func,return key_func .
"if hasattr ( get git changeset , STR_ ) :","if get_git_changeset has an attribute 'cache ' ,"
subject = self . subject,substitute self.subject for subject .
except TemplateSyntaxError as e :,"if TemplateSyntaxError , renamed to e , exception is caught ,"
"def   init   ( self , iterable = None ) :",define the method __init__ with 2 arguments : self and iterable set to None .
for model in sort dependencies ( app list . items ( ) ) :,"call the method app_list.items , use the result as an argument for the call to the function sort_dependencies , for every model in result ,"
"escape = allow lazy ( escape , six . text type )","every occurrence of ' < ' with ' & lt ; ' , every occurrence of ' > ' with ' & gt ; ' , every occurrence of ' '' ' with ' & quot ; ' , and every occurrence of `` ' '' with ' & # 39 ; ' , call the function mark_safe with the previous result as an argument , return the result . call the function allow_lazy with 2 arguments : escape , six.text_type , substitute the result for escape ."
if slots is not None :,"if slots is not None ,"
sorted items = sorted ( kwds . items ( ) ),"sort elements of kwds , substitute the result for sorted_items ."
from django . utils . functional import cached property,from django.utils.functional import cached_property into default name space .
class EmailMessage ( object ) :,derive the class EmailMessage from the object base class .
singular . append ( contents ),append contents to singular .
"timestamp = datetime . datetime . now ( ) . strftime ( "" STR_ "" )","call the strftime function with argument string `` % Y % m % d- % H % M % S '' on the return value of the function datetime.datetime.now , substitute the result for timestamp ."
"def add arguments ( self , parser ) :",define the method add_arguments with self class instance and parse as the arguments .
import warnings,import module warnings .
self . value = value,substitute value for self.value .
name = args [ NUM_ ],substitute second element of args for name .
slots = or ig vars . get ( STR_ ),"get the value under the '__slots__ ' key of the orig_vars dictionary , substitute it for slots ."
tzinfo = get fixed timezone ( offset ),"call the function get_fixed_timezone with an argument offset , substitute the result for tzinfo ."
exc info = record . exc info,substitute record.exc_info for exc_info .
"accept language re = re . compile ( r STR_ , re . VERBOSE )","call the function re.compile with 2 arguments : raw string `` ( [ A-Za-z ] { 1,8 } ( ? : - [ A-Za-z0-9 ] { 1,8 } ) *|\* ) ( ? : \s* ; \s*q= ( 0 ( ? : \.\d { ,3 } ) ? |1 ( ? : .0 { ,3 } ) ? ) ) ? ( ? : \s* , \s*| $ ) '' ,"
@ python 2 unicode compatible,"python_2_unicode_compatible decorator ,"
MAX NUM FORM COUNT = STR_,MAX_NUM_FORM_COUNT is a string 'MAX_NUM_FORMS ' .
def   bytes cast ( self ) :,define the method __bytes_cast with an argument self .
except TypeError as te :,"if TypeError , renamed to te , exception is caught ,"
"def nud ( self , parser ) :",define the method nud with 2 arguments : self and parser .
except ValueError :,if ValueError exception is caught .
else :,"if not ,"
def make list ( value ) :,define the function make_list with an argument value .
"return timeuntil ( value , arg )","call the function timeuntil with 2 arguments value and arg , return the result ."
if fg in color names :,"if fg is contained in color_names ,"
import gettext,import gettext module .
if text . endswith ( truncate ) :,"if text ends with truncate ,"
in itial = [ ],initial is an empty list .
import posixpath,import module posixpath .
self . connection reset = connection reset,substitute connection_reset for self.connection_reset .
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
if s == STR_ :,"if s equals a string ' '' ' ,"
if item [ STR_ ] is not None :,"and guid_attrs . if value under the 'ttl ' key of the item dictionary is not None ,"
"def prepare value ( self , value ) :",define the method prepare_value with arguments : self and value .
except AttributeError :,"if AttributeError exception is raised ,"
if format module path :,"if format_module_path is true ,"
output . append ( error row % force text ( bf errors ) ),"call the function force_text with an argument bf_errors , format the error_row string with the result , append it to the output ."
"autoescape = autoescape and not is in stance ( value , SafeData )","if autoescape is true and value is not an instance of SafeData , autoescape is boolean True , otherwise it is boolean False ."
else :,"where string ' % s ' is replaced by lookup_view and mod_name , respectively . if not ,"
"return mark safe ( force text ( text ) . replace ( & , STR_ ) . replace ( < , STR_ ) . replace ( > , STR_ ) . replace ( STR_ , STR_ ) . replace ( "" STR_ "" , STR_ ) )","call the function force_text with an argument text , replace every occurrence of ' & ' in the result with ' & amp ; ' ,"
except KeyError :,"if KeyError exception is caught ,"
pass,do nothing .
raise,raise an exception .
"if is in stance ( nodelist , NodeList ) and not is in stance ( node , TextNode ) :",if nodelist is an instance of NodeList and node is not an instance of TextNode class .
if exclude is not None :,"if exclude is not None ,"
pass,do nothing .
self . load initial data = options . get ( STR_ ),"get the value from the options dictionary under the key 'load_initial_data ' , substitute it for self.load_initial_data ."
wrapped main func = check errors ( main func ),"call the function check_errors with argument main_func , substitute the result for wrapped_main_func ."
qs = queryset . none ( ),"call the method queryset.none , substitute it for qs ."
for item in self . items :,"for every item in self.items ,"
if errors :,"if errors is true ,"
"if is  ignored ( os . path . normpath ( os . path . join ( dirpath , dirname ) ) , norm patterns ) :","join dirpath and dirname into a file path , use is as an argument for the call to the function os.path.join ,"
continue,"skip this loop iteration ,"
if self . sep not in signed value :,"if self.sep is not contained in signed_value ,"
try :,"try ,"
self . year none value = self . none value,substitute self.none_value for self.year_none_value .
for line in chunk buffer :,"for every line in chunk_buffer ,"
self . in dex = in dex,substitute index for self.index .
try :,"try ,"
else :,"if else ,"
data = { },"data is an empty dictionary ,"
if expires is not None :,"if expires is not None ,"
"return name , ( value , params )",return name and tuple containing 2 elements value and params .
if is  library missing ( taglib module ) :,"call the function is_library_missing with an argument taglib_module , if it evaluates to true ,"
exc type = type ( exc ),"get the type of the exc object , substitute it for exc_type ."
self .  clean fields ( ),call the method self._clean_fields .
processors = ( ),processors is an empty tuple .
"self . stdout . write ( self . style . NOTICE ( "" STR_ "" ) )","call the method self.style.NOTICE with string `` Your models have changes that are not yet reflected in a migration , and so wo n't be applied . '' as an argument , use the result as an argument for the call to the self.stdout.write method ."
self .  called from command line = True,self._called_from_command_line is boolean True .
"compare = lambda self , a , b : a > b","compare is a lambda function with arguments self , a and b , return value is boolean true if a is greater than b , otherwise is false ."
class WidthRatioNode ( Node ) :,derive the class WidthRatioNode from Node base class .
@ python 2 unicode compatible,decorator python_2_unicode_compatible .
widget = SplitDateTimeWidget,substitute SplitDateTimeWidget for widget .
"kwargs [ "" STR_ "" ] = False",value under the 'required ' key of the kwargs dictionary is boolean False .
self . xml . characters ( smart text ( related att ) ),"call the function smart_text with argument related_att , use the result as an argument for the call to the self.xml.characters method ."
"handler . addQuickElement ( "" STR_ "" , "" "" , { "" STR_ "" : item [ STR_ ] , "" STR_ "" : "" STR_ "" } )","call the method handler.addQuickElement with 3 arguments : string 'link ' , an empty string and a dictionary with 2 entries :"
def   len   ( self ) :,define the method __len__ with an argument self .
return type ( self ) .   bool   ( self ),"get the type of self object , call its method __bool__ with an argument self , return the result ."
stream . unget ( chunk [ next : ] ),call the method stream.unget with elements of list chunk from the index next to the end .
class Command ( AppCommand ) :,derive the class Command from the AppCommand base class .
self . plural = lambda n : in t ( n ! = NUM_ ),"self.plural is an lambda function with an argument n , which returns result of boolean expression n not equal to integer 1 ,"
safe data [ key ] = value,substitute value for value under the key key of safe_data dictionary .
"return result , result args",return result and result_args .
"@ register . filter ( is  safe = True , needs autoescape = True )",decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
"for candidate in glob . iglob ( os . path . join ( fixture dir , fixture name + * ) ) :","join fixture_dir , fixture_name with appended character '* ' into a valid file path ,"
return wrapped,return wrapped .
"foreground = dict ( ( color names [ x ] , STR_ % x ) for x in range ( NUM_ ) )","foreground is a dictionary created with elements : x appended to a string ' 3 ' for value under the key x of color_names dictionary ,"
"return super ( PasswordInput , self ) . render ( name , value , attrs )","call the method render from the base class of the class PasswordInput , called with 3 arguments : name , value and attrs ,"
"for k , v in defaults . items ( ) :","for every k and v in return value of the function defaults.items ,"
raise NotImplementedError ( STR_ ),raise a NotImplementedError with an argument string
"six . reraise ( ValidationError , ValidationError ( message , code = STR_ , params = params , ) , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : class ValidationError , class ValidationError , created with 3 arguments :"
"attrs = dict ( self . attrs , ** kwargs )","unpack dictionary kwargs , map it through self.attrs and convert to dictionary , substitute the result for attrs ."
"def add item ( self , title , link , description , author email = None , author name = None , author link = None , pubdate = None , comments = None , unique id = None , unique id is permalink = None , enclosure = None , categories = ( ) , item copyright = None , ttl = None , updateddate = None , ** kwargs ) :","define the method add_item with 17 arguments : self , title , link , description , author_email set to None , author_name set to None ,"
self .  post parse error = False,self._post_parse_error is boolen False .
self . msgmerge options = self . msgmerge options [ : ] + [ STR_ ],append list containing string ' -- no-location ' to self.msgmerge_options .
if len ( bits ) ! = NUM_ :,"if length of bits is not equal to integer 3 ,"
"def dumps ( obj , key = None , salt = STR_ , serializer = JSONSerializer , compress = False ) :","define the function dumps with 5 arguments : obj , key set to None , salt set to string 'django.core.signing ' ,"
if self . empty permitted and not self . has changed ( ) :,"if self.empty_permitted is true and call to the method self.has_changed evaluates to false ,"
"from itertools import groupby , cycle as itertools cycle",from itertools import groupby and cycle as itertools_cycle into default name space .
pass,do nothing .
"result = ungettext ( singular , plural , number )","call the function ungettext with 3 arguments : singular , plural and number , substitute the result for result ."
"def   setstate   ( self , obj dict ) :",define the method __setstate__ with 2 arguments : self and obj_dict .
"yield "" STR_ ""","yield string `` # * Remove ` managed = False ` lines if you wish to allow Django to create , modify , and delete the table '' as the result ."
if data is None :,"if data is None ,"
header end = chunk . find ( b STR_ ),"call the method chunk.find with an argument bytes string '\r\n\r\n ' , substitute the result for header_end ."
context extras = { },context_extras is an empty dictionary .
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
"if not re . search ( r STR_ , name ) :","call the method re.search with 2 arguments : raw string '^ [ _a-zA-Z ] ' and name , if it evaluates to false ,"
import mimetypes,import module mimetypes .
else :,"if not ,"
from django . utils . http import urlquote,from django.utils.http import urlquote into default name space .
self .   doc   = self .   class   .   doc  ,substitute self.__class__.__doc__ for self.__doc__ .
regex =,regex is an empty string .
"if is in stance ( error , ValidationError ) :","if error is an instance of ValidationError ,"
return value,return value .
out . write ( STR_ % fmatch ),"format string ' _ ( % s ) ' , with fmatch , write it to out ."
class Template ( object ) :,derive the class Template form the base class object .
return None,return None .
return  time . tzname [ is  dst ],return the value under the is_dst key of the _time.tzname dictionary .
"f . error messages . setdefault ( STR_ , self . error messages [ STR_ ] )","if 'incomplete ' key of the f.error_messages doesnt exists , assign it the value under the 'incomplete ' key of the self.error_messages dictionary ."
request = self . request class ( environ ),"call the self.request_class method with environ as an argument , substitute the result for request ."
VARIABLE TAG END = STR_,VARIABLE_TAG_END is a string ' } } ' .
if timeout is None :,"if timeout is None ,"
"if is in stance ( value , datetime . datetime ) :","if value is an instance of datetime.datetime ,"
from django . core . exceptions import ImproperlyConfigured,from django.core.exceptions import ImproperlyConfigured into default name space .
"return directories , files",return directories and files .
result = factory ( ** kwargs ),"call the function factory with an argument unpacked dictionary kwargs , substitute the result for result ."
"return getattr ( t , translation function ) ( singular , plural , number )","get translation_function attribute of the t object , call the result with 3 arguments : singular , plural and number , return the result ."
def close ( self ) :,define the method close with an argument self .
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` 'firstof ' statement requires at least one argument '' .
else :,"where ' % d ' is replaced with self.loaded_object_count and self.fixture_count , respectively . if not ,"
return self . filters [ filter name ],return the value under the filter_name key of the self.filters dictionary .
matches = True,"matches is boolean True ,"
result . key = key,substitute key for result.key .
self . fetch command ( subcommand ) . run from argv ( self . argv ),"call the method self.fetch_command with an argument command , call the method run_from_argv on the result with an argument self.argv ."
result = logging . Filter ( name ),"call the method logging.Filter with an argument name , substitute the result for result ."
"parser . add argument ( STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","call parse.add_argument method , with string ' -- database ' , default set to DEFAULT_DB_ALIAS ,"
"def truncatechars ( value , arg ) :",define the function truncatechars with 2 arguments value and arg .
if f . primary key :,"if f.primary_key is true ,"
if self . cdata tag is not None :,"if self.cdata_tag is not None ,"
if e . errno ! = errno . ENOENT :,"if e.errno is not equal to errno.ENOENT ,"
if not settings . is  overridden ( STR_ ) :,if call to the settings.is_overridden with string 'TEST_RUNNER ' evaluates to boolean False .
"def clean ( self , value ) :",define the method clean with 2 arguments : self and value .
"parser . add argument ( STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","call the method parser.add_argument with 3 arguments : string ' -- database ' , default set to DEFAULT_DB_ALIAS ,"
"def discard ( self , item ) :",define the method discard with 2 arguments : self and item .
return sys . modules [ name ],return value under the name key of the sys.modules dictionary .
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
return or d ( buf [ i ] ),"get the integer representation of the i-th element of buf , return it ."
"def   init   ( self , val expr , max expr , max width , asvar = None ) :","define the method __init__ with 5 arguments : self , val_expr , max_expr , max_width and asvar set to None ."
in comment = True,incomment is boolean True .
for p in parts [ NUM_ : ] :,"for every p in parts without the first element ,"
is  accept language redundant = settings . USE I18N or settings . USE L10N,"if eather of settings.USE_I18N or settings.USE_L10N is True , set is_accept_language_redundant to True ."
context = self . resolve context ( self . context data ),"call the method self.resolve_context with an argument self.context_data , substitute the result for context ."
"def  delete ( self , fname ) :",define the method _delete with self and fname as arguments .
"raise ValueError ( "" STR_ "" "" STR_ "" % ( middleware method .   self   .   class   .   name   ) )","substitute ' % s ' is `` % s.process_response did n't return an HttpResponse object . It returned None instead . `` ,"
"def add fields ( self , form , in dex ) :","define the method add_fields with 2 arguments : self , form and index ."
exclude = [ ],exclude is an empty list .
else :,"if not ,"
self . validate key ( key ),call the method self.validate_key with argument key .
"def add ( self , key , value , timeout = DEFAULT TIMEOUT , version = None ) :","define the method add with 5 arguments : self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None ."
name = p [ : i ] . strip ( ) . lower ( ) . decode ( STR_ ),"take the first i elements of string p , strip the whitespaces from the both sides , convert it to lowercase and apply on it the method ,"
else :,"if not ,"
result = self . configurator . convert ( value ),"call the method self.configurator.convert with an argument value , substitute the result for result ."
"self . path = STR_ % ( script name . rstrip ( / ) , path info . replace ( / , , NUM_ ) )","strip trailing '/ ' from the script_name string , remove first occurrence of '/ ' in path_info string , append second result to the first , separated with '/ ' , assign the result to self.path ."
if self . is  localized :,"if self.is_localized is true ,"
try :,"try ,"
self . encoding = charset,substitute charset for self.encoding .
"six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : ImproperlyConfigured , instance of ImproperlyConfigured class created with msg ,"
self . validate unique ( ),call the method self.validate_unique .
"return STR_ % (   ( STR_ ) . join ( force text ( i ) for i in list  [ : - NUM_ ] ) , force text ( last word ) , force text ( list  [ - NUM_ ] ) )","return a string ' % s % s % s ' formated with 3 elements : result of the function force_text called with an argument i ,"
if not value or STR_ not in value :,"if value is false or character ' @ ' is not contained in value ,"
with lock :,"otherwise substitute args for key . with lock ,"
"out . write ( blankout ( t . contents , STR_ ) )","call the function blankout with 2 arguments : t.contents and ' X ' , write the result to out ."
"def from dict ( cls , file dict ) :",define the method from_dict with argument cls and file_dict .
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with an argument string 'subclasses of Origin must provide a reload ( ) method ' .
def connection ( self ) :,and connection as the result of the method self.connection . define the connection with an argument self .
def Y ( self ) :,define the method Y with an argument self .
new args = [ ],new_args is an empty list .
"relative dir = path rest . replace ( base name , name )","call the method path_rest.replace with arguments base_name and name , substitute the result for relative_dir ."
"return STR_ % ( ( STR_ % STR_ . join ( code list ) ) , text or )","join elements of code_list in a string , separated by ' ; ' , format string '\x1b [ % sm ' with it , append text to the result if exists ,"
def   nonzero   ( self ) :,define the method __nonzero__ with an argument self .
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
"if filename . endswith ( "" STR_ "" ) :","if filename ends with string `` $ py.class '' ,"
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute it for key ."
"return self .  reverse with prefix ( lookup view , , * args , ** kwargs )","call the method self._reverse_with_prefix with 4 arguments : lookup_view , an empty string , unpacked list args and unpacked dictionary kwargs ."
exts = extensions if extensions else [ STR_ ],"if extensions is false , substitute it for exts , otherwise exts is a list containing string 'js ' ."
"def write migration files ( self , changes ) :",define the method write_migration_files with arguments self and changes .
"parser . add argument ( STR_ , metavar = STR_ , nargs = * , help = STR_ )","call parser.add_argument method with 'args ' , metavar set to string 'fixture ' , nargs set to string '* ' and help set to string 'Path ( s ) to fixtures to load before running the server . ' ."
from django . core . handlers import base,from django.core.handlers import base into default name space .
self . verbosity = options [ STR_ ],substitute value under the 'verbosity ' key of the options dictionary for self.verbosity .
prefix length = len ( template dir ) + NUM_,increment length of template_dir by one and substitute it for prefix_length .
self . to = [ ],self.to is an empty list .
column name = row [ NUM_ ],substitute first element of row for column_name .
if errors on separate row and bf errors :,"if errors_on_separate_row and bf_errors are both true ,"
nodelist true output = None,nodelist_true_output is None .
name = self . split leading dir ( name ) [ NUM_ ],"call the method self.split_leading_dir with an argument name , substitute the second element of the result for name ."
if self . loaded object count > NUM_ :,"if self.loaded_object_count is greater than zero ,"
"name , value = match . groups ( )","call the method match.groups , assign the result to name and value , respectively ."
"raise TemplateSyntaxError ( "" STR_ "" % ( bits [ NUM_ ] , remaining bits [ NUM_ ] ) )","raise an TemplateSyntaxError exception with an argument string `` % r received an invalid token : % r '' , where ' % r ' is replaced with ,"
self . host = host or settings . EMAIL HOST,"if host exists substitute it for self.host , if not substitute settings.EMAIL_HOST for self.host ."
"warnings . warn ( STR_ , RemovedInDjango19Warning )",call the method warnings.warn with string ' '' validate '' has been deprecated in favor of `` check '' . ' and RemovedInDjango19Warning as arguments .
raise,raise an exception .
"if is in stance ( s , ( six . text type , Promise ) ) :","if s is an instance of six.text_type or Promise ,"
"self . blocks [ name ] . in sert ( NUM_ , block )","get the value under the name key of self.blocks dictionary , insert to it block at the beginning ."
from django . core . exceptions import ValidationError,from django.core.exceptions import ValidationError into default name space .
def  itervalues ( self ) :,define the method _itervalues with an argument self .
return base,return base .
return value,return value .
return self .  choices,return self._choices .
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with an argument string 'may be implemented in a future release ' .
from django . core . serializers . base import DeserializationError,from django.core.serializers.base import DeserializationError into default name space .
if quote double quotes :,"if quote_double_quotes is true ,"
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with argument string 'subclasses of BaseEmailBackend must override send_messages ( ) method ' .
"MIMEMultipart .   init   ( self ,  subtype , boundary ,  subparts , **  params )","call the method MIMEMultipart.__init__ with 5 arguments : self , _subtype , boundary , _subparts and unpacked dictionary _params ."
return False,return boolean False .
exp = pickle . load ( f ),"call the function pickle.load with argument f , substitute the result for exp ."
self . xml . characters ( field . value to string ( obj ) ),"call the method field.value_to_string with an argument obj , use the result as an argument for the call the method self.xml.characters ."
return in t ( timeout ),"convert timeout into an integer , return it ."
return [ ],return an empty list .
"except ( ValueError , KeyError ) :","if OverflowError or ValueError exceptions are caught ,"
digits . append ( STR_ ),append ' 0 ' to digits .
import socket,import module socket .
randint = random . randrange ( NUM_ ),"call the function random.randrange with argument integer 100000 , substitute the result for randint ."
except MiddlewareNotUsed :,"if MiddlewareNotUsed exception is raised ,"
"six . reraise ( ValidationError , ValidationError ( self . error messages [ STR_ ] , code = STR_ , ) , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : ValidationError , ValidationError created with 2 arguments :"
self . queryset = queryset,and unpacked dictionary kwargs . substitute queryset for self.queryset .
"if finder . find module ( name , package path ) :","if call to the method finder.find_module with 2 arguments : name and package_path evaluates to true ,"
self . app label = options . get ( STR_ ),"get the value under the 'app_label ' key of the options dictionary , substitute it for self.app_label ."
"lineno = lineno + self .   starttag text . count ( "" STR_ "" )",increment the lineno by the count of the newlines in self.__starttag_text .
"self . stderr = OutputWrapper ( options . get ( STR_ , sys . stderr ) , self . style . ERROR )","self.stderr is an instance of an OutputWrapper object , created with 2 arguments : value under the 'stderr ' key of the options dictionary , if it doesnt exists use the sys.stderr instead , and self.style.ERROR ."
expanded template = path . expanduser ( template ),"call the method path.expanduser with an argument template , substitute it for expanded_template ."
if args :,"if args is true ,"
"def entity decl ( self , name , is  parameter entity , value , base , sysid , pubid , not ation name ) :","define the method entity_decl with arguments self , name , is_parameter_entity , value , base , sysid , pubid and notation_name ."
queryset = objects . using ( using ) . or der by ( model .  meta . pk . name ),"call the method objects.using with an argument using , call the method order_by on the result with an argument model._meta.pk.name ,"
else :,"if not ,"
"self . handle startendtag ( tag , attrs )",call the method self.handle_startendtag with tag and attrs as the arguments .
"for item type , meta data , field stream in Parser ( stream , self .  boundary ) :","call the Parser object with stream and self._boundary , for every item_type , meta_data and field_stream in return value ,"
else :,"if not ,"
else :,"if not ,"
"convert = { STR_ : [ ( STR_ , lambda self , other : not ( self < other or self == other ) ) , ( STR_ , lambda self , other : self < other or self == other ) , ( STR_ , lambda self , other : not self < other ) ] , STR_ : [ ( STR_ , lambda self , other : not self <= other or self == other ) , ( STR_ , lambda self , other : self <= other and not self == other ) , ( STR_ , lambda self , other : not self <= other ) ] , STR_ : [ ( STR_ , lambda self , other : not ( self > other or self == other ) ) , ( STR_ , lambda self , other : self > other or self == other ) , ( STR_ , lambda self , other : not self > other ) ] , STR_ : [ ( STR_ , lambda self , other : ( not self >= other ) or self == other ) , ( STR_ , lambda self , other : self >= other and not self == other ) , ( STR_ , lambda self , other : not self >= other ) ] }","convert is a dictionary with 4 initial entries : list with 3 tuples : tuple with 2 elements : string '__gt__ ' ,"
pass,do nothing .
"raise ValueError ( "" STR_ "" % ( callback .   module   , view name ) )","substitute the ' % s ' in the string `` The view % s. % s did n't return an HttpResponse object . It returned None instead . `` ,"
lbp = bp,substitute bp for lbp .
except ValueError :,"if ValueError exception is caught ,"
if end is None :,if end is None
"def has key ( self , key , version = None ) :","define the method has_key with 3 arguments : self , key , and version set to None ."
return value,return value .
validate email = EmailValidator ( ),"and self.message equals to other.message , and self.code equals to other.code , return boolean True , otherwise return boolean False . validate_email is an instance of EmailValidator class ."
"def  BaseCookie  set ( self , key , real value , coded value ) :","define protected method _BaseCookie__set with self class instance , key , real_value and coded_value as arguments ."
if i >= len ( subject ) :,"if i is greater than length of subject ,"
self .  out . write ( force str ( style func ( msg ) ) ),"and lambda function returning x for x , substitute the firs element of resulting list for style_func . call the function style_func with an argument msg , use the result as an argument for the call to the function force_str ,"
"exc info = ( None , record . getMessage ( ) , None )","exc_info is an tuple with 3 elements : None , result of method record.getMessage and None ."
if best doublecolon start == NUM_ :,"if best_doublecolon_start equals integer 0 ,"
templatetags modules candidates = [ STR_ ],templatetags_modules_candidates is an list with an argument string 'django.templatetags ' .
"def size ( self , name ) :",define the method size with arguments self and name .
continue,"skip this loop iteration ,"
"def   init   ( self , dirpath , file name , locale dir ) :","define the method __init__ with 4 arguments : self , dirpath , file_name and locale_dir ."
else :,"if not ,"
return errors,return errors .
return { STR_ : request },return an dictionary containing 1 entry : request for 'request ' .
return LoadNode ( ),where ' % s ' is replaced with taglib and e. return an instance of a LoadNode class .
"list  = super ( MultiValueDict , self ) .   getitem   ( key )","call the method __getitem__ from the base class of the class MultiValueDict , with an argument key , substitute the result for list_ ."
if value is not result :,"if value is not contained in result ,"
offset = date . tzinfo . utcoffset ( date ),"call the method date.tzinfo.utcoffset with an argument date , substitute the result for offset ."
else :,"if not ,"
"defaults = dict ( defaults .   dict   , ** options )","create dictionary out of the unpacked dictionary options , using defaults.__dict__ as a mapping function , substitute the result for defaults ."
self . validate key ( key ),call the method self.validate_key with argument key .
if leading :,"if leading is true ,"
return True,return boolean True .
"obj = super ( MultiWidget , self ) .   deepcopy   ( memo )","call the method __deepcopy__ from the base class of the class MultiWidget , with an argument memo , substitute the result for obj ."
self . check test = boolean check if check test is None else check test,"substitute boolean_check for self.check_test if check_test is None , otherwise substitute check_test for self.check_test ."
getLogger = logging . getLogger,substitute logging.getLogger for getLogger .
except Exception :,"if Exception exception is caught ,"
"return self . choice input class ( self . name , self . value , self . attrs . copy ( ) , choice , idx )","call the method self.choice_input_class with 5 arguments : self.name , self.value , result of the method self.attrs.copy ,"
itervalues =  itervalues,substitute _itervalues for itervalues .
except KeyError :,"if KeyError exception is caught ,"
templatetags modules = get templatetags modules ( ),"call the function get_templatetags_modules , substitute the result for templatetags_modules ."
resolved args = [ var . resolve ( context ) for var in self . args ],"resolved_args is an list with elements , return value of the method var.resolve with an argument context , for every var in self.args ."
@ receiver ( setting changed ),"decorator function receiver with an argument setting_changed ,"
return s,return s .
"self . tags [ getattr ( func , "" STR_ "" , func ) .   name   ] = func","get `` _decorated_function '' attribute from func , return func if the attribute doesnt exists ,"
else :,"if not ,"
"ADDRESS HEADERS = set ( [ from , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , ] )","ADDRESS_HEADERS is a set containing strings : 'from ' , 'sender ' , 'reply-to ' , 'to ' , 'cc ' , 'bcc ' , 'resent-from ' , 'resent-sender ' ,"
app dirs . append ( old app dir ),append old_app_dir to app_dirs .
"if is in stance ( query string , bytes ) :","if query_string is an instance of bytes ,"
if self . data . minute == NUM_  and self . data . hour == NUM_ :,"if self.data.minute equals integer 0 and self.data.hour equals integer 12 ,"
if self . options . get ( STR_ ) :,"get the value under the 'indent ' key of self.options dictionary , if it is true ,"
return output,"and _allow_fallback set to boolean True , extend the output with the result . return output ."
"self .  set ( key , pickled , timeout )","call the method self._set with key , pickled and timeout as arguments ."
else :,"if not ,"
"in puts . append ( format html ( STR_ , flatatt ( in put attrs ) ) )","call the function format_html with 2 arguments : string ' < input { 0 } / > ' , return value of the function flatatt , called with an argument ,"
sys . exit ( NUM_ ),call the function sys.exit with an integer 1 as an argument .
def reset ( self ) :,define the method reset with an argument self .
"def patch cache control ( response , ** kwargs ) :","define function patch_cache_control , with response and dictionary set of arguments , kwargs , as arguments ."
"def filter ( self , name = None , filter func = None , ** flags ) :","define the method filter with 4 arguments : self , name set to None , filter_func set to None and unpacked dictionary flags ."
return obj,return obj .
class Lexer ( object ) :,"and join the results into a string , separated with '| ' character , return the result . derive the class Lexer from the object base class ."
del attrs [ attr ],delete entry under the attr key of the attrs dictionary .
return,return nothing .
in ner text . append ( child . data ),append child.data to the inner_text list .
"raise TemplateSyntaxError ( "" STR_ "" % ( name , taglib ) )","raise an TemplateSyntaxError exception with an argument string `` ' % s ' is not a valid tag or filter in tag library ' % s ' '' ,"
"getattr ( self , STR_ + name ) ( media attrs . get ( name , None ) )","append name to string 'add_ ' use it as the name of the attribute to get from object self , call the result as an function ,"
else :,"if not ,"
self . widget . choices = self . choices,substitute self.choices for self.widgetchoices .
else :,"substitute the result for value under the field key of the self._errors dictionary . if not ,"
"if is in stance ( source , Group ) :","if source is an instance of Group class ,"
"return STR_ % ( self . connector , STR_ . join ( [ str ( c ) for c in self . children ] ) )","return string ' ( NOT ( % s : % s ) ) ' , formated with self.connector and string created by joining c into a string , separated by ' , ' ,"
for node in self . nodelist empty :,"for every node in self.nodelist_empty ,"
if self .  isdst ( dt ) :,"call the nethod self._isdst with an argument dt , if it evaluates to true ,"
if self . can delete :,"if self.can_delete is true ,"
if message is not None :,"if message is not None ,"
self . characters ( contents ),call the method self.characters with an argument contents .
"related = getattr ( obj , field . name )","get field.name from the obj , substitute it for related ."
if os . path . exists ( pofile ) :,"if pofile path exists ,"
timeout = in t ( timeout ),convert timeout into an integer .
app label = label,substitute label for app_label .
self . msg = msg,substitute msg for self.msg .
return [ to py ( val ) for val in value ],"return a list containing return values of the function to_py called with an argument val , for every val in value ."
"def as json ( self , escape html = False ) :",define the method as_json with 2 arguments self and escape_html set to boolean False .
dklen = hlen,substitute hlen for dklen .
from django . utils . text import get valid filename,from django.utils.text import get_valid_filename into default name space .
output . append ( str hidden ),append str_hidden to output .
password = force bytes ( password ),"call the function force_bytes with an argument password , substitute the result for password ."
"in stance = super ( SortedDict , cls ) .   new   ( cls , * args , ** kwargs )","call the method __new__ from the base class of the class SortedDict , with 3 arguments : cls , unpacked list args ,"
"parser . add argument ( STR_ , STR_ , default = [ ] , dest = STR_ , action = STR_ , help = STR_ )","dest as a string 'locale ' , action as a string 'append ' and help as a string , 'Creates or updates the message files for the given locale ( s ) ( e.g . pt_BR ) . Can be used multiple times. ' . call the method parser.add_argument with 5 arguments : string ' -- exclude ' , string '-x ' , default as a empty list ,"
"if not getattr ( self , STR_ , False ) :","get 'nodelist ' attribute from self object . if it doesnt exists return boolean False , if the result evaluates to false ,"
except AttributeError :,"if AttributeError exception is caught ,"
parent name = parser . compile filter ( bits [ NUM_ ] ),"call the method parser.compile_filter with an argument second element for bits , substitute the result for parent_name ."
return self . empty form . is  multipart ( ),"call the method self.empty_form.is_multipart , return the result"
if contents is not None :,"if contents is not None ,"
return kwargs,return kwargs .
return t,return t .
def make msgid ( idstring = None ) :,define the function make_msgid with argument idstring set to None .
"raise DisallowedRedirect ( "" STR_ "" % parsed . scheme )","raise an DisallowedRedirect exception with an argument string `` Unsafe redirect to URL with protocol ' % s ' '' ,"
if len ( val1 ) ! = len ( val2 ) :,"if lengths of val1 and val2 are not equal ,"
def c ( self ) :,define the method c with an argument self .
"if hasattr ( test runner class , STR_ ) :","if test_runner_class has an 'option_list ' attribute ,"
import warnings,import module warnings .
"return mark safe ( STR_ . join ( chain ( * [ getattr ( self , STR_ + name ) ( ) for name in MEDIA TYPES ] ) ) )","call the function chain with an argument unpacked list , append name to string 'render_ ' ,"
"if getattr ( obj , field . name ) is not None :","and return value of the field.get_internal_type method for 'type ' . if field.name attribute of obj is not None ,"
s = s [ NUM_ : ],substitute s without the first element for s .
return num sent,return num_sent .
self .  js . append ( path ),append path to self._js .
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
format = force str ( default or get format ( STR_ ) [ NUM_ ] ),"call the function force_str with an argument : default if it is true , or if not , first element of the result of the function ,"
else :,"if not ,"
return not settings . DEBUG,"if settings.DEBUG is true , return boolean False , otherwise return boolean True ."
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
return new value,return new_value .
"select html = s . render ( field % name , val , local attrs )","call the method s.render with 3 arguments : field string formated with name , val and local_attrs , substitute the result for select_html ."
try :,"try ,"
"if not hasattr ( e , STR_ ) :","if e doesnt have an 'django_template_source ' attribute ,"
if change == FILE MODIFIED :,"if change equals to FILE_MODIFIED ,"
import os,import module os .
"@ register . filter ( "" STR_ "" )",decorator function register.filter with an argument string `` escapejs '' .
class DjangoTranslation ( gettext module . GNUTranslations ) :,derive the class DjangoTranslation from gettext_module.GNUTranslations base class .
"if ( attr in ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) and self . mod not in sys . modules ) :","if attr equals any of the strings `` __file__ '' , `` __name__ '' or `` __path__ '' and self.mod is not contained in sys.modules ,"
from django . core . management . color import no style,from django.core.management.color import no_style into default name space .
"if hasattr ( os , STR_ ) :","if os has an attribute 'chmod ' ,"
codecs . lookup ( encoding ),otherwise assign string 'ascii ' to encoding . call the method lookup with the encoding as the argument .
"default error messages = { STR_ :   ( STR_ ) , STR_ :   ( STR_ ) , }","default_error_messages is an dictionary with 2 entries : return value of the function _ called with an string 'Enter a valid date . ' ,"
"res , args = flatten result ( item )","call the function flatten_result with an argument item , assign the result to res and args , respectively ."
"if not self . compile filter error ( token , e ) :","call the method self.compile_filter_error with 2 arguments : token and e , if it evaluates to false ,"
if self . max value is not None :,"if self.max_value is not None ,"
continue,skip this loop iteration .
del self . dicts [ - NUM_ ] [ key ],delete value under the key key of dictionary at last element of self.dicts .
args = [ ],args is an empty list .
"return re . sub ( r STR_ , , s )","replace every occurrence of whitespaces in the previous result for ' _ ' , substitute the result for s. call the function re.sub with 3 arguments : raw string ' ( ? u ) [ ^-\w . ] ' , an empty string and s , return the result ."
"nodelist = parser . parse ( ( STR_ , ) )","call the method parser.parse with an argument tuple with one element string 'endblock ' , substitute the result for nodelist ."
os . mkdir ( target dir ),"make target_dir directory ,"
else :,"if not ,"
"def delete ( self , key , version = None ) :","define the method delete with self class instance , key and version defaulting to None as arguments ."
args = [ arg . resolve ( context ) for arg in self . args ],"for every arg in self.args call the method arg.resolve with an argument context , substitute the results in a list for args ."
"def delete many ( self , keys , version = None ) :","define the function delete_many with self , keys and version set to None as arguments ."
"return self . value . resolve ( context , ignore failures = True )","call the method self.value.resolve with 2 arguments context and ignore_failures set to boolean True , return the result ."
if name not in data :,"if name is not contained in data ,"
from django . utils . translation import ugettext lazy as  ,from django.utils.translation import ugettext_lazy as _ into default name space .
"return self . renderer ( name , value , final attrs , choices )","call the method self.renderer with 4 arguments : name , value , final_attrs and choices , return the result ."
return candidate pat % candidate subs,"mapped with a function k , for every k and v in return value of the method candidate_subs.items . format candidate_pat with candidate_subs , return the result ."
raise StopIteration ( ),raise an StopIteration exception .
try :,"try ,"
dig2 . update ( dig1 . digest ( ) ),"call the method dig1.digest , use the result as an argument for the call to the function dig2.update ."
"raise ValueError ( "" STR_ "" % value )","raise an ValueError exception with an argument string `` make_aware expects a naive datetime , got % s '' , where ' % s ' is replaced with value ."
datetime re = re . compile ( r STR_ r STR_ r STR_ r STR_ ),"substitute it for time_re . compile regex from raw string ' ( ? P < year > \d { 4 } ) - ( ? P < month > \d { 1,2 } ) - ( ? P < day > \d { 1,2 } ) [ T ] ( ? P < hour > \d { 1,2 } ) : ( ? P < minute > \d { 1,2 } ) '"
self .  delete ( k ),call the method self._delete with argument k .
self . remove ( item ),remove item from self dictionary .
"raise ViewDoesNotExist ( "" STR_ "" % ( lookup view , mod name ) )","import_module called with an argument parentmod and submod , evaluates to false . raise an ViewDoesNotExist exception with an argument string `` Could not import ' % s ' . Parent module % s does not exist . `` ,"
template dirs = settings . TEMPLATE DIRS,substitute settings.TEMPLATE_DIRS for template_dirs .
"for key , value in data :","for every key and value in data ,"
import re,import module re .
"return . join ( char2number . get ( c , c ) for c in phone . lower ( ) )","4 for ' h ' , 4 for ' i ' , 4 for ' j ' , 5 for ' k ' , 5 for ' l ' , 5 for 'm ' , 6 for ' n ' , 6 for ' o ' , 6 for ' p ' , 7 for ' q ' , 7 for ' r ' , 7 for ' r ' , 7 for 's ' , 7 for 't ' , 8 for 't ' , 8 for ' u ' , 8 for ' v ' , 9 for ' w ' , 9 for ' x ' , 9 for ' y ' and 9 for ' z ' . for every c in phone converted to lowercase , join the value under the c key of the char2number dictionary into a string , return it ."
"def clean ( self , value ) :",and unpacked dictionary kwargs . define the method clean with 2 arguments : self and value .
"node = CycleNode ( values , name , silent = silent )","append the results into a list , substitute it for value . node is an instance CycleNode class , created with values , name and silent set to silent ."
if not self . timezone :,"if self.timezone is false ,"
self . encoding = encoding,encoding set to None and unpacked dictionary _params . substitute encoding for self.encoding .
return default,"return default ,"
block context . add blocks ( blocks ),"compiled_parent.nodelist.get_nodes_by_type , called with an argument BlockNode . call the method block_context.add_blocks with an argument blocks ."
trim whitespace re = re . compile ( STR_ ),"and generic_lang_code . call the function re.compile with an argument string '\s*\n\s* ' , substitute the result for trim_whitespace_re ."
"errors = "" STR_ """,errors is a string `` strict '' .
chunk = b . join ( chunks ),"join chunks into bytes string , substitute it for chunk ."
"return getattr ( module , class name )","get attribute class_name form the module object , return it ."
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
import termios,import termios module .
self . file . seek ( NUM_ ),set file pointer at the beginning of the self.file file .
"raise ViewDoesNotExist ( "" STR_ "" % ( mod name , func name ) )","raise an ViewDoesNotExist exception with an argument string `` Could not import ' % s. % s ' . View is not callable . `` ,"
def base36 to int ( s ) :,define the functionbase36_to_int with an argument s .
return self . serialize headers ( ) + b STR_ + self . content,"call method self.serialize_headers , append bytes string '\r\n\r\n ' to the result , append self.content to the result , return it ."
return self . value,return self.value .
import time as  time,import module time as _time .
"hard coded bullets re = re . compile ( r STR_ % | . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )","raw string ' ( ? : < br clear= '' all '' > | < i > < \/i > | < b > < \/b > | < em > < \/em > | < strong > < \/strong > | < \/ ? smallcaps > | < \/ ? uppercase > ) ' and re.IGNORECASE , substitute the result for html_gunk_re . call the function re.compile with 2 arguments : raw string ' ( ( ? : < p > ( ? : % s ) .* ? [ a-zA-Z ] . * ? < /p > \s* ) + ) ' ,"
try :,"try ,"
try :,"as the arguments , substitute the result for response . try ,"
"def   init   ( self , token , parser ) :","define the function __init__ with 3 arguments : self , token and parser ."
self . validators = self . default validators + validators,"add self.default_validators and validators , substitute the result for self.validators ."
field params [ STR_ ] = row [ NUM_ ] if row [ NUM_ ] is not None else NUM_,"otherwise , value under the 'max_digits ' key of the field_params is integer 10. if sixth element of row is not None , substitute it for value under the 'decimal_places ' key of the field_params ,"
global  default,use global variable _default .
if not etags :,"if etags is false ,"
obj pk = obj .  get pk val ( ),substitute return value of the method obj._get_pk_val for obj_pk .
now = datetime . now ( ) . strftime ( STR_ ),"call the function datetime.now , on the result call the method strftime with an argument string ' % B % d , % Y - % X ' , substitute the result for now ."
"def end object ( self , obj ) :",define the method end_object with arguments self and obj .
 globs  = frame . f globals,substitute frame.f_globals for _globs_ .
return name + STR_,"concatenate name and string '_id ' , return it ."
raise StopIteration ( ),"raise an StopIteration exception ,"
idstring = STR_ + idstring,"append idstring to the ' . ' character , substitute it for idstring ."
"message = ungettext lazy ( STR_ , STR_ , STR_ )","call the function ungettext_lazy with 3 arguments : string 'Ensure this value has at least % ( limit_value ) d character ( it has % ( show_value ) d ) ,"
"return ( source , make origin ( display name , loader , name , dirs ) )","call the function make_origin with 4 arguments : display_name , loader , name and dirs , return a tuple containing 2 elements :"
from django . core . mail . backends . base import BaseEmailBackend,from django.core.mail.backends.base import BaseEmailBackend into default name space .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"def   new   ( cls , * args , ** kwargs ) :","define the method __new__ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs ."
in itial forms = len ( self . in itial ) if self . in itial else NUM_,"if self.initial is true , substitute the length of self.initial for initial_forms , if not , initial_forms is integer 0 ."
try :,"exception in Django 2.0 . '' formated with num_loopvars and len_item , respectively , and RemovedInDjango20Warning . try ,"
"def   init   ( self , * args , ** kwargs ) :","define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments ."
if fset is not None :,"if fset is not None ,"
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'title ' and value under the 'title ' key of the item dictionary .
"get valid filename = allow lazy ( get valid filename , six . text type )","call the function allow_lazy with 2 arguments : get_valid_filename and six.text_type , substitute the result for get_valid_filename ."
from django . utils . http import http date,from django.utils.http import http_date to the default name space .
return,return .
in put val = force text ( text ),"call the function force_text with an argument text , substitute the result for input_val ."
comment lineno cache = None,comment_lineno_cache is None .
else :,"if not ,"
else :,"if not ,"
def clear ( self ) :,define the method clear with argument self .
self . fields = fields,substitute fields for self.fields .
if record . exc info :,"if record.exc_info is true ,"
def   iter   ( self ) :,define the method __iter__ with an argument self .
if settings . USE THOUSAND SEPARATOR :,"if settings.USE_THOUSAND_SEPARATOR is true ,"
if parse until is None :,"if parse_until is None ,"
"if ( hasattr ( self . cmd , STR_ ) and not ( args or any ( [ not arg . startswith ( - ) for arg in args ] ) ) ) :","if self.cmd has an attribute 'missing_args_message ' and next statement is not true : args is true or any arg doesnt start with '- ' for arg in args ,"
field value = [ getInnerText ( k ) . strip ( ) for k in keys ],"call the function getInnerText with argument k , on the result call the method strip , for every k in keys , append the results to field_value list ."
def  setup ( self ) :,define the method _setup with an argument self .
def   getstate   ( self ) :,define the method __getstate__ with an argument self .
settings . INSTALLED APPS,call the settings.INSTALLED_APPS .
"hextets = ip str . split ( "" STR_ "" )","split ip_str by ' : ' , substitute the result for hextets ."
"def   lt   ( self , other ) :",define the method __lt__ with 2 arguments : self and other .
data = data or [ ],"if data is true , substitute it for data , otherwise data is an empty list ."
for item in self . items :,"for every item in self.items ,"
msg += ending,append ending to msg .
"def file move safe ( old file name , new file name , chunk size = NUM_ * NUM_ , allow overwrite = False ) :","define the function file_move_safe with 4 arguments : old_file_name , new_file_name , chunk_size set to multiple of integers 1024 and 64 ,"
else :,"if not ,"
"def attach alternative ( self , content , mimetype ) :","define the method attach_alternative with arguments self , content and mimetype ."
import time,import module time .
"self . xml . endElement ( "" STR_ "" )",call the method self.xml.endElement with an argument string 'field '
if not len ( empty label ) == NUM_ :,if length of empty_label is not equal to integer 3 .
expiry = self . get backend timeout ( timeout ),"call the method self.get_backend_timeout with argument timeout , substitute it for expiry ."
"MONTHS ALT = { NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) }","result of the function pgettext_lazy with 2 arguments : strings 'abbrev . month ' and 'Feb . ' for 2 , result of the function pgettext_lazy with 2 arguments : strings 'abbrev . month ' and 'March ' for 3 , result of the function pgettext_lazy with 2 arguments : strings 'abbrev . month ' and 'April ' for 4 , result of the function pgettext_lazy with 2 arguments : strings 'abbrev . month ' and 'May ' for 5 , result of the function pgettext_lazy with 2 arguments : strings 'abbrev . month ' and 'June ' for 6 , result of the function pgettext_lazy with 2 arguments : strings 'abbrev . month ' and 'July ' for 7 , result of the function pgettext_lazy with 2 arguments : strings 'abbrev . month ' and 'Aug . ' for 8 , result of the function pgettext_lazy with 2 arguments : strings 'abbrev . month ' and 'Sept . ' for 9 , result of the function pgettext_lazy with 2 arguments : strings 'abbrev . month ' and 'Oct . ' for 10 , result of the function pgettext_lazy with 2 arguments : strings 'abbrev . month ' and 'Nov . ' for 11 , result of the function pgettext_lazy with 2 arguments : strings 'abbrev . month ' and 'Dec . ' for 12 , MONTHS_ALT is an dictionary with 12 entries : result of the function pgettext_lazy with 2 arguments : 'alt . month ' and 'January ' for 1 ,"
filename = traceback . extract tb ( tb ) [ - NUM_ ] [ NUM_ ],"call the traceback.extract_tb method with argument tb , substitute the first element of last row of the result to filename ."
return { },return an empty dictionary .
allow multiple selected = False,allow_multiple_selected is boolean False .
"if not hasattr ( self , STR_ ) :","if self doesnt have '_queryset ' attribute ,"
if name in existing :,"if name is contained in existing ,"
not ifier . stop ( ),call the method notifier.stop .
fill to = NUM_,fill_to is an integer 8 .
if sys . platform . startswith ( STR_ ) :,"if sys.platform starts with string 'java ' ,"
if template dirs :,"if template_dirs is true ,"
self . base fields [ INITIAL FORM COUNT ] = IntegerField ( widget = HiddenInput ),"created with an argument widget set to HiddenInput . value under the INITIAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class ,"
"self . stdout . write ( "" STR_ "" % operation . describe ( ) )","substitute ' % s ' in a string `` - % s\n '' with return value of the operation.describe method , write the result to self.stdout ."
k = m . end ( ),"find the ending position of the regular expression match of the object match , substitute the result for k ."
"def date ( value , arg = None ) :",define the function date with 2 arguments value and arg set to None .
from django . core . management import call command,from django.core.management import call_command into default name space .
self . connection . ehlo ( ),call the method self.connection.ehlo .
"return super ( Error , self ) .   init   ( ERROR , * args , ** kwargs )","call the __init__ method with 3 arguments : ERROR , unpacked list args and unpacked dictionary kwargs from the base class of Error ."
self . verbose name = STR_,self.verbose_name is a string 'cache entry ' .
"raise CommandError ( "" STR_ "" )",raise an CommandError with an argument string `` You must supply at least one app label when using -- empty . `` .
item date = item . get ( date key ),"get the value under the date_key key of the item dictionary , substitute it for item_date ."
elif bytes < GB :,"filesize_number_format with result of division of bytes by KB as an argument , substitute the result for value . otherwise if bytes is smaller than GB ,"
g = imatch . group ( NUM_ ),"call the method imatch.group with an argument integer 1 , substitute the result for g ."
in put type = STR_,input_type is a string 'radio ' .
"return self . in cr version ( key , - delta , version )","call the method self.incr_version with key , negative delta and version as arguments ."
self .  mutable = mutable,"key , encoding and errors set to string 'replace ' , and return value of the function force_text with 3 arguments : value , encoding and errors set to string 'replace ' . call the method mutable substitute for self._mutable ."
"super ( ErrorList , self ) .   init   ( in itlist )",call the method __init__ with an argument initlist from the base class of the class ErrorList .
return self .   deepcopy   ( { } ),call the method self.__deepcopy__ with an empty dictionary as an argument .
"module = type ( STR_ , ( object , ) , { STR_ : bad serializer , STR_ : bad serializer , } )","create a instance of a class BadSerializerModule from the object base class , with elements Deserializer set to bad_serializer and Serializer set to bad_serializer ."
"contents = one percent re . sub ( STR_ , t . contents )","call the method one_percent_re.sub with 2 arguments : string ' % % ' and t.contents , substitute the result for contents ."
return value,return value .
SINGLE BRACE END = STR_,SINGLE_BRACE_END is a string ' } ' .
sub ul renderer . choice input class = self . choice input class,attrs as attrs_plus and choices as choice_label . substitute self.choice_input_class for sub_ul_renderer.choice_input_class .
if filter name in self . filters :,"if filter_name is contained in self.filters ,"
self . length = length,substitute length for self._length .
if path . is dir ( expanded template ) :,"if expanded_template is a directory ,"
self . file . close ( ),close the file object .
class Token ( object ) :,derive the class Token form the base class object .
settings . INSTALLED APPS,call settings.INSTALLED_APPS .
if converter :,"if converter is true ,"
return  slugify ( value ),"call the function _slugify with an argument value , return the result ."
pass,do nothing .
value = force text ( value ),"call the function force_text with an argument value , substitute the result for value ."
"from django . utils . text import get text list , capfirst",from django.utils.text import get_text_list and capfirst into default name space .
self . clean ( ),"strings `` Please submit % d or more forms . `` , `` Please submit % d or more forms . '' and self.min_num , where ' % d ' is replaced with self.min_num , and code as a string 'too_few_forms ' . call the method self.clean ."
idhost = DNS NAME,substitute DNS_NAME for idhost .
self . subject = subject,substitute subject for self.subject .
final output . append ( STR_ ),append string ' -- The following references should be added but depend on non-existent tables : ' to the final_output .
for path in self . locale paths :,"for every path in self.locale_paths ,"
class classonlymethod ( classmethod ) :,derive the class classonlymethod from the classmethod base class .
else :,"if not ,"
handlers [ name ] = handler,substitute handler for value under name key of handlers dictionary .
return formatted subject [ : NUM_ ],substitute the result for formatted_subject . return first 989 elements of formatted_subject .
args = token . contents . split ( ),"call the method token.contents.split , substitute the result for args ."
return self .  choices,return self._choices .
"params , varargs , varkw , defaults = getargspec ( func )","call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults , respectively ."
del moves .   dict   [ name ],delete entry under the name key of the moves.__dict__ dictionary .
return modules,return modules.s
target var = bits [ - NUM_ ],"must be 'as ' '' , where ' % s ' is replaced with function_name . substitute last element of bits for target_var ."
"if not self . compile function error ( token , e ) :","call the method self.compile_function_error with 2 arguments token and e , if it evaluates to false ,"
"return NodeList ( node for   , nodelist in self . conditions nodelists for node in nodelist )","return an instance of a NodeList class , created with arguments node , for every node in nodelist ,"
"if hasattr ( test runner class , STR_ ) :","`` test management command has changed in Django 1.8 . Please create an add_arguments class method to achieve this . '' if test_runner_class has an attribute 'add_arguments ' ,"
"name str = "" STR_ "" . join ( "" STR_ "" % ( "" STR_ "" . join ( names ) , app ) for app , names in conflicts . items ( ) )","for every app and names in result of the method conflicts.items , join names into a string , separated by ' , ' ,"
i = i + NUM_,"increment i by integer 1 , substitute the result for i ."
os . close ( fd ),close fd file .
"def  lazy proxy unpickle ( func , args , kwargs , * resultclasses ) :","define the function _lazy_proxy_unpickle with 4 arguments : func , args , kwargs and unpacked list resultclasses ."
try :,"try ,"
"in ner , outer = digest ( ) , digest ( )","call the function digest twice , substitute the results for inner , outer , respectively ."
"def signature ( self , value ) :","self.__class__.__module__ and self.__class__.__name__ , respectively , substitute the result for self.salt . define the method signature with arguments self and value ."
return from current timezone ( result ),"call the function from_current_timezone with an argument result , return the result ."
self .  request middleware = request middleware,substitute self._request_middleware for request_middleware .
encoding = self . encoding or settings . DEFAULT CHARSET,"if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET for encoding ."
if not commit :,"if commit is true ,"
return [ self . forms [ i ] for i in self .  deleted form indexes ],"for i in self._deleted_form_indexes append i-th element of self.forms into a list , return the resulting list ."
if self .  wrapped is empty :,"if self._wrapped is empty ,"
buf = StreamingBuffer ( ),buf is an instance of StreamingBuffer class .
return is  library missing ( path ),"call the function is_library_missing with an argument path , return the result ."
is  localized = False,is_localized is boolean False .
class LocalTimezone ( tzinfo ) :,derive the class LocalTimezone from the tzinfo base class .
else :,"if not ,"
else :,"if not ,"
os . makedirs ( filename ),create directories from the elements in filename .
return None,return None .
"result = self .   class   ( , mutable = True , encoding = self . encoding )","call the method self.__class__ with 3 arguments : an empty string , mutable is boolean True , encoding is self.encoding , substitute the result for result ."
else :,"write it to self.stdout . if not ,"
else :,"if not ,"
if match :,"if match is true ,"
import importlib,import module importlib .
"return RegexURLResolver ( r STR_ , [ ns resolver ] )",return an instance of a class RegexURLResolver created with arguments : raw string '^/ ' and a list containing an element ns_resolver .
else :,"if not ,"
raise,"raise an exception ,"
seen data = set ( ),seen_data is an empty set .
import warnings,import module warnings .
"for k , v in self . choices :","for every k and v in self.choices ,"
script name = script url [ : - len ( path info ) ],"take all but the length of path_info last elements of script_url , substitute it for script_name ."
def humanize ( dirname ) :,define the function humanize with an argument dirname .
from django . utils .  os import rmtree errorhandler,from django.utils._os import rmtree_errorhandle into default name space .
self . lasttag = tag = match . group ( NUM_ ) . lower ( ),"find the first subgroup of the matched string from the match object , convert it to lowercase , substitute it for tag and self.lasttag ."
def message ( self ) :,define the method message with argument self .
self . unlink ( self . name ),call the method unlink on self with self.name as the argument .
"raise TypeError ( "" STR_ "" )",raise an TypeError exception with an argument sting `` ca n't delete _wrapped . `` .
try :,"try ,"
class CycleNode ( Node ) :,derive the class CycleNode from Node base class .
return data,return data .
"return b . join ( [ force bytes ( arg , encoding , strings only , errors ) for arg in s ] )","for every arg in s , evaluate the function force_bytes for the arguments arg , encoding , strings_only and errors ,"
if ch ! = STR_ or escaped :,"if ch is not equal to a sring ' ? ' or escaped is true ,"
pytz = None,pytz is None .
return result,return result .
"def add prefix ( self , prefix ) :","use it as an argument for the call to the force_str function , return the result . define the method add_prefix with arguments self and prefix ."
"name = getattr ( file , STR_ , None )","get 'name ' attribute from the file object , if it doesnt exists use None , substitute it for name ."
"def   init   ( self , name , params ) :","define the initialization method __init__ with 3 arguments : self , name and params ."
for handler in handlers :,"for every handler in handlers ,"
"except ( ValueError , TypeError ) :","if ValueError or TypeError exceptions occurred ,"
from django . core . management . sql import sql indexes,from django.core.management.sql import sql_indexes into default name space .
read = property ( lambda self : self . file . read ),"define lambda function that returns self.file.read field , use it as an argument for property function , put the result in read ."
return timesince ( value ),"call the function timesince with an argument value , return the result ."
self . in dent ( NUM_ ),call the self.indent method with integer 0 as an argument .
from django . core . exceptions import ImproperlyConfigured,from django.core.exceptions import ImproperlyConfigured into default name space .
self . locale paths . extend ( list ( settings . LOCALE PATHS ) ),convert settings.LOCALE_PATHS into a list and extend list self.locale_paths with it .
attrs = flatatt ( attrs ) if attrs else,"if attrs is true , call the function flatatt with an argument attrs , substitute the result for attrs , if not attrs is an empty string ."
singular = [ ],singular is an empty list .
"raise ValueError ( "" STR_ "" )",raise a ValueError exception with an argument string `` JSON ca n't represent timezone-aware times . `` .
"hhmm = STR_ % divmod ( abs ( offset ) , NUM_ )","divide absolute offset by module 60 , use the result to format string ' % 02d % 02d ' , substitute it for hhmm ."
self . negated = not self . negated,invert self.negated .
continue,"skip this loop iteration ,"
"def value from datadict ( self , data , files , name ) :","define the method id_for_label with arguments self , data , files and name ."
"def   init   ( self , tokens ) :",define the method __init__ with 2 arguments : self and token .
if item [ STR_ ] is not None :,"if value under the 'author_link ' key of the item dictionary is not None ,"
except LookupError :,"if LookupError exception is caught ,"
"def pop ( self , key , default = None ) :","define the method pop with 3 arguments : self , key and default set to None ."
"super ( ComboField , self ) .   init   ( * args , ** kwargs )","call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs , from the base class of the class ComboField ."
"values = self . sequence . resolve ( context , True )","call the method self.sequence.resolve with 2 arguments : context and boolean True , substitute the result for values ."
elif name is not None and filter func is None :,"otherwise if name is not None and filter_func is None ,"
"from os . path import join , normcase , normpath , abspath , is abs , sep , dirname","from os.path import join , normcase , normpath , abspath , isabs , sep and dirname into default name space ."
"def cycle ( parser , token ) :",define the function cycle with 2 arguments : parser and token .
def b ( s ) :,define the function b with an argument s .
"return self .   offset ,",return a tuple with an element self.__offset .
else :,"if not ,"
libraries = { },"return value of the function re.escape called with an argument BLOCK_TAG_START , return value of the function re.escape called with an argument BLOCK_TAG_END , return value of the function re.escape called with an argument VARIABLE_TAG_START , return value of the function re.escape called with an argument VARIABLE_TAG_END , return value of the function re.escape called with an argument COMMENT_TAG_START , and return value of the function re.escape called with an argument COMMENT_TAG_END , substitute the result for tag_re . libraries is an empty dictionary ."
self . password = settings . EMAIL HOST PASSWORD if password is None else password,"if password is None substitute settings.EMAIL_HOST_PASSWORD for self.username , if not substitute password for self.password ."
else :,"if not ,"
if not callable ( or iginal lookup ) and callable ( lookup view ) :,"if original_lookup and lookup_view are not callable objects ,"
os . close ( fd ),close the file fd .
for widget in self . widgets :,"for every widget in self.widgets : ,"
except ImportError :,"if ImportError exception is caught ,"
else :,"if not ,"
else :,"if not ,"
if m is not None :,"if m is not None ,"
from django . utils import translation,from django.utils import translation into default namespace .
"return urljoin ( prefix , path )","join prefix and path into an url , return it ."
"child nodelists = ( STR_ , STR_ )",child_nodelists is a tuple with 2 elements strings 'nodelist_true ' and 'nodelist_false ' .
klass = self . resolve ( config . pop ( class ) ),"remove config dictionary element under 'class ' key , use it as an argument for the call to the method self.resolve ,"
"def ip address validators ( protocol , unpack ipv4 ) :","tuple containing 2 elements : list with an element validate_ipv4_address and return value of the function _ with an argument string , 'Enter a valid IPv4 address . ' for 'ipv4 ' and tuple containing 2 elements : list with an element validate_ipv6_address , and return value of the function _ with an argument string 'Enter a valid IPv6 address . ' for 'ipv6 ' . define the function ip_address_validators with arguments protocol and unpack_ipv4 ."
if m is None :,"if m is None ,"
message = STR_,"message is a string 'use only numbers , letters and underscores ' ."
self .  assert mutable ( ),call the method self._assert_mutable .
else :,"if not ,"
return,"return an empty string ,"
key += item,increment key by item .
"from django . core . files import locks , File",from django.core.files import locks and File into default name space .
"self .  options = params . get ( STR_ , None )","call the params.get function with string 'OPTIONS ' and None as arguments , substitute the result for self._options ."
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
from importlib import import module,from importlib import import_module into default name space .
return,return nothing .
current fields = [ ],current_fields is an empty list .
return html,return html .
for arg in args :,"for every arg in args ,"
while RUN RELOADER :,while RUN_RELOADER is true .
for digit in str ( number ) :,"for every digit in number coverted to a string ,"
self .  choices = self . widget . choices = list ( value ),self._choices and self.widget.choices are assigned value converted into a list .
try :,"try ,"
@ property,"property decorator ,"
return result,return result .
if self . verbosity >= NUM_ :,if self.verbosity is greater or equal to integer 1 .
def empty form ( self ) :,define the method empty_form with an argument self .
yield self . read ( ),read the whole self file and yield it as a generator return value .
class DisallowedRedirect ( SuspiciousOperation ) :,derive the class DisallowedRedirect from the SuspiciousOperation base class .
e = TemplateSyntaxError ( msg ),"e is an instance of TemplateSyntaxError class , created with an argument msg ."
self . validators . append ( self .  regex validator ),append self._regex_validator to self.validators .
return lang code,return lang_code .
result [ i ] += piece,increment i-th element of result by piece .
 templatetags modules = [ ],_templatetags_modules is an empty list .
except ValueError :,"if ValueError exception is caught ,"
def reset translations ( ) :,define the function reset_translation .
"duplicate = copy ( super ( BaseContext , self ) )","call the function copy with an argument base class of the class BaseContext , substitute the result for duplicate ."
"utcdate = time . strftime ( STR_ , time . gmtime ( timeval ) )","call the function time.gmtime with argument timeval , use string ' % Y % m % d % H % M % S ' and the previous result as an argument for the call to the time.strftime function , substitute the result for utcdate ."
norm patterns = [ p [ : - len ( dir suffix ) ] if p . endswith ( dir suffix ) else p for p in self . ignore patterns ],"for p in self.ignore_patterns if p ends with dir_suffix take sliced list p from the start ,"
self . context . pop ( ),remove the first element from the self.context .
def get mod func ( callback ) :,define the function get_mod_func with an argument callback .
self .  errors [ field ] = self . error class ( ),"call the method self.error_class , substitute the result for value under the field key of the self._errors dictionary ."
class FileUploadHandler ( object ) :,derive the class FileUploadHandler from the object base class .
"parser . add argument ( STR_ , STR_ , default = None , dest = STR_ , help = STR_ )","and help is a string `` Only dump objects with given primary keys . Accepts a comma separated list of keys. `` `` This option will only work when you specify one model. '' . call the method parser.add_argument with 5 arguments : string '-o ' , string ' -- output ' , default is None , dest set to string 'output ' ,"
if exclude and f . name in exclude :,"if exclude is true and f.name is contained in exclude ,"
if language code not in self .  regex dict :,"if language_code is not contained in self._regex_dict ,"
"from datetime import date as real date , datetime as real datetime",from datetime import date as real_date and datetime as real_datetime into default name space .
"def   init   ( self , flo , chunk size = NUM_ * NUM_ ) :","define the method __init__ with arguments self , flo and chunk_size set to integer 64 multiplied by integer 1024 ."
from django . utils import six,from django.utils import six into default name space .
if not changed :,"if changed is false ,"
"from django . core . files . uploadhandler import StopUpload , SkipFile , StopFutureHandlers","from django.core.files.uploadhandler import StopUpload , SkipFile and StopFutureHandlers into default name space ."
unpack = num loopvars > NUM_,"if num_loopvars is greater than integer 1 , unpack is an boolean True , otherwise is an boolean False ."
num args += NUM_,increment num_args by one .
return [ mark safe ( force text ( obj ) ) for obj in value ],"for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj ,"
from django . db import models,from django.db import models into default namespace .
min num = DEFAULT MIN NUM,"substitute DEFAULT_MIN_NUM for min_num ,"
elif self .  meta . fields and field not in self .  meta . fields :,"otherwise if self._meta.fields is true and field is not contained in self._meta.fields ,"
default validators = [ ],default_validators is an empty list .
@ property,"property decorator ,"
return STR_ % self . add prefix ( field name ),return string 'initial- % s ' where ' % s ' is replaced with return value of the self.add_prefix method called with an argument field_name .
from django . utils import timezone,from django.utils import timezone into default name space .
def recipients ( self ) :,define the method recipients with argument self .
"return Template ( source , or igin , name )","return an instance of Template class , created with 2 arguments : source , origin and name , return the result ."
if value is not None :,"if value is not None ,"
with transaction . atomic ( using = self . using ) :,"call the method transaction.atomic with an argument using set to self.using , with the result ,"
from django . core import signals,from django.core import signals into default name space .
from django . core . management import call command,from django.core.management import call_command into default name space .
else :,"if not ,"
if serializers is None :,"if serializers is None ,"
raise ValueError ( STR_ ),raise an ValueError exception with an argument string 'must define at least one ordering operation : < > < = > = ' .
errors . extend ( e . error list ),extend errors list with e.error_list .
"if hasattr ( value , STR_ ) :","if value has an 'close ' attribute ,"
"self . stdout . write ( "" STR_ "" )",write string `` the new migration will be used for new installs . Once you are sure '' to self.stdout .
class DTDForbidden ( DefusedXmlException ) :,derive the class DTDForbidden from the DefusedXmlException base class .
self .  changed data . append ( name ),append name to self._changed_data list .
try :,"try ,"
from django . db . migrations . autodetector import MigrationAutodetector,from django.db.migrations.autodetector import MigrationAutodetector into default name space .
parentloop = context [ STR_ ],substitute value under the the 'forloop ' key of the context dictionary for parentloop .
"def   init   ( self , dt ) :",define the method __init__ with 2 arguments self and dt .
except AttributeError :,"if AttributeError exception is caught ,"
in plural = False,inplural is boolean False .
import sys,import module sys .
body msg = msg,substitute msg for body_msg .
if locations :,"if locations is not empty ,"
def normalize newlines ( text ) :,define the function normalize_newlines with an argument text .
if not self .  is rendered :,"if self._is_rendered is false ,"
for part in plural :,"for every part in plural ,"
from django . core . mail import get connection,from django.core.mail import get_connection into default name space .
self . empty variable ( token ),"call the method self.empty_variable with an argument token ,"
pass,do nothing .
"out . write ( STR_ % ( message context , g ) )","format string ' pgettext ( % r , % r ) ' with message_context and g , write it to out ."
end = in dex,substitute index for end .
"val = Header ( val , encoding ) . encode ( )","call the encode function on the Header class instance , created with arguments val and encoding , substitute the result for val ."
idx = m . groups ( ) [ NUM_ ],"call the method m.groups , substitute the first element of the result for idx ."
if is  aware ( value ) :,"call the function is_aware with an argument value , if it evaluates to true ,"
"def tzname ( self , dt ) :",define the method tzname with 2 arguments self and dt .
return False,return boolean False .
return { STR_ :  get val ( ) },return an dictionary containing 1 entry : return value of the function _get_val for 'csrf_token ' .
"return bits [ NUM_ ] ,",return the first element of bits and an empty string .
try :,"try ,"
def pprint ( value ) :,define the function pprint with an argument value .
"self . stdout . write ( self . style . MIGRATE HEADING ( "" STR_ "" ) )","call the self.style.MIGRATE_HEADING with string `` Synchronizing apps without migrations : '' as an argument ,"
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = "" STR_ "" )","default as boolean False and help as a string `` Do n't break long message lines into several lines. '' . call the method parser.add_argument with 5 arguments : string ' -- no-location ' , action set to string 'store_true ' ,"
model = None,model is None .
from django . utils . text import get text list,from django.utils.text import get_text_list into default name space .
for f in self . in stance .  meta . fields :,"for every f in self.instance._meta.fields ,"
if not m :,"if m is not False , None is considered False ,"
consume next = False,consume_next is boolean False .
if not self . dry run :,"if self.dry_run is false ,"
d = Decimal ( force text ( float ( text ) ) ),"d is an instance of class Decimal , created with result of the function force_text ,"
else :,"if not ,"
args [ NUM_ ] = force text ( args [ NUM_ ] ),"call the function force_text with an argument first element of args , substitute the result for first element of args ."
requires system checks = False,requires_system_checks is boolean False .
"headerlist = cache . get ( cache key , None )","get the value of dictionary cache under the key cache_key , if key is not available return None , substitute it for headerlist ."
else :,"if not ,"
else :,"if not ,"
"elif is subclass ( klass , logging . handlers . SMTPHandler ) and STR_ in config :","formated with value under 'target ' key of config dictionary and e. otherwise if klass is a subclass of logging.handlers.SMTPHandler and string 'mailhost ' is contained in config ,"
"def dst ( self , dt ) :",define the method dst with 2 arguments self and dt .
vary headers = [ ],vary_headers is an empty list .
"handler . endElement ( "" STR_ "" )",call the method handler.endElement with an argument string 'item ' .
"f . process ( self , self . domain )",call the function f.process with 2 arguments : self and self.domain .
return  trans . get language from path ( path ),"call the function _trans.get_language_from_path with an argument path , return the result ."
if app list value is not None :,"if app_list_value is not None ,"
"rendering attrs = SimpleTemplateResponse . rendering attrs + [ STR_ , STR_ ]","append list with 2 strings : '_request ' and '_current_app ' to SimpleTemplateResponse.rendering_attrs , substitute the result for rendering_attrs ."
"for key , value in six . iterlists ( self ) :","for key and value in return value of the six.iterlists function called with an argument self ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
raise AttributeError ( self . warning ),raise an raise self.warning with an argument self.warning .
"def common logger config ( self , logger , config , in cremental = False ) :","define the method common_logger_config with 4 arguments : self , logger , config and incremental set to boolean False ."
class MultiPartParserError ( Exception ) :,derive the class MultiPartParserError from the Exception base class .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"block = type ( self ) ( block . name , block . nodelist )","convert self to a tuple , call the result with 2 arguments : block.name and block.nodelist , substitute the result for block ."
if len ( bits ) ! = NUM_ :,"if length of bits is not equal to integer 6 ,"
"substitutions [ STR_ ] = super ( ClearableFileInput , self ) . render ( name , value , attrs )","call the method render from the base class of the class ClearableFileInput , called with 3 arguments : name , value and attrs ,"
"return t [ NUM_ ] . lower ( ) , True","return tuple , consisting of first element of t converted to lowercase and True ."
from django . core . management . base import BaseCommand,from django.core.management.base import BaseCommand into default name space .
return None if timeout is None else time . time ( ) + timeout,"if timeouts is None return None , otherwise return the sum of function time.time return value and timeout ."
if bits [ NUM_ ] == STR_ :,"if third element of bits equals a string 'parsed ' ,"
"symlink path = os . path . join ( tmpdir , STR_ )","join tmpdir and sting 'symlink ' into a file path name , substitute it for symlink_path ."
def get git changeset ( ) :,define the function get_git_changeset .
except OSError as e :,"if exception OSError , renamed to e , occurred ,"
msg . attach ( body msg ),call the msg.attach with an argument body_msg .
try :,"try ,"
"resolve ( path , urlconf )",call the function resolve with arguments path and urlconf .
while bits :,"while bits is true ,"
saved instances = [ ],saved_instances is an empty list .
param = elt [ NUM_ ],substitute second element of elt for param .
def open ( self ) :,define the method open with argument self .
"return formatdate ( epoch seconds , usegmt = True )","call the function formatdate with 2 arguments : epoch_seconds and usegmt set to boolean True , return the result ."
import sys,import module sys .
from django . core . management . base import BaseCommand,from django.core.management.base import BaseCommand into default name space .
def static ( request ) :,define the function static with an argument request .
class TemplateResponse ( SimpleTemplateResponse ) :,derive the class TemplateResponse from the SimpleTemplateResponse base class .
for app dir in app dirs :,"for every app_dir in app_dirs ,"
"return ugettext ( "" STR_ "" "" STR_ "" ) % { STR_ : date check [ NUM_ ] , STR_ : date check [ NUM_ ] , STR_ : six . text type ( date check [ NUM_ ] ) , }","call the function ugettext with an argument string `` Please correct the duplicate data for % ( field_name ) s which must be unique for ,"
self . val expr = val expr,substitute val_expr for self.val_expr .
def open ( self ) :,define the method open with argument self .
if constant :,"if constant is true ,"
lang = get language ( ),"call the function get_language , substitute the result for lang ."
self .  current [ field . name ] = field . value to string ( obj ),"call the function field.value_to_string with an argument obj , substitute the result for value under the field.name key of self._current dictionary ."
"extra context = token kwargs ( remaining bits , parser , support legacy = True )","call the function token_kwargs with 3 arguments : remaining_bits , parser and support_legacy set to boolean True , substitute the result for extra_context ."
else :,"if not ,"
output transaction = True,output_transaction is boolean True .
"v .   cause   , v .   traceback   = e , tb",substitute e and tb for v.__cause__ and v.__traceback__ .
"six . reraise ( exc type , exc value , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : exc_type , exc_value and third element of the result of the method sys.exc_info ."
return force text ( self . prepare value ( in itial value ) ) ! = force text ( data value ),"call the method self.prepare_value with an argument initial_value , use it as the argument for the call to the function force_text ,"
class RequestContext ( Context ) :,derive the class RequestContext from the Context base class .
result = [ ],result is an empty list .
"def   reduce ex   ( self , proto ) :",define the method __reduce_ex__ with 2 arguments self and proto .
except ValueError :,"substitute the result for self.literal . if ValueError exception is caught ,"
if m :,"if m is true ,"
command = app name,substitute app_namefor command .
except ValidationError :,"if ValidationError exception is caught ,"
return STR_ % self . data . day,return a string ' % 02d ' formated with self.data.day .
import errno,import module errno .
curr = cwords [ cword - NUM_ ],substitute cwords element at the cword decremented by 1 index for curr .
if size == NUM_ :,if size equals to integer zero .
if max age is not None :,"if max_age is not None ,"
return state,convert it to a string and substitute it for value under the 'cookies ' key of the state dictionary . return state .
if confirm == STR_ :,"if confirm equals a string 'yes ' ,"
class name = model .   name   + str ( STR_ ),"append string 'Form ' to model.__name__ , substitute the result for class_name ."
if arg is None :,"if arg is None ,"
"if not is in stance ( messages , ValidationError ) :","if messages is not an instance of the ValidationError class ,"
fd = pyinotify . INotifyWrapper . create ( ) . in otify init ( ),"call the method pyinotify.INotifyWrapper.create , on the return value call the inotify_init method , substitute the result for fd ."
return result,return result .
continue,skip this loop iteration .
 serializers [ format ] = module,substitute module for the value under the format key of the _serializers dictionary .
role = role . upper ( ),convert role to uppercase .
class BaseForm ( object ) :,derive the class BaseForm from the base class object .
"def   init   ( self , children = None , connector = None , negated = False ) :","define the method __init__ with 4 arguments : self , children set to None , connector set to None and negated set to boolean False ."
return e,return e .
if any ( e . is  serious ( ) and not e . is  silenced ( ) for e in all issues ) :,"if visible_issue_count equals to integer 0 , or for string `` 1 issue '' if visible_issue_count equals integer 1 , or for string `` % s issues '' , with ' % s ' replaced by visible_issue_count , subtract visible_issue_count from length of all_issues , and substitute it for second ' % s ' in the stirting string . if any element in the return value of the e.is_serious method is true , and if return value of the method e.is_silenced is false ,"
def   str   ( self ) :,define the method __str__ with an argument self .
class SsiNode ( Node ) :,derive the class SsiNode from Node base class .
return op ( ),"call the function op , return the result ."
self .  cull frequency = in t ( cull frequency ),convert cull_frequency into an integer and substitute it for self._cull_frequency .
self . in teresting =  html parser . in teresting normal,substitute _html_parser.interesting_normal for self.interesting .
class MultipleChoiceField ( ChoiceField ) :,derive the class MultipleChoiceField from the base class ChoiceField class .
for middleware path in settings . MIDDLEWARE CLASSES :,for every middleware_path in settings.MIDDLEWARE_CLASSES :
"super ( DebugParser , self ) .   init   ( lexer )","call the method __init__ with an argument lexer , from the base class of the class DebugParser ."
"or ig vars . pop ( STR_ , None )",remove '__dict__ ' key from the orig_vars dictionary .
def   init   ( self ) :,define the method with reload with an argument self .
pass,do nothing .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"directories , files = [ ] , [ ]","directories , files are empty lists ."
from django . utils import six,from django.utils import six into default name space .
if not  serializers :,"if _serializers is false ,"
if plan node not in shown and plan node [ NUM_ ] == app name :,"if plan_node is not contained in shown and first element of plan_node equals to app_name ,"
t = self . current token,substitute self.current_token for t .
if six . PY3 :,"if six.PY3 is true ,"
connection = connections [ self . using ],"get the value under the self.using key of the connections dictionary , substitute it for connection ."
return self .  upload handlers,return self._upload_handlers .
"except ( ValueError , TypeError ) :","if TypeError or ValueError exceptions are caught ,"
pop = complain,substitute complain for pop .
else :,"if not ,"
widget = HiddenInput,widget is an instance of HiddenInput class
if format not in  serializers :,"if format is not contained in _serializers ,"
id  += STR_,append string '_0 ' to id_ .
self . pointer = self . backout . pop ( ),"remove the first element from self.backout , substitute the result for self.pointer ."
"filter name = getattr ( func , STR_ , None )","get '_filter_name ' attribute of the func object , if it exists , substitute it for filter_name , if not , filter_name is None ."
" assertRegex = "" STR_ """,_assertRegex is a strnig `` assertRegex '' .
"value = list .   getitem   ( self , key )","call the method list.__getitem__ with 2 arguments self and key , substitute the result for value ."
pass,do nothing .
self . check ( ),"call the method self.check ,"
"class ErrorList ( UserList , list ) :",derive the class ErrorList from the UserList and list base classes .
"def   init   ( self , name , value , base , sysid , pubid , not ation name ) :","define the method __init__ with arguments self , name , value , base , sysid , pubid and notation_name ."
"self . stdout . write ( self . style . MIGRATE HEADING ( "" STR_ "" ) )","call the self.style.MIGRATE_HEADING method , with string `` Operations to perform : '' as an argument ,"
logger . propagate = propagate,substitute propagate for logger.propagate .
"def iteritems ( d , ** kw ) :",return it . define the function iteritems with 2 arguments : d and unpacked dictionary kw .
requires system checks = False,requires_system_checks is boolean False .
filename = tmp . split ( / ) [ - NUM_ ],"split tmp at '/ ' character , substitute the last element of the result for filename ."
def   repr   ( self ) :,define the method __repr__ with an argument self .
"result = cache get ( key , root )","call the function cache_get with 2 arguments : key and root , substitute the result for result ."
print ( opt label ),print opt_label to the standard output .
import sys,import module sys .
self . stream = stream,substitute stream for self.stream .
class FixUnicode ( fixer base . BaseFix ) :,derive the class FixUnicode from the base class fixer_base.BaseFix .
pass,do nothing .
elif ch == STR_ :,"otherwise if ch equals a string ' [ ' ,"
"if is in stance ( app name , BaseCommand ) :",if app_name is an instance of BaseCommands .
"raise CommandError ( "" STR_ "" "" STR_ "" % app config . label )","raise an CommandError with an argument string `` AppCommand can not handle app ' % s ' in legacy mode because it does n't have a models module . `` , where ' % s ' is replaced by app_config.label ."
"yield "" STR_ """,yield string `` # This is an auto-generated Django model module . '' as the result .
self . tokens = tokens,substitute tokens for self.tokens .
"yield safe join ( template dir , template name )","call the function safe_join with 2 arguments template_dir and template_name , yield the result ."
"yield ( tok . name , toktext )",yield a tuple with 2 elements : tok.name and toktext .
"def   getattr   ( self , name ) :",define the method __getattr__ with arguments self and name .
in put formats = formats . get format lazy ( STR_ ),"call the method formats.get_format_lazy with an argument string 'DATETIME_INPUT_FORMATS ' , substitute the result for input_formats ."
if not script url :,"if script_url is false ,"
if not shown :,"if shown is an empty set ,"
elif in dexes [ column name ] [ STR_ ] :,"otherwise if , if value under the 'unique ' key of the dictionary contained under the column_name key of the dictionary indexes is true ,"
def   nonzero   ( self ) :,define the method __nonzero__ with an argument self .
self . verbose name plural = STR_,self.verbose_name_plural is a string 'cache entries ' .
except OSError :,"if OSError exception is caught ,"
if not self . first :,"if self.first is false ,"
"class SafeMIMEMultipart ( MIMEMixin , MIMEMultipart ) :",derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class .
def fix ( match ) :,define the function fix with an argument match .
config [ STR_ ] = self . as tuple ( config [ STR_ ] ),"call the method self.as_tuple with an argument value under 'address ' key of config dictionary ,"
def   iter   ( self ) :,define the method __iter__ with an argument self .
"def handle fk field ( self , obj , field ) :","define the method handle_fk_field with argument self , obj and field ."
"self . stream . write ( "" STR_ "" )",write a new line to the self.stream file stream .
message = ValidationError ( message ),message is an instance of the ValidationError class created with an argument message .
return,return an empty string .
"def   init   ( self , max value = None , min value = None , max digits = None , decimal places = None , * args , ** kwargs ) :","'Enter a number . ' for 'invalid ' , return value of the function ungettext_lazy called with 3 string arguments : 'Ensure that there are no more than % ( max ) s digit in total . ' , 'Ensure that there are no more than % ( max ) s digits in total . ' , and 'max ' for 'max_digits ' , return value of the function ungettext_lazy called with 3 string arguments : 'Ensure that there are no more than % ( max ) s decimal place . ' , 'Ensure that there are no more than % ( max ) s decimal places . ' and 'max ' , for 'max_decimal_places ' and return value of the function ungettext_lazy called with 3 string arguments : 'Ensure that there are no more than % ( max ) s digit before the decimal point . ' , 'Ensure that there are no more than % ( max ) s digits before the decimal point . ' and 'max ' for 'max_whole_digits ' . define the method __init__ with 7 arguments : self , max_value set to None , min_value set to None , max_digits set to None ,"
else :,"if not ,"
self . value = force text ( self . value ),"and unpacked dictionary kwargs . call the function force_text with an argument self.value , substitute the result for self.value ."
"M . set ( key , real value , coded value )","call the M.set method with the key , real_value , coded_value as the arguments ."
leading = self . has leading dir ( namelist ),"call the method self.has_leading_dir with an argument namelist , substitute the result for leading ."
return settings . LANGUAGE CODE,return settings.LANGUAGE_CODE .
return STR_ . join ( output ),"join elements of the output into a string , separated by newlies , return the string ."
def   iter   ( self ) :,define the method __iter__ with an argument self .
" add doc ( u , "" "" "" STR_ "" "" "" )",call the function _add_doc with 2 arguments : u and string `` '' '' Text literal '' '' '' .
if result :,"if result is true ,"
connection = connections [ options [ STR_ ] ],"get value under the 'database ' key of the options dictionary , use it as a key to get the value from the connections dictionary ,"
@ register . tag,"register.tag decorator ,"
common prefix = None,common_prefix is None .
"parser . add argument ( STR_ , STR_ , action = STR_ , dest = STR_ , help = STR_ )","call the method parser.add_argument with 5 arguments : string ' -- tag ' , string '-t ' , action set to string 'append ' ,"
return media,return media .
"file name = force text ( file name , encoding , errors = STR_ )","call the function force_text with 3 arguments : file_name , encoding and errors set to string 'replace ' ,"
offset = offset . seconds // NUM_,substitute offset.seconds for offset .
path = parts [ NUM_ : ],"substitute parts , without the first element , for path ."
if column name in in dexes :,"if column_name is contained in indexes ,"
"def extract ( self , to path = ) :",define the method extract with 2 arguments : self and to_path set to an empty string .
"def   init   ( self , * args , ** kwargs ) :",define the method __init__ with 3 arguments : self unpacked list args and unpacked dictionary kwargs .
directory created = { },directory_created is an empty dictionary .
self . cookies = SimpleCookie ( ),self.cookies is an instance of a class SimpleCookie .
msg = self . style . HTTP NOT FOUND ( msg ),"call the self.style.HTTP_NOT_FOUND with an argument msg , substitute it for msg ."
class TokenParser ( object ) :,derive the class TokenParser form the base class object .
"if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :","if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,"
if form . is  bound :,"if form.is_bound is true ,"
"ret = fcntl . flock (  fd ( f ) , flags )","call the function fcntl.flock with return value of the _fd ( f ) function and flags as arguments , substitute the result for ret ."
new attr = old attr,substitute old_attr for new_attr .
"def get declared fields ( bases , attrs , with base fields = True ) :","define the function get_declared_fields with 3 arguments : bases , attrs and with_base_fields set to boolean True ."
"return self .   class   ( [ ( k , v [ : ] ) for k , v in self . lists ( ) ] )","call the method self.__class__ with an argument list , with elements : tuples with 2 elements : k and hard copy of list v ,"
"def lock ( f , flags ) :",define the function lock with arguments f and flags .
"update wrapper (  dec , decorator , assigned = available attrs ( decorator ) )","call the function update_wrapper with 3 arguments : _dec , decorator and assigned as result of the function available_attrs ,"
class StopFutureHandlers ( UploadFileException ) :,derive the class StopFutureHandlers from the UploadFileException base class .
"raise ValueError ( "" STR_ "" % s )","raise an ValueError exception wit an argument string `` Not a string literal : % r '' , where `` % r '' is replaced with s ."
try :,"try ,"
widget = widget or self . widget,"substitute self.widget if the widget is false , otherwise substitute widget for widget ."
"unique = "" STR_ "" if f . unique else "" ""","if f.unique is true , substitute `` UNIQUE `` for unique , otherwise unique is an empty string ."
"if hasattr ( self . file , STR_ ) :","if self.file has an attribute 'size ' ,"
all date checks = set ( ),all_date_checks is an empty set .
args = match . groups ( ),"call the method match.groups , substitute the result for args ."
"for i , field in enumerate ( self . fields ) :","for every i and field in enumerated iterable self.fields ,"
from functools import reduce,from functools import reduce into default name space .
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'email ' and value under the 'author_email ' key of the self.feed dictionary .
"def lex ( self , text ) :",define the method lex with 2 arguments self and text .
return IfNode ( conditions nodelists ),"return an instance of IfNode class , created with an argument conditions_nodelists ."
i += NUM_,"increment i by integer 1 ,"
"with open ( filepath , STR_ ) as fp :","open filepath file in read mode , with file descriptor as fp , perform ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
class BaseInlineFormSet ( BaseModelFormSet ) :,derive the class BaseInlineFormSet from the BaseModelFormSet base class .
"self . handle fk field ( obj , field )",call the method self.handle_fk_field with arguments obj and field .
try :,"try ,"
filter expression = self . compile filter ( token . contents ),"call the method self.compile_filter with an argument token.contents , substitute the result for filter_expression ."
"j = text . find ( substr , i )","call the method text.find with 2 arguments : substr and i , substitute the result for j ."
try :,"try ,"
def parse header ( line ) :,define the function parse_header with an argument line .
"template , or igin = find template ( template name , dirs )","call the function find_template with 2 arguments : template_name and dirs , substitute the result for template and origin ."
if STR_ in args :,"if string ' -- commands ' is contained in args ,"
"return self . get renderer ( name , value , attrs , choices ) . render ( )","call the method self.get_renderer with 4 arguments : name , value , attrs and choices , call the render method on the result , return the result ."
except KeyError :,"with all ' % s ' strings replaced with migration_name and app_label , respectively , as an argument . if KeyError exception is raised ,"
return self . number < self . paginator . num pages,"if self.number is lesser than self.paginator.num_pages , return boolean True , otherwise return boolean False ."
if in  tag and token string . startswith ( BLOCK TAG START ) :,if in_tag is true and token_string starts with BLOCK_TAG_START .
nodelist false = NodeList ( ),nodelist_false is an instance of NodeList .
del X,delete X .
"f = os . path . join ( p , cmd )","join p and cmd into a file path , substitute it for f ."
from PIL import ImageFile as PillowImageFile,from PIL module import ImageFile as PillowImageFile .
if name is not None :,"if name is not None ,"
fh . write ( writer . as string ( ) ),"call the method writer.as_string , write the result to file fh ."
def random ( value ) :,define the function random with an argument value .
except KeyboardInterrupt :,"if KeyboardInterrupt exception is caught ,"
"self . json kwargs [ STR_ ] = ( STR_ , STR_ )","substitute a tuple with 2 elements : characters ' , ' and ' : ' for value under the 'separators ' key of the self.json_kwargs dictionary ."
@ stringfilter,"decorator stringfilter ,"
"def add arguments ( self , parser ) :",define the method add_arguments with 2 arguments : self and parser .
if self . match is None or self . match re . search ( f ) :,"if self.match is None or call to the method self.match_re.search with an argument f , evaluated to true ,"
import random,import module random .
"except ( IndexError , ValueError , KeyError , TypeError ) :","if IndexError , ValueError , KeyError or TypeError exceptions are caught ,"
if not attr list [ NUM_ ] & termios . ECHO :,"if fourth element of attr_list and termios.ECHO are both true ,"
elif user settings [ key ] ! = default settings [ key ] :,"otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary ,"
from django . utils . translation import ugettext lazy as  ,from django.utils.translation import ugettext_lazy as _ into default name space .
"year val , month val , day val = value . year , value . month , value . day","substitute value.year , value.month and value.day for year_val , month_val and day_val , respectively ."
return module . Command ( ),"import_module function , substitute the result for module . return an instance of the module.Command class ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
class VariableNode ( Node ) :,derive the class VariableNode form the base class Node .
"def create bound method ( func , obj ) :",define the function create_bound_function with 2 arguments : func and obj .
else :,"if not ,"
"os . chmod ( filename , new permissions )",substitute the result for new_permission . call the function os.chmod wiht arguments filename and new_permissions .
"def handle m2m field ( self , obj , field ) :","define the method handle_m2m_field with self , obj and field arguments ."
"self . tag ( function name , compile func )",call the method self.tag with 2 arguments : function_name and compile_func .
stamp = time . mktime ( tt ),"call the method time.mktime with an argument tt , substitute the result for stamp ."
"raise parser . error class ( "" STR_ "" % self . id )","raise an exception parser.error_class with an argument string `` Not expecting ' % s ' in this position in if tag . `` ,"
truncate = force text ( truncate ),"call the function force_text with an argument truncate , substitute the result for truncate ."
"warnings . warn ( STR_ , RemovedInDjango19Warning , stacklevel = NUM_ )","call the function warnings.warn with 3 arguments : string 'import_by_path ( ) has been deprecated . Use import_string ( ) instead . ' ,"
os .  exit ( NUM_ ),exit the program with the code integer 1 .
for key in self :,"for every key in self ,"
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
def b ( s ) :,define the function b with an argument s .
raise CommandError ( STR_ % exclude ),"raise CommandError with an argument string 'Unknown app in excludes : % s ' , where ' % s ' is replaced with exclude ."
else :,"if not ,"
assert content is not None,"if content is None , raise an error ."
self . tagtype = tagtype,substitute tagtype for self.tagtype .
try :,"try ,"
"def to python ( self , value ) :",'Enter a number . ' for 'invalid ' . define the method to_python with arguments self and value .
"def   init   ( self , exception ) :",define the __init__method with arguments self and exception .
"return dateformat . format ( value , get format ( format or STR_ , use l10n = use l10n ) )",call the function dateformat.format with 2 arguments : value and result of the function get_format called with 2 arguments :
doublecolon start = - NUM_,doublecolon_start is an integer -1 .
continue,skip this loop iteration .
"user regex = re . compile ( r "" STR_ "" r STR_ , re . IGNORECASE )","call the re.compile function with 2 arguments : raw string `` ( ^ [ - ! # $ % & '*+/= ? ^_ ` { } |~0-9A-Z ] + ( \ . [ - ! # $ % & '*+/= ? ^_ ` { } |~0-9A-Z ] + ) * $ '' ,"
"def has key ( self , key ) :",define the method has_key with 2 arguments : self and key .
"for k , v in six . iteritems ( dict  ) :","call the method six.iteritems with an argument dict_ , for every k and v in the result ,"
output [ - NUM_ ] = last row [ : - len ( row ender ) ] + str hidden + row ender,"create list out of last_row elements from the start to the last length of row_ender element , append str_hidden and row_ender to it ,"
nodes . extend ( node . get nodes by type ( nodetype ) ),"call the method node.get_nodes_by_type with an argument nodetype , extend nodes with it ."
"queryset = property (  get queryset ,  set queryset )","queryset is an property object of this class , with _get_queryset getter and _set_queryset setter functions ."
while ch ! = STR_ :,"while ch is not equal to a string ' } ' ,"
self . flo = flo,substitute flo for self.flo .
if field not in self . fields :,"if field is not contained in self.fields ,"
pass,do nothing .
changeset = None,changeset is None .
import warnings,import module warnings .
ch2 = None,ch2 is None .
class BaseFormSet ( object ) :,derive the class BaseFormSet from the object base class .
else :,"if not ,"
return self . objects,return self.objects .
value = value . strip ( ),"strip whitespaces from both sides of the value , substitute it for value ."
if self . field . localize :,"if self.field.localize is true ,"
if callable ( in itial value ) :,"if not substitute field.initial for initial_value . if initial_value is an callable object ,"
"self . locale paths . in sert ( NUM_ , os . path . join ( os . path . abspath ( dirpath ) , dirname ) )","call the method os.path.abspath with an argument dirpath , join the result and dirname into a file path , inset it at the beggining of self.locale_paths ."
from django . utils . translation import trans real,from django.utils.translation import trans_real into default namespace .
value . decode ( charset ),call the method value.decode with an argument charset .
"raise Exception ( "" STR_ "" % self .   class   .   name   )","raise an Exception exception with an argument string `` This % s instance can not tell its position '' ,"
for app name in app names :,for every app_name in app_names .
class CallbackFilter ( logging . Filter ) :,derive the class CallbackFilter from logging.Filter base class .
"def truncatechars html ( value , arg ) :",define the function truncatechars_html with 2 arguments value and arg .
config [ STR_ ] = self . config [ STR_ ] [ config [ STR_ ] ],"get value under 'target ' key of config dictionary , use it as a key to get the value from the dictionary ,"
return strip spaces between tags ( self . nodelist . render ( context ) . strip ( ) ),"call the method self.nodelist.render with an argument context , strip the result of the surrounding whitespaces ,"
table = connections [ db ] . ops . quote name ( self .  table ),"call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary , substitute the result for table ."
now = datetime . datetime . now ( utc if is  aware ( d ) else None ),"call the function datetime.datetime with utc as argument if call to the is_aware ( d ) returns True , if not None is the argument , store the result in now ."
def   repr   ( self ) :,define the method __repr__with an argument self .
if find command ( program ) is None :,"call the function find_command with an argument program , if it evaluates to None ,"
"self . set cookie ( key , max age = NUM_ , path = path , domain = domain , expires = STR_ )","call the method self.set_cookie with 5 arguments : key , max_age as integer 0 , path as path , domain as domain ,"
"def   getitem   ( self , idx ) :",define the method __getitem__ with 2 arguments : self and idx .
try :,"try ,"
from django . template . loader import get template,from django.template.loader import get_template into default name space .
self . in stance . validate unique ( exclude = exclude ),call the method self.instance.validate_unique with an argument exclude set to exclude .
return base lang in settings . LANGUAGES BIDI,"if base_lang is contained in settings.LANGUAGES_BIDI , return boolean True , if not , return boolean False ."
cword = in t ( os . environ [ STR_ ] ),"convert to an integer value under the 'COMP_CWORD ' key of the os.environ dictionary , substitute it for cword ."
return [ ],return an empty list .
"if is in stance ( self . urlconf name , list ) and len ( self . urlconf name ) :",if self.urlconf_name is an instance of a list type and its length is not zero .
"if not is in stance ( e , CommandError ) :","if e is not an instance of CommandError class ,"
"basedirs = set ( map ( os . path . abspath , filter ( os . path . is dir , basedirs ) ) )","create a list out of basedir elements for which function os.path.isdir returns true , apply the os.path.abspath function on every element , and put the results in a list , basedir is set of previous list elements ."
attrs [ STR_ ] = localized fields,substitute localized_fields for value under the 'localized_fields ' key of attrs dictionary .
break,break the loop execution .
if STR_ not in set ( settings . MIDDLEWARE CLASSES ) :,"if string 'django.middleware.clickjacking.XFrameOptionsMiddleware ' is not contained in settings.MIDDLEWARE_CLASSES set ,"
from django . conf import settings,from django.conf import settings into default name space .
status code = NUM_,status_code is an integer 304 .
"def   init   ( self , in clude html = False , email backend = None ) :","define the method __init__ with 3 arguments : self , include_html set to boolean False and email_backend set to None ."
value = escape ( value ),"call the function escape with an argument value , substitute it for value ."
weight += NUM_,increment weight by integer 2 .
"if hasattr ( mw instance , STR_ ) :",if mw_instance has an attribute named 'process_template_response ' .
return t,return t .
self . empty block tag ( token ),call the method self.empty_block_tag with an argument token .
"for refto , refs in references . items ( ) :",for every refto and refs in return value of references.items method .
"return "" STR_ "" % ( package [ : dot ] , name )",return a string `` % s. % s '' formated with first dot package elements and name .
class EmailField ( CharField ) :,derive the class EmailField from the base class CharField class .
from django . db import models,from django.db import models into default name space .
phone2numeric = allow lazy ( phone2numeric ),"call the function allow_lazy with an argument phone2numeric , substitute the result for phone2numeric ."
"handler . startElement ( "" STR_ "" , self . root attributes ( ) )",call the method handler.startElement with 2 arguments : string `` channel '' and result of the method self.root_attributes .
objects = model .  base manager,substitute model._base_manager for objects .
"raise TypeError ( "" STR_ "" % type ( var ) )","raise an TypeError exception with an argument string `` Variable must be a string or number , got % s '' , replace ' % s ' with type of var ."
"choices = property (  get choices , ChoiceField .  set choices )","choices is an property property object of this class , with _get_choices getter and ChoiceField._set_choices setter functions ."
@ register . tag,"register.tag decorator ,"
def display ( self ) :,define the method display with an argument self .
comment notes . extend ( not es ),extend comment_notes list with notes .
class Command ( BaseCommand ) :,derive class Command from the base class BaseCommand .
else :,"if not ,"
with self . mutex :,"with self.mutex perform ,"
"sys . modules [   name   + "" STR_ "" ] = Module six moves urllib (   name   + "" STR_ "" )","instantiate class Module_six_moves_urllib with an argument , string `` .moves.urllib '' appended to __name__ ,"
del attr,delete attr .
class Command ( BaseCommand ) :,derive the class Command from the base class BaseCommand .
"def   delattr   ( self , name ) :",define the method __delattr__ with 2 arguments self and name .
obj = mark for escaping ( new obj ),"call the function mark_for_escaping with an argument new_obj , substitute the result for obj ."
"return wrap ( value , in t ( arg ) )","call the method wrap with 2 arguments , value and arg converted into a integer , return the result ."
if self . pos >= len ( self . tokens ) :,"if self.pos is greater than or equal to self.tokens ,"
plen = len ( provided ) + NUM_,"calculate length of provided and increment it by one , substitute the result for plen ."
"def strftime ( dt , fmt ) :",define the function strftime with 2 arguments dt and fmt .
if item type == FIELD :,"if item_type equals FIELD ,"
get function defaults = operator . attrgetter (  func defaults ),"call the method operator.attrgetter with an argument _func_defaults , substitute the result for get_method_defaults ."
return fp . getvalue ( ),"call the method fp.getvalue , return the result ."
from django . conf import settings,from django.conf import settings into default name space .
"content type , content type extra = meta data . get ( STR_ , ( , { } ) )","method , substitute the result for file_name . get the value under the 'content-type ' of the meta_data dictionary , if it exists assign it to content_type , content_type_extra ,"
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
filepath = os . path . abspath ( filepath ),"return the absolute path of file path filepath , substitute it for filepath ."
else :,"field.attname of the data dictionary . if not ,"
"token = super ( DebugLexer , self ) . create token ( token string , in  tag )","call the method create_token from the base class of the class DebugLexer , with 2 arguments : template_string and in_tag ,"
except self . LibraryValueNotFoundException :,"if self.LibraryValueNotFoundException exception is caught ,"
use natural primary keys = options . get ( STR_ ),"get the value under the 'use_natural_primary_keys ' key of the options dictionary , substitute the result for use_natural_primary_keys ."
if self . data . hour > NUM_ :,"if self.data.hour is greater than integer 11 ,"
"def unclosed block tag ( self , parse until ) :",return the result . define the method unclosed_block_tag with 2 arguments : self and parse_until .
if new name . find ( STR_ ) >= NUM_ :,"call the method new_name.find , with an argument string '__ ' , if it evaluates to greater or equal than integer 0 ,"
"self . enter command ( command , token )",call the method self.enter_command with 2 arguments command and token .
if in verse match is not None :,"if inverse_match is not None ,"
for app config in reversed ( list ( apps . get app configs ( ) ) ) :,"for every app_config in reversed list created out of the return value of the function apps.get_app_configs ,"
return False,return boolean False .
import warnings,import module warnings .
"return getattr ( in stance , name ) ( )","get name attribute from the instance object , call it and return the result ."
"from django . db import connections , transaction , router , DatabaseError","from django.db import connections , transaction , router and DatabaseError into default name space ."
return self .  files,return self._files .
if limit is None or len ( x ) <= limit :,"if limit is None or length of x is lesser than or equal to limit ,"
from django . utils . translation import ugettext lazy,from django.utils.translation import ugettext_lazy into default name space .
cache [ key ] = oldroot,substitute oldroot for value under the key key of the cache dictionary .
return STR_,return string 'NOTPROVIDED ' .
return escape ( text ),"call the function escape with an argument text , return the result ."
self . in teractive = options . get ( STR_ ),"get the value under the 'interactive ' key of the options dictionary , substitute it for self.interactive ."
"for filepath in self . get template sources ( template name , template dirs ) :","call the method self.get_template_sources with 2 arguments template_name and template_dirs , for every filepath in the result ,"
import io,import module io .
urlconf = get urlconf ( ),call the function get_urlconf with an argument urlconf .
"def url ( parser , token ) :",define the function url with 2 arguments : parser and token .
import warnings,import module warnings .
"@ register . filter ( is  safe = True , needs autoescape = True )",return the result . decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
else :,"if not ,"
if self . fixture count == NUM_  and self . hide empty :,"if self.fixture_count equals integer 0 and self.hide_empty is true ,"
"if hasattr ( field . rel , STR_ ) :","if field.rel has an 'to ' attribute ,"
try :,"try ,"
urlconf = settings . ROOT URLCONF,substitute settings.ROOT_URLCONF for urlconf .
if form .  meta . fields :,"self.instance and unpacked dictionary kwargs . if form._meta.fields is true ,"
wrapper .   wrapped   = user function,substitute user_function for wrapper.__wrapped__ .
return output,return output .
"def Deserializer ( stream or string , ** options ) :",define the function Deserializer with arguments stream_or_string and unpacked dictionary options .
"def page ( self , number ) :",define the method page with self class instance and number as arguments .
"from django . core . management . sql import sql flush , emit post migrate signal",from django.core.management.sql import sql_flush and emit_post_migrate_signal into default name space .
if callable ( name ) :,"if name is callable object ,"
buffering = in t ( six . PY3 ),"convert six.PY3 to an integer , substitute it for buffering ."
except LookupError :,"if LookupError exception is caught ,"
except ImportError as exc :,"if ImportError , renamed to exc , exception is caught ,"
if not fname . startswith ( self .  dir ) or not os . path . exists ( fname ) :,"if fname doesnt start with self._dir and fname file path doesnt exists ,"
"self . loopvars , self . sequence = loopvars , sequence","substitute loopvars and sequence for self.loopvars and self.sequence , respectively ."
self . mod = old mod,substitute old_mod for self.mod .
self . cdata tag = tag . lower ( ),"use it and the re.I as the input arguments for function re.compile , put the result in the self.interesting . evaluate function tag.lower , without the arguments , put the result in the self.cdata_tag ."
return func,return func .
else :,"if not ,"
def value ( self ) :,define the method value with an argument self .
help text = help text html % force text ( field . help text ),"call the function force_text with an argument field.help_text , format help_text_html with it , substitute the result for help_text ."
"raise TemplateSyntaxError ( "" STR_ "" % bits [ NUM_ ] )","raise an TemplateSyntaxError exception with an argument string `` ' % s ' can not appear more than once in the same template '' ,"
from django . utils . module loading import import string,from django.utils.module_loading import import_string into default name space .
code = STR_,code is a string 'invalid '
from django . core . management . base import AppCommand,from django.core.management.base import AppCommand into default name space .
"def   init   ( self , * args , ** kwargs ) :","define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments ."
"if field . rel and is in stance ( field . rel , models . ManyToManyRel ) :","if field.rel is true and field.rel is an instance of models.ManyToManyRel ,"
for choice in self . field . choice cache :,"for every obj in result of the method self.queryset.all . for every choice in self.field.choice_cache ,"
for field in  parse date fmt ( ) :,"for every field in return value of the function _parse_date_fmt ,"
pass,do nothing .
" fields  = [ ( STR_ ,  OFFSET ) , ( STR_ , PVOID ) ]","_fields_ is a list containing 2 tuples : first tuple contains : string '_offset ' and _OFFSET , second contains : string 'Pointer ' and PVOID ."
"raise TemplateSyntaxError ( "" STR_ "" % ( taglib , e ) )","raise an TemplateSyntaxError exception with an argument string `` ' % s ' is not a valid tag library : % s '' ,"
return dict  [ key ],return value under key key of dict_ dictionary .
except ValueError :,if ValueError exception is caught .
"if hasattr ( response , STR_ ) and callable ( response . render ) :","if response has an attribute 'render ' and response.render is a callable object ,"
"def   init   ( self , stream or string , ** options ) :","define the method __init__ with 3 arguments : self , stream_or_string and unpacked dictionary options ."
"def  send ( self , email message ) :",define the method _send with arguments self and email_message .
"def get format ( format type , lang = None , use l10n = None ) :","define the function get_format with 3 arguments : format_type , lang set to None and use_l10n set to None ."
logging config func ( logging settings ),call the function logging_config_func with an argument logging_settings .
"raise CommandError ( "" STR_ "" % ( migration name , app label ) )","raise CommandError exception with `` Can not find a migration matching ' % s ' from app ' % s ' . `` ,"
use grouping = use grouping or force grouping,"otherwise substitute settings.USE_L10N for use_grouping . if use_grouping is true substitute it for use_grouping , otherwise substitute force_grouping for use_grouping ."
"except ( KeyError , AttributeError ) as exc :","if KeyError or AttributeError , renamed to exc , exceptions are caught ,"
self . unget ( chunk [ remaining : ] ),call the method self.unget with list containing first remaining elements of chunk as an argument .
"return time str + STR_ % ( hour , minute )","format string ' % +03d : % 02d ' with hour and minute , append it to time_str , return the result ."
"def  start relational field ( self , field ) :",define the method _start_relational_field with arguments self and field .
class DeclarativeFieldsMetaclass ( MediaDefiningClass ) :,derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass .
return content,return content .
"except ( ValueError , TypeError ) :","if TypeError or ValueError exceptions are caught ,"
try :,"try ,"
if result is not None :,"if result is not None ,"
"def pgettext ( context , message ) :",define the function pgettext with 2 arguments : context and message .
"self . stdout . write ( "" STR_ "" % ( app name , model .  meta . object name ) )","call the self.stdout.write method with string `` Processing % s. % s model\n '' as argument , with all occurrences of ' % s ' replaced with ,"
readline = property ( lambda self : self . file . readline ),"define lambda function that returns self.file.readline field , use it as an argument for property function , put the result in readline ."
"def compile string ( template string , or igin ) :",define the method compile_string with 2 arguments : template_string and origin .
"lookup str = callback .   module   + "" STR_ "" + callback .   name  ","join together callback.__module__ , character `` . '' and callback.__name__ , substitute the result for lookup_str ."
return False,return boolean False .
else :,"if not ,"
import datetime,import module datetime .
if tzinfo == STR_ :,"if tzinfo equals a string ' Z ' ,"
try :,"try ,"
"setattr ( Module six moves urllib response , attr . name , attr )",set attr.name attribute of Module_six_moves_urllib_response object to attr .
from   future   import absolute import,from __future__ import absolute_import into default name space .
"return do ntranslate ( singular , plural , number , STR_ )","call the function do_ntranslate with 3 arguments : singular , plural , number and string 'ngettext ' , return the result ."
ttl = force text ( ttl ),"call the function force_text with an argument ttl , substitute the result for ttl ."
"url = url . replace ( STR_ /  )
",replace every occurrence of '\\ ' in url with '/ ' .
"yield "" STR_ """,yield string `` # * Rearrange models ' order '' as the result .
"ns = "" STR_ """,ns is a string `` http : //www.w3.org/2005/Atom '' .
import codecs,import module codecs .
"return getattr ( self ,  assertCountEqual ) ( * args , ** kwargs )","get _assertCountEqual attribute of the self object , call the result with 2 arguments : unpacked list args ,"
"raise ValueError ( STR_ STR_ % ( config [ STR_ ] , e ) )","raise an ValueError exception with an argument string 'Unable to set target handler % r : % s ' ,"
self .  request = request,status set to None and current_app set to None . substitute request for self._request .
try :,"try ,"
"result = user function ( * args , ** kwds )","call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds , substitute the result for result ."
if not  cookie allows colon in names :,"if _cookie_allows_colon_in_names is False ,"
if not chunk size :,"if chunk_size is false ,"
"default error messages = { STR_ :   ( STR_ ) , STR_ :   ( STR_ ) , }","default_error_messages is an dictionary with 2 entries : return value of the function _ called with an argument string ,"
def   str   ( self ) :,define the method __str__ with an argument self .
"months = ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , )","months is a tuple with 12 elements : strings 'Jan ' , 'Feb ' , 'Mar ' , 'Apr ' , 'May ' , 'Jun ' , 'Jul ' , 'Aug ' , 'Sep ' , 'Oct ' , 'Nov ' and 'Dec ' ."
old field name = None,old_field_name is None .
class SplitDateTimeField ( MultiValueField ) :,derive the class SplitDateTimeField from the base class MultiValueField class .
return,return nothing .
self .  files = MultiValueDict ( ),self._files is an instance of MultiValueDict class .
primary keys = pks . split ( STR_ ),"split string pks by ' , ' , substitute the result for primary_keys ."
"  all   = [ STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , ]","__all__ is an list containing strings : 'activate ' , 'deactivate ' , 'override ' , 'deactivate_all ' , 'get_language ' ,"
"self . stdout . write ( "" STR_ "" )",write string `` Cleaning up temporary files.\n '' to self.stdout stream .
else :,"in not ,"
imported objects = { },imported_objects is an empty dictionary .
from django . conf import settings,from django.conf import settings into default name space .
"for i in range ( NUM_ , self . total form count ( ) ) :","call the method self.total_form_count , for every i in sequence of integers , from 0 to the previous result ,"
kwargs [ STR_ ] = self .  existing object ( pk ),"call the method self._existing_object with an argument pk , substitute the result for value under the 'instance ' key of kwargs ."
from django . utils import six,from django.utils import six into default name space .
else :,"if not ,"
"def render option ( self , selected choices , option value , option label ) :","return the result . define the method render_option with 4 arguments : self , selected_choices , option_value and option_label ."
if commit :,"if commit is true ,"
def deactivate ( ) :,define the function deactivate .
"return datetime . datetime . strptime ( force str ( value ) , format ) . time ( )","call the method datetime.datetime.strptime with 2 arguments : result of the function force_str called with an argument value ,"
"self . in valid block tag ( token , command , parse until )","call the method self.invalid_block_tag with 3 arguments : token , command and parse_until ."
"value converters = { STR_ : STR_ , STR_ : STR_ , }",value_converters is a dictionary with 2 entries : 'ext_convert ' for 'ext ' and 'cfg_convert ' for 'cfg ' .
pickled = None,substitute None for pickled .
file . seek ( NUM_ ),set the file position pointer at the beginning .
in stance . keyOrder = [ ],and unpacked dictionary kwargs . instance.keyOrder is an empty list .
 upload handlers = [ ],_upload_handlers is an empty list .
format type = force str ( format type ),"call the function force_str with an argument format_type , substitute the result for format_type ."
self . template cache = { },self.template_cache is an empty dictionary .
"lexer class , parser class = DebugLexer , DebugParser",substitute DebugLexer and DebugParser for lexer_class and parser_class .
"in dexes = connection . in trospection . get indexes ( cursor , table name )","call the method connection.introspection.get_relations with 2 arguments cursor , table_name and substitute the result for indexes ."
" BROWSERS DEPRECATED LOCALES = { STR_ : STR_ , STR_ : STR_ , }",_BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries : 'zh-hans ' for 'zh-cn ' and 'zh-hant ' for 'zh-tw ' .
return os . path . normpath ( path ),"call the os.path.normpath with argument path , return the result ."
exhaust ( self .  input data ),call the function exhaust with an argument self._input_data .
if not m :,"if m is false ,"
"for k , v in data . items ( ) :","call the method data.items , for every k and v in the result ,"
def getInnerText ( node ) :,where ' % s ' is replaced with node.nodeName and attr . define the function getInnerText with an argument node .
return zbuf . getvalue ( ),"call the method zbuf.getvalue , return the result ."
"args [ NUM_ : NUM_ ] = [ STR_ % arg for arg in args [ NUM_ ] . split ( "" STR_ "" ) ]","split first element of args by ' , ' , convert separated elements to strings , substitute the first 2 elements of the result ,"
translation . activate ( settings . LANGUAGE CODE ),"`` Starting development server at http : // % ( addr ) s : % ( port ) s/\n Quit the server with % ( quit_command ) s.\n '' , where ' '' % ( started_at ) s ' is replaced with now , ' % ( version ) s ' is replaced with return value of the method self.get_version , ' % ( settings ) r ' is replaced with settings.SETTINGS_MODULE , ' % ( addr ) s ' is replaced with self.addr if self._raw_ipv6 is true , or with self.addr if it is false , ' % ( port ) s ' is replaced with self.port and ' % ( quit_command ) s ' is replaced with quit_command . call the method translation.activate with an argument settings.LANGUAGE_CODE ."
"def   init   ( self , language ) :",define the method __init__ with 2 arguments : self and language .
"sys . modules [   name   + "" STR_ "" ] = sys . modules [   name   + "" STR_ "" ] = Module six moves urllib response (   name   + "" STR_ "" )","instantiate class Module_six_moves_urllib_response with an argument , string `` .moves.urllib.response '' appended to __name__ ,"
yield buf . read ( ),"and fileobj set to buf . read data from buf file stream , yield the result ."
raise,"raise an exception ,"
app list [ app config ] = None,value under the app_config key of the app_list is None .
 trans = Trans ( ),_trans is an instance of Trans class .
self .  read started = True,self._read_started is True .
"if domain and validate host ( domain , settings . ALLOWED HOSTS ) :","if domain is true and return value of the function validate_host called with 2 arguments : domain and settings.ALLOWED_HOSTS , evaluates to true ,"
def items ( self ) :,define the method items with an argument self .
delta = ( d - now ) if reversed else ( now - d ),"if reversed is True substitute difference of d and now for delta , if not substitute the difference of now and d for delta ."
for f in fields :,"for every f in fields ,"
for app config in app configs :,"for eery app_config in app_configs ,"
except ValueError :,"if ValueError exception is caught ,"
def delete first token ( self ) :,define the method delete_first_token with an argument self .
def avoid wrapping ( value ) :,define the function avoid_wrapping with an argument value .
return data,return data .
self . fed . append ( STR_ % name ),"format string ' & # % s ; ' with name , append it to self.fed ."
yield b . join ( self ),"join self into a bytes string , yield the result as the return value of the generator ."
url = smart urlquote ( STR_ % middle ),"call the function smart_urlquote with an argument string 'http : // % s ' formated with an argument middle , substitute the result for url ."
translated = translated % rhs,"format translated with rhs , substitute the result for translated ."
"def add item elements ( self , handler , item ) :","define the method add_item_elements with 3 arguments : self , handler and item ."
return s . get data ( ) + s . rawdata,"sum the result of the method s.get_data and s.rawdata , return the result ."
if request . method == STR_ :,"if request.method equals to string 'HEAD ' ,"
"def make key ( self , key , version = None ) :","define the function make_key with self class instance , key and version set to None as arguments ."
try :,"try ,"
if len ( args ) > NUM_ :,if length of args is greater than 4 .
class warn about renamed method ( object ) :,derive the class warn_about_renamed_method from object base class .
val = list ( val ),"convert val to an list , substitute it for val ."
"def getlist ( self , key ) :",define the method getlist with 2 arguments : self and key .
return datetime . fromtimestamp ( os . path . getmtime ( self . path ( name ) ) ),"call the function self.path with argument name , use the result as an argument for the call to the function os.path.getmtime ,"
finally :,"execute regardless of the exception being raised ,"
"parser . add argument ( STR_ , action = STR_ , help = STR_ )","call the method parser.add_option with 3 arguments : string ' -- traceback ' , action set to a string 'store_true ' ,"
media = Media ( ),media is an instance of Media class .
from django . contrib . auth import get user model,from django.contrib.auth import get_user_model into default name space .
message =   ( STR_ ),"`` ( ? : [ A-Z ] { 2,6 } \. ? | [ A-Z0-9- ] { 2 , } ( ? < ! - ) \. ? ) |\d { 1,3 } \.\d { 1,3 } \.\d { 1,3 } \.\d { 1,3 } |\ [ ? [ A-F0-9 ] * : [ A-F0-9 : ] +\ ] ? ) ( ? : :\d+ ) ? ( ? : :\d+ ) ? ( ? : / '' , `` ? | [ / ? ] \S+ ) $ '' and re.IGNORECASE , substitute the result for regex . call a function _ with a string 'Enter a valid value . ' as an argument , substitute the result for message ."
if max value is not None :,"if max_value is not None ,"
"return super ( PythonSerializer , self ) . getvalue ( )","call the getvalue method from the base class of the class PythonSerializer , return the result ."
  Y = r STR_,__Y is a raw string ' ( ? P < year > \d { 4 } ) ' .
import logging,import module logging .
self .  update errors ( e ),call the method self._update_errors with an argument e .
pathext = [ ],pathext is an list containing an empty string .
def  cache ( self ) :,define the method _cache with self class instance as an argument .
else :,"if not ,"
"def jython reloader ( main func , args , kwargs ) :","define the function jython_reloader with main_func , args and kwargs as arguments ."
from functools import wraps,from functools import wraps into default name space .
self .  update unget history ( len ( bytes ) ),call the method self._update_unget_history with length of bytes as an argument .
for hextet in ip str . split ( STR_ ) :,"split ip_str into parts by ' : ' , for every hextet in the result ,"
elif bmatch :,"otherwise if bmatch is true ,"
"value = self .  convert to charset ( value , STR_ , mime encode = True )","call the method self._convert_to_charset with arguments : header , string 'latin-1 ' and mime_encode set to boolean True ,"
attrs [ STR_ ] = self . max value,substitute self.max_value for the value under the 'max ' key of the attrs dictionary .
"from django . utils . translation import ugettext , ungettext",from django.utils.translation import ugettext and ungettext into default name space .
"options += [ ( s opt . get opt string ( ) , s opt . nargs ) for s opt in parser . option list ]","append to options a tuple containing 2 entries : result of the method s_opt.get_opt_string and s_opt.nargs ,"
except UnicodeDecodeError :,"if except UnicodeDecodeError exception is caught ,"
"raise CommandError ( "" STR_ "" "" STR_ "" "" STR_ "" % project name )","raise an exception CommandError , with argument string `` % r conflicts with the name of an existing Python module and can not be used as a project name . Please try another name . `` , where ' % r ' is replaced with project_name ."
"def unordered list ( value , autoescape = None ) :",define the function unordered_list with 2 arguments value and autoescape set to None .
return j,return j .
body msg = msg,substitute msg for body_msg .
resolver match = resolver . resolve ( request . path info ),call to the resolver.resolve method with request.path_info as an argument .
"from django . utils . encoding import force str , force text",from django.utils.encoding import force_str and force_text into default name space .
"condition = TemplateIfParser ( parser , bits ) . parse ( )","call the method parse from the instance of TemplateIfParser class , created with 2 arguments parser and bits , substitute the result for condition ."
class SafeData ( object ) :,derive the class SafeData from object base class .
"def write ( self , val ) :",define the method write with 2 arguments : self and val .
return True,return boolean True .
else :,"if not ,"
"super ( MultiValueDict , self ) .   setitem   ( key , list  )","call the method __setitem__ from the base class of the class MultiValueDict , with 2 arguments key and list_ ."
for path in all locale paths ( ) :,"call the function all_locale_paths , for every path is the result ,"
else :,"model._meta.app_label , model._meta.object_name , fk_name , respectively . if not ,"
if self . output transaction :,"if self.output_transaction is true ,"
"def usage ( self , subcommand ) :",define the method usage with arguments self and subcommand .
if i == NUM_  and not is  writable ( npath ( base path + STR_ ) ) :,if i equals to integer 0 and
return self . render ( ),"call the method self.render , return the result ."
del  active . value,delete _active.value .
"value = getattr ( opts , opt )","get opt attribute of the opts object , substitute it for value ."
"one percent re = re . compile ( r "" "" "" STR_ "" "" "" )","call the function re.compile with an argument raw string `` ( ? < ! % ) % ( ? ! % ) '' , substitute the result for one_percent_re ."
import django,import module django .
"if hasattr ( self , STR_ ) :","if self has an attribute '_choices ' ,"
compare to = nodelist true output = self . nodelist true . render ( context ),"call the method self.nodelist_true.render with an argument context , assign the result to compare_to and nodelist_true_output ."
page range = property (  get page range ),page_range is a property object with _get_page_range as a getter method .
dictreprs = STR_ . join ( repr ( d ) for d in self . dicts ),"join printable representation of d into a string separated with ' , ' , for every d in self.dicts , substitute the result for dictreprs ."
"DOTS = [ STR_ , * , STR_ , STR_ , STR_ , STR_ ]","tuple with 2 elements : ' [ ' and ' ] ' , tuple with 2 elements : ' & lt ' and ' & gt ' , tuple with 2 elements : ' '' ' and ' '' ' , and tuple with 2 elements : '\ '' and '\ '' . DOTS is a list with 6 elements : strings ' & middot ; ' , '* ' , '\u2022 ' , ' & # 149 ; ' , ' & bull ; ' and ' & # 8226 ; ' ."
"return "" STR_ "" % e","return an string `` [ Included template had syntax error : % s ] '' , where ' % s ' is replaced with e ."
self . empty permitted = empty permitted,otherwise substitute return value of the function _ called with an argument ' : ' for self.label_suffix . substitute empty_permitted for self.empty_permitted .
if num entries < self .  max entries :,"if num_entries is lesser than self._max_entries ,"
"return force str ( "" STR_ "" % ( self .   class   .   name   , self . name , self . content type ) )","substitute ' % s ' from string `` < % s : % s ( % s ) > '' with self.__class__.__name__ , self.name and self.content_type , respectively , use it as an argument for the call to the function force_str , return the result ."
"def smart bytes ( s , encoding = STR_ , strings only = False , errors = STR_ ) :","define function smart_bytes with s , encoding set to string 'utf-8 ' , strings_only set to False and errors set to string 'strict ' , as arguments ."
docs version = STR_,docs_version is a string 'dev ' .
from django . conf import settings,from django.conf import settings into default name space .
form .  errors [ NON FIELD ERRORS ] = self . error class ( [ self . get form error ( ) ] ),"call the method self.error_class with an argument list with a element : result of the method self.get_form_error ,"
self . filters [ name ] = filter func,substitute filter_func for value under the name key of self.filters dictionary .
data = serializer ( ) . dumps ( obj ),"call the serializer function , call the dumps method on the result with an argument obj , substitute result for data ."
else :,"if not ,"
"return [ m2m convert ( c ) for c in node . getElementsByTagName ( "" STR_ "" ) ]","called with n.getAttribute ( 'pk ' ) method . call the m2m_convert function with an argument c , for every c in return value of the method node.getElementsByTagName ,"
"def resolve template ( self , template ) :",define the method resolve_template with 2 arguments : self and template .
"return unicode ( s . replace ( r STR_ \ \ \ \  ) , ""unicode escape"" )
","replace every occurrence of raw string '\\ ' in s with a raw string '\\\\ ' , use the result and string `` unicode_escape '' ,"
if args :,"if args is true ,"
if values is None :,"if values is None ,"
unifunc . replace ( strfunc ),call the method unifunc.replace with an argument strfunc .
try :,"try ,"
"from django . core . management . utils import find command , popen wrapper",from django.core.management.utils import find_command and popen_wrapper into default name space .
"raise CommandError ( "" STR_ "" "" STR_ "" "" STR_ "" )","raise CommandError exception with string `` This script should be run from the Django Git checkout or your project or app tree , or with the settings module specified . `` , as argument ."
"return super ( BooleanField , self ) . to python ( value )","call the method to_python with an argument data from the base class of the class BooleanField , return the result ."
try :,"try ,"
"for k , v in six . iteritems ( kwargs ) :","call the function six.iteritems with an argument kwargs , for every k and v in the result ,"
"def   exit   ( self , exc type , exc value , traceback ) :","define the method __exit__ with 4 arguments : self , exc_type , exc_value and traceback ."
if unhandled params :,"if unhandled_params is true ,"
def reset format cache ( ) :,"tuple with 3 elements : strings ' % H : % M : % S ' , ' % H : % M : % S. % f ' and ' % H : % M ' for 'TIME_INPUT_FORMATS ' , tuple with 4 elements : strings ' % Y- % m- % d % H : % M : % S ' , ' % Y- % m- % d % H : % M : % S. % f ' , ' % Y- % m- % d % H : % M ' and ' % Y- % m- % d ' for 'DATETIME_INPUT_FORMATS ' . define the function reset_format_cache ."
if size is None :,"if size is None ,"
"def  set regex ( self , regex ) :",define the method _set_regex with arguments self and regex .
"def value from datadict ( self , data , files , name ) :","return the result . define the method value_from_datadict with 4 arguments : self , data , files and name ."
"parser . add argument ( STR_ , help = STR_ )",call the method parser.add_argument with 2 arguments : string ' -- template ' and help set to string 'The path or URL to load the template from . ' .
i = NUM_,i is integer 0 .
parser . add argument ( STR_ ),call the method parser.add_argument with an argument string ' -- settings ' .
root = nonlocal root [ NUM_ ],substitute first element of nonlocal_root for root .
except DatabaseError as e :,"if DatabaseError , renamed to e , exception is caught ,"
"def format ( number , decimal sep , decimal pos = None , grouping = NUM_ , thousand sep = , force grouping = False ) :","define the function format with 6 arguments : number , decimal_sep , decimal_pos set to None , grouping set to integer 0 ,"
def get resolver ( urlconf ) :,define the function get_resolver with an argument urlconf .
output . append ( last row ),"empty string for 'field ' , empty string for 'help_text ' and html_class_attr for html_class_attr . append last_row to output ."
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'title ' and value under the 'title ' key of the item dictionary .
if i >= self . in itial form count ( ) and not form . has changed ( ) :,"if i is greater than or equal to the result of the method self.initial_form_count ,"
self . add fallback ( default translation ),call the method self.add_fallback with an argument default_translation .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
filename = file,substitute file for filename .
"return AutoEscapeControlNode ( ( arg == STR_ ) , nodelist )","return an instance of AutoEscapeControlNode with 2 arguments : boolean exception arg equals to string 'on ' , and nodelist ."
class JSONSerializer ( object ) :,derive the class JSONSerializer from the object base class .
for f in opts . fields :,"for every f in opts.fields ,"
else :,"if not ,"
from django . utils . html import escape,from django.utils.html import escape into default name space .
return SpacelessNode ( nodelist ),"return an instance of a SpacelessNode class , created with an argument nodelist ."
"def save ( self , save m2m = True , using = None ) :","self.object._meta.object_name and self.object.pk , respectively . define the method save , with 3 arguments : self , save_m2m set to boolean True and using set to boolean True ."
 moved attributes = [ ],_moved_attributes is an empty list .
class  LazyDescr ( object ) :,derive class _LazyDescr from the object base class .
if exclude and f . name in exclude :,"if exclude is true and f.name is contained in exclude ,"
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ , params = { STR_ : val } , )","raise an ValidationError with 3 arguments : value under the 'invalid_choice ' key of the self.error_messages dictionary ,"
"final output . extend ( connection . creation . sql for pending references ( model , style , pending references ) )","use the result as an argument for the call to the method final_output.extend . call the method connection.creation.sql_for_pending_references with 3 arguments : refo , style and pending_references ,"
"return getattr ( self .  out , name )","get name attribute of the self._out object , return it ."
"def is  ignored ( path , ignore patterns ) :",define the function is_ignored with arguments path and ignore_patterns .
for name in namelist :,"for every name in namelist ,"
return Literal ( value ),"return an instance of Literal class , created with an argumen value ."
kwargs [ STR_ ] = self . in itial extra [ i - self . in itial form count ( ) ],"subtract result of the method self.initial_form_count from i , use the result as an index to get the element from self.initial_extra ,"
"from django . db import models , DEFAULT DB ALIAS",from django.db import models and DEFAULT_DB_ALIAS into default name space .
from django . apps import apps,from django.apps import apps into default name space .
content = template file . read ( ),"call the method template_file.read , substitute it for content ."
"if item [ "" STR_ "" ] and item [ "" STR_ "" ] :","if values under `` author_name '' and `` author_email '' keys of the item dictionary are both true ,"
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % name )","raise an TemplateSyntaxError exception `` ' % s ' is decorated with takes_context=True so it must have a first argument of 'context ' '' ,"
self .  leftover = b,self._leftover is an empty string .
number value = rhs,substitute rhs for number_value .
"for name , value in self . extra headers . items ( ) :","for every name and value in return value of the method self.extra_headers.items ,"
widget = Select,substitute Select for widget .
"lookups . appendlist ( pattern . name , ( bits , p pattern , pattern . default args ) )","call the method lookups.appendlist with 2 arguments : pattern.name and a tuple containing 3 elements : bits , p_pattern ,"
"def in cr ( self , key , delta = NUM_ , version = None ) :","define the method incr with 4 arguments , self class instance , key , delta defaulting to integer 1 and version defaulting to None ."
"os . chmod ( path , stat . S IWRITE )",change access mode of path to stat.S_IWRITE mode .
from django . db import DEFAULT DB ALIAS,from django.db import DEFAULT_DB_ALIAS into default name space .
from django . forms . utils import ErrorList,from django.forms.utils import ErrorList into default name space .
def urlsafe base64 decode ( s ) :,define the function urlsafe_base64_decode with an argument s .
"def choice ( self , obj ) :",define the method choice with 2 arguments : self and obj .
return klass,return klass .
form field = self . fields [ field ],substitute value under the field key of the self.fields dictionary for form_field .
toktext = match . group ( name ),"call the method match.group with an arugument name , substitute the result for toktext ."
"security logger . error ( force text ( e ) , extra = { STR_ : NUM_ , STR_ : request } )","function logging.getLogger , assign the result to the security_logger . evaluate the function force_text with e as an argument , extra is an dictionary with two pair of elements ,"
if unpack :,"if unpack is true ,"
return self . dicts [ - NUM_ ] [ key ],return value under the key key of dictionary in last element of self.dicts .
"  all   = ( STR_ , STR_ , STR_ )","__all__ is a tuple containing strings 'BaseFormSet ' , 'formset_factory ' and 'all_valid ' ."
def get version ( version = None ) :,define the function get_version with version set to None as argument .
self . mod = new mod,substitute new_mod for self.mod .
return False,"return boolean False ,"
EscapeString = EscapeBytes,substitute EscapeBytes for EscapeString .
except InvalidOperation :,"if InvalidOperation exception is caught ,"
return,return an empty string .
self . find template cache . clear ( ),call the method self.find_template_cache.clear .
"shutil . move ( the path , guessed path )",call the function shutil.move with arguments the_path and guessed_path .
elif len ( app labels ) > NUM_ :,"otherwise if length of app_labels is greater than integer 1 ,"
logging . captureWarnings ( True ),call the method logging.captureWarnings with an argument boolean True .
class BaseCache ( object ) :,derive the class BaseCache from the object base class .
@ register . tag ( for ),"for every bit in bits . register.tag decorator function with an argument 'for ' ,"
"@ register . filter ( is  safe = True , needs autoescape = True )",decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
if refto in known models :,"if refto is contained in known_models ,"
"if hasattr ( field value , STR_ ) and not is in stance ( field value , six . text type ) :","if field_value has an attribute '__iter__ ' and is not an instance of six.text_type object ,"
return FILE INPUT CONTRADICTION,return FILE_INPUT_CONTRADICTION .
if number > self . num pages :,"if number is greater than self.num_pages ,"
class OutputWrapper ( object ) :,derive the OutputWrapper class from the object base class .
else :,"if not ,"
lib = get library ( taglib ),"call the function get_library with an argument taglib , substitute the result for lib ."
number = . join ( reversed ( digits ) ),"reverse element order of dicts , join them in a string , substitute the result for number ."
"result . append ( self . create token ( bit , in  tag ) )","call the method self.create_token with 2 arguments bit and in_tag , append the result to result ."
"def get ( self , key , otherwise = None ) :","define the method got with 3 arguments : self , key and otherwise set to None ."
errors . append ( field . error messages [ STR_ ] ),"get the value under the 'incomplete ' key of the field.error_messages dictionary , append it to errors ."
"raise VariableDoesNotExist ( "" STR_ "" "" STR_ "" , ( bit , current ) )","raise an VariableDoesNotExist exception with an argument string `` Failed lookup for key [ % s ] in % r '' ,"
"def   delitem   ( self , header ) :",define the method __delitem__ with 2 arguments : self and header .
"super ( JsLexer , self ) .   init   ( self . states , STR_ )",call the method __init__ with 2 arguments : self.states and string 'reg ' from the base class of the class JsLexer .
"token = Token ( TOKEN BLOCK , block content )","token is an instance of Token class , created with 2 arguments : TOKEN_BLOCK and block_content ."
from wsgiref import simple server,from wsgiref import simple_server into default name space .
return I18N MODIFIED if filename . endswith ( STR_ ) else FILE MODIFIED,"if filename ends with string '.mo ' return I18N_MODIFIED , otherwise return FILE_MODIFIED ."
request middleware = [ ],request_middleware is an empty list .
return self . data . is oformat ( ),"call the method self.data.isoformat , return the result ."
"self . stdout . write ( "" STR_ "" )","write string `` all instances of the codebase have applied the migrations you squashed , '' to self.stdout ."
"def   init   ( self , * args , ** kwargs ) :","define the __init__ method with arguments : self , unpacked list args and unpacked dictionary kwargs ."
"if is in stance ( attr , MovedModule ) :",if attr is an instance of MovedModule .
base64d = b STR_ + base64d,prefix the base64d with a ' . ' character .
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'uri ' and value under the 'author_link ' key of the self.feed dictionary .
value = self . literal,substitute self.literal for value .
except ImportError :,"if ImportError exception is caught ,"
klass .   new   = staticmethod (   new   ),"and obj.__class__.__name__ , first element of obj._constructor_args and second element of obj._constructor_args . klass.__new__ is a static method of the function __new__ ."
class IfEqualNode ( Node ) :,derive the class IfEqualNode from Node base class .
self . hashvalue = hash ( tup ),"get the hash value of the tup , substitute it for self.hashvalue ."
"output . append ( format html ( STR_ , force text ( option value ) ) )","call the function format_html with 2 arguments : string ' < optgroup label= '' { 0 } '' > ' and return value of the function force_text ,"
"def save ( self , commit = True ) :",define the method save with 2 arguments : self and commit set to boolean True .
width = six . text type ( len ( six . text type ( len ( lines ) ) ) ),"call the function six.text_type with length of lines as an argument ,"
if custom sql :,"if custom_sql is empty ,"
if self . verbosity >= NUM_ :,"interactive set to boolean False , database set to db , reset_sequences set to boolean False , inhibit_post_migrate set to boolean True . if self.verbosity is greater or equal to integer 1 ,"
 empty value =,_empty_value is an empty string .
return result,return result .
weight = NUM_,weight is an integer 0 .
locations = [ ],locations is an empty list .
self . in teresting =  html parser . in teresting cdata,set field interesting for this class instance to interesting_cdata from module _html_parser .
duplicate . dicts = self . dicts [ : ],hard copy list self.dicts to duplicate.dicts .
"cursor . execute ( "" STR_ "" "" STR_ "" % table , [ b64encoded , exp , key ] )","call the method cursor.execute with string `` UPDATE % s SET value = % % s , expires = % % s WHERE cache_key = % % s '' as argument ,"
"command dir = os . path . join ( management dir , STR_ )","join management_dir and string 'commands ' into a file path name , substitute it for command_dir ."
"has old option = hasattr ( self , STR_ )","if self has an 'requires_model_validation ' attribute , has_old_option is boolean True , otherwise it is boolean False ."
class BaseCommand ( object ) :,use the result as an argument for the call to the function self._out.write . derive the BaseCommand class from the object base class .
"t = get template ( template name , dirs )","call the function get_template with 2 arguments : template_name and dirs , substitute the result for t ."
class RssFeed ( SyndicationFeed ) :,derive the class RssFeed from the SyndicationFeed base class .
elif cwords [ NUM_ ] in subcommands and cwords [ NUM_ ] ! = STR_ :,"with an argument curr , sort the result and join it in a list separated with blank spaces , print it to the standard output . otherwise if first element of cwords is contanied in subcommands and is not equal to string 'help ' ,"
return self .  body,return self._body .
except ImportError :,"if ImportError exception is caught ,"
data [ field . name ] = value,"call to the field.to_python method , substitute the result for value . substitute value for value under the field.name key of the data dictionary ."
"if is in stance ( file name , Template ) :",if file_name is an instance of Template class .
if name not in parser .  namedCycleNodes :,"where ' % s ' is replaced with name . if name is not contained in parser._namedCycleNodes ,"
"end , next = boundary","substitute elements of tuple boundary to end and next , respectively ."
self . file name = file name,substitute file_name for self.file_name .
"child nodelists = ( STR_ , STR_ )",child_nodelists is a tuple with 2 initial elements : strings 'nodelist_true ' and 'nodelist_false ' .
except StandardError as e :,"if StandardError , renamed to e , exception is caught ,"
return loader . select template ( template ),"call the method loader.select_template with an argument template , return the result ."
if not cls :,"if cls is false ,"
from django . utils . safestring import mark safe,from django.utils.safestring import mark_safe into default name space .
continue,skip this iteration of he smallest enclosing loop .
return  wrapper,return _wrapper .
return False,return boolean False .
"return ( t [ NUM_ ] . lower ( ) , True )","return first element of t converted to lowercase and boolean True , as a tuple ."
if self . method ! = STR_ :,"if self.method is not equal to string 'POST ' ,"
"name , ( value , params ) =  parse header ( line )","call the method _parse_header with an argument line , assign the result to name and tuple with 2 elements : value and params , respectively ."
"def   init   ( self , data , encoder = DjangoJSONEncoder , safe = True , ** kwargs ) :","define the method __init__ with 5 arguments : self , data , encoder set to DjangoJSONEncoder , safe set to boolean True ,"
numbers = [ MigrationAutodetector . parse number ( migration . name ) for migration in merge migrations ],"numbers is a list containing return value of the MigrationAutodetector.parse_number method called with an argument migration.name ,"
mw instance = mw class ( ),"call the mw_class function , store the result in the mw_instance ."
current chunk = None,current_chunk is None .
if member . is dir ( ) :,"if member is a directory ,"
"warnings . warn ( "" STR_ "" , RemovedInDjango19Warning , stacklevel = NUM_ )","call the function warnings.warn with 3 arguments : string `` SortedDict is deprecated and will be removed in Django 1.9 . `` ,"
"def configure filter ( self , config ) :",define the method configure_filter with 2 arguments : self and config .
from decimal import Decimal,from decimal import Decimal into default name space .
"def close ( self , ** kwargs ) :","define the close method with 2 arguments , self and dictionary of argument pairs kwargs ."
is  compressed = True,is_compressed is boolean True .
return STR_ % self . parent name . token,"return an string ' < ExtendsNode : extends % s > ' , where ' % s ' is replaced with self.parent_name.token ."
urlconf repr = repr ( self . urlconf name ),"create a printable representation of self.urlconf_name object , substitute it for urlconf_repr ."
"path info = get bytes from wsgi ( environ , STR_ , / )","call the function get_bytes_from_wsgi with environ , string 'PATH_INFO ' and character '/ ' as arguments , substitute the result for path_info ."
lineno comment map [ comment lineno cache ] = [ ],value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string .
"self . compression formats [ STR_ ] = ( bz2 . BZ2File , STR_ )",substitute tuple with 2 elements : bz2.BZ2File and string ' r ' for value under the 'bz2 ' key of the self.compression_formats dictionary .
return [ f [ : - NUM_ ] for f in os . listdir ( command dir ) if not f . startswith ( STR_ ) and f . endswith ( STR_ ) ],"for every f in return value of the os.listdir function called with an argument command_dir , append f without 3 last elements to a list , only if f doesnt start with character ' _ ' and doesnt ends with string '.py ' , return the resulting list ."
length = in t ( arg ),substitute arg converted into an integer for length .
def slugify ( value ) :,define the function slugify with an argument value .
result = new result,substitute new_result for result .
"context = Context ( dict ( options , ** { base name : name , base directory : top dir , STR_ : docs version , } ) , autoescape = False )","context is an instance of a class Context , created with 2 arguments : dictionary created by apllying options to unpacked dictionary containing 3 entries :"
from django . conf import settings,from django.conf import settings into default name space .
class FixedOffset ( tzinfo ) :,derive the class FixedOffset from the tzinfo base class .
"old path = path . join ( root , filename )","join root and filename into a file path , substitute it for old_path ."
"def   init   ( self , * args , ** kwargs ) :","`` No file was submitted . Check the encoding type on the form . '' for 'invalid ' , return value of the function _ called with an argument , string `` No file was submitted . '' for 'missing ' , return value of the function _ called with an argument `` The submitted file is empty . `` , for 'empty ' , return value of the function ungettext_lazy called with 3 arguments : string 'Ensure this filename has at most % ( max ) d character ( it has % ( length ) d ) . ' , string 'Ensure this filename has at most % ( max ) d characters ( it has % ( length ) d ) . ' and string 'max ' for 'max_length ' , and return value of the function _ called with an argument string , 'Please either submit a file or check the clear checkbox , not both . ' for 'contradiction ' . define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
"handlers = config . get ( STR_ , EMPTY DICT )","get config dictionary element under 'handlers ' key , if it exists substitute it for handlers , if not , handlers is EMPTY_DICT ."
"raise InvalidCacheBackendError ( "" STR_ "" % ( backend , e ) )","raise and exception InvalidCacheBackendError with string `` Could not find backend ' % s ' : % s '' as argument , replace ' % s ' with backend and e , respectively ."
if not unicodedata . combining ( char ) :,"call the method unicodedata.combining with an argument char , if it evaluates to false ,"
class ManagementForm ( Form ) :,derive the class ManagementForm from the Form base class .
"new class = ( super ( DeclarativeFieldsMetaclass , mcs ) .   new   ( mcs , name , bases , attrs ) )","call the method __new__ from the base class of the class DeclarativeFieldsMetaclass , with 4 arguments : mcs , name , bases and attrs ."
elif self .  delegate text :,"otherwise if self._delegate_text is true ,"
return self .  size,return self._size .
self .  assert mutable ( ),call the method self._assert_mutable .
def cleaned data ( self ) :,define the method cleaned_data with an argument self .
return len ( self . items ),return length of self.items .
from django . core . files import File,from django.core.files import File into default name space .
cache . close ( ),call the function cache.close .
return force text ( settings . FORCE SCRIPT NAME ),"evaluate the force_text function with settings.FORCE_SCRIPT_NAME as argument , return the result ."
def advance iterator ( it ) :,define the function advance_iterator with an argument it .
"raise TemplateSyntaxError ( "" STR_ "" % args [ - NUM_ ] )","raise an TemplateSyntaxError exception with an argument string `` Only 'silent ' flag is allowed after cycle 's name , not ' % s ' . `` ,"
def read ( self ) :,define the method read with an argument self .
elif options [ STR_ ] :,"otherwise if value under the key 'all ' of the options dictionary is true ,"
"def find fixtures ( self , fixture label ) :",define the method find_fixtures with arguments : self and fixture_label .
self . deleted objects = [ ],self.deleted_objects is an empty list .
"newline = "" STR_ """,substitute newline character for newline .
attrs plus = self . attrs . copy ( ),"call the method self.attrs.copy , substitute the result for attrs_plus ."
"yaml . dump ( self . objects , self . stream , Dumper = DjangoSafeDumper , ** self . options )","call the function yaml.dump with 4 arguments : self.objects , self.stream , Dumper=DjangoSafeDumper and unpacked dictionary self.options ."
else :,"if not ,"
pass,do nothing .
"ipv4 address = "" STR_ "" % ( in t ( hextets [ NUM_ ] [ NUM_ : NUM_ ] , NUM_ ) , in t ( hextets [ NUM_ ] [ NUM_ : NUM_ ] , NUM_ ) , in t ( hextets [ NUM_ ] [ NUM_ : NUM_ ] , NUM_ ) , in t ( hextets [ NUM_ ] [ NUM_ : NUM_ ] , NUM_ ) , )","ipv4_address is a string `` % d. % d. % d. % d '' formated with first 2 elements of seventh element of hextets converted into hexadecimal number ,"
def   nonzero   ( self ) :,define the method __nonzero__ with argument self .
"raise InvalidCacheBackendError ( "" STR_ "" % alias )","raise and exception InvalidCacheBackendError with string `` Could not find config for ' % s ' in settings.CACHES '' as argument , replace ' % s ' with alias ."
for key in self . keyOrder :,"for every key in self.keyOrder ,"
return obj,return obj .
@ register . tag,"register.tag decorator ,"
def rss attributes ( self ) :,define the method rss_attributes with an argument self .
"if is in stance ( template name , ( list , tuple ) ) :","if template_name is an instance of list or tuple types ,"
"def extend nodelist ( self , nodelist , node , token ) :","define the method extend_nodelist with 4 arguments : self , nodelist , node and token ."
else :,"if not ,"
"self . attach ( filename , content , mimetype )","call the method self.attach with arguments filename , content and mimetype ."
class Command ( TemplateCommand ) :,derive the class Command from the TemplateCommand base class .
class Media ( object ) :,derive the class Media from the object base class .
class MinLengthValidator ( BaseValidator ) :,derive the class MinLengthValidator form the BaseValidator base class .
register = Library ( ),register is an instance of Library class .
while current chunk ! = b :,"as long as current_chunk is not an empty string ,"
vary headers = cc delim re . split ( response [ STR_ ] ),"split the string cc_delim_re with value under the key 'Vary ' of response dictionary as delimiter , substitute result for vary_headers ."
"return ( fp . read ( ) . decode ( settings . FILE CHARSET ) , filepath )","read file fp , call the method decode on the result with an argument settings.FILE_CHARSET , return tuple containing 2 elements ,"
if e . errno == errno . ENOENT :,"if e.errno equals to errno.ENOENT ,"
lang code = request . session . get ( LANGUAGE SESSION KEY ),"get the value under the LANGUAGE_SESSION_KEY key of the request.session dictionary , substitute it for lang_code ."
if six . PY3 :,"if six.PY3 is boolean True ,"
"raise TypeError ( "" STR_ "" "" STR_ "" )",raise an TypeError with an argument string `` The argument ` field ` must be ` None ` when the ` error ` argument contains errors for multiple fields . `` .
"token . source = self . or igin , source","substitute the result for token . assign self.origin , source to token.source ."
if content disposition :,"if content_disposition is true ,"
if options [ STR_ ] and options [ STR_ ] :,"if values under the 'app_label ' and 'migration_name ' keys of the options dictionary are True ,"
pass,do nothing .
with self .  lock . reader ( ) :,"call the self._lock.reader method , with the result perform the following ,"
if six . PY2 :,"if six.PY2 is true ,"
match = kwarg re . match ( bits [ NUM_ ] ),"call the method kwarg_re.match with an argument first element of bits , substitute the result for match ."
self . filters . update ( lib . filters ),update self.filters dictionary with lib.filters .
except TemplateDoesNotExist :,"if TemplateDoesNotExist exception is caught ,"
class ModelMultipleChoiceField ( ModelChoiceField ) :,"if the result is equal to the result of the call to the function force_text with data_value as an argument , return boolean True , otherwise return boolean False . derive the class ModelMultipleChoiceField from the ModelChoiceField base class ."
elif token . token type == NUM_ :,"and token . otherwise if token.token_type equals integer 1 ,"
b64encoded = b64encoded . decode ( STR_ ),"call the method b64encoded.decode with string 'latin1 ' as argument , substitute the result for b64encoded ."
if html message :,"message , settings.SERVER_EMAIL , list of second elements of a for every a in settings.Managers and connection set to connection , as arguments , assign the result to mail . if html_message is true ,"
top dir = os . path . abspath ( path . expanduser ( target ) ),"ge the absolute path of the return value of the function path.expanduser with the argument target , substitute it for top_dir ."
return replacement,return replacement .
yield self [ name ],"get the value under the name key of the self dictionary , yield it as the return value of the generator ."
def supports color ( ) :,"define the function supports_color , without arguments ."
"return ContextDict ( self , * args , ** kwargs )","instantiate class ContextDict with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , return it ."
dirs . extend ( list ( settings . FIXTURE DIRS ) ),"convert settings.FIXTURE_DIRS to a list , extend dirs by it ."
pass,do nothing .
return  trans . gettext ( message ),call the method _trans.gettext with an argument message .
"return "" | "" . join ( prefix + re . escape ( c ) + suffix for c in choices . split ( ) )","for every c in choices split into words , concatenate prefix , result of the function re.escape with an argument c and suffix ,"
path = str ( path ),"convert path to a string , substitute the result for path ."
known models . add ( model ),use the result as an argument for the call to the method final_output.extend . add model to known_models set .
from django . utils import six,from django.utils import six into default name space .
try :,"where ' % s ' is replaced by lookup_view . try ,"
"WEEKDAYS ABBR = { NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) }","result of the call to the function _ with an argument string 'Tuesday ' for 1 , result of the call to the function _ with an argument string 'Wednesday ' for 2 , result of the call to the function _ with an argument string 'Thursday ' for 3 , result of the call to the function _ with an argument string 'Friday ' for 4 , result of the call to the function _ with an argument string 'Saturday ' for 5 , and result of the call to the function _ with an argument string 'Sunday ' for 6 . WEEKDAYS_ABBR is an dictionary with 7 entries : result of the call to the function _ with an argument string 'Mon ' for 0 ,"
"msg = "" STR_ "" % self . program","msg is a string `` Execution of % s failed '' , with ' % s ' replaced by self.program ."
return list ( value ),return value converted into a list .
class TimeFormat ( Formatter ) :,derive the class TimeFormat from the base class Formatter .
get = STR_,get is a string ' < could not parse > ' .
return [ ],return an empty list .
import in spect,import module inspect .
return self .  wrapped .   dict  ,return self._wrapped.__dict__ .
return value . strip ( ),"strip whitespaces from both sides of the value , return the result ."
"from django . utils . six . moves . urllib . parse import quote , unquote , urlsplit , urlunsplit","from django.utils.six.moves.urllib.parse import quote , unquote , urlsplit and urlunsplit into default name space ."
def  itervalues ( self ) :,define the method _itervalues with an argument self .
"from django . utils . encoding import smart text , force text , python 2 unicode compatible","from django.utils.encoding import smart_text , force_text and python_2_unicode_compatible into default name space ."
"self . stdout . write ( "" STR_ "" % model .  meta . db table )","call the self.stdout.write method with string `` Creating table % s\n '' as argument , with all occurrences of ' % s ' replaced with model._meta.db_table ."
common prefix = prefix,substitute prefix for common_prefix .
return timezone . tzname ( None ),"call the method timezone.tzname with an argument None , return the result ."
try :,"try ,"
self .  stream = stream,substitute stream for self._stream .
"return json . dumps ( { f : e . get json data ( escape html ) for f , e in self . items ( ) } )","call the method json.dumps with a dictionary generate with an expression as an argument , return value of the function e.get_json_data ,"
sign = -,sign is a string '- ' .
tried = [ ],tried is an empty list .
from django . utils import six,from django.utils import six into default name space .
"defaults = { STR_ : self . auto id , STR_ : self . add prefix ( i ) , STR_ : self . error class , }","defaults is an dictionary with 3 initial entries : self.auto_id for 'auto_id ' , result of the call to the method self.add_prefix ,"
if csrf token == STR_ :,"if csrf_token equals string 'NOTPROVIDED ' ,"
self .  errors = ErrorDict ( ),self._errors is an instance of ErrorDict .
if value ! = :,"if value is not equal to an empty string ,"
def set script prefix ( prefix ) :,define the function set_script_prefix with an argument prefix .
"return force str ( STR_ % ( request .   class   .   name   , path , six . text type ( get ) , six . text type ( post ) , six . text type ( cookies ) , six . text type ( meta ) ) )","call the function force_str with an argument string ' < % s\npath : % s , \nGET : % s , \nPOST : % s , \nCOOKIES : % s , \nMETA : % s > ' ,"
"upload = super ( ClearableFileInput , self ) . value from datadict ( data , files , name )","call the method value_from_datadict from the base class of the class ClearableFileInput ,"
else :,"if not ,"
else :,"if not ,"
except AttributeError :,"if AttributeError exception is caught ,"
timeval = time . time ( ),"call the function time.time , substitute the result for timeval ."
if not  serializers :,"f _serializers is false ,"
if settings . TEMPLATE STRING IF INVALID :,"if settings.TEMPLATE_STRING_IF_INVALID is true ,"
"return re . sub ( r STR_ , , force text ( value ) )","call the method re.sub with 3 arguments : raw string ' & ( ? : \w+| # \d+ ) ; ' , empty string and result of the function force_text ,"
"warnings . warn ( STR_ STR_ , RemovedInDjango19Warning , stacklevel = NUM_ )",call the function warnings.warn with 3 arguments : string 'Using SplitDateTimeWidget with DateTimeField is deprecated . '
import os,import module os .
"raise ValueError ( STR_ STR_ % ( name , e ) )",raise an ValueError exception with an argument string 'Unable to configure filter % r : % s ' formated with name and e .
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
if settings . USE I18N :,"if settings.USE_I18N is true ,"
"if is in stance ( s , six . text type ) :","if s is the instance of the object six.text_type ,"
if options . get ( STR_ ) :,"if value under the 'load_initial_data ' key of the options dictionary is true ,"
from django . utils import six,from django.utils import six into default name space .
pythonrc = os . path . expanduser ( pythonrc ),"call the function os.path.expanduser with an argument pythonrc , substitute the result for pythonrc ."
pending references = { },"add model to a set , substitute the result for known_models . pending_references is an empty dictionary ."
except KeyError :,"if KeyError exception is caught ,"
 active = local ( ),"call the method local , substitute the result for _active ."
"def   init   ( self , format string ) :",define the method __init__ with 2 arguments : self and format_string .
from django . utils . functional import allow lazy,from django.utils.functional import allow_lazy into default name space .
"t = super ( SafeText , self ) .   add   ( rhs )","call the __add__ method with an arguments rhs from the base class of the class SafeText , substitute the result for t ."
if item date :,"if item_date is true ,"
weight += NUM_,increment weight by integer 2 .
hidden widget = SplitHiddenDateTimeWidget,substitute SplitHiddenDateTimeWidget for hidden_widget .
"def Deserializer ( stream or string , ** options ) :",define the function Deserializer with 2 arguments : stream_or_string and unpacked dictionary options .
"lines [ i ] = ( "" STR_ "" + width + "" STR_ "" ) % ( i + NUM_ , escape ( line ) )","concatenate string ' % 0 ' , width and string `` d. % s '' , format the previous string with i incremented by 1 ,"
"if module has submodule ( app config . module , "" STR_ "" ) :",if call to the function module_has_submodule with app_config.module and `` management '' evaluates to True .
"objects = serializers . deserialize ( ser fmt , fixture , using = self . using , ignorenonexistent = self . ignore )","substitute ' % s ' with ser_fmt , fixture_name and return value of the function humanize called with an argument fixture_dir . call the method serializers.deserialize with 4 arguments : ser_fmt , fixture , using set to self.using ,"
"def  create attachments ( self , msg ) :",define the method _create_attachments with arguments self and msg .
current timezone = timezone . get current timezone ( ),"call the function timezone.get_current_timezone , substitute the result for current_timezone ."
class LimitedStream ( object ) :,"derive class LimitedStream from the object base class , making it a new-style class ."
def   text cast ( self ) :,define the method __text_cast with an argument self .
elif t . token type == TOKEN COMMENT :,"otherwise if t.token_type equals TOKEN_COMMENT ,"
has bz2 = False,has_bz2 is boolean False .
day field = STR_,day_field is a string ' % s_day ' .
self . or igin = or igin,substitute origin for self.origin .
return plist,return plist .
"self . xml . endElement ( "" STR_ "" )",call the method self.xml.endElement with an argument string 'field ' .
def decorator from middleware ( middleware class ) :,define the function decorator_from_middleware with an argument middleware_class .
in t part gd += thousand sep,increment int_part_gd by thousand_sep .
self . position += len ( output ),increment self.position by length of output .
return force text ( unquote plus ( force str ( quoted url ) ) ),"call the function force_str with an argument quoted_url , use the result as an argument for the call to the function unquote_plus ,"
return doy,return doy .
return,"return an empty string ,"
valid = True,valid is boolean True .
"raise TypeError ( "" STR_ "" )",raise an TypeError exception with an argument string `` Non-integer base36 conversion input . `` .
from django . core import checks,from django.core import checks into default name space .
if value in self . empty values :,"if value is contained in self.empty_values ,"
"def center ( value , arg ) :",define the function center with 2 arguments value and arg .
return value . ljust ( in t ( arg ) ),"call the method value.ljust with an argument , arg converted into a integer , return the result ."
"parser . add argument ( STR_ , STR_ , default = STR_ , dest = STR_ , help = STR_ )","dest as a string 'exclude ' , action as a string 'append ' and help as a string 'Locales to exclude . Default is none . Can be used multiple times. ' . call the method parser.add_argument with 5 arguments : string ' -- domain ' , string '-d ' , default as a string 'django ' ,"
"val = self .  cache . decr ( key , delta )","call the method self._cache.decr with key and delta as arguments , substitute the result for val ."
"total forms = max ( in itial forms , self . min num ) + self . extra","get the element with maximal value between initial_forms and self.min_num , add self.extra to it , substitute the result for total_forms ."
"def process ( self , command , domain ) :","define the method process with 3 arguments : self , command and domain ."
"setattr ( cls , k , meth )",set k attribute of cls object to meth .
def available attrs ( fn ) :,define the function available_attrs with an argument fn .
expanded template = path . normpath ( expanded template ),"call the method path.normpath with an argument expanded_template , substitute it for expanded_template ."
for item in six . iteritems ( dict  ) :,"call the function six.iteritems with an argument dict_ , for every item in the result ,"
"def   init   ( self , widgets , attrs = None ) :","define the method __init__ with 3 arguments : self , widgets and attrs set to None ."
if len ( t ) > NUM_ :,"if length of t is greater than integer 1 ,"
except smtplib . SMTPException :,"if smtplib.SMTPException exception is caught ,"
self [ key ] = result,substitute result for value under key key of self dictionary .
"if gettext module . find ( STR_ , path , [ to locale ( lang code ) ] ) is not None :","call the method gettext_module.find with 3 arguments : string 'django ' , path and list with an element : result of the function ,"
return self .  client,return self._client .
form = self . forms [ i ],substitute i-th element of self.forms for form .
filename = filename . encode ( STR_ ),"call the method filename.encode with an argument string 'utf-8 ' , substitute the result for filename ."
yield d,yield d .
return the path,return the_path .
node = CycleNode ( values ),"append the results into a list , substitute it for value . node is an instance of CycleNode class , created wiht an argument values ."
value = self . queryset . get ( ** { key : value } ),"call the method self.queryset.get with an argument , unpacked dictionary with an element : value for key , substitute the result for value ."
global  standard context processors,use global variable _standard_context_processors .
"field notes . append ( "" STR_ "" )",append string `` Field renamed because it was n't a valid Python identifier . '' to field_notes .
break,break from the smallest enclosing loop execution .
def wrapper ( * args ) :,define the function wrapper with an argument unpacked list args .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid ' key of the self.error_messages dictionary and code set to 'invalid ' .
error = error . error dict,substitute error.error_dict for error .
def decorating function ( user function ) :,define the function decorating_function with an argument user_function .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )","raise an ValidationError with 2 arguments : dictionary self.error_messages value under the key 'list ' ,"
try :,"try ,"
output = [ ],output is an empty list .
from django . utils . six . moves import http cookies,from django.utils.six.moves import http_cookies into default name space .
def rfc3339 date ( date ) :,define the function rfc3339_date with an argument date .
values = reversed ( values ),reverse elements order of values .
def body ( self ) :,define the method body with an argument self .
chunk = self .  read limited ( size - len ( self . buffer ) ),"call the self._read_limiter with length of self.buffer subtracted from size as argument , store the result into chunk ."
self . field . choice cache = [ self . choice ( obj ) for obj in self . queryset . all ( ) ],"self.field.choice_cache is a list containing results of the method self.choice called with an argument obj ,"
for base in bases [ : : - NUM_ ] :,"for every base in reversed order of bases ,"
from django . core . files . move import file move safe,from django.core.files.move import file_move_safe into default name space .
"mod name , func name = get mod func ( lookup view )","call the function get_mod_func with an argument lookup_view , store the result in mod_name and func_name , respectively ."
"if getattr ( self , STR_ , None ) is None :","if attribute '_client ' of the self object is None ,"
@ wraps ( fget ),decorator function wraps with an argument fget .
"raise ValueError ( "" STR_ "" % migration names )","raise an ValueError with an argument string `` Could not find common ancestor of % s '' , where ' % s ' is replaced with migration_names ."
httpd . daemon threads = True,httpd.daemon_threads is boolean True .
"return STR_ % ( y , m , d )","substitute ' % s ' in string ' % s- % s- % s ' with y , m and d , return the result ."
for node in self . nodelist :,"for every node in self.nodelist ,"
class Formatter ( object ) :,derive the class Formatter from object base class .
bits = arg . split ( STR_ ),"split arg by ' , ' , substitute the result for bits ."
in comment = False,incomment is boolean False .
return any ( w . needs multipart form for w in self . widgets ),"if any w.needs_multipart_form for every w in self.widgets is true , return boolean True , if not return boolean False ."
class ViewDoesNotExist ( Exception ) :,derive the class ViewDoesNotExist from the Exception base class .
results [ predicate ( item ) ] . append ( item ),"call the function predicate with an argument item , use it as a key to get results dictionary value , append item to it ."
"elif field . rel and is in stance ( field . rel , models . ManyToOneRel ) :","otherwise if field.rel is true and field.rel is an instance of the models.ManyToOneRel object ,"
self . dicts . append ( other dict ),append other_dict to self.dicts .
"return IfChangedNode ( nodelist true , nodelist false , * values )","substitute the list of results for values . return an instance of a class IfChangedNode , created with 3 arguments : nodelist_true , nodelist_false and unpacked list values ."
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
c = config . pop ( STR_ ),"remove config dictionary element under ' ( ) ' key , substitute it for c ."
kwargs [ STR_ ] = number value,substitute number_value for kwargs dictionary value under the 'number ' key .
help = STR_,help is a string 'Runs a development server with data from the given fixture ( s ) . ' .
class Command ( BaseCommand ) :,derive class Command from base class BaseCommand .
"if hasattr ( form , STR_ ) :","if form has an attribute 'Meta ' ,"
"def encoding ( self , val ) :",define the method encoding with arguments self and val .
"val1 = self . var1 . resolve ( context , True )","call the method self.var1.resolve with 2 arguments : context and boolean True , substitute the result for val2 ."
def  add installed apps translations ( self ) :,define the method _add_installed_apps_translations with an argument self .
return s,return s .
def   init   ( self ) :,"result of the function literals called with an argument string `` /= / '' and next as a string 'reg ' , to the both_before , appended both_after to the previous result , for 'div ' and appended list with an element instance of a class Tok , created with 3 arguments : string `` regex '' , raw string '/ ( [ ^*\\/ [ ] |\\.|\ [ ( [ ^\ ] \\ ] | \\ . ) *\ ] ) ( [ ^\\/ [ ] | \\.| \ [ ( [ ^\ ] \\ ] | \\ . ) *\ ] ) */ [ a-zA-Z0-9 ] * ' , and next as a string 'div ' , to the both_before , appended both_after to the previous result for 'div ' . define the method __init__ with an argument self ."
import os,import module os .
"def dst ( self , dt ) :",define the method dst with 2 arguments : self and dt .
exclude = options . get ( STR_ ),"get the value under the 'exclude ' key of the options dictionary , substitute it for exclude ."
else :,"covert to uppercase language elements from ( p+1 ) -th index to the end , append it to the previous result , return it . if not ,"
"self . stdout . write ( STR_ % ( f , dirpath ) )","call the self.stdout.write method with string 'processing file % s in % s\n ' as argument , replacing all the occurrences of ' % s ' with f and dirpath , respectively ."
logger = logging . getLogger ( STR_ ),"call the method logging.getLogger with an argument string 'py.warnings ' , substitute the result for logger ."
self . in dent ( NUM_ ),replace ' % s ' with type of the obj object . call the method self.indent with argument integer 1 .
os . unlink ( pot path ),call the method os.unlink with an argument pot_path .
return or d ( bs [ NUM_ ] ),"get the integer representation of the first element of bs , return it ."
EscapeString = EscapeText,substitute EscapeText for EscapeString .
"self . stream . write ( "" STR_ "" )",write ' ] ' to the self.stream file stream .
return base64 . urlsafe b64decode ( s + pad ),call the method base64.urlsafe_b64decode with sum of s and pad as argument .
try :,"try ,"
"from django . utils . timezone import utc , get fixed timezone",from django.utils.timezone import utc and get_fixed_timezone into default name space .
try :,"try ,"
"raise ValueError ( "" STR_ "" )",raise an ValueError exception with an argument string `` Do n't mix *args and **kwargs in call to reverse ( ) ! `` .
"elif is in stance ( timezone , six . string types ) and pytz is not None :","otherwise if timezone is an instance of six.string_types and pytz is not None ,"
else :,"if not ,"
dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ],"call the function os.path.realpath with an argument d , use the result as an argument for the call to the function os.path.abspath ,"
"def   init   ( self , fail silently = False , ** kwargs ) :","define the method __init__ with arguments : self , fail_silently set to boolean False and unpacked dictionary kwargs ."
def items ( self ) :,define the method items with an argument self .
class HttpResponseBadRequest ( HttpResponse ) :,derive the class HttpResponseBadRequest from the HttpResponse base class .
attr list = termios . tcgetattr ( fd ),"call the method termios.tcgetattr with argument fd , substitute the result for attr_list ."
from IPython import start ipython,from IPython import start_ipython into default namespace .
"def linebreaks filter ( value , autoescape = None ) :",define the function linebreaks_filter with 2 arguments value and autoescape set to None .
content length = None,content_length is None .
buffer  = None,buffer_ is None .
EscapeUnicode = EscapeText,substitute EscapeText for EscapeUnicode .
return set ( x for x in ext list if x . strip ( STR_ ) not in ignored ),"if striped x by ' . ' character is not contained in ignored , for every x in ext_list put x into a set , return the resulting set ."
try :,"try ,"
import sys,import module sys .
return DebugNodeList ( ),return an instance of DebugNodeList class .
"def sql indexes ( app config , style , connection ) :","define the function sql_indexes with 3 arguments : app_config , style and connection ."
"parser . add argument ( STR_ , STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ )","call the method parser.add_argument with 6 arguments : string ' -- ipv6 ' , string '-6 ' , action set to string 'store_true ' ,"
while i < len ( subject ) and subject [ i ] ! = c :,"while i is lesser than length of subject and i-th element of subject is not equal to c ,"
"yes , no , maybe = bits [ NUM_ ] , bits [ NUM_ ] , bits [ NUM_ ]","substitute first , second and second elements of bits for yes , no , maybe , respectively ."
"return STR_ % ( self . connector , STR_ . join ( [ str ( c ) for c in self . children ] ) )","for every c in self.children . return string ' ( % s : % s ) ' , formated with self.connector and string created by joining c into a string , separated by ' , ' ,"
"if confirm not in ( STR_ , STR_ ) :","if confirm is not equal to string 'yes ' or string 'no ' ,"
pass,do nothing .
"widgets = ( DateInput ( attrs = attrs , format = date format ) , TimeInput ( attrs = attrs , format = time format ) )","widgets is a tuple with 2 elements : instance of DateInput class , created with 2 arguments : attrs as attrs and format as date_format ,"
next item = list  [ i + NUM_ ],substitute ( i+1 ) -th element of list_ for next_item .
from yaml import CSafeLoader as SafeLoader,from yaml import CSafeLoader as SafeLoader into default name space .
while remaining bits :,"while remaining_bits is true ,"
return j,return j .
"handler . addQuickElement ( "" STR_ "" , rfc3339 date ( self . latest post date ( ) ) )","call the method handler.addQuickElement with 2 arguments : string 'updated ' and result of the function rfc3339_date ,"
error = { field or NON FIELD ERRORS : error . error list },"error is an dictionary with an initial entry error.error_list for filed if true , or NON_FIELD_ERRORS if not ."
@ python 2 unicode compatible,"and sorted return value of the items of the attrs dictionary , and second time with 3 arguments : an empty string , string ' { 0 } ' , and sorted list of boolean_attrs elements , concatenate the results and return the resulting list . python_2_unicode_compatible decorator ,"
field type += STR_,append ' ( ' to field_type .
"def   setitem   ( self , key , value ) :","define the method __setitem__ with 3 arguments : self , key and value ."
return True,return boolean True .
if settings . USE TZ :,"append the result at the end of string ' . ' , append it all at the end of string cache_key . if settings.USE_TZ is True ,"
"return super ( CommandParser , self ) . parse args ( args , namespace )","call the parse_args method with arguments args and namespace , from the base class of the CommandParser class ."
if want unicode :,"if want_unicode is true ,"
try :,"try ,"
key prefix = settings . CACHE MIDDLEWARE KEY PREFIX,substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix .
attrvalue = attrvalue [ NUM_ : - NUM_ ],"remove first and last character from the attrvalue , substitute it for attrvalue ."
from django . conf import settings,from django.conf import settings into default name space .
"return [ ( , [ ] ) ]",return a list with an element tuple with 2 elements : an empty string and an empty list .
self . streaming content = streaming content,and unpacked dictionary kwargs . substitute streaming_content for self.streaming_content .
for name in filters :,"for every name in filters ,"
"return STR_ % x [ : max ( NUM_ , limit - NUM_ ) ]",return a string ' % s ... ' formated with elements of x up to the index equal to the maximum value between integer 0 and 3 subtracted from limit .
elif var arg :,"created with an argument constant_arg , append it to args . otherwise if var_arg is true ,"
class WSGIHandler ( base . BaseHandler ) :,derive the WSGIHandler class from the base class base.BaseHandler .
if not commit :,"if commit is false ,"
"field name = field node . getAttribute ( "" STR_ "" )","call the method field_node.getAttribute with an argument string 'name ' , substitute the result for field_name ."
logger . handlers = [ ],logger.handlers is an empty list .
"def   new   ( cls , * args , ** kwargs ) :","define the method __new__ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs ."
from django . conf import settings,from django.conf import settings into default name space .
"if is in stance ( self , nodetype ) :","if self is an instance of nodetype ,"
"if hasattr ( settings , "" STR_ "" ) :","if setting has an `` SERIALIZATION_MODULES '' attribute ,"
"super ( IPAddressField , self ) .   init   ( * args , ** kwargs )",and RemovedInDjango19Warning . call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class .
if transfer encoding == STR_ :,"if transfer_encoding equals a string 'base64 ' ,"
def has changed ( self ) :,define the method has_changed with an argument self .
"from django . utils . translation import ugettext lazy as   , ungettext lazy",from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space .
elif domain == STR_ and ( file ext == STR_ or file ext in command . extensions ) :,"otherwise if domains equals a string django ' and , file_ext equals '.py ' or file_ext is contained in command.extensions ,"
return new class,return new_class .
  str   = new method proxy ( str ),"call the function new_method_proxy with an argument str , substitute the result for __str__ ."
return SafeText ( data ),"return an instance of SafeText , created with an argument data ."
return s,return s .
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'name ' and value under the 'author_name ' key of the self.feed dictionary .
from django . utils . encoding import python 2 unicode compatible,from django.utils.encoding import python_2_unicode_compatible into default name space .
"template , display name = loader ( name , dirs )","call the function loader with arguments name and dirs , assign the result to template and display_name , respectively ."
key = plist . pop ( NUM_ ) . lower ( ) . decode ( STR_ ),"pop the first element from plist , convert it to lowercase , call the method decode on it , with string 'ascii ' as an argument ,"
encoding = locale . getdefaultlocale ( ) [ NUM_ ] or STR_,"evaluate the function getdefaultlocale from the module locale , if second element of return value exists assign it to encoding ,"
return True,"and data , if it evaluates to true , return boolean True ."
self . base location = location,substitute the location for self.base_location .
else :,"if not ,"
self . params = params,substitute params for self.params .
"def   init   ( self , * args , ** kwargs ) :","define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
def start serialization ( self ) :,define the method start_serialization with an argument self .
"from django . forms . widgets import ( SelectMultiple , HiddenInput , MultipleHiddenInput )","from django.forms.widgets import SelectMultiple , HiddenInput , MultipleHiddenInput into default namespace ."
if not self . activated :,"if self.activated is boolean False ,"
MEMCACHE MAX KEY LENGTH = NUM_,MEMCACHE_MAX_KEY_LENGTH is integer 250 .
if STR_ not in header names :,"if message-id ' is not in header_names ,"
"pathext = os . environ . get ( STR_ , STR_ ) . split ( os . pathsep )","call the method os.environ.get with 2 arguments : strings 'PATHEXT ' and '.COM ; .EXE ; .BAT ; .CMD ' , split the result at os.pathsep , substitute it for pathext ."
"return do translate ( message , STR_ )","call the function do_translate with 2 arguments : message and string 'ugettext ' , return the result ."
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
"tags = options . get ( STR_ , None )","get the value under the 'tags ' key of the options dictionary , if it exists substitute it for tags , if not , tags is None ."
def   iter   ( self ) :,define the method __iter__ with an argument self .
for match in matches :,"for every match in matches ,"
try :,"try ,"
self . error class = STR_ . format ( error class ),"append error_class converted into a string to string 'errorlist ' , substitute the result for self.error_class ."
def  load post and files ( self ) :,define the method _load_post_and_files with an argument self .
"def   deepcopy   ( self , memo ) :",define the method __deepcopy__ with arguments self and memo .
def serialize ( self ) :,define the serialize content with an argument self .
return fext,return fext .
raise KeyError ( key ),raise KeyError exception with an argument key .
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` 'regroup ' tag takes five arguments '' .
def close ( self ) :,define the method close with an argument self .
self . file = file,substitute file for self.file .
text = force text ( text ),"call the function force_text with an argument text , substitute the result for text ."
"return value . replace ( "" "" , "" STR_ "" )","replace every occurrence of ' ' in value for '\xa0 ' , return the result ."
self . add root elements ( handler ),call the method self.add_root_elements with an argument handler .
except Exception :,"if Exception exception is caught ,"
output = [ ],substitute the result for the value under the 'day ' key of the html dictionary . output is an empty list .
result . parent = self,substitute self for result.parent .
code list = [ ],code_list is an empty list .
"except ( ValueError , InvalidOperation , TypeError , UnicodeEncodeError ) :","called with an argument text converted into a floating point number . if ValueError , InvalidOperation , TypeError or UnicodeEncodeError exceptions are caught ,"
sys . stdin . close ( ),call the method sys.stdin.close .
trans real .  active = threading . local ( ),"call the threading.local method , assign the result to trans_real._active ."
name = member . name,substitute member.name for name .
raise,raise an exception .
cleaned data = form . cleaned data,substitute form.cleaned_data for cleaned_data .
if condition is not None :,"if condition is not None ,"
for message in messages :,"for every message in messages ,"
try :,"try ,"
parser . UnparsedEntityDeclHandler = self . unparsed entity decl,substitute self.unparsed_entity_decl for parser.UnparsedEntityDeclHandler .
LOCK NB = NUM_ x1,LOCK_NB is a hexadecimal 1 .
"filename = os . path . join ( to path , name )","join to_path and name into a valid system path , substitute the result for filename ."
msg data = msg data . decode ( charset ),"call the method msg_data.decode with argument charset , substitute the result for msg_data ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
sites = [ ],sites is an empty list .
"def fields for model ( model , fields = None , exclude = None , widgets = None , formfield callback = None , localized fields = None , labels = None , help texts = None , error messages = None ) :","define the function fields_for_model with 9 arguments : model , fields set to None , exclude set to None , widgets set to None ,"
parser . EntityDeclHandler = self . entity decl,substitute self.entity_decl for parser.EntityDeclHandler .
if t is not None :,if t is not None
else :,"if not ,"
if self . in stance . pk is not None :,"if self.instance.pk is not None ,"
self . keyOrder = [ ],self.keyOrder is an empty list .
value = force str ( value ),"call the function force_str with an argument value , substitute the result for value ."
elif count > NUM_ :,"otherwise if count is greater than integer 1 ,"
if language code not in self .  app dict :,if language_code is not containsed in self._app_dict
"value = field . widget . value from datadict ( self . data , self . files , self . add prefix ( name ) )","call the method field.widget.value_from_datadict with 3 arguments : self.data , self.files and return value of the method ,"
"if not hasattr ( other dict , STR_ ) :","if other_dict doesnt have an '__getitem__ ' attribute ,"
cursor . close ( ),call the cursor.close method .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
url = None,url is None .
ngettext lazy = ngettext,substitute ngettext for ngettext_lazy .
"self .  archive . list ( * args , ** kwargs )",define the method list with 3 arguments : self and unpacked list args and unpacked dictionary kwargs .
"if is  ignored ( file path , self . ignore patterns ) :","call the function is_ignored , with arguments : file_path and self.ignore_patterns , if it evaluates to true ,"
activate ( self . old language ),call the method activate with an argument self.old_language .
from importlib import import module,from importlib import import_module .
while < in value and > in value :,"while ' < ' is contained in value and ' > ' is contained in value ,"
"paras = [ STR_ % p . replace ( STR_ , STR_ ) for p in paras ]","replace every occurrence of '\n ' in p for ' < br / > ' ,"
if self . max length is not None and len ( file name ) > self . max length :,"if self.max_length is not None and length of file_name is grater than self.max_length ,"
"def get quantifier ( ch , in put iter ) :",define the function get_quantifier with 2 arguments ch and input_iter .
fs encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( ),"call the function sys.getfilesystemencoding if it evaluates to true , substitute its result for fs_encoding ,"
"if not is in stance ( value , ConvertingDict ) and is in stance ( value , dict ) :","if vale is not an instance of ConvertingDict and value is an instance of dict type ,"
def   enter   ( self ) :,define the method __enter__ with an argument self .
"super ( DebugLexer , self ) .   init   ( template string , or igin )","call the method __init__ from the base class of the class DebugLexer , with 2 arguments : template_string and origin ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"from django . core . management . base import ( BaseCommand , CommandError , CommandParser , handle default options )","from django.core.management.base import BaseCommand , CommandError , CommandParser and handle_default_options into default name space ."
"from django . utils import timezone , six",from django.utils import timezone and six into default name space .
if strings only and is  protected type ( s ) :,"on the result call the method encode with the arguments encoding and errors , return the result . if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True ,"
widget = self . field . widget,substitute self.field.widget for widget .
return msg,return msg .
file = BytesIO ( data . read ( ) ),file is an instance of BytesIO class created with an argument : return value of the method data.read .
def values ( self ) :,define the method values with an argument self .
if self . in teractive :,"if self.interactive is true ,"
new method name = renamed method [ NUM_ ],substitute second element of renamed_method for new_method_name .
"ch , escaped = next ( in put iter )","get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively ."
if self . can import settings :,"if self.can_import_settings is true ,"
del logging .  handlerList [ : ],delete logging._handlerList list .
if opts . fields == ALL FIELDS :,"`` or the 'exclude ' attribute is prohibited ; form % s needs updating . `` , where ' % s ' is replaced with name . if opts.fields equals ALL_FIELDS ,"
try :,"try ,"
byte2int = operator . itemgetter ( NUM_ ),"call te method operator.itemgetter with an argument integer 0 , substitute the result for byte2int ."
"six . reraise ( ValueError , ValueError ( "" STR_ "" % date ) , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : ValueError , instance of a class ValueError , created with an argument string ,"
literal match = self . literal regex . match ( domain part ),"evaluate method self.literal_regex.match with an argument domain_part , substitute the result for literal_match ."
"def mail managers ( subject , message , fail silently = False , connection = None , html message = None ) :","define the function mail_managers with subject , message , fails_silently set to boolean False , connection set to None ,"
class ExtendsNode ( Node ) :,derive the class ExtendsNode from the Node base class .
current expires = result [ NUM_ ],substitute the second element of result for current_expires .
class TemporaryFile ( FileProxyMixin ) :,derive class TemporaryFile from the base class FileProxyMixin .
"filesize number format = lambda value : formats . number format ( round ( value , NUM_ ) , NUM_ )","filesize_number_format is an lambda function with an argument value , return value is the result of the method formats.number_format ,"
lang code = regex match . group ( NUM_ ),"call the method regex_match.group with an argument integer 1 , substitute the result for lang_code ."
try :,"try ,"
return nodelist,return nodelist .
return  wrapped view,return _wrapped_view .
migration . merged operations = [ ],"slice migration.ancestry list from the last result as an starting index to the end , substitute the slice for migration.branch . migration.merged_operations is an empty list ."
"def add arguments ( self , parser ) :",define the method add_arguments with arguments self and parser .
self . stream = None,self.stream is None .
"from django . forms . utils import from current timezone , to current timezone",from django.forms.utils import from_current_timezone and to_current_timezone into default name space .
def   len   ( self ) :,define the method __len__ with an argument self .
query = query . lists ( ),"call the method query.lists , substitute the result for query ."
"signals . got request exception . send ( sender = self .   class   , request = request )",call the signals.got_request_exception.send method with sender set to type of the self class instance and request set to request .
return result,return result .
self .  unget history = [ ],self._unget_history is an empty list .
if supported code . startswith ( generic lang code + - ) :,"append '- ' to generic_lang_code , if supported_code starts with it ,"
if delta < NUM_ :,"if delta is smaller than integer 0 ,"
self . key = key or settings . SECRET KEY,"if key exists , substitute it for self.key , if not substitute settings.SECRET_KEY for key ."
"  all   = [ "" STR_ "" ]",__all__ is a list containing a string `` runfastcgi '' .
import copy,import module copy .
for migration name in migration names :,"for every migration_name in migration_names ,"
except ImproperlyConfigured as exc :,"if ImproperlyConfigured renamed to exc , exception is caught ,"
if base url is None :,"if base_url is None ,"
"parser = MultiPartParser ( META , post data , self . upload handlers , self . encoding )","and warning as a string `` You can not alter upload handlers after the upload has been processed. '' . parser is an instance of MultiPartParser class , created with 4 arguments : META , post_data , self.upload_handlers and self.encoding ."
"sys . modules [   name   + "" STR_ "" ] = sys . modules [   name   + "" STR_ "" ] = Module six moves urllib robotparser (   name   + "" STR_ "" )","instantiate class Module_six_moves_urllib_robotparser with an argument , string `` .moves.urllib.robotparser '' appended to __name__ ,"
return False,return boolean False .
class SimpleNode ( TagHelperNode ) :,derive the class SimpleNode form the base class TagHelperNode .
try :,"try ,"
c . load ( cookie ),"call the load method on the c class instance , with the cookie argument ."
return dict  . getlist ( key ),"call the method dict_.getlist with an argument key , return the result ."
class MultiValueDictKeyError ( KeyError ) :,derive the class MultiValueDictKeyError from the KeyError base class .
def close ( self ) :,define the method close with argument self .
def has changed ( self ) :,define the method has_changed with an argument self .
"from django . utils . safestring import mark safe , SafeData",from django.utils.safestring import mark_safe and SafeData into default name space .
"return  trans . get language from request ( request , check path )","call the function _trans.get_language_from_request with 2 arguments : request and check_path , return the result ."
def y ( self ) :,define the method y with an argument self .
"def  handle fk field node ( self , node , field ) :","define the method _handle_fk_field_node with arguments self , node and field ."
" iterkeys = "" STR_ """,_iterkeys is a string `` iterkeys '' .
from django . utils . functional import lazy,from django.utils.functional import lazy into default name space .
from django . utils . encoding import force bytes,from django.utils.encoding import force_bytes into default name space .
self .   prepare class   ( ),call the method self.__prepare_class__ .
if part in PALETTES :,"if part is contained in PALETTES ,"
response =  set response etag ( response ),"substitute return value of call to the function _set_response_etag with response as an argument , for response ."
return STR_,return string ' 0 ' .
else :,"if not ,"
lock = RLock ( ),lock is an instance of RLock class .
"callback , param dict = resolver . resolve error handler ( NUM_ )","call the resolver.resolve_error_handler with integer 500 as the argument , assign the resulting tuple elements to the callback ,"
"except ( TypeError , AttributeError , KeyError , ValueError ) :","if TypeError , AttributeError , KeyError or ValueError exceptions are caught ,"
class HttpResponsePermanentRedirect ( HttpResponseRedirectBase ) :,derive the class HttpResponsePermanentRedirect from the HttpResponseRedirectBase base class .
return t . to language ( ),"call the method t.to_language , return the result ."
digest = hashlib . sha256,substitute hashlib.sha256 for digest .
locales = [ locale ],locales is a list with an element locale .
slots = [ slots ],"slots is a list with an element , slots ."
return lookup view,return lookup_view
"return hashlib . pbkdf2 hmac ( digest ( ) . name , password , salt , iterations , dklen )","call the function hashlib.pbkdf2_hmac with 5 arguments : field name of the result of the function digest , password , salt ,"
"def extract ( path , to path = ) :",define the function extract with 2 arguments path and to_path set to empty string .
class UploadFileException ( Exception ) :,"'TemporaryFileUploadHandler ' , 'MemoryFileUploadHandler ' , 'load_handler ' and 'StopFutureHandlers ' . derive the class UploadFileException from the Exception base class ."
"return callback ,",return callback and a empty string .
"def  get page ( self , * args , ** kwargs ) :","define the method _get_page with self class instance , unpacked list args and unpacked dictionary kwargs as arguments ."
if six . PY3 :,"if six.PY3 is true ,"
data [ f . name ] = f . value from object ( in stance ),"call the method f.value_from_object with an argument instance , substitute the result for value under the f.name key of the data dictionary ."
self . show traceback = options . get ( STR_ ),"get the value from the options dictionary under the key 'traceback ' , substitute it for self.show_traceback ."
"return is in stance ( obj ,  PROTECTED TYPES )","check if obj is instance of the object _PROTECTED_TYPES , return the boolean result ."
utility . execute ( ),call the method utility.execute .
status code = NUM_,status_code is an integer 302 .
if not template dirs :,"if template_dirs is false ,"
files . append ( entry ),append entry to files list .
return value,return value .
if k in seen :,"if k is contained in seen ,"
try :,"try ,"
raise NotImplementedError ( STR_ ),raise an NotImplementedError with an argument string 'subclasses of BaseLoader must provide a load_template_source ( ) method ' .
"return getattr ( caches [ DEFAULT CACHE ALIAS ] , name )","get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary , return it ."
self . setlistdefault ( key ) . extend ( value list ),"call the method self.setlistdefault with an argument key , extend the result with value_list ."
"def select template ( template name list , dirs = None ) :",define the function select_template with 2 arguments : template_name_list and dirs set to None .
if space == NUM_ :,"add integer 1 to it , substitute the result for space . if space equals integer 0 ,"
"raise ValueError ( STR_ STR_ % ( name , e ) )",raise an ValueError exception with an argument string 'Unable to configure logger % r : % s ' formated with name and e .
class Serializer ( base . Serializer ) :,derive the class Serializer from the base.Serializer base class .
if field in self . cleaned data :,"if field is contained in self.cleaned_data ,"
if self . can order :,"if self.can_order is true ,"
def  import module ( name ) :,define the function _import_module with an argument name .
i += NUM_,"result of the function force_text called with an argument title , and with sublist , append the string to output . increment i by 1 ."
"exit code = os . spawnve ( os . P WAIT , sys . executable , args , new environ )","call the function os.spawnve with os.P_WAIT , sys.executable , args and new_environ as arguments , substitute the result for exit_code ."
simple email re = re . compile ( r STR_ ),"and re.IGNORECASE , substitute the result for simple_url_re . call the function re.compile with raw string ' & ( ? ! ( \w+| # \d+ ) ; ) ' , substitute the result for simple_email_re ."
"except ( TypeError , ValueError ) :","if TypeError or ValueError exceptions are caught ,"
"self . choices . append ( ( f , f . replace ( path , "" "" , NUM_ ) ) )","append a tuple with 2 elements : f and f with first occurrence of the path replaced with an empty string , to self.choices ."
from django . core . serializers . python import Serializer as PythonSerializer,from django.core.serializers.python import Serializer as PythonSerializer into default name space .
"raise ViewDoesNotExist ( "" STR_ "" % ( lookup view , mod name ) )","raise an ViewDoesNotExist exception with an argument string `` Could not import ' % s ' . View does not exist in module % s . `` ,"
if not ( bits . scheme and bits . netloc ) :,"do not perform the following only if bits.scheme and bits.netloc are both true ,"
if timeout == DEFAULT TIMEOUT :,"if timeout equals to DEFAULT_TIMEOUT ,"
return val,return val .
"if router . allow migrate ( self . using , obj . object .   class   ) :","call the method router.allow_migrate with 2 arguments : self.using and obj.object.__class__ , if it evaluates to true ,"
import json,import module json .
"in put attrs [ STR_ ] = STR_ % ( id  , i )","replace ' % s ' in string ' % s_ % s ' with id_ and i , substitute the result for input_attrs dictionary value under the 'id ' key ."
def get unbound function ( unbound ) :,define the function get_unbound_function with an argument unbound .
def  load serializers ( ) :,define the function _load_serializers .
def get language bidi ( ) :,define the function get_language_bidi .
except Exception :,"if Exception exception is caught ,"
"return dict ( ( key , self [ key ] ) for key in self )","return dictionary created with tuples with 2 elements : key and value under the key key of self dictionary , for every key in self ."
return ip str,return ip_str .
if value :,"if value is true ,"
self .  upload handlers = upload handlers,substitute _upload_handlers for self.__upload_handlers .
self . namespace = STR_ . join ( self . namespaces ),"join self.namespaces into a string separated with character ' : ' , substitute it for self.namespace ."
definition [ STR_ ] = colors [ - NUM_ ],substitute last element of colors for value under the 'bg ' key of definition dictionary .
"zipfile . ZipFile .   init   ( self , * args , ** kwargs )","call the method zipfile.ZipFile.__init___ with the arguments self , unpacked list args and unpacked dictionary kwargs ."
"def   init   ( self , s ) :",define the method __init__ with 2 arguments : self and s .
"self . setlist ( key , default list )",call the method self.setlist with 2 arguments : key and default_list .
obj pk = field . rel . to .  meta . get field ( field . rel . field name ) . to python ( field value ),"call the field.rel.to._meta.get_field method with an field.rel.field_name argument , on the result call the method to_python ,"
"def rmtree errorhandler ( func , path , exc info ) :","define the function rmtree_errorhandler with 3 arguments func , path and exc_info ."
 error files = [ ],_error_files is an empty list .
"self . stdout . write ( self . style . MIGRATE LABEL ( "" STR_ "" ) + "" STR_ "" % ( targets [ NUM_ ] [ NUM_ ] , ) )","convert the first element of the first row of targets to string , append it to the string `` Unapply all migrations : `` ,"
try :,"try ,"
if  supported is None :,"if _supported is None ,"
"result = datetime . datetime ( value . year , value . month , value . day )","call the function datetime.datetime with 3 arguments : value.year , value.month and value.day , substitute the result for result ."
def get unbound function ( unbound ) :,define the function get_unbound_function with an argument unbound .
@ register . filter,decorator register.filter .
import sys,import module sys .
"elif hasattr ( pattern , STR_ ) :","otherwise , if pattern has an '_callback ' attribute ."
if extra params :,"or with string 'models . ' if it is not and field_type . if extra_params is true ,"
class StopUpload ( UploadFileException ) :,derive the class StopUpload from the UploadFileException base class .
from django . db . migrations . executor import MigrationExecutor,from django.db.migrations.executor import MigrationExecutor into default name space .
"last = max ( NUM_ , end - NUM_ )",substitute greater element between integer 0 and end decremented by one for last .
import sys,import module sys .
return self . forms [ in dex ],return self.forms element at the index index .
if end is not None :,"if end is not None ,"
class RegroupNode ( Node ) :,derive the class RegroupNode from Node base class .
if best doublecolon len > NUM_ :,"if best_doublecolon_len is greater than integer 1 ,"
for c in reversed ( self .   class   .   mro   ) :,"for every c in reversed order of self.__class__.__mro__ ,"
os . makedirs ( top dir ),make a directory top_dir .
boundary = boundary . encode ( STR_ ),"call the method boundary.encode with an argument string 'ascii ' , substitute the result for boundary ."
"value = self . get ( key , version = version )","call the self.get method with key and version set to version as arguments , substitute the result for value ."
mail . outbox = [ ],mail.outbox is an empty list .
"d = datetime . datetime ( d . year , d . month , d . day )","call the function datetime.datetime with 3 arguments , d.year , d.month and d.day , substitute the result for d ."
@ property,property decorator .
runfastcgi ( args ),call the function runfastcgi with an argument args .
"hour , minute = divmod ( timezone , NUM_ )","substitute the result for timezone . divide timezone by integer 60 , substitute the quotient of the division for hour and reminder for minute ."
"def end object ( self , obj ) :",define the method end_object with arguments self and obj .
def reverse dict ( self ) :,define the method reverse_dict with an argument self .
if not value or not [ v for v in value if v not in self . empty values ] :,"if value is false or for every v in value every v is contained in self.empty_values ,"
return MONTHS 3 [ self . data . month ],return the value under the self.data.month key of the MONTHS_3 dictionary .
if settings . TEMPLATE DEBUG :,"if settings.TEMPLATE_DEBUG is true ,"
raise TemplateDoesNotExist ( STR_ . join ( not  found ) ),"raise an TemplateDoesNotExist exception with an argument , elements of not_found joined into a string , separated with ' , '"
self .  exception middleware = [ ],exception_middleware is an empty list .
"return "" STR_ "" % ( self .   class   .   name   , self . var )","return an string `` < % s : % r > '' , where ' % s ' is replaced with self.__class__.__name__ and self.var , respectively ."
except AttributeError :,"if AttributeError exception is caught ,"
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'ttl ' and value under the 'ttl ' key of the self.feed dictionary .
"UnicodeDecodeError .   init   ( self , * args )","call the initialization method UnicodeDecodeError.__init__ , with self instance of this class and *args as arguments ."
  contains   = has key,substitute has_key for __contains__ .
"options = [ ( STR_ , None ) ]",options is a list containing a tuple with 2 entries : string ' -- help ' and None .
in itial text = ugettext lazy ( STR_ ),"call the function ugettext_lazy with an argument string 'Currently ' , substitute the result for initial_text ."
excludes = options . get ( STR_ ),"get the value under the 'exclude ' key of the options dictionary , substitute the result for exclude ."
from django . core . management . sql import sql delete,from django.core.management.sql import sql_delete into default name space .
return date value . strftime ( in put format ),"call the method date_value.strftime with an argument input_format , return the result ."
class  LazyModule ( types . ModuleType ) :,derive class _LazyModule from the types.ModuleType base class .
"parser . add argument ( STR_ , nargs = STR_ , help = STR_ )","call the method parser.add_argument with string 'app_label ' , nargs set to charcter ' ? ' , help containing string ,"
"data = { "" STR_ "" : smart text ( obj .  meta ) , "" STR_ "" : self .  current , }","data is an dictionary with 2 initial entries : return value of the smart_text function with the argument obj._meta for 'model ' ,"
s len += NUM_,"increment s_len by integer 1 ,"
def as text ( self ) :,"format_html_join , called with 3 arguments : empty string , string ' < li > { 0 } { 1 } < /li > ' , tuple containing tuples with 2 elements : k and result of the function force_text with an argument v , for every k and v in items of the dictionary self , return the result . define the method as_text with an argument self ."
from django . conf import settings,from django.conf import settings into default namespace .
"def to python ( self , value ) :",define the method to_python with arguments self and value .
"except ( ValueError , TypeError ) :","if exception ValueError or TypeError is raised ,"
in  tag = not in  tag,"in_tag is boolean True if in_tag is False , otherwise is boolean False ."
try :,"try ,"
@ python 2 unicode compatible,"python_2_unicode_compatible decorator ,"
raise ImproperlyConfigured ( STR_ % self . file path ),"raise an ImproperlyConfigured exception with argument string 'Path for saving email messages exists , but is not a directory : % s ' , replace ' % s ' with self.file_path ."
return STR_ . join ( statements ),"join statements into a string , separated by newlines , return it ."
if exit code < NUM_ :,"if exit_code is lesser than integer 0 ,"
gettext module . GNUTranslations .   init   ( self ),call the method gettext_module.GNUTranslations.__init__ with an argument self .
"def get template sources ( self , template name , template dirs = None ) :","define the method get_template_source with 3 arguments : self , template_name , template_dirs set to None ."
return client,return client .
queryset = queryset . filter ( pk  in = primary keys ),"call the method queryset.filter with an argument pk__in set to primary_keys , substitute the result for queryset ."
resource = resource . decode ( settings . FILE CHARSET ),"call the method resource.decode with an argument settings.FILE_CHARSET , substitute the result for resource ."
outdict = { },outdict is an empty dictionary .
self . FILES = MultiValueDict ( ),self.FILES is an instance of MultiValueDict class .
else :,"if not ,"
needs multipart form = True,needs_multipart_form is boolean True .
in t2byte = chr,substitute chr for int2byte .
self . stream . write ( STR_ ),write a newline into a self.stream file stream .
else :,"if not ,"
"return super ( QueryDict , self ) . setlistdefault ( key , default list )","call the method setlistdefault from the base class of the class QueryDict , with arguments key and default_list , return the result ."
if not self . is  valid ( ) :,"call the method self.is_valid , if it evaluates to false ,"
"class RadioSelect ( RendererMixin , Select ) :",derive the class RadioSelect from the RendererMixin and Select base classes .
"mail . attach alternative ( html message , STR_ )",call the mail.attach_alternative method with html_message and string 'text/html ' as arguments .
return self .  get scheme ( ),"call the method self._get_scheme , return the result ."
return False,return boolean False .
self .  delete ( key ),call the method self._delete with argument key .
def load middleware ( self ) :,define method load_middleware with class instance self as the argument .
if app label not in executor . loader . migrated apps :,"if app_label is not contained in executor.loader.migrated_apps ,"
"def receive data chunk ( self , raw data , start ) :","define the function receive_data_chunk with arguments self , raw_data and start ."
if model in excluded models :,"if model is contained in excluded_models ,"
memo [ id ( self ) ] = result,"substitute result for the value of the memo dictionary , with identity of the self object as an key ."
if count2 ! = NUM_ :,"if count2 does not equals to integer 0 ,"
"elif is in stance ( value , ( decimal . Decimal , float ) + six . in teger types ) :","return the result . otherwise if value is an instance of decimal.Decimal , float or six.integer_types ,"
"raise ValueError ( "" STR_ "" "" STR_ "" % ( middleware method .   self   .   class   .   name   ) )","replace ' % s ' in the string `` % s.process_template_response did n't return an HttpResponse object . It returned None instead . `` ,"
return result,"and boolean False , append the result to result . return result ."
if callable ( current ) :,"where ' % s ' is replaced with bit and ' % r ' is replaced with current . if current is callable object ,"
return self . handle noargs ( ** options ),"call the self.handle_noargs method with with unpacked dictionary options as argument , return the result ."
return total forms,return total_forms .
pass,do nothing .
parser . StartDoctypeDeclHandler = self . start doctype decl,substitute self.start_doctype_decl for parser.StartDoctypeDeclHandler .
return  standard context processors,return _standard_context_processors .
if key . startswith ( self . prefix ) :,if key starts with self.prefix .
"value = value . replace ( replacement , )","for every replacement in the resulting set , replace every occurrence of replacement in value for an empty string , substitute the result for value ."
if row data in seen data :,"if row_data is contained in seen_data ,"
if self . in itial and STR_ not in kwargs :,"if self.initial is true and 'initial ' key is not contained in kwargs ,"
else :,"if not ,"
except ValueError :,"if ValueError exception is caught ,"
from django . http . response import REASON PHRASES as STATUS CODE TEXT,from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT # NOQA into default name space .
"scheme , netloc , path , query , fragment = urlsplit ( value )","call the function urlsplit with an argument value , assign the result to scheme , netloc , path , query and fragment , respectively ."
renamed methods = ( ),renamed_methods is an tuple .
else :,"if not ,"
"return ( output , force text ( errors , DEFAULT LOCALE ENCODING , strings only = True ) , p . returncode )","return a tuple containing 3 entries : output , result of the function force_text , called with 3 arguments : errors ,"
with connection . cursor ( ) as cursor :,"call the method connection.cursor , with the result renamed to cursor , perform the following ,"
self . abstract = False,self.abstract is boolean False .
"strip prefix = lambda s : s [ NUM_ : ] if s . startswith ( "" STR_ "" ) else s","called with 3 arguments : raw string ' [ ^a-zA-Z0-9 ] ' , empty string and result of the method table_name.title . strip_prefix is a lambda function with an argument s , return value is s without the first element if s starts with string ' u '' ,"
if not context instance :,"if context_instance is false ,"
"def handle ( self , ** options ) :","dest as a string 'interactive ' , default as boolean True help as a string 'Tells Django to NOT prompt the user for input of any kind. ' . define the method handle with 3 arguments : self and unpacked dictionary options ."
except AttributeError :,"except if AttributeError is caught ,"
else :,"if not ,"
"options += [ ( k , NUM_ ) for k in FASTCGI OPTIONS ]","append tuple containing two entries : k and integer 1 to options , for every k in FASTCGI_OPTIONS ."
counters [ i ] += chunk length,increment i-th element of counters by chunk_length .
return,return an empty string .
var = var [ NUM_ : - NUM_ ],remove first 2 and last 2 elements from var .
final attrs = self . build attrs ( attrs ),"call the method self.build_attrs with an argument attrs , substitute the result for final_attrs ."
forms = [ self .  construct form ( i ) for i in xrange ( self . total form count ( ) ) ],"for every i in sequence of integers from 0 to result of the method self.total_form_count , call the method self._construct_form ,"
return EndToken,return EndToken .
if app label not in executor . loader . migrated apps :,"if app_label is not contained in executor.loader.migrated_apps ,"
if logging settings :,"if logging_settings is true ,"
self .  setup ( ),call the method self._setup .
self .  done = True,self._done is boolean True .
else :,"if not ,"
else :,"if not ,"
"if not hasattr ( c , STR_ ) and hasattr ( types , STR_ ) and type ( c ) ! = types . ClassType :","if c doesnt have an attribute '__call__ ' and types has an 'ClassType ' attribute and type of c is not equal to types.ClassType ,"
def parse date ( value ) :,"' ( ? : : ( ? P < second > \d { 1,2 } ) ( ? : \. ( ? P < microsecond > \d { 1,6 } ) \d { 0,6 } ) ? ) ? ( ? P < tzinfo > Z| [ +- ] \d { 2 } ( ? : : ? \d { 2 } ) ? ) ? $ ' , substitute it for datetime_re . define the function parse_date with an argument value ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ , params = { STR_ : pk } , )","raise an ValidationError with 3 arguments : dictionary self.error_messages value under the key 'invalid_pk_value ' ,"
LIGHT PALETTE = STR_,LIGHT_PALETTE is a string 'light ' .
"except ( LookupError , BinasciiError ) as e :","pad the rest of the field with bytes string '= ' , use the result as an argument for the call to the method base64.urlsafe_b64decode , return the result . if LookupError or BinasciiError , renamed to e , exceptions are caught ."
"self . max length , self . min length = max length , min length",and unpacked dictionary kwargs . substitute max_length and min_length for self.max_length for self.min_length .
from django . core import signals,from django.core import signals into default name space .
if decimal separator in value :,"if decimal_separator is contained in value ,"
found = True,found is boolean True .
"with io . open ( or ig file , STR_ , encoding = settings . FILE CHARSET ) as fp :","call the function io.open with 3 arguments : work_file , string ' w ' and encoding set to settings.FILE_CHARSET as arguments ,"
"msg = ( "" STR_ "" "" STR_ "" % { STR_ : new class .   name   , STR_ : opt , STR_ : value , } )","msg is a string `` % ( model ) s.Meta. % ( opt ) s can not be a string . Did you mean to type : ( ' % ( value ) s ' , ) ? `` , where ' % ( model ) s ' is replaced ,"
"def start object ( self , obj ) :",define the method start_object with arguments self and obj .
factor -= NUM_,decrement factor by one .
display url = tmp + /,"append '/ ' to tmp , substitute it for display_url ."
"from django . utils . text import ( smart split , unescape string literal , get text list )","from django.utils.text import smart_split , unescape_string_literal and get_text_list into default namespace ."
default list = [ ],default_list is an empty list .
"if hasattr ( e , STR_ ) and e . code in self . error messages :","if e has an attribute 'code ' and e.code is contained in self.error_messages ,"
"self . extend nodelist ( nodelist , compiled result , token )","call the method self.extend_nodelist with 3 arguments : nodelist , compiled_result and token ."
"if is in stance ( value , bool ) :",if value is an instance of bool .
"globalpath = os . path . join ( os . path . dirname ( upath ( sys . modules [ settings .   module   ] .   file   ) ) , STR_ )","get the value under the settings.__module__ key of the sys.modules dictionary , use its __file__ field as an argument ,"
unique check = [ field for field in unique check if field ! = self . fk . name ],"unique_check is a list with elements field , for every field in unique_check if field is not equal to self.fk.name ."
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to integer 2 ,"
from django . utils import six,from django.utils import six into default name space .
return result,return result .
try :,"try ,"
"def add arguments ( self , parser ) :",define the method add_arguments with 2 arguments self and parser .
def filesizeformat ( bytes ) :,define the function filesizeformat with an argument bytes .
keys =  iterkeys,substitute _iterkeys for keys .
self . file permissions mode = ( file permissions mode if file permissions mode is not None else settings . FILE UPLOAD PERMISSIONS ),"self.file_permissions_mode is a tuple containing : file_permissions_mode if file_permissions_mode is not None ,"
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",'self ' for 'rel ' and value under the 'feed_url ' key of self.feed dictionary for 'href ' . call the method handler.addQuickElement with 2 arguments : string 'title ' and value under the 'title ' key of the self.feed dictionary .
template = Template ( content ),"template is an instance of Template class , created with an argument content ."
if not url fields [ NUM_ ] :,"if first element of the url_fields is false ,"
"ugettext lazy = lazy ( ugettext , six . text type )","call the function lazy with 2 arguments : ugettext and six.text_type , substitute ugettext_lazy ."
"raise ValueError ( STR_ STR_ % ( name , e ) )",raise an ValueError exception with an argument string 'Unable to configure handler % r : % s ' formated with name and e .
def   iter   ( self ) :,define the method __iter__ with an argument self .
if os . name == STR_ :,"if os.name equals to 'nt ' ,"
"warnings . warn ( STR_ STR_ , RemovedInDjango19Warning , NUM_ )","call the function warnings.warn with 3 arguments : string ' ` MergeDict ` is deprecated , use ` dict.update ( ) ` instead . ' ,"
pass,do nothing .
if self . decimal places is not None :,"if self.decimal_places is not None ,"
return False,return boolean False .
"if ( connections [ db ] . features . needs datetime string cast and not is in stance ( current expires , datetime ) ) :",if features.needs_datetime_string_cast field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object .
"def   init   ( self , nodelist , parent name , template dirs = None ) :","define the method __init__ with 4 arguments : self , nodelist , parent_name and template_dirs set to None ."
"def get bytes from wsgi ( environ , key , default ) :","define the function get_bytes_from_wsgi with environ , key and default as arguments ."
raise TemplateDoesNotExist ( error msg ),raise an TemplateDoesNotExist exception with an argument error_msg .
class TemplateEncodingError ( Exception ) :,derive the class TemplateEncodingError form the base class Exception .
return,return nothing .
from django . db . models . fields . related import ManyToManyField,from django.db.models.fields.related import ManyToManyField .
self . xml . startDocument ( ),"options dictionary , if the key doesnt exists use settings.DEFAULT_CHARSET instead . call the self.xml.startDocument method ."
values = [ ],"if values is None ,"
if end < NUM_ :,"if end is lesser than integer 0 ,"
"super ( Command , self ) . run from argv ( argv )","call the run_from_argv function from the base class of the Command class with argv as a argument , ."
block = self,substitute self for block .
"def created time ( self , name ) :",define the method created_time with arguments self and name .
except UnicodeEncodeError :,"if UnicodeEncodeError exception is caught ,"
new = name,substitute name for new .
self .  setup ( ),call the method self._setup .
"warnings . warn ( "" STR_ "" , RemovedInDjango19Warning , stacklevel = NUM_ )","call the function warnings.warn with 3 arguments : string `` django.utils.importlib will be removed in Django 1.9 . `` ,"
"raise NoReverseMatch ( "" STR_ "" "" STR_ "" % ( lookup view s , args , kwargs , len ( patterns ) , patterns ) )","raise an NoReverseMatch exception with an argument string `` Reverse for ' % s ' with arguments ' % s ' and keyword `` ,"
else :,"if not ,"
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
default validators = [ validators . validate ipv4 address ],default_validators is an list containing validators.validate_ipv4_address .
nodelist . append ( node ),append node to nodelist .
except OSError as e :,"if exception OSError , renamed to e , is caught ,"
db = options . get ( STR_ ),"get the value under the key 'database ' of the options dictionary , substitute it for db ."
return self .  render ( context ),"call the method self._render with an argument context , return the result ,"
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` 'now ' statement takes one argument '' .
def camel case to spaces ( value ) :,define the function camel_case_to_spaces with an argument value .
from django . conf import settings,from django.conf import settings into default name space .
kwargs [ STR_ ] = kwargs . pop ( STR_ ),"remove element under 'stream ' key of kwargs dictionary , substitute the result for value under 'strm ' key of kwargs dictionary ."
from django . core . exceptions import ImproperlyConfigured,from django.core.exceptions import ImproperlyConfigured into default name space .
"check for migrations ( app config , connection )",call the function check_for_migrations with arguments app_config and connection .
"def   add   ( self , rhs ) :",define the method __add__ with 2 arguments self and rhs .
else :,"if not ,"
self . close ( ),call the method self.close .
"def clear checkbox name ( self , name ) :",define the method clear_checkbox_name with 2 arguments : self and name .
"last = max ( NUM_ , end - NUM_ )",substitute greater element between integer 0 and end decremented by one for last .
name = name [ : NUM_ - len ( ext ) ] + ext,"subtract length of the ext from the integer 255 , take first elements of the name list up to the previous result index ,"
"root [ : ] = [ root , root , None , None ]","root is an list with 4 elements : root , root , None and None ."
try :,"try ,"
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ )","call the method parser.add_argument with 5 arguments : string ' -- noinput ' , action set to string 'store_false ' ,"
"path = path . lstrip ( / ) . lstrip ( \\' )
","strip path of all leading '/ ' and '\\ ' characters , substitute the result for path ."
def full clean ( self ) :,define the method full_clean with an argument self .
"if is in stance ( value , six . text type ) :","if value is an instance of six.text_type class ,"
app . in itialize ( argv = [ ] ),call the method app.initialize with an argument argv as an empty list .
"super ( ContextDict , self ) .   init   ( * args , ** kwargs )","call the method __init__ from the base class of the class ContextDict , with 2 arguments : unpacked list args and unpacked dictionary kwargs ."
bytes = float ( bytes ),"convert bytes to floating point number , substitute it for bytes ."
self .  info = translation .  info . copy ( ),"call the method translation._info.copy , substitute the result for self._info ."
for node in self . nodelist loop :,"for every node in self.nodelist_loop ,"
class Command ( BaseCommand ) :,derive the class Command from the base class BaseCommand .
text type = unicode,substitute unicode for text_type .
def   init   ( self ) :,"define initialization method __init__ , with self class instance as the argument ."
if six . PY2 :,"if six.PY2 is true ,"
while start < end :,while start is lesser than end .
"setattr ( Module six moves urllib robotparser , attr . name , attr )",set attr.name attribute of Module_six_moves_urllib_robotparser object to attr .
return len ( self . object list ),return the length of self.object_list .
yield STR_ % self . db module,"yield string 'from % s import models ' % self.db_module as the result , where `` % s '' is replaced with self.db_module ."
if prefix is None :,"if prefix is None ,"
return . join ( extra classes ),"join elements of extra_classes into a string separated by whitespaces , return it ."
for sql in sql list :,"for every sql in sql_list ,"
"form = ManagementForm ( self . data , auto id = self . auto id , prefix = self . prefix )","form is an instance of ManagementForm class , created with 3 arguments : self.data , auto_id as self.auto_id and prefix as self.prefix ."
return self . content,return self.content
"s1 = time . strftime ( fmt , ( year , ) + timetuple [ NUM_ : ] )","call the function time.strftime with 2 arguments : fmt and and timetuple without the first element ,"
if token is None :,"if token is None ,"
step = str ( Decimal ( STR_ ) / NUM_ ** self . decimal places ) . lower ( ),"call the object Decimal with string ' 1 ' as an argument , divide it by 10 , bring the result to the power of self.decimal_places ,"
"def handle ( self , ** options ) :",define the method handle with self class instance and dictionary pair of elements options as arguments .
s . close ( ),close file descriptor s .
for locale in locales :,"for every locale in locales ,"
raise StopIteration ( ),raise an StopIteration .
path info = get path info ( environ ),"call the get_path_info function with environ as argument , substitute the result for path_info ."
"return self .  cache . in cr ( key , - delta )","evaluate the method self._cache.incr with key and negative delta as arguments , return the result ."
def total error count ( self ) :,define the method total_error_count with an argument self .
chunk size = self . DEFAULT CHUNK SIZE,substitute the self.DEFAULT_CHUNK_SIZE for chunk_size .
return,"return an empty string ,"
if  localtime is None :,"if _localtime is None ,"
def flatten ( self ) :,define the method flatten with an argument self .
p = language . find ( - ),"find position of '- ' in the index of the language , substitute the result for p ."
message context = None,message_context is None .
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a url ( ) method ' .
try :,"try ,"
break,break from the smallest enclosing loop .
except Exception :,"if Exception exception is caught ,"
if settings . USE TZ and value is not None and timezone . is  aware ( value ) :,"if settings.USE_TZ is true and value is not None and call to the function timezone.is_aware with an argument value , evaluates to true ,"
class Command ( BaseCommand ) :,derive the class Command from the BaseCommand base class .
DEFAULT CHUNK SIZE = NUM_ * NUM_ ** NUM_,"bring integer 2 to the power of 10 , multiply it by 64 , substitute the result for DEFAULT_CHUNK_SIZE ."
"class WSGIRequestHandler ( simple server . WSGIRequestHandler , object ) :",derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler and object base classes .
if csrf token :,"if not csrf_token is None . if csrf_token is true ,"
"def   init   ( self , content , name = None ) :","define the method __init__ with arguments self , content and name defaulting to None ."
handle default options ( options ),"and args , respectively . call the method handle_default_options with an argument options ."
self .  lock = threading . RLock ( ),"call the method threading.RLock , substitute the result for self._lock ."
"output . append ( format html ( self . in ner html , choice value = choice value , sub widgets = sub ul renderer . render ( ) ) )","call the function format_html with 3 arguments : self.inner_html , choice_value set to choice_value ,"
"def forbid multi line headers ( name , val , encoding ) :","'resent-to ' , 'resent-cc ' and 'resent-bcc ' . define the function forbid_multi_line_headers with arguments : name , val and encoding ."
if character ! = STR_ :,"if character is not equal to a string ' . ' ,"
"super ( StringOrigin , self ) .   init   ( UNKNOWN SOURCE )","call the method __init__ with an argument UNKNOWN_SOURCE , from the base class of the class StringOrigin ."
except ImportError :,if ImportError exception is caught .
if headerlist is not None :,"if header list is not None ,"
if questioner . ask merge ( app label ) :,"call the method questioner.ask_merge with an argument app_label , if it evaluates to true ,"
self .  unget history = [ ],self._unget_history is an empty list .
self . attachments . append ( filename ),append filename to the self.attachments list .
"super ( MemoryFileUploadHandler , self ) . new file ( * args , ** kwargs )",call the new_file method form the base class from the MemoryFileUploadHandler class with arguments : unpacked list args and unpacked list kwargs .
for d in reversed ( self . dicts ) :,"for every d in reversed list self.dicts ,"
return,return an empty string .
settings . configure ( ),call the method settings.configure .
"return super ( DjangoJSONEncoder , self ) . default ( o )","call the method default with an argument o from the base class of the class DjangoJSONEncoder , return the result ."
for resultclass in resultclasses :,"for every resultclass in resultclasses ,"
import warnings,import module warnings .
for d in self . dicts :,"for every d in self.dicts ,"
if subcommand == STR_ :,if subcommand equals to a string 'help ' .
translation = self .  new gnu trans ( localedir ),"call the function self._new_gnu_trans with an argument localedir , substitute the result for translation ."
"def   call   ( self , * args , ** kwargs ) :","define the __call__method with arguments self , unpacked list args and unpacked dictionary kwargs ."
msg = self . style . HTTP SUCCESS ( msg ),"call the self.style.HTTP_SUCCESS with an argument msg , substitute it for msg ."
nesting -= NUM_,decrement nesting by one .
if is  templatized :,"if is_templatized is true ,"
"for pos , elt in enumerate ( source ) :","for every pos and elt in enumerated iterable source ,"
package = import module ( path ),"call the function import_module with an argument path , substitute it for package ."
codecs . lookup ( content params [ STR_ ] ),"get the value under the 'charset ' key of content_params dictionary , use it to call the codec.lookup method ."
return self . compress ( [ ] ),"call the function self.compress with empty list as an argument , return the result ."
"def   init   ( self , func ) :",define the method __init__ with 2 arguments self and func .
"if self . META . get ( header , None ) == value :","if value under the header key of the self.META dictionary is equal to value ,"
end index = None,end_index is None .
rawdata = force str ( rawdata ),call the function force_str with raw data as an argument and substitute it for rawdata .
elif change == I18N MODIFIED :,"otherwise id change equals to I18N_MODIFIED ,"
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
return from current timezone ( result ),"call the function from_current_timezone with an argument , return the result ."
"def  has changed ( self , in itial , data ) :","define the method _has_changed with arguments self , initial and data ."
else :,"if not ,"
"response = middleware . process template response ( request , response )","call the method middleware.process_template_response with 2 arguments : request and response , substitute the result for response ."
"def decr ( self , key , delta = NUM_ , version = None ) :","define the method decr with arguments self , key , delta defaulting to integer 1 and version defaulting to None ."
html = { },"assign the result for year_val , month_val and day_val , respectively . html is an empty dictionary ."
if not self . is  bound :,"if self.is_bound is false ,"
if value is None :,"if value is None ,"
"call command ( STR_ , verbosity = max ( self . verbosity - NUM_ , NUM_ ) , in teractive = False , database = db , reset sequences = False , in hibit post migrate = True , )","call the function call_command with string 'flush ' , verbosity set to greater element , self.verbosity decremented by 1 or integer 0 ,"
if six . PY3 :,"if six.PY3 is true ,"
register to .  registry = before import registry,substitute before_import_registry for register_to._registry .
for f in opts . local fields :,"for every f in opts.local_fields ,"
p = in t ( arg ),"convert arg to an integer , substitute it for p ."
return False,return boolean False .
pass,do nothing .
"def npgettext ( context , singular , plural , number ) :","define the function ngettext with 4 arguments : context , singular , plural and number ."
palette = PALETTES [ NOCOLOR PALETTE ] . copy ( ),"get value under the config_string key of the PALETTES dictionary , call the copy method on the result and substitute it for palette ."
for filename in filenames :,"for every filename in filenames ,"
"def   init   ( self , request = None ) :",define the method __init__ with arguments self and request defaulting to None .
"raise ExternalReferenceForbidden ( context , base , sysid , pubid )","raise an ExternalReferenceForbidden exception with arguments context , base , sysid and pubid ."
"setattr ( base , new method name , old method )","formated with 3 elements : class_name , old_method_name and new_method_name , deprecation_warning and integer 2. set new_method_name attribute of the base object to old_method ."
MAXSIZE = in t ( ( NUM_ << NUM_ ) - NUM_ ),"bitwise shift integer 1 to the left by 63 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE ."
except ImportError :,"if ImportError exception is caught ,"
"return sorted ( value , key = Variable ( arg ) . resolve , reverse = True )","sort value with key set to filed resolve of instance of a class Variable , created with an argument arg , reverse the sort and return the result ."
if not file name :,"if file_name is false ,"
else :,"if not ,"
elif args [ NUM_ ] [ NUM_ ] == STR_ :,"otherwise if first element of second row of args equals a string ' 3 ' ,"
if value in self . empty values :,"if value is contained in self.empty_values ,"
def is  naive ( value ) :,"return boolean True , otherwise return boolean False . define the function is_naive with an argument value ."
return value . upper ( ),"convert value to uppercase , return the result ."
"def   init   ( self , server , params , library , value not found exception ) :","define the method __init__ with , self , server , params , library , value_not_found_exception as arguments ."
except AttributeError :,"if AttributeError exception is caught ,"
try :,"try ,"
locale = options . get ( STR_ ),"get the value under the 'locale ' key of the options dictionary , substitute it for locale ."
if self . verbosity >= NUM_ :,"if self.verbosity is greater of equal to integer 1 ,"
return False,return boolean False .
outer html = STR_,outer_html is a string ' < ul { id_attr } > { content } < /ul > ' .
code = STR_,"string 'Ensure this value has at least % ( limit_value ) d characters ( it has % ( show_value ) d ) . ' and string 'limit_value ' , substitute the result for message . code is a string 'min_length '"
"parser . add option ( STR_ , action = STR_ , help = STR_ )","call the method parser.add_option with 3 arguments : string ' -- traceback ' , action set to a string 'store_true ' ,"
"parser . add option ( STR_ , action = STR_ , dest = STR_ , default = False , help = "" STR_ "" )","and help='Raise on exception ' . call the method parser.add_option with 5 arguments : string ' -- no-color ' , action set to a string 'store_true ' ,"
def  parse header params ( s ) :,define the function _parse_header_params with an argument s .
if self . active readers == NUM_  and self . waiting writers ! = NUM_ :,"if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0 ,"
return url,return url .
if not settings . MANAGERS :,"if settings.MANAGERS does not exist ,"
if field . rel . through .  meta . auto created :,"if field.rel.through._meta.auto_created is true ,"
if len ( bits ) > NUM_ :,"if length of bits is greater than integer 2 ,"
return None,return None .
out = text [ : end text pos ],"create a list out of fist end_text_pos text elemnts , substitue it for out ."
if lang code in  supported and lang code is not None and check for language ( lang code ) :,"if lang_code is contained in _supported and lang_code is not None and result of the function check_for_language ,"
c = in t ( text ),"convert text to an integer , substitute it for c ."
"logger . warning ( STR_ , request . path , extra = { STR_ : NUM_ , STR_ : request } )","substitute ' % s ' in 'Not Found : % s ' with request.path , extra is an dictionary with two pairs of elements 'status_code ' with value 404 ,"
if not field name :,"if field_name is false ,"
operations . extend ( smigration . operations ),call the method operations.extend with an argument smigration.operations .
num loopvars = len ( self . loopvars ),substitute length of self.loopvars for num_loopvars .
"new name = new name . replace ( STR_ , STR_ )",replace all the occurrences of '__ ' with ' _ ' in new_name .
total forms = self . max num,substitute self.max_num for total_forms .
else :,"if not ,"
for name in dir ( models . signals ) :,"for name in attributes of models_signals object ,"
return self . text,return self.text .
if  standard context processors is None :,"if _standard_context_processors is None ,"
return  HashedSeq ( key ),"return instance of _HashedSeq class , created with an argument key ."
len item = len ( item ),substitute length of item for len_item .
return path . decode ( fs encoding ),"call the method path.decode with an argument fs_encoding , return the result ."
"def validate name ( self , name , app or project ) :","define validate_name with 3 arguments : self , name and app_or_project ."
"field type , new params = field type","substitute field_type for field_type and new_params , respectively ."
"path = safe join ( self . location , name )","call the safe_join function with arguments self.location and name , substitute it for path ."
else :,"if not ,"
exclude . append ( f . name ),append f.name to exclude .
"def add arguments ( self , parser ) :",`` format ( using each model 's default manager unless -- all is specified ) . '' . define the method add_arguments with arguments self and parser .
del form . cleaned data [ field ],substitute the result for the value under the NON_FIELD_ERRORS key of form._errors dictionary . delete entry from form.cleaned_data dictionary under the field key .
"field type , field params , field notes = self . get field type ( connection , table name , row )","call the method self.get_field_type with 3 arguments connection , table_name and row , assign the result to field_type , field_params ,"
elif self . verbosity == NUM_ :,"otherwise if self.verbosity equals integer 3 ,"
not  found = [ ],not_found is an empty list .
"elif is in stance ( rhs , SafeBytes ) :","otherwise if rhs is an instance of SafeBytes ,"
self . name = name,substitute name for self.name .
if upto ! = start :,if upto is not equal to start .
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
from django . utils import six,from django.utils import six into default name space .
if not candidate :,"otherwise add boolean False , for every candidate in the result perform following , if candidate is false ,"
"def   call   ( self , template name , template dirs = None ) :","define the method __call__ with 3 arguments : self , template_name and template_dirs set to None ."
nodelist . contains nontext = True,nodelist.contains_nontext is boolean True .
from functools import partial,from functools import partial into default name space .
widget value = value [ i ],substitute i-th element of value for widget_value .
errors = self . default error messages . copy ( ),and errors set to the result of self.default_error_messages.copy .
"setattr (  MovedItems , attr . name , attr )",set attr.name attribute of the _MovedItemst object to attr .
"from django . template import Template , Context",from django.template import Template and Context into default name space .
retval = self,substitute self for retval .
PY2 = sys . version info [ NUM_ ] == NUM_,"if first element of sys.version_info equals integer 2 , PY2 is boolean True , otherwise it is boolean False ."
def get version ( self ) :,define the method get_version with an arguments self .
all models = [ ],all_models is an empty list .
def j ( self ) :,define the method j with an argument self .
"g = generator . Generator ( fp , mangle from  = False )",g is an instance of a class generator.Generator called with fp and mangle_from_ set to False .
from django . conf import settings,from django.conf import settings into default name space .
if options [ STR_ ] > NUM_ :,"if value under the 'verbosity ' key of the options dictionary is greater than zero ,"
if sub match :,"if sub_match is true ,"
name = self . get available name ( name ),"call the method self.get_available_name with argument name , substitute it for name ."
if response is None :,"if response is None ,"
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] , guid attrs )","substitute the result for value under the 'isPermaLink ' key of the guid_attrs dictionary . call the method handler.addQuickElement with 3 arguments : string 'guid ' , value under the 'unique_id ' key of the item dictionary ,"
"def do ifequal ( parser , token , negate ) :","define the function do_ifequal with 2 arguments : parser , token and negate ."
return,"key for 'grouper ' and val converted into a list for 'list ' , for every key and val in result of the function groupby , called with 2 arguments : obj_list and lambda function with an argument obj and return value as a result of the function , self.resolve_expression called with 2 arguments obj and context . return an empty string ,"
widget = URLInput,substitute URLInput for widget .
except ValueError :,"if ValueError exception is caught ,"
else :,"if not ,"
if len values < NUM_ :,"if len_values is smaller than integer 1 ,"
nodelist = parser . parse ( ),"call the method parser.parse , substitute the result for nodelist ."
return . join ( self . fed ),"join elements of self.fed into a string , return the result ."
if option == with :,"where ' % r ' is replaced with options . if option equals a string 'with ' ,"
"raise CommandError ( "" STR_ "" % ( migration name , app label ) )","raise a exception of CommandError class , with string `` Can not find a migration matching ' % s ' from app ' % s ' . Is it in INSTALLED_APPS ? `` ,"
msgs = msgs . decode ( STR_ ),"call the method msgs.decode with an argument string 'utf-8 ' , substitute the result for msgs ."
class ImmutableList ( tuple ) :,derive the class ImmutableList from the tuple base class .
if len ( app labels ) > NUM_  and primary keys :,"if length of app_labels is greater than integer 1 and primary_keys is true ,"
return check,return check .
e . django template source = token . source,substitute token.source for e.django_template_source .
escaper = lambda x : x,escaper is an identity lambda function .
if self . required :,"if self.required is true ,"
"default attrs = { STR_ : STR_ , STR_ : STR_ }",default_attrs is an dictionary with 2 initial entries : string '40 ' for 'cols ' and string '10 ' for 'rows ' .
except OSError as e :,"if OSError , renamed to e , exception is caught ,"
return STR_ . join ( STR_ % e for e in self ),"for every e in self , append convert e to an string and append it to string '* ' ,"
while path :,"while path is true ,"
else :,"if not ,"
"return func ( * self .   args , ** self .   kw )","call the function func with 2 arguments : unpacked list self.__args and unpacked dictionary self.__kw , return the result ."
"tz name = force text ( get current timezone name ( ) , errors = STR_ )","call the function force_text , with the function get_current_timezone_name and errors set to string 'ignore ' as arguments ,"
except ValueError :,"if ValueError exception is caught ,"
logger = logging . getLogger ( STR_ ),"call the function logging.getLogger with string 'django.request ' as the argument , assign the return object handle to logger ."
level = NUM_,level is an integer 0 .
"obj = getattr ( models . signals , name )","get models.signals name attribute , store it in obj ."
"root [ : ] = [ root , root , None , None ]","root is a list with elements : root , root , None and None ."
connection = connections [ database ],substitute value under the database key of the connections dictionary for connection .
"parser . add argument ( STR_ , nargs = STR_ , help = STR_ )","call the method parser.add_argument with 3 arguments : string 'addrport ' , nargs= ' ? ' and help as a string 'Optional port number , or ipaddr : port ' ."
"raise TemplateSyntaxError ( STR_ % ( bits [ NUM_ ] , option ) )","raise an TemplateSyntaxError with an argument string 'Unknown argument for % r tag : % r . ' , where ' % r ' is replaced with first element of bits and options ."
in t part = in t part gd [ : : - NUM_ ],"invert the ordering of elements of int_part_gd , substitute it for int_part ."
"return formataddr ( ( nm , addr ) )",call the formataddr function with argument tuple containing 2 elements nm and addr .
app config = apps . get app config ( app label ),"call the method apps.get_app_config with an argument app_label , substitute the result for app_config ."
try :,"try ,"
exp = Decimal ( NUM_ ),"exp is an instance of Decimal , created with an argument integer 1 ."
from django . core . management . base import AppCommand,from django.core.management.base import AppCommand into default name space .
return self . blocks [ name ] . pop ( ),"remove the first element of value under the name key of self.blocks dictionary , return it ."
"t = getattr (  active , "" STR_ "" , None )","in the previous result for with string '\n ' , substitute the result for eol_message . get 'value ' attribute of the _active object , if it exists substitute it for t , if not t is None ."
new value =  strip once ( value ),"call the function _strip_once with an argument value , substitute the result for new_value ."
return key in self . dicts [ - NUM_ ],"if key is contained in last element of self.dicts , return boolean True , otherwise return boolean False ."
return,return an empty string .
class ConvertingTuple ( tuple ) :,derive the class ConvertingTuple from tuple base class .
if parse until :,"if parse_until is true ,"
"super ( DecimalField , self ) . validate ( value )",call the method validate with an argument value from the base class of the DecimalField class .
"encoded = encoded . replace ( "" STR_ "" , "" STR_ "" ) . replace ( "" STR_ "" , "" STR_ "" )","in encoded , replace all the occurrences of unicode character `` \\054 '' with ' , ' character and `` \\073 '' with ' ; ' characters ."
return duplicate,return duplicate .
if attrs is None :,"if attrs is None ,"
base16 = BaseConverter ( BASE16 ALPHABET ),"call the BaseConverter function with BASE16_ALPHABET as argument , store the result in base16 ."
self . validate key ( key ),call the method self.validate_key with argument key .
@ classmethod,"content_type , length of content , None and None . decorator classmethod ."
args = [ STR_ ] + self . msguniq options + [ potfile ],"append self.msguniq_options to a list containing a string 'msguniq ' , append list containing potfile to the result , substitute it for args ."
app configs = [ apps . get app config ( app label ) for app label in app labels ],"call the method apps.get_app_config with an argument app_label , for every app_label in app_labels , append the results to a list ,"
"options = self . render options ( choices , [ value ] )","and return value of the function flatatt called with an argument final_attrs , substitute the result for output . call the method self.render_options with 2 arguments : choices and list with an entry , value , substitute the result for options ."
asvar = bits [ - NUM_ ],substitute last element of bits for asvar .
nesting += NUM_,increment nesting by one .
except AttributeError :,if AttributeError exception is caught .
class DecimalField ( IntegerField ) :,derive the class DecimalField from the base class IntegerField class .
"def   init   ( self , convert charrefs = False , ** kwargs ) :","define the initialization method __init__ , with self instance of this class , convert_charrefs set to boolean False ,"
return output,return output .
if not self . fail silently :,"if self.fail_silently is boolean False ,"
import sys,import module sys .
bits . append ( force text ( bit ) ),"call the function force_text with an argument bit , append the result to bits ."
self . empty label = None,self.empty_label is None .
self . file name = None,self.file_name is None .
else :,"if not ,"
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to integer 2 ,"
@ property,"property decorator ,"
"if not hasattr ( parser , STR_ ) :","if parser doesnt have an '_namedCycleNodes ' attribute ,"
hidden widget = MultipleHiddenInput,substitute MultipleHiddenInput for hidden_widget .
"def to python ( self , value ) :",define the method to_python with arguments self and data .
"or ig file = os . path . join ( self . dirpath , self . file )","join self.dirpath and self.file into a file path , substitute it for orig_file ."
from django . utils . ipv6 import clean ipv6 address,from django.utils.ipv6 import clean_ipv6_address into default name space .
except ImportError :,"if ImportError exception is caught ,"
for cat in item [ STR_ ] :,"field url of the value under the 'enclosure ' key of the item dictionary for 'url ' , field length of the value under the 'enclosure ' key of the item dictionary for 'length ' , and field mime_type of the value under the 'enclosure ' key of the item dictionary for 'type ' . for every cat in value under the 'categories ' key of the item dictionary ,"
if field type == STR_ :,"if field_type equals a string 'AutoField ( ' ,"
return s,return s .
try :,"try ,"
outfile . write ( data ),write data bytes to outfile .
return value,return value .
class EmailBackend ( ConsoleEmailBackend ) :,derive the class EmailBackend from the ConsoleEmailBackend base class .
prefix = STR_ % self . app or project,"replace ' % s ' in string 'django_ % s_template_ ' with self.app_or_project , substitute it for prefix ."
if bad app labels :,"if bad_app_labels is true ,"
from django . core . exceptions import ImproperlyConfigured,from django.core.exceptions import ImproperlyConfigured into default name space .
except IndexError :,"if IndexError exception is caught ,"
"parser . add argument ( STR_ , STR_ , choices = self . shells , dest = STR_ , help = STR_ )","dest as a string 'no_startup ' and help as a string 'When using plain Python , ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script. ' . call the method parser.add_argument with 5 arguments : string '-i ' , string ' -- interface ' , choices set to string self.shells ,"
m = regex . match ( date ),"call the method regex.match with an argument date , substitute the result for m ."
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'link ' and value under the 'link ' key of the item dictionary .
"for event , node in self . event stream :","for every event and node in self.event_stream ,"
if i >= self . in itial form count ( ) and not form . has changed ( ) :,"if i is greater than or equal to the result of the method self.initial_form_count ,"
return self . source,return self.source .
args check = staticmethod ( args check ),args_check is a static method .
return self .  post,return self._post .
selected html =,selected_html is an empty string .
"v = datetime . datetime . strptime ( force str ( value ) , in put format )","call the method datetime.datetime.strptime with 2 arguments : return value of the function force_str called with an argument value ,"
return get wsgi application ( ),"call the function get_wsgi_application , return the result ."
from yaml import CSafeDumper as SafeDumper,yaml import CSafeDumper as SafeDumper into default name space .
else :,"if not ,"
@ property,"property decorator ,"
"def  make decorator ( * m args , ** m kwargs ) :",define the function make_decorator with 2 arguments : unpacked list m_args and unpacked dictionary m_kwargs .
"help = "" STR_ """,help is a string `` Squashes an existing set of migrations ( from first until specified ) into a single new one . `` .
"fmt = config . get ( STR_ , None )","get config dictionary element under 'format ' key , if it exists substitute it for fmt , if not , fmt is None ."
raise TemplateDoesNotExist ( template name ),raise an TemplateDoesNotExist exception with an argument template_name .
from django . utils . translation import trans null as trans,from django.utils.translation import trans_null as trans .
from django . utils import translation,from django.utils import translation into default name space .
def  cache ( self ) :,define the method _cache with argument self .
"s = s . decode ( encoding , errors )","call the method s.decode with encoding and errors as the arguments , substitute the result for s ."
"def compile messages ( self , locations ) :",define compile_messages method with self class instance and locations as a arguments .
"raise CommandError ( "" STR_ "" )",raise an CommandError exception with an argument string `` You can only use -- pks option with one model '' .
else :,"if not ,"
if self . parsed :,"if self.parsed is true ,"
for punctuation in TRAILING PUNCTUATION :,"for every punctuation in TRAILING_PUNCTUATION ,"
"migration = executor . loader . get migration by prefix ( app label , migration name )","call the executor.loader.get_migration_by_prefix with app_label and migration_name with arguments , substitute the result fr migration ."
evens = sum ( in t ( c ) for c in candidate [ - NUM_ : : - NUM_ ] ),"for every c in reversed order of candidate , convert c into an integer , sum all the results and substitute the result for evens ."
mtime -= stat . st ctime,decrement mtime by stat.st_ctime .
new name = new name [ : - NUM_ ],"substitute new_name , without the last 3 elements for new_name ."
"run ( self . addr , in t ( self . port ) , handler , ipv6 = self . use ipv6 , threading = threading )","call the function run with 5 arguments : self.addr , self.port converted to an integer , handler , ipv6 set to self.use_ipv6 , and threading set to threading ."
import sys,import module sys .
connection . check constraints ( table names = table names ),call the method connection.check_constraints with an arguments table_names set to table_names .
"should convert = ( is in stance ( value , datetime ) and ( settings . USE TZ if use tz is None else use tz ) and not is  naive ( value ) and getattr ( value , STR_ , True ) )","if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive ,"
except NameError :,"if NameError exception is caught ,"
try :,"try ,"
palette [ role ] = definition,substitute definition for value under the role key of palette dictionary .
if not bytes :,"if bytes is false ,"
year = in t ( m . group ( STR_ ) ),"call the method m.group with an argument string 'year ' , convert the result into a string , substitute it for year ."
"self . stdout . write ( self . style . MIGRATE HEADING ( "" STR_ "" % app label ) + "" STR_ "" )","substitute ' % s ' in a string `` Migrations for ' % s ' : '' with app_label , append newline to it ,"
"def prepare value ( self , value ) :",define the method prepare_value with arguments self and value .
else :,"if not ,"
"def handle fk field ( self , obj , field ) :","define the method handle_fk_field with self , obj and field arguments ."
password = force bytes ( password ),"call the function force_bytes with an argument password , substitute the result for password ."
"default error messages = { STR_ :   ( "" STR_ "" ) , STR_ :   ( "" STR_ "" ) , STR_ :   ( "" STR_ "" ) , STR_ : ungettext lazy ( STR_ , STR_ , STR_ ) , STR_ :   ( STR_ ) }","default_error_messages is an dictionary with 5 initial entries : return value of the function _ called with an argument string ,"
class AppRegistryNotReady ( Exception ) :,derive the class AppRegistryNotReady from the Exception base class .
kwargs [ STR_ ] = labels [ f . name ],substitute value under the f.name key of the labels dictionary for value under the 'label ' key of kwargs dictionary .
if self . parent instance is not None :,"if not self.to_field is None . if self.parent_instance is not None ,"
"self . stdout . write ( "" STR_ "" % title )","substitute ' % s ' with title in the string `` [ ] % s '' , write it to the standard output ."
from django . utils import timezone,from django.utils import timezone into default name space .
"self . stdout . write ( "" STR_ "" )",call the method self.stdout.write with string `` No migrations to apply . '' as an argument .
tzinfo .   init   ( self ),`` Use django.utils.timezone.get_default_timezone instead . '' and RemovedInDjango19Warning . call the method tzinfo.__init__ with an argument self .
for attr in  urllib parse moved attributes :,"for every attr in _urllib_parse_moved_attributes ,"
if opname not in roots :,"if opname is not contained in roots ,"
"command , source = self . command stack . pop ( )","remove the first element from self.command_stack , assign the result to command and source , respectively ."
try :,"try ,"
except OSError :,"if OSError exception is caught ,"
import shutil,import module shutil .
query string = query string . decode ( ),"call the method query_string.decode , substitute the result for query_string ."
sys . stderr = NullDevice ( ),sys.stderr is an instance of NullDevice class .
"raise UnrecognizedArchiveFormat ( "" STR_ "" % filename )","raise an UnrecognizedArchiveFormat exception with an argument string `` Path not a recognized archive format : % s '' ,"
"return os . path . join ( self . dirpath , self . file )","join self.dirpath and self.file into a file path , return it ."
def reader enters ( self ) :,define the method reader_enters with an argument self .
"def handle inspection ( self , options ) :",define the method handle_inspection with 2 argument : self and options .
stream class = BytesIO,substitute BytesIO for stream_class .
if value is not None :,"if value is not None ,"
"def   setitem   ( self , key , value ) :","define the method __setitem__ with 3 arguments : self , key and value ."
"for i , handler in enumerate ( handlers ) :","and third element of the result of the function sys.exc_info . for every i and handler in enumerated iterable handlers ,"
return True,return is boolean True .
"super ( LocaleRegexURLResolver , self ) .   init   ( None , urlconf name , default kwargs , app name , namespace )","call the __init__ method of the base class of the class LocaleRegexURLResolver , with arguments : None , urlconf_name , default_kwargs , app_name and namespace ."
"if is in stance ( loader , ( tuple , list ) ) :","if loader is an instance of tuple or list ,"
if header == STR_ and is  accept language redundant :,"if header equals a string 'ACCEPT_LANGUAGE ' and is_accept_language_redundant is boolean True ,"
"raise EnvironmentError ( "" STR_ "" "" STR_ "" % self .  dir )","raise an EnvironmentError exception with string `` Cache directory ' % s ' does not exist and could not be created '' as argument ,"
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
from django . core import serializers,from django.core import serializers into default name space .
"def   init   ( self , attrs = None , format = None ) :","define the method __init__ with 3 arguments : self , attrs set to None and format is None ."
bits = urlsplit ( location ),"call the function urlsplit with an argument location , substitute the result for bits ."
return value,return value .
raise,raise an exception .
url fields [ NUM_ ] = url fields [ NUM_ ],substitute third element of url_fields for second element of url_fields .
while k < endpos :,"as long k is smaller than endpos ,"
"obj = Node ( connector = self . connector , negated = self . negated )","obj is an instance of Node class , created with 2 arguments : connector set to self.connector and negated set to self.negated ."
return None,"does n't support that type of template loading . Consider removing that line from TEMPLATE_LOADERS . `` , where ' % r ' is replaced with loader . return None ."
else :,"if not ,"
for child in node . childNodes :,"for every child in node.childNodes ,"
except Exception :,"if META_override is not None , or otherwise generated with the call to the function pformat with an argument request.META . if Exception exception is caught ,"
logger . disabled = True,logger.disabled is boolean True .
"if not hasattr ( self , STR_ ) :",if self does not have an attribute named '_dimensions_cache ' .
return,return nothing .
elif tzinfo is not None :,"otherwise if tzinfo is not None ,"
else :,"if not ,"
dictConfigClass = DictConfigurator,substitute DictConfigurator for dictConfigClass .
"nodelist false = parser . parse ( ( STR_ , ) )","call the method parser.parse with an argument tuple with an element string 'endifchanged ' , substitute the result for nodelist_false ."
os . makedirs ( self . file path ),call the os.makedirs with argument self.file_path .
l = len ( tokens ),substitute length of tokens for l .
if changes :,"if changes is true ,"
"def add item elements ( self , handler , item ) :","define the method add_item_elements with 3 arguments : self , handler and item ."
"if hasattr ( value , STR_ ) :","if value has an attribute '_meta ' ,"
"def strptime ( self , value , format ) :","define the method strptime with arguments self , value and format ."
self . close ( ),close the file self .
return match . group ( NUM_ ),"call the method match.group with an argument integer 0 , return the result ."
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
"def  has changed ( self , in itial , data ) :","define the method _has_changed with arguments self , initial and data ."
return force text ( value ),"call the force_text function with an argument value , return the result ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ , params = { STR_ : val } , )","raise an ValidationError with 3 arguments : dictionary self.error_messages value under the key 'invalid_choice ' ,"
if renderer :,"if renderer is true ,"
"def autodiscover modules ( * args , ** kwargs ) :",define the function autodiscover_modules with 2 arguments unpacked list args and unpacked dictionary kwargs .
connection = connections [ options [ STR_ ] ],"get the value under the 'database ' key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection ."
def color style ( ) :,"define function color_style , without input arguments ."
class Http404 ( Exception ) :,derive the class Http404 from the Exception base class .
def get max age ( response ) :,define function get_max_age with response as an argument .
in ner args . extend ( args ),extend list inner_args with args .
import smtplib,import module smtplib .
TEMPLATE FRAGMENT KEY TEMPLATE = STR_,TEMPLATE_FRAGMENT_KEY_TEMPLATE is a string 'template.cache. % s. % s ' .
def gen filenames ( only new = False ) :,define the function gen_filenames with an argument only_new defaulting to boolean False .
wm = pyinotify . WatchManager ( ),"call the pyinotify.WatchManager method , assign the result to wm ."
return obj,return obj .
else :,"if not ,"
gettempdir = tempfile . gettempdir,substitute tempfile.gettempdir for gettempdir .
"def  make key ( args , kwds , typed , kwd mark = ( object ( ) , ) , fasttypes = { in t , str , frozenset , type ( None ) } , sorted = sorted , tuple = tuple , type = type , len = len ) :","define the function _make_key with 9 arguments : args , kwds , typed , kwd_mark as a tuple with an element result of the function object ,"
"def chunks ( self , chunk size = None ) :",define the method chunks with arguments self and chunk_size defaulting to None .
from django . utils . deprecation import RemovedInDjango20Warning,from django.utils.deprecation import RemovedInDjango20Warning into default name space .
"def   init   ( self , value ) :",define the method __init__ with 2 arguments : self and value .
"return callback ( request , ** param dict )","and param_dict , respectively . evaluate the function callback with request and dictionary of parameters param_dict as the arguments , return the result ."
"super ( Command , self ) . add arguments ( parser )","call the method add_arguments from the base class of the class Command , with an argument parser ."
dec part = dec part [ : decimal pos ],substitute first decimal_pos elements of dec_part for dec_part .
options [ k . lower ( ) ] = v,substitute v for value under the k converted to lower case key of options dictionary .
"if not hasattr ( self , STR_ ) :","if self doesnt have an '_body ' attribute ,"
l = - ( - dklen // hlen ),"divide negative dklen with hlen , substitute floored result for l ."
def  get name ( self ) :,define the method _get_name with argument self .
self . stream = six . StringIO ( stream or string ),"call the function six.StringIO with an argument stream_or_string , substitute the result for self.stream ."
try :,"try ,"
else :,"if not ,"
return lambda x : x,"create lambda identity function which returns x for input parameter x , return the function ."
"def comment ( parser , token ) :",define the function comment with 2 arguments : parser and token .
class EmailBackend ( BaseEmailBackend ) :,derive the class EmailBackend from the BaseEmailBackend base class .
try :,"try ,"
if transfer encoding == STR_ :,"if transfer_encoding equals string 'base64 ' ,"
if kwargs :,"if kwargs is true ,"
try :,"try ,"
"self . xml . startElement ( "" STR_ "" , { } )",call the method self.xml.startElement with argument string 'natural ' and an empty dictionary .
"return self .  text words ( length , truncate )","call the method self._text_words with 2 arguments length and truncate , return the result ."
else :,"if not ,"
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid ' key of the self.error_messages dictionary and code set to 'invalid ' .
status code = NUM_,status_code is an integer 301 .
if ch == + :,"if ch equals string '+ ' ,"
if len ( in itial ) ! = len ( data ) :,"if lengths of initial and data are not the same ,"
if len ( x ) == NUM_ :,"if length of x is equal to integer 0 ,"
"endblock re = re . compile ( r "" "" "" STR_ "" "" "" )","substitute the result for block_re . call the function re.compile with an argument raw string `` ^\s*endblocktrans $ '' , substitute the result for endblock_re ."
from django . core . serializers . base import SerializerDoesNotExist,from django.core.serializers.base import SerializerDoesNotExist into default name space .
"def   exit   ( self , exc type , exc value , traceback ) :","define the method __exit__ with 4 arguments : self , exc_type , exc_value and traceback ."
if not widget :,"if widget is false ,"
NON FIELD ERRORS = STR_,NON_FIELD_ERRORS is an string '__all__ ' .
test runner = TestRunner ( ** options ),"test_runner is an instance of TestRunner class , called with an argument unpacked dictionary options ."
"ISO INPUT FORMATS = { STR_ : ( STR_ , ) , STR_ : ( STR_ , STR_ , STR_ ) , STR_ : ( STR_ , STR_ , STR_ , STR_ ) , }","ISO_INPUT_FORMATS is a dictionary with 3 entries : tuple with an element string ' % Y- % m- % d ' for 'DATE_INPUT_FORMATS ' ,"
"write pot file ( potfile , msgs )",call the function write_pot_file with 2 arguments : potfile and msgs .
from django . conf import settings,from django.conf import settings into default name space .
for key in keys :,"for every key in keys ,"
"return self .  cache . add ( key , value , self . get backend timeout ( timeout ) )","call the method self._cache.add with key , value , self.get_backend_timeout ( timeout ) as arguments ."
if base64d [ : NUM_ ] == b STR_ :,"if first element of base64d equals to a ' . ' character ,"
salt = force bytes ( salt ),"call the function force_bytes with an argument salt , substitute the result for salt ."
use grouping = use grouping and grouping > NUM_,"if use_grouping is true and grouping is greater than integer 0 , use_grouping is boolean True , otherwise it is boolean False ."
elif self . reason phrase is None :,"otherwise if self.reason_phrase is None ,"
"if is in stance ( value , list ) :","if value is an instance of list type ,"
"def encode ( self , i ) :",define the method encode with self class instance and i as arguments .
"output , errors = p . communicate ( )","called with string as an argument 'Error executing % s : % s ' , where ' % s ' is replaced by : first element of args and strerror , respective , and third element of the result of the function sys.exc_info . call the method p.communicate , assign the result to output and errors , respectively ."
else :,"if not ,"
else :,"and self.absolute_max , return the result . if not ,"
if self . use ssl and self . use tls :,"if self.use_ssl and self.use_tls are boolean True ,"
self .  closable objects . append ( value ),append value to self._closable_objects list .
context [ STR_ ] = self,substitute self for value under the 'block ' key of context dictionary .
self . max width = max width,substitute max_width for self.max_width .
new class . base fields = fields,substitute fields for new_class.base_fields .
"return all ( getattr ( self , attr ) == getattr ( other , attr ) for attr in [ STR_ , STR_ , STR_ , STR_ , STR_ ] )","if for all attr in list of attributes 'level ' , 'msg ' , 'hint ' , 'obj ' and 'id ' , self and other have the same attribute attr ,"
import time,import module time .
widget = HiddenInput,substitute HiddenInput for widget .
continue,skip this loop iteration .
"except ( LookupError , TypeError ) :","if LookupError or TypeError exceptions are caught ,"
full statement . append ( STR_ ),"or with an empty string if its not , append the resulting string to full_statement . append string ' ) ; ' to full_statement ."
field params [ STR_ ] = col name,substitute col_name for value under the 'db_column ' key of the field_params dictionary .
for app in sorted ( commands dict . keys ( ) ) :,"for every app in sorted return value of the commands_dict.keys function ,"
return self . clear ( ),evaluate self.clear method and return the result .
ULONG PTR = c ulong,substitute c_ulong for ULONG_PTR .
"lookups . appendlist ( pattern . callback , ( bits , p pattern , pattern . default args ) )","call the method lookups.appendlist with 2 arguments : pattern.callback and a tuple containing 3 elements : bits , p_pattern ,"
result = str ( in t ( round ( ratio ) ) ),"round up radio , convert it to an integer and the convert it to a string and substitute the result for result ."
LockFileEx = windll . kernel32 . LockFileEx,substitute windll.kernel32.LockFileEx for LockFileEx .
"cull frequency = params . get ( STR_ , options . get ( STR_ , NUM_ ) )","call the options.get method with string 'CULL_FREQUENCY ' and integer 3 as arguments , use the string 'cull_frequency ' and previous result as the arguments for the call to the params.get method , substitute the result for cull_frequency ."
for app config in apps . get app configs ( ) :,"for app_config in return value of the method apps.get_app_configs ,"
if self . cdata tag is not None :,"if self.cdata_tag is not None ,"
return value,return value .
"MIMEText .   init   ( self , text , subtype , charset )","call the method MIMEText.__init__ with 4 arguments : self , text , subtype and charset ."
"basedirs = [ os . path . join ( os . path . dirname ( os . path . dirname (   file   ) ) , STR_ , STR_ ) , STR_ ]","return the directory name two directories up from the __file__ path , join it with 'conf ' and 'locale ' into valid path , separated by '/ ' , basedirs is a list containing 2 elements : previous result and string 'locale ' ."
def fixture dirs ( self ) :,define the method fixture_dirs with an argument self .
"self . merge = options . get ( STR_ , False )","if not , self.dry_run is boolean False . get the value under the 'merge ' key of the options dictionary , if the key exists substitute it for self.merge ,"
except KeyError :,"if KeyError exception is caught ,"
"self . stdout = OutputWrapper ( options . get ( STR_ , sys . stdout ) )","self.stdout is an instance of OutputWrapper class created with an argument : value under the 'stdout ' key of the options dictionary ,"
"super ( TypedMultipleChoiceField , self ) .   init   ( * args , ** kwargs )","if not , self.empty_value is an empty list . call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs ,"
except IndexError :,"if IndexError exception is caught ,"
path = path override if path override is not None else request . path,"substitute path_override for path if path_override is not None , otherwise substitute request.path for path"
self . value = set ( force text ( v ) for v in self . value ),"and unpacked dictionary kwargs . for every v in self.value call the function force_text with an argument v , add the result to a set ,"
"parser . add argument ( STR_ , STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ )","dest set to string 'domain ' and help as a string 'The domain of the message files ( default : `` django '' ) . ' . call the method parser.add_argument with 6 arguments : string ' -- all ' , string '-a ' , action as a string'store_true ' ,"
request repr = STR_ . format ( filter . get request repr ( request ) ),"call the method filter.get_request_repr with an argument request , format string '\n { 0 } ' with the result , substitute the result for request_repr ."
"from django . db import connections , DEFAULT DB ALIAS",from django.db import connections and DEFAULT_DB_ALIAS into default name space .
if memo is None :,"if memo is None ,"
"if action == "" STR_ "" :","if action equals to string `` apply_start '' ,"
from django . core . validators import validate ipv4 address,from django.core.validators import validate_ipv4_address .
"if not self . use natural primary keys or not hasattr ( obj , STR_ ) :",if self.use_natural_primary_keys is false and obj doesnt have 'natural_key ' argument .
if cwords [ NUM_ ] == STR_ :,"if first element of cwords equals a string 'runfcgi ' ,"
in put type = STR_,input_type is a string 'password ' .
data value = data if data is not None else,"substitute data for data_value if data is not None , otherwise data_value is an empty list ."
"def add ( self , key , value , timeout = DEFAULT TIMEOUT , version = None ) :","define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None ."
"form = ManagementForm ( auto id = self . auto id , prefix = self . prefix , in itial = { TOTAL FORM COUNT : self . total form count ( ) , INITIAL FORM COUNT : self . in itial form count ( ) , MIN NUM FORM COUNT : self . min num , MAX NUM FORM COUNT : self . max num } )","form is an instance of ManagementForm class , created with 3 arguments : auto_id as self.auto_id , prefix as self.prefix ,"
tables = connection . in trospection . table names ( ),"call the method connection.introspection.table_names , substitute the result for tables ."
safe data = { },safe_data is an empty dictionary .
if push is not None :,"if push is not None ,"
in t part gd += digit,append digit to int_part_gd .
return False,return boolean False .
wsgi opts [ STR_ ] = options [ STR_ ] is not None,"if value under the 'debug ' key of options dictionary is not None , substitute it for value under the 'debug ' key of wsgi_opts dictionary ."
"shells = [ STR_ , STR_ ]",shells is a list containing 2 elements : string 'ipython ' and string 'bpython ' .
"warn msg = ( "" STR_ "" "" STR_ "" "" STR_ "" ) % ( c , filemsg , comment lineno cache )","warn_msg is a string `` The translator-targeted comment ' % s ' ( % sline % d ) was ignored , because it was n't the last item on the line . `` ,"
"def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :","and unpacked dictionary kwargs . define the method subwidgets with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple ."
os . rmdir ( tmpdir ),remove tmpdir directory .
try :,"try ,"
id  = widget . attrs . get ( STR_ ) or self . auto id,"get the value under the 'id ' key of the widget.attrs dictionary , if the key exists substitute it for id_ ,"
return self . META . get ( STR_ ) == STR_,"get the value under the 'HTTP_X_REQUESTED_WITH ' key of the self.META dictionary , if it equals string 'XMLHttpRequest ' ,"
return True,"to_locale called with an argument lang_code , if the result is not None , return boolean True ."
else :,"if not ,"
self .   starttag text = None,set self.__starttag_text to None .
"return self .  stream . read ( * args , ** kwargs )",call the method self._stream.read with 2 arguments : unpacked list args and unpacked dictionary kwargs .
else :,"if not ,"
if pop context :,"if pop_context is true ,"
nodes = [ ],nodes is an empty list .
return False,return boolean False .
from django . core . serializers import base,from django.core.serializers import base into default name space .
"if not is in stance ( s , six . string types ) :","if s is not an instance of the object six/string_types ,"
"def get template from string ( source , or igin = None , name = None ) :","define the function get_template_from_string with 3 : source , origin set to None and name set to None ."
"def handle ( self , app or project , name , target = None , ** options ) :","action set to string 'append ' , default as an empty list and help set to a string : 'The file name ( s ) to render . Separate multiple extensions with commas , or use -n multiple times. ' . define the method handle with 5 arguments : self , app_or_project , name , target set to None and unpacked dictionary options ."
self . validators . remove ( self .  regex validator ),remove self._regex_validator from self.validators .
raise TemplateSyntaxError ( STR_ STR_ % option ),"raise an TemplateSyntaxError exception with an argument string 'The % r option was specified more than once . ' ,"
"reloader ( wrapped main func , args , kwargs )","call the function reloader with wrapped_main_func , args and kwargs as arguments ."
"self . stdout . write ( self . style . MIGRATE HEADING ( "" STR_ "" % writer . filename ) + "" STR_ "" )","substitute ' % s ' in a string `` Full migrations file ' % s ' : '' with writer.filename , append newline to it ,"
self . full clean ( ),call the method self.full_clean .
path = [ path ],path is an list containing path .
"raise self . error ( token , "" STR_ "" )","call the method self.error with 2 arguments : token and string `` Empty variable tag '' , return the result ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
if mtime ! =  mtimes [ filename ] :,"if mtime is different than the value of dictionary _mtimes under the key filename ,"
cursor . execute ( sql ),call the method cursor.execute with sql as argument .
value = - + value,"append value to the '- ' , substitute it for value ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ )","call the add_argument method on the parser object with string ' -- backwards ' , asction set to 'store_true ' , dest set to 'backwards ' ,"
if dirname and not os . path . exists ( dirname ) :,"if dirname is true and dirname path doesnt exists ,"
for f in opts . concrete fields + opts . virtual fields + opts . many to many :,"concatenate opts.concrete_fields , opts.virtual_fields and opts.many_to_many , for every f in the result ,"
truncate len = length,substitute length for truncate_len .
"shutil . rmtree ( path to remove , onerror = rmtree errorhandler )",call the function shutil.rmtree with 2 arguments : path_to_remove and onerror set to rmtree_errorhandler .
try :,"try ,"
return,return nothing .
return   ( STR_ ),"call the function _ with an argument string ' a.m . ' , return the result ."
class DateTimeField ( BaseTemporalField ) :,"and format , call the method time on the result , return the result . derive the class DateTimeField from the base class BaseTemporalField class ."
imatch = in line re . match ( t . contents ),"call the function inline_re.match with an argument t.contents , substitute the result for imatch ."
for pattern in self . url patterns :,"for every pattern in self.url_patterns ,"
data set = set ( force text ( value ) for value in data ),"for every value in result of the method self.prepare_value called with an argument initial . data_set is set created out of return values of the function force_text called with an argument value ,"
"from . . import Warning , register , Tags","from .. import Warning , register and Tags into default name space ."
"parser . add argument ( STR_ , nargs = * )",call the method parser.add_argument with arguments : string 'args ' and nargs set to '* ' .
if len ( words ) > length :,"if length of words is greater than length ,"
"return self .  post , self .  files",return self._post and self._files .
opts . fields = None,opts.fields is None .
self . saved forms . append ( form ),append form to self.saved_forms .
def media ( self ) :,define the method media with an argument self .
return True,return boolean True .
field desc += STR_,"append string ' , ' to field_desc ."
import decimal,import module decimal .
from django . conf import settings,from django.conf import settings into default name space .
"space = "" """,substitute string `` `` for space .
"formatted = "" STR_ "" . join ( sorted ( formatted ) )","sort elements formatted , join them in the list separated with newline character , substitute the result for formatted ."
if response . streaming :,"if response.streaming is true ,"
"def add library ( self , lib ) :",define the function add_library with 2 arguments : self and lib .
def split url ( url ) :,define the function split_url with an argument url .
try :,"try ,"
singular = [ ],singular is an empty list .
from django . conf import settings,"name for base_name , top_dir for base_directory and docs_version for 'docs_version ' and autoescape set to boolean False . from django.conf import settings into a default name space ,"
if self . feed [ STR_ ] is not None :,"if value under the 'language ' key of the self.feed dictionary is not None ,"
try :,"try ,"
else :,"if not ,"
sys . exit ( NUM_ ),where ' % r ' is replaced with subcommand and ' % s ' is replaced with self.prog_name . call the function sys.exit with an argument integer 1 .
self . fed . append ( STR_ % name ),"format string ' & % s ; ' with name , append it to self.fed ."
"in cremental = config . pop ( STR_ , False )","get config dictionary element under 'incremental ' key , if it exists substitute it for incremental , if not ,"
else :,"if not ,"
self .  non form errors = None,self._non_form_errors is None .
self .  post parse error = True,self._post_parse_error is boolean True .
if match :,"if match is true ,"
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
exp = Decimal ( STR_ ) / ( Decimal ( NUM_ ) ** abs ( p ) ),"instantiate class Decimal with string ' 1.0 ' as argument , divide it by product of instance of Decimal class created with integer 10 ,"
parser . ExternalEntityRefHandler = self . external entity ref handler,substitute self.external_entity_ref_handler for parser.ExternalEntityRefHandler .
if age > max age :,"if age is greater than max_age ,"
"super ( SimpleCookie , self ) . load ( rawdata )",from the base class of the SimpleCookie class call the method load with rawdata as argument .
"def listdir ( self , path ) :",define the method listdir with arguments self and path .
"from django . utils . encoding import force bytes , force str , force text","from django.utils.encoding import force_bytes , force_str and force_text into default name space ."
if app label not in executor . loader . migrated apps :,"if app_label is not contained in executor.loader.migrated_apps ,"
from django . conf import settings,from django.conf import settings into default name space .
"return format html ( STR_ , option value , selected html , force text ( option label ) )","call the function format_html with 4 arguments : string ' < option value= '' { 0 } '' { 1 } > { 2 } < /option > ' , option_value , selected_html ,"
return DebugVariableNode ( contents ),"return an instance of DebugVariableNode , created with an argument contents ."
"self . appendlist ( force text ( key , encoding , errors = STR_ ) , force text ( value , encoding , errors = STR_ ) )",call the method self.appendlist with 2 arguments : return value of the function force_text with 3 arguments :
temp lib . tags [ name ] = lib . tags [ name ],substitute value under the name key of the lib.tags dictionary for value under the name key of the temp_lib.tags dictionary .
def execute ( self ) :,"define the method execute with an argument self ,"
for header in cc delim re . split ( response [ STR_ ] ) :,for every header in list of strings compiled by splitting string cc_delim_re with value under the key 'Vary ' of response dictionary as a delimiter .
def execute from command line ( argv = None ) :,define the function execute_from_command_line with an argument argv set to None .
deactivate ( ),call the method deactivate .
for char in fmt :,"for every char in fmt ,"
return tf . format ( format string ),"call the method tf.format with an argument format_string , return the result ."
class HttpRequest ( object ) :,derive the class HttpRequest from the object base class .
obj = self . var,substitute self.var for obj .
return patterns,return patterns .
LOCK NB = fcntl . LOCK NB,substitute fcntl.LOCK_NB for LOCK_NB .
"namespaces [ namespace ] = ( p pattern + prefix , sub pattern )","substitute tuple containing 2 elements : sum of p_pattern and prefix , and sub_pattern for value under the namespace key of the namespace dictionary ."
result . queryset = result . queryset,substitute result.queryset for result.queryset .
"if not hasattr ( e , STR_ ) :","if e doesnt have an 'django_template_source ' attribute ,"
"yield "" STR_ """,yield string `` from __future__ import unicode_literals '' as the result .
"return self . add truncation text ( text [ : end index or NUM_ ] , truncate )","call the method self.add_truncation_text with 2 arguments : if end_index is greater than zero , first end_index elements of text ,"
import os,import module os .
cursor = connection . cursor ( ),"call the method connection.cursor , substitute the result for cursor ."
try :,"try ,"
"def utcoffset ( self , dt ) :",define the method utcoffset with 2 arguments : self and dt .
"value = var . resolve ( context , True )","call the method var.resolve with 2 arguments : context and True , substitute the result for value ."
@ staticmethod,"static method ,"
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'description ' and value under the 'description ' key of the item dictionary .
except KeyError :,"if KeyError exception is caught ,"
if not dklen :,"if dklen is false ,"
"si = open ( STR_ , STR_ )","open '/dev/null ' file in read mode , substitute the result for si ."
class Command ( BaseCommand ) :,derive the class Command from the BaseCommand class .
"if hasattr ( middleware , STR_ ) :","if middleware has an attribute 'process_response ' ,"
"default error messages = { STR_ :   ( STR_ ) , }",default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string 'Enter a valid date . ' for 'invalid ' .
"self . stderr . write ( "" STR_ "" "" STR_ "" "" STR_ "" % new path , self . style . NOTICE )","replace ' % s ' in string `` Notice : Could n't set permission bits on % s . You 're probably using an uncommon filesystem setup . No problem . `` ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
else :,"if not ,"
" meth self = "" STR_ """,_meth_self is a string `` im_self '' .
output = [ ],output is an empty list .
"def constant time compare ( val1 , val2 ) :",define the function constant_time_compare with 2 arguments : val1 and val2 .
for middleware method in self .  request middleware :,"for every middleware_method in self._request_middleware ,"
"self . in stance . full clean ( exclude = exclude , validate unique = False )",call the method self.instance.full_clean with 2 arguments : exclude set to exclude and validate_unique set to boolean False .
if cls .  delegate text :,"if cls._delegate_text is true ,"
self . args = args,substitute args for self.args .
"def  get context stack frame ( self , context ) :",define the method _get_context_stack_frame with 2 arguments : self and context .
from django . db . migrations . autodetector import MigrationAutodetector,from django.db.migrations.autodetector import MigrationAutodetector into default name space .
msg [ STR_ ] = self . subject,substitute self.subject for value under the 'Subject ' key of msg dictionary .
self .  errors [ field ] = self . error class ( error class = STR_ ),"call the method self.error_class with an argument error_class as an string 'nonfield ' ,"
expires = None,expires is None .
if options . pythonpath :,"if options.pythonpath is true ,"
self . name = name,substitute name for self.name .
from django . utils . module loading import module has submodule,from django.utils.module_loading import module_has_submodule into default name space .
def   iter   ( self ) :,define the method __iter__ with an argument self .
"def regroup ( parser , token ) :",define the function regroup with 2 arguments : parser and token .
if self . verbosity >= NUM_ :,"with all occurrences of ' % s ' replaced with app_name and model._meta.object_name , respectively . if self.verbosity is greater or equal to integer 1 ,"
locales = set ( locales ) - set ( exclude ),locales is a difference between the locales and exclude sets .
if html :,"if html is true ,"
class NullBooleanSelect ( Select ) :,derive the class NullBooleanSelect from the Select base class .
pass,do nothing .
from django . utils . itercompat import is  iterable,from django.utils.itercompat import is_iterable into default name space .
opts = tuple ( s for s in styles if s in opt dict . keys ( ) ),"opts is a tuple created out of elements s , for every s in styles is s is in the keys of the opt_dict dictionary ."
"in teger types = in t ,",substitute int for integer_types .
mime type = STR_,mime_type is a string 'application/atom+xml ; charset=utf-8 ' .
class ModelFormMetaclass ( DeclarativeFieldsMetaclass ) :,if not self.error_messages is None . derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class .
def clean ( self ) :,define the method clean with an argument self .
TYPE = FIELD,"substitute FIELD for TYPE ,"
def keys ( self ) :,return resulting list . define the method keys with an argument self .
"class Form ( six . with metaclass ( DeclarativeFieldsMetaclass , BaseForm ) ) :",derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm .
del  serializers [ format ],delete the _serializers dictionary entry at the format key .
"from django . utils . encoding import force bytes , force text , force str , iri to uri","from django.utils.encoding import force_bytes , force_text , force_str and iri_to_uri into default name space ."
file = file or path,substitute file_or_path for file .
if not strict :,"if strict is false ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"raise Resolver404 ( { STR_ : tried , STR_ : new path } )",raise an Resolver404 exception with an argument dictionary containing 2 entries : new_path for 'path ' and tried for 'tried ' .
return [ field for field in self if field . is  hidden ],"for field in self if field.is_hidden is true , append field to a list , return the resulting list ."
attrs plus [ STR_ ] += STR_ . format ( i ),"prepend string ' _ ' to i converted to an string , append the result to the value under the 'id ' key of the attrs_plus ."
view = transaction . atomic ( using = db . alias ) ( view ),"call the function transaction.atomic , with using set to db.alias as the argument , return value is a function which is called ,"
class Command ( BaseCommand ) :,derive class Command from the BaseCommand base class .
return MONTHS 3 [ self . data . month ] . title ( ),"get the value under the self.data.month key of the MONTHS_3 dictionary , call on it the method title , return the result ."
validate ipv46 address ( ip address ),call the function validate_ipv46_address with an argument ip_address .
else :,"if not ,"
settings . USE I18N = True,settings.USE_I18N is boolean True .
self . base url = base url,substitute base_url for self.base_url .
if daemonize :,"if daemonize is true ,"
generic lang code = lang code . split ( - ) [ NUM_ ],"split lang_code by character '- ' , substitute the first element of the result for generic_lang_code ."
"def   setitem   ( self , name , val ) :","define the method __setitem__ with arguments self , name and val ."
error = ValidationError ( error ),error is an instance of ValidationError created with an argument error .
c = self . resolve ( c ),"call the method self.resolve with an argument c , substitute the result for c ."
wrapper . cache info = cache info,substitute cache_info for wrapper.cache_info .
"def get unique error message ( self , unique check ) :",define the method get_unique_error_message with 2 arguments : self and unique_check .
message . message = error messages [ message . code ],substitute error_messages under the message.code key of error_messages dictionary for message.message .
if e . errno ! = errno . ENOENT :,"if e.errno equals to errno.EEXIST ,"
LockFileEx . restype = BOOL,substitute BOOL for LockFileEx.restype .
"super ( QueryDict , self ) . setlist ( key , list  )","substitute the resulting list for list_ . call the method setlist from the base class of the QueryDict class , with arguments key and list_ ."
in verse match = False,inverse_match is boolean False .
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
decompress = False,"s and max_age set to max_age , use it as an argument for the force_bytes function , substitute the result for base64d . decompress is boolean False ."
if use grouping :,"if use_grouping is true ,"
"result = super ( SortedDict , self ) . popitem ( )","call the method popitem from the base class of the class SortedDict , substitute the result for result ."
while token . contents . startswith ( elif ) :,"while token.contents starts with a string 'elif ' ,"
"for   , nodelist in self . conditions nodelists :","for every _ and nodelist in self.conditions_nodelists ,"
"for t in Lexer ( src , or igin ) . tokenize ( ) :","instantiate Lexer class with 2 argumets src and origin , call the method tokenize from it , for every t in the result ,"
return out,return out .
"statements = connection . ops . sequence reset sql ( self . style , models )","call the method connection.ops.sequence_reset_sql with 2 arguments self.style and models , substitute the result for statements ."
"return getattr ( in stance , name ) ( value )","get name attribute from the instance object , call it with an argument value and return the result ."
"compare = lambda self , a , b : a < b","compare is a lambda function with arguments self , a and b , return value is boolean true if a is lesser than b , otherwise is false ."
daemonize = False,daemonize is boolean False .
import subprocess,import module subprocess .
@ register . tag ( if ),"called with an argument value and value . register.tag decorator function with an argument 'if ' ,"
"from django . forms . forms import DeclarativeFieldsMetaclass , BaseForm",from django.forms.forms import DeclarativeFieldsMetaclass and BaseForm into default name space .
requires system checks = False,requires_system_checks is boolean False .
"def filter ( self , record ) :",define the method filter with 2 arguments : self and record .
result . parent = self,substitute self for result.parent .
"def execute ( self , * args , ** options ) :","define the method execute with 3 arguments : self , unpacked list args and unpacked dictionary options ."
"warnings . warn ( "" STR_ "" % ( self . class name , self . old method name , self . new method name ) , self . deprecation warning , NUM_ )","call the function warnings.warn with 3 arguments : string `` ` % s. % s ` is deprecated , use ` % s ` instead . `` ,"
self .  current app = current app,substitute current_app for self._current_app .
"def delete ( self , key , version = None ) :","define the method delete with 3 arguments : self , key , and version set to None ."
get git changeset . cache = changeset,substitute changeset for get_git_changeset.cache .
output = [ ],output is an empty list .
self . timezone = get default timezone ( ),"call the function get_default_timezone , substitute the result for self.timezone ."
exp = exp . replace ( microsecond = NUM_ ),"call the exp.replace with microsecond set to integer 0 , substitute the result for exp ."
@ classmethod,"class method decorator ,"
extra params [ STR_ ] = True,value under the 'blank ' key of the extra_params dictionary is boolean True .
from django . apps import apps,from django.apps import apps into default name space .
def   str   ( self ) :,define the method __str__ with an argument self .
def get standard processors ( ) :,define the function get_standard_processors .
upto = end,"tuple with 2 elements : start and end and boolean False , append the result to result . substitute end for upto ."
import imp,import imp .
"cache key = STR_ % ( key prefix , method , url . hexdigest ( ) , ctx . hexdigest ( ) )","force_bytes function , use the result as the argument for the call to the hashlib.mdb function , store the result in url . substitute the ' % s ' in string 'views.decorators.cache.cache_page. % s. % s. % s. % s ' with key_prefix , method ,"
self . COOKIES = { },self.COOKIES is an empty dictionary .
class TemplateTagNode ( Node ) :,"use the result as an argument for the call to the function strip_spaces_between_tags , return the result . derive the class TemplateTagNode from Node base class ."
from django . utils . timezone import get current timezone name,from django.utils.timezone import get_current_timezone_name to the default name space .
except TemplateSyntaxError as e :,"if TemplateSyntaxError , renamed to e , exception is caught ,"
@ property,"property decorator ,"
raise,raise an exception .
import threading,import module threading .
mask = ( pyinotify . IN MODIFY | pyinotify . IN DELETE | pyinotify . IN ATTRIB | pyinotify . IN MOVED FROM | pyinotify . IN MOVED TO | pyinotify . IN CREATE ),"perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY pyinotify.IN_DELETE , pyinotify.IN_ATTRIB ,"
class CheckboxFieldRenderer ( ChoiceFieldRenderer ) :,derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class .
if val is None :,"if val is None ,"
"from django . utils . html import conditional escape , format html",from django.utils.html import conditional_escape and format_html into default name space .
except AttributeError :,"if AttributeError exception is caught ,"
return any ( self . dicts ),"if any element of self.dicts is true , return boolean True , otherwise return boolean False ."
self .  assert mutable ( ),call the method self._assert_mutable .
while True :,"endless loop ,"
pass,do nothing .
def I ( self ) :,define the method I with an argument self .
else :,"`` This will IRREVERSIBLY DESTROY all data currently in the % r database , and return each table to an empty state . '' `` Are you sure you want to do this ? `` Type 'yes ' to continue , or 'no ' to cancel : `` , where ' % s ' is replaced with value under the 'NAME ' key of the connection.settings_dict dictionary . if not ,"
"raise ImproperlyConfigured ( "" STR_ "" "" STR_ "" "" STR_ "" % name )","raise an ImproperlyConfigured exception with an argument string `` Creating a ModelForm without either the 'fields ' attribute ,"
if self . verbosity >= NUM_ :,"if self.verbosity is grater than , or equal to integer 2 ,"
self . content type extra = None,self.content_type_extra is None .
args . append ( self . choices ),append self.choices to args .
from django . core import signing,from django.core import signing into default name space .
self . pointer = i,substitute i for self.pointer .
return get resolver ( urlconf ) . resolve ( path ),"call the function get_resolver with an argument urlconf , on the result call the method resolve with an argument path , return it ."
else :,"if not ,"
"return set ( chain ( * [ check . tags for check in self . registered checks if hasattr ( check , STR_ ) ] ) )","append check.tags into a list for every check in self.registered_checks if check has 'tags ' attribute , put the elements into a set and return it ."
return ZERO,return ZERO .
def COOKIES ( self ) :,define COOKIES method with self as the argument .
requires system checks = False,requires_system_checks is boolean False .
"TestRunner = get runner ( settings , options . get ( STR_ ) )","call the method get_runner with 2 arguments : settings and value under the 'testrunner ' key of the options dictionary , substitute it for the TestRunner ."
def  iterkeys ( self ) :,define the method _iterkeys with an argument self .
data = self .  coerce ( data ),"call the method self._coerce with an argument data , substitute the result for data ."
if key not in self :,"if key is not contained in self ,"
if child . nodeType == child . TEXT NODE or child . nodeType == child . CDATA SECTION NODE :,"if child.nodeType equals to child.TEXT_NODE or child.nodeType equals to child.CDATA_SECTION_NODE ,"
with connection . cursor ( ) as cursor :,"with the result , call the method connection.cursor , with the result as cursor ,"
def  make parser ( self ) :,if the key doesnt exists substitute boolean False for self.ignore . define the method _make_parser with an argument self .
if pattern . app name :,"if pattern.app_name is true ,"
"if options [ "" STR_ "" ] is None :","if value under the 'daemonize ' of options dictionary is None ,"
show traceback = options . get ( STR_ ),"get the value under the 'traceback ' key of the options dictionary , substitute the result for traceback ."
"parser . add argument ( STR_ , metavar = STR_ , nargs = * , help = STR_ )","call the method parser.add_argument with 4 arguments : string 'args ' , metavar set to string 'app_label ' , nargs set to character'* ' ,"
return value,return value .
"self . set payload ( text , utf8 charset )","call the method payload.decode with 2 arguments : text and utf8_charset , substitute the result for self._payload ."
return bool ( self . name ),"convert self.name into an boolean , return it ."
return NUM_,return integer 0 .
class ReferenceLocalTimezone ( tzinfo ) :,derive the class ReferenceLocalTimezone from the tzinfo base class .
"def   init   ( self , template , context = None , content type = None , status = None ) :","define the method __init__ with 5 arguments : self , template , context set to None , content_type set to None and status set to None ."
"date data = ( date . year , date . month , date . day )","date_data is a tuple with 3 elements : date.year , date.month and date.day ."
return NUM_ << NUM_,"bitwise shift integer 1 to the left by 31 spaces , return the result ."
def server bind ( self ) :,define the function server_bind with an argument self .
logger . addHandler ( self . config [ STR_ ] [ h ] ),call the method logger.addHandler with an argument : h-th element of value under 'handlers ' key of self.config dictionary .
else :,"if not ,"
from django . utils import six,from django.utils import six into default name space .
"from django . utils . deprecation import RenameMethodsBase , RemovedInDjango19Warning",from django.utils.deprecation import RenameMethodsBase and RemovedInDjango19Warning into default name space .
if filename :,"if filename is true ,"
if settings . TEMPLATE DEBUG and or igin is None :,"if settings.TEMPLATE_DEBUG is true and origin is None ,"
def add metaclass ( metaclass ) :,define the function add_metaclass with an argument metaclass .
"p = Popen ( args , shell = False , stdout = PIPE , stderr = PIPE , close fds = os . name ! = STR_ , universal newlines = True )","p is a instance of Popen class , created with 6 arguments : args , shell set to boolean False , stdout set to PIPE ,"
from io import BytesIO,from io import BytesIO into default name space .
"def   init   ( self , view name , args , kwargs , asvar ) :","define the method __init__ with 5 arguments : self , view_name , args , kwargs and asvar ."
return datetime . fromtimestamp ( os . path . getatime ( self . path ( name ) ) ),"call the function self.path with argument name , use the result as an argument for the call to the function os.path.getatime ,"
app configs = reversed ( list ( apps . get app configs ( ) ) ),"call the method apps.get_app_configs , convert the result in a list , reverse the order of elements , substitute the result for app_configs ."
class dummy :,define class dummy .
"def   init   ( self , * args , ** kwargs ) :","define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments ."
sign = - if offset < NUM_  else +,"if offset is lesser than integer 0 , sign is set to '- ' , otherwise sign is '+ ' ,"
return text,"if not an empty string , and truncate , return the result . return text ."
"help = "" STR_ """,help is a string `` Prints the CREATE TABLE SQL statements for the given app name ( s ) . `` .
"zfile = GzipFile ( mode = STR_ , compresslevel = NUM_ , fileobj = buf )","zfile is an instance of GzipFile class , created with 3 arguments : mode set to string 'wb ' , compresslevel set to integer 6 ,"
"def value from datadict ( self , data , files , name ) :","return the result . define the method value_from_datadict with 4 arguments : self , data , files and name ."
continue,skip this loop iteration .
return escapejs ( value ),"call the function escapejs with an argument value , return the result ."
return self . keyOrder [ : ],return hard copy of self.keyOrder elements .
from django . utils . module loading import import string,from django.utils.module_loading import import_string into default name space .
for field in model .  meta . many to many :,"for every field in model._meta.many_to_many ,"
try :,"try ,"
continue,"and call to the method form.has_changed evaluates to false , skip this loop iteration ,"
locale dir = self . default locale path,substitute self.default_locale_path for locale_dir .
pass,do nothing .
from django . db . backends . utils import typecast timestamp,from django.db.backends.utils import typecast_timestamp into default name space .
class MultiWidget ( Widget ) :,derive the class MultiWidget from the Widget base class .
self . stdout . write ( self . style . SQL KEYWORD ( connection . ops . start transaction sql ( ) ) ),"call the method connection.ops.start_transaction_sql , use the result as an argument for the call to the method self.style.SQL_KEYWORD ,"
"self . stdout . write ( STR_ % get text list ( list ( self . extensions ) , and ) )","call the method self.stdout.write with an argument string 'examining files with the extensions : % s\n ' ,"
"def clean ( self , value ) :",define the method clean with arguments self and value .
in itial set = set ( force text ( value ) for value in in itial ),"for every value in initial call the function force_text with an argument value , add the results into a set , substitute the resulting set for initial_set ."
max width = in t ( self . max width . resolve ( context ) ),"call the method self.max_width.resolve with an argument context , convert the result to an integer and substitute it for max_width ."
except TypeError :,"if TypeError exception is caught ,"
def parse color setting ( config string ) :,define the function parse_color_setting with an argument config_string .
response = middleware method ( request ),"call the middleware_method with the request as an argument , substitute the result for response ."
target app labels only = False,target_app_labels_only is boolean False .
try :,"try ,"
import cgi,import module cgi .
for func in self . response fixes :,"for every func in self.response_fixes ,"
if not match :,"if there is no match ,"
try :,"try ,"
def handle m2m ( value ) :,"define the function handle_m2m with an argument value ,"
"neg , value = self . convert ( s , self . digits , self . decimal digits , self . sign )","call the self.convert method with s , self.decimal , self.decimal_digits and self.sign as arguments , assign the result to the neg and value , respectively ."
else :,"if not ,"
except TypeError :,"if TypeError exception is caught ,"
"words [ i ] = mark safe ( STR_ % ( lead , middle , trail ) )","format string ' < a href= '' % s '' % s > % s < /a > ' with lead , middle and trail , use it as an argument for the call to the function mark_safe ,"
try :,"try ,"
def get storage class ( import path = None ) :,"use the result as an argument for the call to the function datetime.fromtimestamp , return the result . define the function get_storage_class with argument import_path=None defaulting to None ."
if proto >= NUM_ :,"if proto is greater than or equal to integer 2 ,"
 load serializers ( ),call the function _load_serializers .
"if safe and not is in stance ( data , dict ) :",and unpacked dictionary kwargs . if safe is true and data is not an instance of dict type .
"from django . db . migrations . loader import MigrationLoader , AmbiguityError",from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space .
"def   ne   ( self , other ) :",define the method __ne__ with an argument self .
"def  create message ( self , msg ) :",define the method _create_message with arguments self and msg .
return True,return boolean True .
return errors,"which has not been installed . '' with all the ' % s ' replaced by values of description , name and reference joined into a string delimited by ' . ' , respectively , obj set to receiver.__module__ , hint set to None and id set to string 'signals.E001 ' , append the result to errors . return errors ."
"candidate subs = dict ( zip ( prefix args + params , text args ) )","create a list of tuples out of 2 lists : appended params list to prefix_args and text_args , covert the result into a dictionary ,"
self . creation counter = Field . creation counter,substitute Field.creation_counter for self.creation_counter .
name = self . fk . name,substitute self.fk.name for name .
from itertools import product,from itertools import product into default name space .
"from django . utils . safestring import mark safe , SafeData",from django.utils.safestring import mark_safe and SafeData into default name space .
chunk = stream . read ( max header size ),"call the method stream.read with an argument max_header_size , substitute the result for chunk ."
"db name = connection . creation . create test db ( verbosity = verbosity , autoclobber = not in teractive , serialize = False )","call the method connection.creation.create_test_db with verbosity set to verbosity , autoclobber set to inverse value of interactive ,"
self . lookups = tuple ( var . split ( VARIABLE ATTRIBUTE SEPARATOR ) ),"where ' % s ' is replaced with var . call the method var.split with an argument VARIABLE_ATTRIBUTE_SEPARATOR , convert the result to a tuple and substitute it for self.lookups ."
else :,"if not ,"
"out = [ str ( x ) for x in [ self . id , self . first , self . second ] if x is not None ]","for x in a list containing 3 elements : self.id , self.first and self.second , if x is not None ,"
"parser . add argument ( STR_ , nargs = argparse . REMAINDER , help = STR_ )","call the method parser.add_argument with 3 arguments : string 'args ' , nargs set to argparse.REMAINDER and help as a string 'Various KEY=val options . '"
if self . cmd .  called from command line :,"if self.cmd._called_from_command_line is true ,"
if version is None :,"if version is None ,"
"return backend cls ( location , params )","evaluate the function backend_cls with location and params as arguments , return the result ."
continue,skip this loop iteration .
return smart text ( auto id ) % self . html name,"call the function smart_text with an argument auto_id , format the result with self.html_name , return it ."
push = block = block context . pop ( self . name ),"call the method block_context.pop with an argument self.name , assign the result to push and block ."
"return AssignmentNode ( takes context , args , kwargs , target var )","substitute the result for args and kwargs . return an instance of AssignmentNode class created with 4 arguments : takes_context , args , kwargs and target_var ."
pass,do nothing .
"return  i18n cache key suffix ( request , cache key )","return value of method url.hexdigest ( ) , return value of method ctx.hexdigest , respectively , substitute it for cache_key . call the function _i18n_cache_key_suffix with request and cache_key as arguments , return the result ."
return singular suffix,return singular_suffix .
"if not is in stance ( value , list ) :","if value is not an instance of list type ,"
"def validate key ( self , key ) :",define the method validate_key with self class instance and key as arguments .
"if not is in stance ( s , six . string types ) :","if s is not an instance of the object six.string_types ,"
try :,"try ,"
full module name = package name + STR_ + module name,"concatenate package_name , string ' . ' and module_name , substitute it for full_module_name ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"field output . append ( "" STR_ "" )",append string `` UNIQUE '' to field_output .
"representative = ESCAPE MAPPINGS . get ( ch , ch )","get the value under ch key of the ESCAPE_MAPPINGS dictionary , if it exists substitute it for representative , if not substitute ch for representative ."
class CheckMessage ( object ) :,derive class CheckMessage from object base class .
"elif not is in stance ( value , ( list , tuple ) ) :","otherwise if value is not an instance of list ot tuple type ,"
def unescape entities ( text ) :,define the function unescape_entities with an argument text .
default error messages = { STR_ :   ( STR_ ) },default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string 'Enter a valid time . ' for 'invalid ' .
ORDERING FIELD NAME = STR_,ORDERING_FIELD_NAME is a string 'ORDER ' .
response [ STR_ ] = STR_ . join ( vary headers + additional headers ),"substitute this list for additional_headers . join all of the elements of vary_headers and additional_headers in a string delimited by a comma ,"
"stream = LazyStream ( ChunkIter ( self .  input data , self .  chunk size ) )","instantiate class ChunkIter with 2 arguments : self._input_data and self._chunk_size , use it to instantiate LazyStream class ,"
"model dependencies . append ( ( model , deps ) )",append a tuple containing 2 elements : model and deps to model_dependencies .
elif option == STR_ :,"where ' % s ' is replaced with first element of bits . otherwise if options equals 'only ' ,"
class LabelCommand ( BaseCommand ) :,derive the LabelCommand class from the BaseCommand base class .
fixture dirs = [ os . path . dirname ( fixture name ) ],"call the method os.path.dirname with an argument fixture_name , append it to a list , substitute resulting list for fixture_dirs ."
self .  cull ( ),call the self._cull method .
if in itial is None :,"if initial is None ,"
@ stringfilter,"decorator stringfilter ,"
raise NotImplementedError ( STR_ ),"raise an exception of class NotImplementedError , with string 'subclasses of BaseCache must provide a delete ( ) method ' as argument ."
"raise ValidationError ( self . message , code = self . code )",raise a ValidationError exception with arguments self.message and code set to self.code .
Module six moves urllib parse .  moved attributes =  urllib parse moved attributes,substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes .
"shutil . copymode ( old path , new path )",call the function shutil.copymode with arguments old_path and new_path .
value = new value,substitute new_value for value .
delta = delta + datetime . timedelta ( seconds = NUM_ ),"call the method datetime.timedelta with an argument seconds set to integer 1 , increment delta by it ."
"handler . endElement ( "" STR_ "" )",call the method handler.endElement with an argument string 'feed ' .
time re = re . compile ( r STR_ r STR_ ),"compile regex from raw string ' ( ? P < hour > \d { 1,2 } ) : ( ? P < minute > \d { 1,2 } ) ( ? : : ( ? P < second > \d { 1,2 } ) ( ? : \. ( ? P < microsecond > \d { 1,6 } ) \d { 0,6 } ) ? ) ? ' ,"
"return quote ( force bytes ( path ) . replace ( b "" STR_ "" / "" STR_ "" / ~ ! * ( ) "" )
","evaluate function force_bytes with path as the argument , replace all of the occurancies of the `` \\ '' with `` / '' in the resulting string ,"
except Exception :,"if Exception exception is caught ,"
return self . get connection ( fail silently ) . send messages ( [ self ] ),"call the method self.get_connection with argument fail_silently , on the result call the method send_messages with one argument : list containing self , return the result ."
"return self .  open ( name , mode )","call the self._open method with name and mode arguments , return the result ."
with connections [ db ] . cursor ( ) as cursor :,"call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,"
class ChoiceInput ( SubWidget ) :,derive the class ChoiceInput from the SubWidget base class .
"if is in stance ( s , Exception ) :","if s is an instance of the subclass Exception ,"
bit = node,substitute node for bit .
return True,return boolean True .
"def in cr ( self , key , delta = NUM_ , version = None ) :","define the method incr with self class instance , key , delta set to integer 1 and version set to None , as arguments ."
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % token . contents )","raise an TemplateSyntaxError exception with an argument string `` 'for ' tag received an invalid argument : % s '' ,"
class FixedOffset ( tzinfo ) :,"`` Use django.utils.timezone instead . `` , RemovedInDjango19Warning and stacklevel set to 2. derive the class FixedOffset from the tzinfo base class ."
in ner result . extend ( res ),extend list inner_result with res .
"def   init   ( self , file = None , name = None , content type = None , size = None , charset = None , content type extra = None ) :","define the method __init__ with 7 arguments : self , file set to None , name set to None , content_type set to None , size set to None , charset set to None and content_type_extra set to None ."
state frame = self .  get context stack frame ( context ),"call the method self._get_context_stack_frame with an argument context , substitute the result for state_frame ."
"def as text ( self , attrs = None , ** kwargs ) :","use it as an argument for the call to the function force_text , return the result . define the method as_text with 3 arguments : self , attrs set to None and unpacked dictionary kwargs ."
if lib :,"if lib is true ,"
if unicodedata . combining ( char ) :,"call the function unicodedata.combining with an argument char , if it evaluates to true ,"
import hashlib,import module hashlib .
"def listdir ( self , path ) :",define the method listdir with arguments self and path .
"def   setitem   ( self , name , val ) :","define the method __setitem__ with arguments self , name and val ."
return { STR_ : timezone . get current timezone name ( ) },return an dictionary containing 1 entry : return value of the function timezone.get_current_timezone_name for 'TIME_ZONE ' .
def http date ( epoch seconds = None ) :,and elements of rfcdate from 12-th to the 25-th index . define the function http_date with an argument epoch_seconds set to None .
else :,"string joined from invalided_apps list and separated with string ' , ' . if not ,"
except AttributeError :,"if AttributeError exception is caught ,"
try :,"try ,"
"def delete ( self , key , version = None ) :","define the method delete with self class instance , key and version set to None as arguments ."
"global  format cache ,  format modules cache",use global variables _format_cache and _format_modules_cache .
context [ self . asvar ] = result,substitute result for value under the self.asvar key of context dictionary .
if model not in app list value :,"if mode is not contained in app_list_value ,"
"elif options [ "" STR_ "" ] . lower ( ) in ( STR_ , STR_ , STR_ ) :","convert the value under the 'daemonize ' key of options dictionary to lowercase , if it equals to string 'false ' , 'no ' or ' f ' ,"
"self . add filters ( logger , filters )",call the method self.add_filters with 2 arguments : logger and filters .
"decorator = Node ( syms . decorator , [ Leaf ( token . AT , "" STR_ "" ) , Name ( STR_ ) ] )","decorator is an instance of class Node , created with 2 arguments : instance of Leaf class created with 2 arguments : token.AT and `` @ ' ,"
continue,skip this loop iteration .
"def ungettext ( singular , plural , number ) :","define the function ungettext with 3 arguments : singular , plural and number ."
else :,"if not ,"
"candidate pat = prefix norm . replace ( % , STR_ ) + result","replace all the occurrences of the ' % ' string for ' % % ' , append result to the previous result , substitute it for candidate_pat ."
"return [ "" "" , "" STR_ "" , "" STR_ "" , "" STR_ "" % table name ]","return the list , containing 4 elements : an empty string , string `` class Meta : '' , string `` managed = False '' ,"
obj pk = field . rel . to .  meta . pk . to python ( n . getAttribute ( STR_ ) ),"call the method n.getAttribute with string 'pk ' as argument , use the result as an argument for the call to the field.rel.to._meta.pk.to_python method , substitute the result for obj_pk ."
data = self . to python ( data ),"call the function self.to_python with an argument data , substitute the result for data ."
"self . startElement ( name , attrs )",cal the method self.startElement with 2 arguments : name and attrs .
def pretty name ( name ) :,define the function pretty_name with an argument name .
return  trans . check for language ( lang code ),"call the function _trans.check_for_language with an argument lang_code , return the result ."
exclude = self .  get validation exclusions ( ),"call the method self._get_validation_exclusions , substitute the result for exclude ."
else :,"if not ,"
for frag in name :,for every frag in name .
"self .  request = datastructures . MergeDict ( self . POST , self . GET )","call the datastructures.MergeDict with self.POST and self.GET as arguments , assign the result to self._request ."
 urlconfs . value = urlconf name,substitute urlconf_name for _urlconfs.value .
self . in itial = in itial or { },"if initial is true , substitute it for self.initial , if not self.files is an empty dictionary ."
class Archive ( object ) :,derive the class Archive from the object base class .
if self . help :,"if self.help is true ,"
"self . stdout . write ( "" STR_ "" , self . style . MIGRATE FAILURE )",call the self.stdout.write method with string `` ( no migrations ) '' and self.style.MIGRATE_FAILURE as arguments .
try :,"try ,"
except UnicodeEncodeError :,"if UnicodeEncodeError exception is caught ,"
if kwargs . get ( STR_ ) and self . widget == NumberInput :,"get the value under the 'localize ' key of the kwargs dictionary , if it is true and self.widget equals to NumberInput ,"
finally :,"finally perform ,"
self . to = list ( to ),"put to into a list , assign it to self.to ."
if in stance is None :,"if instance is None ,"
return True,return boolean True .
link [ PREV ] = last,substitute last for value under the PREV key of the link dictionary .
for cache alias in settings . CACHES :,"for every cache_alias in settings.CACHES ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
self . months = months,substitute months for self.months .
"def open ( self , mode = None ) :",define the method open with arguments self and mode set to None .
for name in pattern . reverse dict :,"for every name in pattern.reverse_dict ,"
class ChoiceField ( Field ) :,derive the class ChoiceField from the base class Field class .
from django . conf . locale import LANG INFO,from django.conf.locale import LANG_INFO .
msg . attach ( self .  create mime attachment ( * alternative ) ),"call the method self._create_mime_attachment with unpacked list alternative as an argument , use the result as an argument for the call to the msg.attach method ."
"parser . add argument ( STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","call the parser.add_argument method with the string ' -- database ' , default set to DEFAULT_DB_ALIAS and help containig string ,"
memo [ id ( self ) ] = result,"get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it ."
return not ( self == other ),"if self equals to other return boolean False , otherwise return boolean True ."
with connection . cursor ( ) as curs :,"with the result , evaluate method connection.cursor , with return value as curs ,"
"print ( "" STR_ "" % ( name , member . name , exc ) )","print a string `` In the tar file % s the member % s is invalid : % s '' , where ' % s ' is substituted with : name , member.name and exc , respectively ."
"from django . core . cache . backends . base import BaseCache , DEFAULT TIMEOUT",from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space .
best doublecolon start = - NUM_,best_doublecolon_start is an integer -1 .
t = select template ( file name ),"evaluates to true , call the function select_template with an argument file_name , substitute the result for t ."
if missing fields :,"new_class.declared_fields.keys . if missing_fields is true ,"
cursor . execute ( sql ),call the cursor.execute method with sql as argument .
"related att = getattr ( obj , field . get attname ( ) )","evaluate the field.get_attname , use the result as the name of the obj attribute to get , substitute it for related_att ."
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'rights ' and value under the 'feed_copyright ' key of the self.feed dictionary .
parser . delete first token ( ),call the method parser.delete_first_token .
matches = filter re . finditer ( token ),"call the method filter_re.finditer with an argument token , substitute the result for matches ."
"args , kwargs = parse bits ( parser , bits , params , varargs , varkw , defaults , takes context , function name )","call the function parse_bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes_context and function_name ,"
from io import BytesIO,from io import BytesIO into default name space .
base36 = BaseConverter ( BASE36 ALPHABET ),"call the BaseConverter function with BASE36_ALPHABET as argument , store the result in base36 ."
"super ( DateTimeBaseInput , self ) .   init   ( attrs )","call the method __init__ from the base class of the class DateTimeBaseInput , with an argument attrs ."
except ValueError :,"if ValueError exception is caught ,"
in itial = bool ( in itial ),convert initial into boolean and substitute it for initial .
"def   init   ( self , value , text ) :","define the method __init__ with 3 arguments : self , value and text ."
if i >= len ( subject ) :,"if i is greater than or equal to length of subject ,"
"global  cached modules ,  cached filenames",declare that we use global variables cached_modules and _cached_filenames in this function .
self . prefix = prefix or self . get default prefix ( ),"if prefix is true , substitute it for self.prefix , otherwise call the method self.get_default_prefix ,"
best doublecolon len = NUM_,best_doublecolon_len is an integer 0 .
"def list ( self , * args , ** kwargs ) :",define the method list with 3 arguments : self and unpacked list args and unpacked dictionary kwargs .
new context [ STR_ ] = csrf token,substitute csrf_token for value under the 'csrf_token ' key of new_context dictionary .
else :,"if not ,"
r = r [ : NUM_ ],substitute first 12 elements of r for r .
"lookups . appendlist ( name , ( new matches , p pattern + pat , dict ( defaults , ** pattern . default kwargs ) ) )","call the method lookups.appendlist with 2 arguments : name and a tuple containing 3 elements : new_matches , sum of p_pattern and pat ,"
if literal match :,"if literal_match is true ,"
"def add prefix ( self , in dex ) :",label set to return value of the function _ called with an string 'Delete ' and required as boolean False . define the method add_prefix with an argument self .
self . waiting writers -= NUM_,"decrement self.waiting_writers by integer 1 ,"
if self . connection :,"if self.connection is true ,"
import contextlib,import module contextlib .
request = None,request is None .
password = digest ( password ) . digest ( ),"call the function digest with an argument password , call the method digest on the result , substitute the result or password ."
if number == NUM_  and self . allow empty first page :,"if number equals a integer 1 and self.allow_empty_first_page is true ,"
return repr ( list ( self ) ),return the printable representation of the self object converted to a list .
formfield = self . fields [ field name ],substitute value under the field_name key of the self.fields dictionary for formfield .
logger . removeHandler ( h ),call the method logger.removeHandler with an argument h .
"def add arguments ( self , parser ) :",define the method add_arguments with 2 arguments self and parser .
if not file name :,"if file_name is false ,"
if schemes is not None :,"if schemes is not None ,"
"cursor . execute ( "" STR_ "" % table , [ key ] )","call the method cursor.execute with string `` DELETE FROM % s WHERE cache_key = % % s '' as argument ,"
from django . utils import six,from django.utils import six into default name space .
if self . field . empty label is not None :,"if self.field.empty_label is not None ,"
raise,raise an exception .
"raise ValueError ( "" STR_ "" % timezone )","raise an ValueError with an argument string `` Invalid timezone : % r '' , substitute ' % r ' with timezone ."
request finished = Signal ( ),request_finished is a instance of a Signal class .
field value = value [ i ],substitute i-th element of value for field_value .
try :,"try ,"
self .  post render callbacks . append ( callback ),append callback to self._post_render_callbacks list .
in put formats = formats . get format lazy ( STR_ ),"call the method formats.get_format_lazy with an argument string 'TIME_INPUT_FORMATS ' , substitute the result for input_formats ."
mapped tokens = [ ],mapped_tokens is an empty list .
parser . delete first token ( ),call the method parser.delete_first_token .
 active = local ( ),"call the function local , substitute the result for _active ."
while True :,"endless loop ,"
def P ( self ) :,"reminder of the division of floored result of division of seconds by 60 , by integer 60. define the method P with an argument self ."
"def endChannelElement ( self , handler ) :",define the method endChannelElement with 2 arguments : self and handler .
pass,do nothing .
"filter raw string = r "" "" "" STR_ "" "" "" % { STR_ : constant string , STR_ : r STR_ , STR_ : "" STR_ "" , STR_ : re . escape ( FILTER SEPARATOR ) , STR_ : re . escape ( FILTER ARGUMENT SEPARATOR ) , }",filter_raw_string is a raw string `` ^ ( ? P < constant > % ( constant ) s ) |^ ( ? P < var > [ % ( var_chars ) s ] +| % ( num ) s ) | ( ? : \s* % ( filter_sep ) s\s*
self .  changed data . append ( name ),append name to self._changed_data .
return,"return an empty string ,"
self . per page = in t ( per page ),convert per_page into an integer and substitute it for self.per_page .
 empty value = None,_empty_value is None .
from django . db . migrations . executor import MigrationExecutor,from django.db.migrations.executor import MigrationExecutor into default name space .
"self . none value = ( NUM_ , empty label )",self.none_value is a tuple containing 2 elements : integer 0 and empty_label .
self . regex = regex,substitute regex for self.regex .
import sys,import module sys .
"for i , ( dirpath , f ) in enumerate ( locations ) :","for every i and tuple containing dirpath and f , in enumerated list of locations ,"
for item in sequence :,"for every item in sequence ,"
field value = None,field_value is None .
"except ( ValueError , TypeError ) :","if ValueError or TypeError exceptions are caught ,"
self . name = name,substitute name for self.name .
"print ( "" STR_ "" + flup module )","append flup_module to string `` Ca n't import flup . `` , print it to the standard output ."
return self . template cache [ key ],return self.find_template_cache dictionary value under the key key .
current = current [ in t ( bit ) ],"convert bit to an integer and use it as index to obtain an element for list current , substitute it for current ."
else :,"if not ,"
"def get dump object ( self , obj ) :",define the method get_dump_object with arguments self and obj .
del Trans,delete Trans .
escaper = conditional escape,substitute conditional_escape for escaper .
if in plural :,"if inplural is true ,"
 serializers = { },"`` django.core.serializers.python '' for `` python '' , `` django.core.serializers.json '' for `` json '' , and `` django.core.serializers.pyyaml '' for `` yaml '' . _serializers is an empty dictionary ."
"parse = sys . modules [   name   + "" STR_ "" ]","append string `` .moves.urllib_parse '' to __name__ , use it as an key to get the value from the sys.modules dictionary , substitute it for parse ."
return self,return self .
" assertRaisesRegex = "" STR_ """,_assertRaisesRegex is a strnig `` assertRaisesRegex '' .
request . resolver match = resolver match,substitute resolver_match for request.resolver_match .
def   init   ( self ) :,define the method __init__ with an argument self .
output = self . nodelist . render ( context ),"call the method self.nodelist.render with an argument context , substitute the result for output ."
class LoadNode ( Node ) :,derive the class LoadNode from Node base class .
"if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :","if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,"
"from django . template . base import Origin , Template , Context , TemplateDoesNotExist","from django.template.base import Origin , Template , Context and TemplateDoesNotExist into default name space ."
with self .  lock . reader ( ) :,"call the self._lock.reader method , with the result perform the following ,"
"def   init   ( self , token type , contents ) :","define the method __init__ with 3 arguments : self , token_type and contents ."
dictConfigClass ( config ) . configure ( ),"call the method dictConfigClass with an argument config , call the method configure on the result ."
"return self . as widget ( Textarea ( ) , attrs , ** kwargs )","call the method self.as_widget with 3 arguments : instance of a class Textarea , attrs and unpacked dictionary kwargs , return the result ."
"RFC850 DATE = re . compile ( r STR_ % (   D ,   M ,   Y2 ,   T ) )","substitute the result for RFC1123_DATE . call the function re.compile with an argument raw string '^\w { 6,9 } , % s- % s- % s % s GMT $ ' formated with __D , __M , __Y2 and __T ,"
"def validate ( self , value ) :",define the method validate with arguments self and value .
"return STR_ % ( self . g ( ) , self . i ( ) )","return a string ' % s : % s ' formated with the results of the functions self.g and self.i , respectivley ."
if t is not None :,"if t is not None ,"
self . file . seek ( NUM_ ),set the file pointer at the beginning of the self.file file .
self . subject = subject,substitute subject for self.subject .
num existing = len ( existing ),substitute length of existing for num_existing .
e . django template source = node . source,substitute node.source for e.django_template_source .
return mark safe ( self . format output ( output ) ),"and final_attrs , append the result to output . call the method self.format_output with an argument output , use the result as an argument for the call to the function mark_safe ,"
"if is in stance ( title , ( list , tuple ) ) :","if title is an instance of list or tuple ,"
"return number format ( value , use l10n = use l10n )","call the function number_format with 2 arguments : value and use_l10 as use_l10n , return the result ."
if not  cookie encodes correctly :,"if _cookie_encodes_correctly is boolean False ,"
return STR_ % RESET,"format string '\x1b [ % sm ' with RESET , return the result ."
return random module . choice ( value ),"call the function random_module.choice with an argument value , return the result ."
except OSError as e :,"stderr set to PIPE , close_fds set to boolean True is os.name is not equal to 'nt ' , universal_newlines set to boolean True . if OSError , renamed to e , exception is caught ,"
return tempdir,return tempdir .
msgattrib options = [ STR_ ],msgattrib_options is an list with elements : string ' -- no-obsolete ' .
def popitem ( self ) :,define the method popitem with an argument self .
"def widthratio ( parser , token ) :",define the function widthratio with 2 arguments : parser and token .
"raise CommandError ( "" STR_ "" % STR_ . join ( STR_ % ( model .  meta . app label , model .  meta . object name ) for model , deps in sorted ( skipped , key = lambda obj : obj [ NUM_ ] .   name   ) ) )","raise an CommandError with argument : string `` Ca n't resolve dependencies for % s in serialized app list . `` , where ' % s ' is replaced with :"
if self . id for label :,"self.id_for_label is true ,"
"def save existing objects ( self , commit = True ) :",define the method save_existing_objects with 2 arguments : self and commit set to boolean True .
filename . encode ( STR_ ),call the method filename.encode with an argument string 'ascii '
"def urlizetrunc ( value , limit , autoescape = None ) :","define the function urlizetrunc with 3 arguments value , limit and autoescape set to None ."
"id  = final attrs . get ( STR_ , None )","get the value under the 'id ' key of the final_attrs dictionary , substitute it for id_ , if it doesnt exists , id_ is None ."
elif cmatches :,"otherwise if cmatches is true ,"
options = [ opt for opt in options if opt [ NUM_ ] not in prev opts ],"split x by character '= ' and append first element of the result to the prev_opts list . for every opt in options , if first element of opt is not contained in prev_opts , append opt to the list , substitute it for options ."
"res = func ( * self .   args , ** self .   kw )","call the function func with 2 arguments : unpacked list self.__args and unpacked dictionary self.__kw , substitute the result for res ."
data = data . replace ( microsecond = NUM_ ),"call the method data.replace with an argument microsecond set to integer 0 , substitute the result for data ."
if self . is  bound :,"if self.is_bound is true ,"
self . file . size = file size,substitute file_size for self.file.size .
"def upload handlers ( self , upload handlers ) :",define the method upload_handlers with arguments : self and upload_handlers .
try :,"try ,"
if class in attrs :,"if 'class ' is contained in attrs ,"
"def handle charref ( self , name ) :",define the method handle_charref with 2 arguments self and name .
@ encoding . setter,"encoding.setter decorator ,"
"def handle raw input ( self , in put data , META , content length , boundary , encoding = None ) :","define the method handle_raw_input with arguments : self , input_data , META , content_length , boundary and encoding set to None ."
"nodelist loop = parser . parse ( ( else , end tag ) )","call the method parser.parse with an argument tuple with an element string 'else ' and end_tag , substitute the result for nodelist_true ."
"script name = get bytes from wsgi ( environ , STR_ , )","call the get_bytes_from_wsgi function with environ , string 'SCRIPT_NAME ' and empty strings as arguments , substitute the result for script_name ."
"from django . db import models , DEFAULT DB ALIAS",from django.db import models and DEFAULT_DB_ALIAS into default name space .
from django . db import connection,from django.db import connection into default name space .
class datetime ( real datetime ) :,derive the class datetime from the real_datetime base class .
sec = in t ( m . group ( STR_ ) ),"call the method m.group with an argument string 'sec ' , convert the result into a string , substitute it for sec ."
except IndexError :,"substitute it for value under the 'initial ' key of kwargs dictionary . if IndexError exception is caught ,"
"result = logging . Formatter ( fmt , dfmt )","call the method logging.Formatter with 2 arguments : fmt and dfmt , substitute the result for result ."
"def tzname ( self , dt ) :",define the method tzname with 2 arguments : self and dt .
i = self . pointer,substitute self.pointer for i .
widget . is  localized = True,widget.is_localized is boolean True .
"result = super ( MultiValueField , self ) .   deepcopy   ( memo )","call the method __deepcopy__ with an argument memo , from the base class of the class MultiValueField , substitute the result for result ."
self . sysid = sysid,substitute sysid for self.sysid .
"output , references = connection . creation . sql create model ( model , style , known models )","app_config , connection.alias and include_auto_created set to boolean True . call the method connection.creation.sql_create_model with arguments model , style and known_models , substitute the result for output and references ."
get ns resolver . cache clear ( ),call the function get_ns_resolver.cache_clear .
if num loopvars ! = len item :,"if num_loopvars is not equal to len_item ,"
import types,import module types .
cmd options = vars ( options ),"call the function vars with an argument options , substitute the result for cmd_options ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ )","default set to boolean False and help as a string `` Create an empty migration. '' . call the method parser.add_argument with 5 arguments : string ' -- noinput ' , action as a string 'store_false ' ,"
except KeyError :,"if KeyError exception is caught ,"
if key not in self :,"if key is not contained in self ,"
m = in t ( d ) - d,"convert d into a integer , subtract d from it , substitute the result for m ."
response [ STR_ ] = request . build absolute uri ( response [ STR_ ] ),modify value at the key 'Location ' of the dictionary response by applying function request.build_absolute_uri on it .
"raise base . DeserializationError ( "" STR_ "" % model identifier )","raise an base.DeserializationError exception with an argument string `` Invalid model identifier : ' % s ' '' , where ' % s ' is replaced with model_identifier ."
"def compress ( self , data list ) :",define the method compress with arguments self and data_list .
if sys . version info [ NUM_ ] <= NUM_ :,"if second element of sys.version_info is smaller than or equal to integer 1 ,"
if arg < NUM_ :,"if arg is smaller than integer 1 ,"
return ZERO,return ZERO .
def reset ( self ) :,define the method reset with an argument self .
response .  handler class = self .   class  ,substitute self.__class__ for response._handler_class .
return,return nothing .
import os,import module os .
if self . body :,"if self.body is true ,"
raise ImproperlyConfigured ( STR_ ),raise an ImproperlyConfigured with an argument string 'Loader does not define a `` load_template '' callable template source loader ' .
"def localtime ( value , timezone = None ) :",define the function localtime with 2 arguments : value and timezone set to None .
if STR_ in locale :,"if ' _ ' is contained in locale ,"
if location is None :,"and directory_permissions_mode set to None . if location is None ,"
"def send mass mail ( datatuple , fail silently = False , auth user = None , auth password = None , connection = None ) :","define the function send_mass_mail with , datatuple , fail_silently set to False , auth_user set to None , auth_password set to None ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"except ( ValueError , TypeError ) :","if TypeError or ValueError exceptions are caught ,"
"def save ( self , commit = True ) :",define the method save with 2 arguments : self and commit set to boolean True .
length = in t ( num ),"convert num to an integer , substitute the result for length ."
file name = disposition . get ( STR_ ),"get the value under the 'filename ' key of the disposition dictionary , substitute it for file_name ."
data [ Model .  meta . pk . attname ] = Model .  meta . pk . to python ( node . getAttribute ( STR_ ) ),"call the method node.getAttribute with an argument string 'pk ' , use the result as the argument for the call to the method , Model._meta.pk.to_python with , substitute the result for value under the Model._meta.pk.attname key of the data dictionary ."
"patterns = getattr ( self . urlconf module , "" STR_ "" , self . urlconf module )","get attribute `` urlpatterns '' form the self.urlconf_module , substitute it for patterns , if the attribute doesnt exist ,"
def add to builtins ( module ) :,define the function add_to_builtins with an argument module .
"def   eq   ( self , other ) :",define the method __eq__ with self and other arguments :
if self .  has expired ( key ) :,"evaluate self._has_expired with argument key , if the result is True ,"
return,return nothing .
from django . utils import six,from django.utils import six into default name space .
hidden fields . append ( six . text type ( bf ) ),"and ' % ( error ) s ' is replaced with return value of the force_text function called with an argument e , extend the top_errors with the result . call the function six.text_type with an argument bf , append the result to hidden_fields ."
del self . tokens [ NUM_ ],delete the first element of self.tokens .
"def   init   ( self , name ) :",define the method __init__ with 2 arguments : self and name .
if fixture name ! = STR_ and not fixture files :,"if fixture_name is not equal to string 'initial_data ' and fixture_files is false ,"
def modelform defines fields ( form class ) :,define the function modelform_defines_fields with an argument form_class .
  call   = type .   call  ,substitute type.__call__ for __call__ .
self . token = token,substitute token for self.token .
if new conn created :,"if new_conn_created is true ,"
"def addQuickElement ( self , name , contents = None , attrs = None ) :","define the method addQuickElement with 4 arguments : self , name , contents set to None and attrs set to None ."
"self . handle starttag ( tag , attrs )","call the method self.handle_starttag , with tag and attrs as the arguments ."
if not self . keep pot :,"if self.keep_pot is false ,"
class Options ( object ) :,derive class Options from the base class object .
"key = bytes to text ( key , self . encoding )","call the method bytes_to_text with 2 arguments : key and self.encoding , substitute the result for key ."
def remove move ( name ) :,define the function remove_move with an argument name .
"both before = [ Tok ( "" STR_ "" , r "" STR_ "" ) , Tok ( "" STR_ "" , r "" STR_ "" ) , Tok ( "" STR_ "" , r "" STR_ "" ) , Tok ( "" STR_ "" , literals ( "" "" "" STR_ "" "" "" , suffix = r "" STR_ "" ) , next = STR_ ) , Tok ( "" STR_ "" , literals ( "" STR_ "" , suffix = r "" STR_ "" ) , next = STR_ ) , Tok ( "" STR_ "" , r "" "" "" STR_ "" "" "" , next = STR_ ) , Tok ( "" STR_ "" , r "" STR_ "" , next = STR_ ) , Tok ( "" STR_ "" , r "" STR_ "" ) , Tok ( "" STR_ "" , r "" "" "" STR_ "" "" "" , next = STR_ ) , Tok ( "" STR_ "" , literals ( "" "" "" STR_ "" "" "" ) , next = "" STR_ "" ) , Tok ( "" STR_ "" , literals ( "" STR_ "" ) , next = STR_ ) , Tok ( "" STR_ "" , literals ( "" STR_ "" ) , next = STR_ ) , Tok ( "" STR_ "" , r STR_ , next = STR_ ) , Tok ( "" STR_ "" , r "" STR_ "" , next = STR_ ) , ]","both_before is a list containing 14 elements , all of them are instances of Tok class , created with 2 arguments , a string and a raw string ."
"elif is in stance ( value , datetime . datetime ) :","otherwise if value is an instance of datetime.datetime ,"
self . reader leaves ( ),call the method self.reader_leaves .
return binascii . unhexlify ( ( hex format string % x ) . encode ( STR_ ) ),"format string hex_format_string with x , call the method encode on the result with an argument string 'ascii ' ,"
if STR_ not in arg :,"if ' , ' is not contained in arg ,"
pass,do nothing .
for cmatch in cmatches :,"for every cmatch in cmatches ,"
"nodelist loop = parser . parse ( ( STR_ , STR_ , ) )","substitute the result for sequence . call the method parser.parse with an argument tuple with 2 elements strings 'empty ' and 'endfor ' , substitute the result for nodelist_loop ."
yield self [ key ],yield value under key key of self dictionary .
try :,"try ,"
import os,import module os .
merge migrations = [ ],merge_migrations is an empty list .
"attrs = super ( IntegerField , self ) . widget attrs ( widget )","call the method widget_attrs with an argument widget , from the base class of the class IntegerField , substitute it for attrs ."
"def strftime ( self , fmt ) :",define the method strftime with 2 arguments : self and fmt .
if truncate text :,"if truncate_text is true ,"
iteritems =  iteritems,substitute _iteritems for iteritems .
from collections import OrderedDict,from collections import OrderedDict into default name space .
"def add arguments ( self , parser ) :",define the method add_arguments with self and parser .
def phone2numeric filter ( value ) :,define the function phone2numeric_filter with an argument value .
supports microseconds = False,supports_microseconds is boolean False .
use reloader = options . get ( STR_ ),substitute value under the 'use_reloader ' key of the options dictionary for use_reloader .
response . add post render callback (  set response etag ),call the method response.add_post_render_callback with _set_response_etag as argument .
except  BASE64 DECODE ERROR :,"if _BASE64_DECODE_ERROR exception is caught ,"
"attrs = dict ( attrs or { } , ** { for : id for label } )","unpack a dictionary with an entry id_for_label for 'for ' , map it through attrs mapping if attrs is true ,"
"migration = executor . loader . get migration by prefix ( app label , migration name )","call the method executor.loader.get_migration_by_prefix with arguments app_label , migration_name , substitute the result for migration ."
if sep is not None :,"if sep is not None ,"
  M = r STR_,__M is a raw string ' ( ? P < mon > \w { 3 } ) ' .
return django . get version ( ),"call the function django.get_version , return the result ."
"msg = ( "" STR_ "" "" STR_ "" "" STR_ "" )",msg is a string `` '' The included urlconf ' { name } ' does not appear to have any patterns in it .
if len ( bits ) < NUM_  or bits [ NUM_ ] ! = as :,"if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as ' ,"
"yield field , list ( ValidationError ( errors ) )","yield field and ValidationError object converted to an list , created with an argument errors ."
from lib2to3 import fixer base,from lib2to3 import fixer_base into default name space .
"out . write ( STR_ % join tokens ( singular , trimmed ) )","substitute ' % r ' in string ' gettext ( % r ) ' with result of the function join_tokens , called with 2 arguments : singular ,"
content = content or b,"if content is empty , substitute it for an empty string ."
self . code = code,substitute code for self.code .
import struct,import module struc .
"self .  upload handlers = [ uploadhandler . load handler ( handler , self ) for handler in settings . FILE UPLOAD HANDLERS ]","for every handler in settings.FILE_UPLOAD_HANDLERS ,"
criticals = [ e for e in all issues if checks . CRITICAL <= e . level ],"and e.level is lesser than checks.CRITICAL . append e to criticals list for every e in all_issues , if checks.CRITICAL is lesser than or equal to e.level ."
"obj = template localtime ( obj , context . use tz )","call the function template_localtime with 2 arguments : obj and context.use_tz , substitute the result for obj ."
if truncate len == NUM_ :,if truncate_len equals integer 0 .
form = self . forms [ i ],substitute i-th element of self.forms for form .
else :,"if not ,"
"if is in stance ( number , in t ) and not use grouping and not decimal pos :","if number is an integer and use_grouping is false and decimal_pos is false ,"
return self . forms [ NUM_ ] . media,return the media field of the first element of self.forms .
if value in self . empty values :,"if value is contained in self.empty_values ,"
continue,"and call to the method form.has_changed evaluates to false , skip this loop iteration ,"
  = { },_ is an empty dictionary .
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with an argument string 'Awaiting Implementation ' .
"if s [ NUM_ ] not in "" STR_ "" or s [ - NUM_ ] ! = s [ NUM_ ] :","if first element of s is not contained in `` \ '' ' '' or last element of s is not equal to first element of s ,"
else :,"if not ,"
"self .  cull ( db , cursor , now )","call the method self._cull with db , cursor and now as arguments ."
else :,"where ' % ( field ) s ' is replaced with first element of unique_check , return the result . if not ,"
except VariableDoesNotExist :,"if VariableDoesNotExist exception is caught ,"
unhandled params = list ( params ),"convert params into a list , substitute it for unhandled_params ."
fields = list ( six . iteritems ( base . declared fields ) ) + fields,"call the method six.iteritems with an argument base.declared_fields , convert it to a list and append fields to it , substitute the result for fields ."
class EventHandler ( pyinotify . ProcessEvent ) :,derive the EventHandler class from the base class pyinotify.ProcessEvent .
"def   init   ( self , options = None ) :",define the method __init__ with arguments : self and options set to None .
styles = in structions . split ( STR_ ),"split instructions by ' , ' character , substitute the result for styles ."
"output = template localtime ( output , use tz = context . use tz )","call the function template_localtime with 2 arguments : output and use_tz set to context.use_tz , substitute the result for output ."
"for i , ( seconds , name ) in enumerate ( chunks ) :","for every i and tuple containing 2 elements : seconds and name , in enumerated chunks ,"
"from django . template . base import Variable , Library , VariableDoesNotExist","from django.template.base import Variable , Library and VariableDoesNotExist into default name space ."
import sys,import module sys .
return True,return boolean True .
return df . format ( format string ),"call the method df.format with an argument format_string , return the result ."
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
try :,"try ,"
"def handle m2m field ( self , obj , field ) :","define the method handle_m2m_field with arguments self , obj and field ."
plan = executor . migration plan ( targets ),"call the executor.migration_plan method with targets as the argument , substitute the result for plan ."
if  locs  is None :,"if _locs_ is None ,"
if self .  num pages is None :,"if self._num_pages is None ,"
d [ k ] = val,substitute val for value under the k key of dictionary d .
if six . PY2 :,"if six.PY2 is true ,"
for app config in apps . get app configs ( ) :,"for every app_config in return value of the method apps.get_app_configs ,"
self . request = request,self.request is None .
if ( domain part not in self . domain whitelist and not self . validate domain part ( domain part ) ) :,"if domain_part is not contained in self.domain_whitelist and method self.validate_domain_part with an argument domain_part evaluates to false ,"
except KeyError :,if KeyError exception is caught .
else :,"if not ,"
"filename = os . path . join ( to path , name )","join to_path and name into a file path , substitute the result for filename ."
if self . field . label is None :,"if self.field.label is None ,"
"raise ValueError ( "" STR_ "" % ch )",raise an ValueError with an argument string `` Non-reversible reg-exp portion : ' ( ? P % s ' '' formated with ch .
return data,return data .
cursor . execute ( statement ),call the cursor.execute method with statement as argument .
import django . core . checks . compatibility . django 1 7 0,import module django.core.checks.compatibility.django_1_7_0 .
try :,trym
if PY3 :,"return it . if PY3 is true ,"
"parser . add argument ( STR_ , metavar = STR_ , nargs = + , help = STR_ )","call the method parser.add_argument with 4 arguments : string 'args ' , metavar set to 'app_label ' , nargs set to '+ ' ,"
self .   dict   . update ( state ),add state element to self.__dict__ dictionary .
pass,do nothing .
if plen < ( alen - dlen ) or plen > alen :,"if plen is lesser than difference of alen and dlen , or if plen is greater than alen ,"
exhaust ( stream ),call the function exhaust with an argument stream .
from django . db . migrations . writer import MigrationWriter,from django.db.migrations.writer import MigrationWriter into default name space .
for name in self . fields :,"for every name in self.fields ,"
u = dig2 . digest ( ),"call the method dig2.digest , substitute the result for u ."
class TimestampSigner ( Signer ) :,derive the class TimestampSigner from the Signer base class .
"parser . add argument ( STR_ , default = None , dest = STR_ , type = in t , help = STR_ )","dest set to 'format ' and help is a string 'Specifies the output serialization format for fixtures. ' . call the method parser.add_argument with 5 arguments : string ' -- indent ' , default set to None , dest set to 'indent ' ,"
"  class   = property ( new method proxy ( operator . attrgetter ( "" STR_ "" ) ) )","cal the method operator.attrgetter with an argument string `` __class__ '' , use the result as an argument for the call to the function ,"
def   repr   ( self ) :,define the method __repr__ with an argument self .
"BaseCache .   init   ( self , * args , ** kwargs )","call the BaseCache initialization method __init__ with 3 arguments self , list of arguments args and dictionary of arguments kwargs ."
encoding = STR_,substitute string 'ascii ' for encoding .
"def learn cache key ( request , response , cache timeout = None , key prefix = None , cache = None ) :","define function learn_cache_key with request , response , cache_timeout set to None , key_prefix set to None , cache set to None as arguments ."
elif STR_ in cc and STR_ in kwargs :,"if cc contains item 'public ' and kwargs contains item 'private ' ,"
"contents = format html ( STR_ , attrs , contents )","call the function format_html with 3 arguments string ' < label { 0 } > { 1 } < /label > ' , attrs and contents , substitute the result for contents ."
"if is in stance ( s , bytes ) :",if s is an instance of an object bytes .
template with clear = STR_,template_with_clear is a string ' % ( clear ) s < label for= '' % ( clear_checkbox_id ) s '' > % ( clear_checkbox_label ) s < /label > ' .
elif name is not None and filter func is not None :,"otherwise if name is not None and filter_func is not None ,"
if exctype is not WindowsError or STR_ not in str ( value ) :,"if exctype is not WindowsError or string 'Access is denied ' is not contained in value converted into a string ,"
def tell ( self ) :,define the method tell with an argument self .
if result is not None :,"if result is not None ,"
from django . utils import lru cache,from django.utils import lru_cache into default name space .
"logger . error ( STR_ , request . path , exc info = exc info , extra = { STR_ : NUM_ , STR_ : request } )","substitute ' % s ' in 'Internal Server Error : % s ' with request.path , exc_info set to exc_info ,"
"def   init   ( self , name ) :",define the method __init__ with 2 arguments : self and name .
from django . core . servers . fastcgi import FASTCGI OPTIONS,"from django.core.servers.fastcgi import FASTCGI_OPTIONS into default namespace ,"
"def   init   ( self , host = None , port = None , username = None , password = None , use tls = None , fail silently = False , use ssl = None , timeout = None , ** kwargs ) :","define the method __init__ with arguments : self , host set to None , port set to None , username set to None , password set to None ,"
"self . loader , self . loadname , self . dirs = loader , name , dirs","substitute loader , name and dirs for self.loader , self.loadname and self.dirs , respectively ."
value = STR_,value is an string ' 1 ' .
msg count += NUM_,increment mes_count by one .
 supported = OrderedDict ( settings . LANGUAGES ),"_supported is an instance of OrderedDict class , created with an argument settings.LANGUAGES ."
from importlib import import module,from importlib import import_module into default name space .
return DefusedExpatParser ( ),return the instance of DefusedExpatParser class .
"self . blocks = dict ( ( n . name , n ) for n in nodelist . get nodes by type ( BlockNode ) )","self.blocks is a dictionary with elements : n for n.name , for every n in return value of the method nodelist.get_nodes_by_type ,"
"if not router . allow migrate ( database , cache . cache model class ) :","call the method router.allow_migrate with 2 arguments : database and cache.cache_model_class , if it evaluates to false ,"
"call command ( "" STR_ "" , ** options )",call the function call_command with 2 arguments : string migrate and unpacked dictionary options .
return self . parent widget . render ( * args ),"call the method self.parent_widget.render with unpacked list args as an argument , return the result ."
from django . template . base import TemplateDoesNotExist,from django.template.base import TemplateDoesNotExist into default name space .
message =   ( STR_ STR_ STR_ ),call the function _ with an argument string ' % ( datetime ) s couldn\'t be interpreted in time zone % ( current_timezone ) s ; it '
readline . set completer ( rlcompleter . Completer ( imported objects ) . complete ),"call the method rlcompleter.Completer with an argument imported_objects , use the complete field of the result as an argument for the call to the method readline.set_completer ."
for cache in caches . all ( ) :,for every cache in return value of the function caches.all .
continue,"skip this loop iteration ,"
if options . get ( STR_ ) :,"get the value under the 'no_location ' key of the options dictionary , if it is true ,"
i += NUM_,increment i by integer 1 .
for name in MEDIA TYPES :,"for every name in MEDIA_TYPES ,"
if i < NUM_ :,"if i is smaller than integer 0 ,"
"raise ValueError ( "" STR_ "" )",raise an ValueError with an argument string `` 'package ' not set to a string '' .
else :,"if not ,"
def m ( self ) :,define the method m with an argument self .
" add doc ( get unbound function , "" "" "" STR_ "" "" "" )",call the function _add_doc with 2 arguments : get_unbound_function and string `` '' '' Get the function out of a possibly unbound function '' '' '' .
"def build attrs ( self , extra attrs = None , ** kwargs ) :","define the method build_attrs with 3 arguments : self , extra_attrs set to None and unpacked dictionary kwargs ."
"out . write ( blankout ( part , STR_ ) )","call the method blankout with 2 arguments : part and ' P ' , write the result to out ."
"self . allow empty file = kwargs . pop ( STR_ , False )","if not self.max_length is None . remove the value under 'allow_empty_file ' key from the kwargs dictionary and if the key exists ,"
"def  delete ( self , key ) :",define the method _delete with arguments self and key .
"if not hasattr ( self , STR_ ) :","if self has an attribute '_object_dict ' ,"
piece = . join ( source [ last : ] ),"join elements of list source from index last to the end into a string , substitute it for piece ."
return sites,return sites .
"response = func ( request , response )","call the function func with request and response as arguments , assign the result to response ."
for role in termcolors . PALETTES [ termcolors . NOCOLOR PALETTE ] :,"for every role in termcolors.PALETTES list at the index termcolors.NOCOLOR_PALETTE ,"
import types,import module types .
"self . connection . sendmail ( from email , recipients , message . as bytes ( ) )","call the method self.connection.sendmail with arguments : from_email , recipients and return value of the function message.as_bytes ."
checkbox id = self . clear checkbox id ( checkbox name ),"call the method self.clear_checkbox_id with an argument checkbox_name , substitute the result for checkbox_id ."
deps . append ( rel model ),append rel_model to deps .
value = self . to python ( value ) . strip ( ),"call the self.to_python method with an argument value , strip the result of the whitespaces from the sides , substitute the result for value ."
parser . add option ( opt ),call the method parser.add_option with an argument opt .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ ) ,","and help is a string 'Module paths to test ; can be modulename , modulename.TestCase or modulename.TestCase.test_method ' . call the method parser.add_argument with 5 arguments : string ' -- noinput ' , action set to 'store_false ' , dest set to 'interactive ' ,"
"def   init   ( self , title , link , description , language = None , author email = None , author name = None , author link = None , subtitle = None , categories = None , feed url = None , feed copyright = None , feed guid = None , ttl = None , ** kwargs ) :","define the method __init__ with 15 elements : self , title , link , description , language set to None , author_email set to None ,"
if is  templatized :,"if is_templatized is true ,"
for pattern in reversed ( self . url patterns ) :,"for every pattern in reversed list self.url_patterns ,"
except ImportError :,"yield the result . if ImportError exception is caught ,"
if not func name :,"if func_name is false ,"
import json,import module json .
return self,return self .
"def   init   ( self , content ) :",define the method __init__ with 2 arguments : self and content .
"self .  archive . printdir ( * args , ** kwargs )",call the method self._archive.printdir with 2 arguments : unpacked list args and unpacked dictionary kwargs .
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
if STR_ in str number :,"if ' . ' is not contained in str_number ,"
from django . utils . functional import cached property,from django.utils.functional import cached_property into default name space .
if ignore :,"if ignore is true ,"
for var in self . vars :,"for every var in self.vars ,"
return . join ( base36 ),"join elements of base36 into a string , return it ."
"def get text list ( list  , last word = ugettext lazy ( or ) ) :",define the function get_text_list with 2 arguments : list_ and last_word set to result of the function ugettext_lazy called with an argument string 'or ' .
WindowsError = WindowsError,substitute WindowsError for WindowsError .
"def runfastcgi ( argset = [ ] , ** kwargs ) :",define the function runfastcgi with 2 arguments : argset set to an empty list and unpacked dictionary kwargs .
"def lock ( f , flags ) :",define the function lock with arguments f and flags .
handler . startDocument ( ),call the method handler.startDocument .
"def   init   ( self , attrs = None , years = None , months = None , empty label = None ) :","define the method __init__ with 5 arguments : self , attrs set to None , years set to None , months set to None and empty_label set to None ."
@ wraps ( fdel ),decorator function wraps with an argument fdel .
@ lru cache . lru cache ( maxsize = NUM_ ),decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000 .
"if getattr ( e , STR_ , NUM_ ) ! = NUM_  and getattr ( e , STR_ , NUM_ ) ! = NUM_ :","if attribute 'winerror ' of object e is not equal to integer 32 and if 'errno ' attribute is not equal to integer 13 ,"
"self . month none value = ( NUM_ , empty label [ NUM_ ] )",self.month_none_value is a tuple containing 2 elements : integer 0 and second element of empty_label .
yield,yield nothing .
def   repr   ( self ) :,define the method __repr__ with argument self .
" file = os . fdopen ( fd , mode )","call the function os.fdopen with arguments fd and mode , substitute it for _file ."
" assertCountEqual = "" STR_ """,_assertCountEqual is a strnig `` assertItemsEqual '' .
class SortedDict ( dict ) :,derive the class SortedDict from the dict base class .
"ret = LockFileEx ( hfile , flags , NUM_ , NUM_ , NUM_ xFFFF0000 , byref ( overlapped ) )","call the LockFileEx function with 6 arguments : hfile , flags , integer 0 , integer 0 , hexadecimal value FFFF0000 , return value of the byref function called with argument overlapped , substitute the result for ret ."
def is  aware ( value ) :,define the function is_aware with an argument value .
return False,return boolean False .
self . importer ( used ),call the method self.importer with an argument used .
def close ( self ) :,define the method close with an argument self .
"output . extend ( custom sql for model ( model , style , connection ) )","call the function custom_sql_for_model with 3 arguments : model , style and connection , extend the output with the result ."
"models . signals . pre migrate . send ( sender = app config , app config = app config , verbosity = verbosity , in teractive = in teractive , using = db )","call the method models.signals.pre_migrate.send with 5 arguments : sender set to app_config , app_config set to app_config ,"
root = nonlocal root [ NUM_ ] = oldroot [ NEXT ],substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root .
if current len == truncate len :,"if current_len equals truncate_len ,"
"formatters = config . get ( STR_ , EMPTY DICT )","get config dictionary element under 'formatters ' key , if it exists substitute it for formatters , if not , formatters is EMPTY_DICT ."
except ValueError :,"if ValueError exception is caught ,"
parser = self .  parser,substitute self._parser for parser .
"converter = self . value converters . get ( prefix , None )","remove self.value_converters dictionary element under prefix key , if it exists substitute it for converter , if not , converter is None ."
import threading,import threading module .
d = m . groupdict ( ),"call the method m.groupdict , substitute the result for d ."
" version = "" STR_ """,_version is a string `` 0.91 '' .
field type = STR_ % rel to,"append rel_to to string 'ForeignKey ( , substitute the result for field_type ."
nofollow attr =,nofollow_attr is an empty string .
def  string concat ( * strings ) :,define the function _string_concat with an argument unpacked list strings .
"return super ( SortedDict , self ) . setdefault ( key , default )","call the method setdefault from the base class of the class SortedDict , with 2 arguments key and default , return the result ."
elif ns not in app list :,"otherwise if ns is not contained in app_list ,"
else :,"if not ,"
for chunk in self . chunks ( ) :,"for every chunk in return value of the method self.chunks ,"
self . choices = choices,substitute choices for self.choices .
"def format ( self , formatstr ) :",define the function format with 2 arguments self and formatstr .
"data = obj dict . pop ( STR_ , { } )","remove element under '_data ' key of obj_dict dictionary , if it exists substitute it for data , if not data is an empty list ."
return,return nothing .
"super ( SplitDateTimeWidget , self ) .   init   ( widgets , attrs )","and instance of TimeInput class , created with 2 arguments : attrs set to attrs and format set to date_format . call the method __init__ from the base class of the class SplitDateTimeWidget , with 2 arguments : widgets and attrs ."
def s ( self ) :,define the method s with an argument self .
def wrapper ( cls ) :,define the function wrapper with an argument cls .
path = self . path ( path ),"call the self.path function with argument path , substitute it for path ."
pdict [ name ] = value,substitute value for the vale under the name key of the pdict dictionary .
else :,"if not ,"
"raise ValueError ( "" STR_ "" % key )","raise an ValueError exception with string `` Key ' % s ' not found '' as argument , substitute ' % s ' for key ."
return iri,return iri .
"for name , block in six . iteritems ( blocks ) :","call the function six.iteritems with an argument blocks , for every name and block in result ,"
for statement in sql statements :,for every statements in sql_statements :
"def  create alternatives ( self , msg ) :",define the method _create_alternatives with arguments self and msg .
"if self .   language == settings . LANGUAGE CODE or self .   language == "" STR_ "" :","if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string `` en-us '' ,"
tzinfo .   init   ( self ),call the method tzinfo.__init__ with an argument self .
"def make aware ( value , timezone ) :","return boolean True , otherwise return boolean False . define the function make_aware with 2 arguments : value and timezone ."
"if is in stance ( s , ( SafeData , EscapeData ) ) :","if s is an instance of SafeData or EscapeData ,"
class EmailInput ( TextInput ) :,derive the class EmailInput from the TextInput base class .
pass,do nothing
from django . utils import six,from django.utils import six into default name space .
return settings . DEBUG,return settings.DEBUG .
"id  = self . attrs . get ( STR_ , None )","get the value under the 'id ' key of the self.attrs dictionary , substitute it for id_ if the key exists , if not id_ is None ."
try :,"try ,"
"super ( HttpResponseNotAllowed , self ) .   init   ( * args , ** kwargs )","call the __init__ method from the base class of the HttpResponseNotAllowed class , called with arguments : unpacked list args ,"
"def   wrapper   ( * args , ** kw ) :",define the function __wrapper__ with 2 arguments : unpacked list args and unpacked dictionary kw .
"self . file .   exit   ( exc , value , tb )","call the file.__exit__ method on self with exc , value and tb as the arguments ."
opts = model .  meta,substitute model._meta for opts .
extra params . update ( params ),add params to extra_params dictionary .
"def get many ( self , keys , version = None ) :","define the get_many method with self class instance , keys and version set to None as arguments ."
return mark safe ( result ),"call the function mark_safe with an argument result , return it ."
"regex = re . compile ( r STR_ r STR_ r STR_ r STR_ r STR_ r STR_ r STR_ , re . IGNORECASE )","call the re.compile function with 2 arguments : raw string `` ^ ( ? : [ a-z0-9\.\- ] * ) : // ( ? : ( ? : [ A-Z0-9 ] ( ? : [ A-Z0-9- ] { 0,61 } [ A-Z0-9 ] ) ? \ . ) + '' ,"
m = plural forms re . search ( fp . read ( ) ),"with the result renamed to fp , perform the following : read data from file fp , use the result as an argument for the call to the function plural_forms_re.search , substitute it for m ."
if self . use ipv6 and not socket . has ipv6 :,"if self.use_ipv6 is true and socket.has_ipv6 is false ,"
self .  count = len ( self . object list ),substitute length of self.object_list for self._count .
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
if not use workaround :,"if use_workaround is boolean False ,"
self .  size = self .  get size from underlying file ( ),"call the method self._get_size_from_underlying_file , substitute the result for self._size ."
else :,"if not ,"
return STR_ % self . g ( ),return a string ' % 02d ' formated with the result of the function self.g .
"except ( AttributeError , UnsupportedOperation ) :",if AttributeError or UnsupportedOperation exception occurred .
pkg name = STR_ + template name,"concatenate string 'templates/ ' and template_name , substitute the result for pkg_name ."
"old app dir = os . path . normpath ( os . path . join ( app dir , STR_ ) )","append the result to app_dirs . join app_dir and string 'models/sql ' into a file path , use the result as an argument for the call to the function os.path.normpath ,"
return self .  request,return self._request .
else :,"if not , substitute used_name for guessed_filename . if not ,"
"def end object ( self , obj ) :",define the method end_object with arguments self and obj .
"open ( in it path , "" STR_ "" ) . close ( )",crate a file named init_path .
"key = self . cache key ( template name , template dirs )","get the value under the template_name key of the self.cache_key dictionary , if it exists , substitute it for key ,"
fn = in otify code changed,substitute inotify_code_changed for fn .
"value = dict . get ( self , key , default )","get value under key key of self dictionary , if it doesnt exists return default , substitute the result for value ."
self . settings exception = None,self.settings_exception is None .
from django . apps import apps,from django.apps import apps into default name space .
raise,raise an exception .
return s,return s .
dklen = None,dklen is None .
return ret,return ret .
field = Model .  meta . get field ( field name ),"call the method Model._meta.get_field with an argument field_name , substitute it for field ."
compare to = None,compare_to is None .
plural . append ( contents ),append contents to plural .
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a modified_time ( ) method ' .
sub match = pattern . resolve ( new path ),"call the method pattern.resolve with an argument new_path , substitute the result for sub_match ."
else :,"if not ,"
self .  read started = False,and content_length . self._read_started is boolean False .
" urllib error moved attributes = [ MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , ]",_urllib_error_moved_attributes is a list with 3 elements : result of the call to the function MovedAttribute with 3 arguments :
val = force text ( val ),"call the function force_text with argument val , substitute it for val ."
return result . lower ( ),convert result to lowercase and return it .
"if "" STR_ "" in options :","if string 'help ' is contained in options ,"
tell = property ( lambda self : self . file . tell ),"define lambda function that returns self.file.tell field , use it as an argument for property function , put the result in tell ."
"self .  object dict = dict ( ( o . pk , o ) for o in self . get queryset ( ) )","call the function dict with an argument tuple with 2 elements : o.pk and o , for every o in result of the method self.get_queryset ,"
if settings . SETTINGS MODULE :,"if settings.SETTINGS_MODULE is true ,"
"return STR_ % ( t [ NUM_ ] , t [ NUM_ ] )","return string first element of t , '= ' , second element of t ."
def get default timezone ( ) :,define the function get_default_timezone .
except ValueError :,"if ValueError exception is caught ,"
@ stringfilter,"decorator stringfilter ,"
"nodelist = parser . parse ( ( STR_ , ) )","call the method parser.parse with an argument tuple with an element string 'endspaceless ' , substitute the result for nodelist ."
self . directory permissions mode = ( directory permissions mode if directory permissions mode is not None else settings . FILE UPLOAD DIRECTORY PERMISSIONS ),"or settings.FILE_UPLOAD_PERMISSIONS if it is . self.directory_permissions_mode is a tuple containing : directory_permissions_mode if directory_permissions_mode is not None ,"
for node in self :,"for every node in self ,"
self . vars = variables,substitute variables for self.vars .
LOCK EX = fcntl . LOCK EX,substitute fcntl.LOCK_EX for LOCK_EX .
if app config . models module is None or app config in excluded apps :,if app_config.models_module is None or app_config is contained in excluded_apps
"return WidthRatioNode ( parser . compile filter ( this value expr ) , parser . compile filter ( max value expr ) , parser . compile filter ( max width ) , asvar = asvar )","return an instance of a class WidthRatioNode , created with 4 arguments : result of the method parser.compile_filter ,"
return value,return value .
"yield key , self [ key ]",yield key and value under the key key of self dictionary .
raise TemplateDoesNotExist ( name ),raise an TemplateDoesNotExist exception with an argument name .
class SimpleUploadedFile ( InMemoryUploadedFile ) :,derive the SimpleUploadedFile class from the InMemoryUploadedFile base class .
"value , decimals = value . split ( decimal separator , NUM_ )","split value into two parts by decimal_separator , assign the result to value and decimals ."
match = True,match is boolean True .
from django . utils import six,from django.utils import six into default name space .
base subdir = STR_ % app or project,"append string '_template ' to app_or_project , substitute it for base_subdir ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"def force text ( s , encoding = STR_ , strings only = False , errors = STR_ ) :","define the function force_text , with s , encoding set to 'utf-8 ' , strings_only set to False , errors set to string 'strict ' as arguments ."
"self . upload handlers = ImmutableList ( self . upload handlers , warning = "" STR_ "" )","self.upload_handlers is an instance of ImmutableList , created with 2 arguments : self.upload_handlers ,"
else :,"substitute it for candidate_subs . if not ,"
"except ( ValueError , TypeError ) :","if TypeError or ValueError exceptions are caught ,"
template source loaders = None,template_source_loaders is None .
return,return an empty string .
"parser . add argument ( STR_ , STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ )","default set to False , help containing string 'Mark migrations as run without actually running them ' as arguments . call the method parser.add_argument with string ' -- list ' , string '-l ' , action contains string 'store_true ' , dest set to string 'list ' ,"
"def  is expired ( self , f ) :",define the method _is_expired with self and f as arguments .
else :,"if not ,"
class DeserializedObject ( object ) :,derive the class DeserializedObject from the object base class .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
return self . nodelist false . render ( context ),"call the method self.nodelist_false.render with an arguments context , return the result ."
if self .   language == settings . LANGUAGE CODE :,"if self.__language equals settings.LANGUAGE_CODE ,"
"sep = kwargs . pop ( "" STR_ "" , None )","remove 'sep ' key from the kwargs dictionary , if it exists substitute it for sep , if not sep is None ."
WARNING = NUM_,WARNING is integer 30 .
"if path . startswith ( ( STR_ , STR_ , / ) ) :","if path starts with string 'http : // ' or string 'https : // ' or with string '/ ' ,"
global  default,use global variable _default .
kwargs [ key ] = parser . compile filter ( value ),"call the method parser.compile_filter with an argument value , substitute the result for value under the key key of kwargs dictionary ."
break,break the loop execution .
else :,"if not ,"
if ( ( os . stat ( path ) . st mode & stat . S IREAD ) ! = stat . S IREAD ) :,"call the function os.stat with an argument path , perform bitwise and on 2 operands st_mode field of the result and stat.S_IREAD ,"
"filename , display url = cleanup url ( url )","call the function cleanup_url with an argument url , assign the result to filename and display_url , respectively ."
"if six . PY2 and not is in stance ( path , bytes ) :","if six.PY2 is true and path is not an instance of byes type ,"
import itertools,import module itertools .
"self . years = range ( this year , this year + NUM_ )",self.years is list containing 10 successive integers from this_year .
domain part = domain part . encode ( STR_ ) . decode ( STR_ ),"call the method domain_part.encode with an argument string 'idna ' , on the return value call the decode method with string 'ascii ' as argument , substitute the result for domain_part ."
if self closing or tagname in html4 singlets :,"if self_closing is true or tagname is contained in html4_singlets ,"
tags re = STR_ % | . join ( tags ),"join elements of tags into a string , separated with '| ' , format string ' ( % s ) ' with it , substitute the result for tags_re ."
class RegexField ( CharField ) :,"and format , return the result . derive the class RegexField from the base class CharField class ."
res = to digits [ NUM_ ],substitute first element of to_digits for res .
"elif options [ STR_ ] in ( STR_ , STR_ ) :","otherwise if value under the 'method ' key of optins dictionary equals to string 'thread ' or 'threaded ' ,"
if value is not result :,"if value is not contained in result ,"
self [ STR_ ] = STR_ . join ( permitted methods ),"and unpacked dictionary kwargs . join into a string permitted_methods , separated by string ' , ' , substitute it for value under the 'Allow ' key of the self dictionary ."
"self . event stream = pulldom . parse ( self . stream , self .  make parser ( ) )","call the method pulldom.parse with arguments : self.stream and return value of the method self._make_parser ,"
while NUM_ :,"endless loop ,"
"raise AttributeError ( "" STR_ "" )",raise an AttributeError with an argument string `` This QueryDict instance is immutable '' .
"t = s . split ( = , NUM_ )","split string s once , with '= ' sign as a delimiter , assign the resulting list to the t ."
class HttpResponseBase ( six . Iterator ) :,derive the class HttpResponseBase from the six.Iterator base class .
model dependencies = skipped,"model._meta.app_label and model._meta.object_name joined into a string , with separator ' . ' , result joined into a string , separated by string ' , ' for every model and deps in sorted list of elements skipped sorted by key : return value of the lambda function with an argument obj , and result the __name__ field of the first element of obj . substitute skipped for model_dependencies ."
"in stance = construct instance ( form , in stance , fields , exclude )","call the function construct_instance with 4 arguments form , instance , fields , exclude and substitute the result for instance ."
e . reason += STR_ % charset,"replace ' % s ' in string ' , HTTP response headers must be in % s format ' for charset , append it to e.reason ."
with self .  lock . writer ( ) :,"call the self._lock.writer method , with the result perform the following ,"
prefix += /,append '/ ' to prefix .
oldroot [ KEY ] = key,substitute key for value under the KEY key of the oldroot dictionary .
"return self .   dispatch [ t ] [ funcname ] ( res , * args , ** kw )","get the value under the funcname key of the t-th elment of self.__dispatch dictionary , call the result with 3 arguments : res ,"
"kwargs [ "" STR_ "" ] = self . parent instance . pk",substitute self.parent_instance.pk for value under the 'initial ' key of the kwargs dictionary .
else :,"if not ,"
if field . rel . through .  meta . auto created :,"if field.rel.through._meta.auto_created is true ,"
cache timeout = NUM_,substitute integer 0 for cache_timeout .
else :,"if not ,"
method = kwargs . pop ( STR_ ),"remove kwargs dictionary element under the 'method ' key , substitute it for method ."
elif form . has changed ( ) :,"otherwise if form.has_changed method evaluates to true ,"
if code is not None :,"if code is not None ,"
if k == STR_ :,"if k equals a string 'fg ' ,"
"return self . filter function ( name , ** flags )","call the method self.filter_function with arguments name and unpacked dictionary flags , return the result ."
def F ( self ) :,define the method F with an argument self .
elif settings . USE TZ :,"otherwise is settings.USE_TI is true ,"
parsed = urlparse ( force text ( redirect to ) ),"call the function force_text with an argument redirect_to , use the result as an argument for the call to the function urlparse ,"
"def  raw value ( self , fieldname ) :",self.error_class called with an argument error_class set to string 'nonfield ' . define the method _raw_value with 2 arguments : self and fieldname .
command = token . contents . split ( ) [ NUM_ ],"split token.contents into separate words , substitute the first element of the result for command ."
def L ( self ) :,define the method L with an argument self .
"ns resolver = RegexURLResolver ( ns pattern , resolver . url patterns )","ns_resolver is class instance of a class RegexURLResolver , created with 2 arguments : ns_pattern and resolver.url_patterns ."
current len += NUM_,"increment current_len by integer 1 ,"
"paras = [ STR_ % escape ( p ) . replace ( STR_ , STR_ ) for p in paras ]","call the function escape with an argument p , replace every occurrence of '\n ' in the result for ' < br / > ' ,"
"return func ( context , self . first )","call the function func with 2 arguments : context and self.first , return the result ."
if not squash :,"if squash is false ,"
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
"for field node in node . getElementsByTagName ( "" STR_ "" ) :",for every field_node in return value of the method node.getElementsByTagName with an argument string 'field ' .
url info = urlparse ( url ),"call the function urlparse with an argument url , substitute the result for url_info ."
self . label suffix = label suffix,substitute label_suffix for self.label_suffix .
if not self .  has expired ( key ) :,"evaluate the method self._has_expired with argument key , if it as False ,"
thousand sep = get format ( STR_ ),"call the function get_format with an argument string 'THOUSAND_SEPARATOR ' , substitute the result for thousand_sep ."
if val is not None :,"if val is not None ,"
pass,"do nothing ,"
sites . append ( site ),append site to sites .
  iter   = xreadlines,substitute xreadlines for __iter__ .
return,return an empty string .
from django . db . models . fields import Field as ModelField,from django.db.models.fields import Field as ModelField .
self . error dict = { },self.error_dict is an empty dictionary .
"super ( Command , self ) . add arguments ( parser )",call the add_arguments method with parser as argument form the base class of the class Command .
elif finder . find module ( name ) :,"otherwise if call to the method finder.find_module with an argument name evaluates to true ,"
"if is in stance ( field , InlineForeignKeyField ) :","if field is an instance of InlineForeignKeyField class ,"
try :,"try ,"
"if hasattr ( text , STR_ ) :","if text has an '__html__ ' attribute ,"
else :,"if not ,"
if not settings . configured :,"if settings.configured is false ,"
 MovedItems .  moved attributes =  moved attributes,substitute _moved_attributes for _MovedItems._moved_attributes .
message . message ( ),call the method message.message .
def ugettext ( message ) :,define the method ugettext with an argument message .
self .  js = [ ],self._js is an empty list .
"if is in stance ( f , models . FileField ) :","if f is an instance of models.FileField ,"
if self . language is not None :,"if self.language is not None ,"
BM compatible = True,BM_compatible is boolean True .
def get language from path ( path ) :,define the function get_language_from_path with an argument path .
widget = TimeInput,substitute TimeInput for widget .
output . append ( pformat ( sys . modules ) ),"call the function pformat with an argument sys.modules , append the result for output ."
kwargs = { },"kwargs is an empty dictionary ,"
else :,"if not ,"
def copy ( self ) :,define the method copy with an argument self .
template = template [ NUM_ : ],remove first 7 elements form template .
"if os . path . is dir ( os . path . join ( path , entry ) ) :","join path and entry into a file path , if it exists ,"
"raise BadHeaderError ( "" STR_ "" % ( val , name ) )","raise an BadHeaderError exception with argument string `` Header values ca n't contain newlines ( got % r for header % r ) '' ,"
for widget in self . widgets :,"for every bwidget in self.widgets ,"
self .  num pages = self .  count = None,self._num_pages and self._count are None .
"def dst ( self , dt ) :",define the method dst with 2 arguments self and dt .
if command in parse until :,"if command is contained in parse_until ,"
os . mkdir ( migrations directory ),make a directory migrations_directory .
if truncate is None :,"if truncate is None ,"
"raise CommandError ( "" STR_ "" "" STR_ "" % program )","raise an CommandError exception with an argument `` Ca n't find % s . Make sure you have GNU gettext tools 0.15 or newer installed . `` , where ' % s ' is replaced with program ."
"def make style ( opts = ( ) , ** kwargs ) :",return the string . define the function make_style with 2 arguments : opts set to an empty tuple and unpacked dictionary kwargs .
for model in model list :,"for every model in model_list ,"
"kwargs = dict ( ( smart text ( k , STR_ ) , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )","kwargs is an dictionary , populated for every k and v in result of the method self.kwargs.items with :"
"or ig file = os . path . join ( self . dirpath , self . file )","join self.dirpath and self.file into a file path , substitute it for orig_file ."
arg = settings . TIME FORMAT,substitute settings.TIME_FORMAT for arg .
"warnings . warn ( "" STR_ "" % fixture name )",call the method warnings.warn with an argument string `` No fixture named ' % s ' found . '' where ' % s ' is replaced with fixture_name .
return saved instances,return saved_instances .
try :,"try ,"
def   str   ( self ) :,define the method __str__ with an argument self .
advance iterator = next,substitute next for advance_iterator .
match = condition . eval ( context ),"call the method condition.eval with an argument context , substitute the result for match ."
return formats . localize input ( value ),"call the method formats.localize_input with an argument value , return the result ."
"validate comma separated integer list = RegexValidator ( comma separated int list re ,   ( STR_ ) , STR_ )","validate_comma_separated_integer_list is a instance of a RegexValidator class , created with 3 arguments : comma_separated_int_list_re ,"
self . load middleware ( ),call the self.load_middleware method .
"if is in stance ( value , str ) :","if value is an instance of str type ,"
return True,return boolean True .
"statements . append ( "" "" . join ( statement ) )","join statements into a string , separated by white spaces , append it to statements ."
"with open ( path , STR_ ) :","with open file path in append mode ,"
"if is in stance ( empty label , ( list , tuple ) ) :","if empty_label is an instance of list or tuple type ,"
try :,"try ,"
matches = False,matches is boolean False .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
if urlconf is None :,"prefix set to None , current_app set to None . if urlconf is None ,"
class BoundaryIter ( six . Iterator ) :,derive the class BoundaryIter from the six.Iterator base class .
yield node,yield node .
self . setlistdefault ( key ) . append ( value ),"call the method self.setlistdefault with an argument key , append value to the result ."
from django . utils import six,from django.utils import six into default name space .
raise Resolver404 ( { STR_ : path } ),raise an Resolver404 exception with an argument dictionary containing 1 entry : path for 'path ' .
except TypeError :,"if TypeError exception is caught ,"
for j in xrange ( in t ( iterations ) ) :,"for every j in range of integers from 0 to iterations converted to an integer ,"
header names = [ key . lower ( ) for key in self . extra headers ],"call the key.lower method for every key in self.extra_headers , join the results into a header_names ."
try :,"try ,"
if not callback :,"substitute it for callback , if the attribute doesnt exists , callback is None . if not callback ,"
if resolved path :,"if resolved_path is true ,"
"def  construct form ( self , i , ** kwargs ) :","define the method _construct_form with 3 arguments : self , i and unpacked dictionary kwargs ."
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
app name = get commands ( ) [ name ],"call the function get_commands , substitute the value under the name key of the return value , for app_name ."
return get valid filename ( name ),"call the get_valid_filename with argument name , return the result ."
@ property,"property decorator ,"
return msgs,return msgs .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'required ' key of the self.error_messages dictionary and code set to 'required ' .
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'link ' and value under the 'link ' key of the item dictionary .
DNS NAME = CachedDnsName ( ),DNS_NAME is a instance of CachedDnsName class .
"warnings . warn ( "" STR_ "" % loader )","call the function warnings.warn with an argument string `` Your TEMPLATE_LOADERS setting includes % r , but your Python installation"
return self,return self .
"def dst ( self , dt ) :",define the method dst with 2 arguments self and dt .
raise value . with traceback ( tb ),raise an value.with_traceback exception with an argument tb .
"def sign ( self , value ) :",define the method sign with arguments self and value .
timeout = - NUM_,timeout is a integer -1 .
objects in fixture = NUM_,objects_in_fixture is integer 0 .
"help = "" STR_ ""","help is a string , containing `` Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed . `` ."
if options [ STR_ ] > NUM_ :,"if value under the 'verbosity ' key of the options dictionary is greater than zero ,"
"exec ( compile ( handle . read ( ) , pythonrc , STR_ ) , imported objects )","compile the handle.read in mode 'exec ' source is read from file pythonrc , execute the compiled script with imported_objects variables ."
from django . utils . six . moves import in put,from django.utils.six.moves import input into default name space .
self . renderer = renderer,substitute renderer for self.renderer .
return import string ( key func ),"evaluate the function import_string with key_func as argument , return the result ."
"return super ( SimpleTemplateResponse , self ) . content",return the content field of the base class of the class SimpleTemplateResponse .
if in itial is None :,"if initial is None ,"
"def attach ( self , filename = None , content = None , mimetype = None ) :","define the method attach with 4 arguments : self , filename set to None , content set to None and mimetype set to None ."
"def resolve ( path , urlconf = None ) :",define the function resolve with arguments path and urlconf set to None .
"if is in stance ( value , datetime . date ) :","if value is an instance of datetime.date class ,"
"if is in stance ( option label , ( list , tuple ) ) :","if option_label is an instance of list or tuple ,"
self . resolver match = None,self.resolver_match is None .
"def add arguments ( self , parser ) :",define method add_arguments with self class instance and parser as the arguments .
end = rawdata [ k : endpos ] . strip ( ),"slice the rawdata string from the k-th to the endpos-th index , remove the whitespaces from the start and the end of the string , substitute it for end ."
defaults . update ( kwargs ),update defaults dictionary with kwargs .
if fields :,"if fields is true ,"
except OSError as e :,"if OSError , renamed to e , is caught ,"
"if event == "" STR_ "" and node . nodeName == "" STR_ "" :","if event equals a string `` START_ELEMENT '' and node.nodeName equals a string 'object ' ,"
if conflicts and not self . merge :,"if conflicts is true and self.merge is false ,"
"errors . append ( Error ( "" STR_ "" "" STR_ "" "" STR_ "" % ( description , name , STR_ . join ( reference ) ) , obj = receiver .   module   , hint = None , id = STR_ ) )","call the Error function with 4 arguments , string `` % s was connected to the ' % s ' signal with a lazy reference to the ' % s ' sender ,"
urlconf = settings . ROOT URLCONF,substitute settings.ROOT_URLCONF for urlconf .
finally :,"finally perform ,"
"self . stdout . write ( ( "" STR_ "" "" STR_ "" "" STR_ "" "" STR_ "" ) % { "" STR_ "" : now , "" STR_ "" : self . get version ( ) , "" STR_ "" : settings . SETTINGS MODULE , "" STR_ "" : STR_ % self . addr if self .  raw ipv6 else self . addr , "" STR_ "" : self . port , "" STR_ "" : quit command , } )","call the method self.stdout.write with an argument : string `` % ( started_at ) s\nDjango version % ( version ) s , using settings % ( settings ) r\n ''"
"if not hasattr ( translation , STR_ ) :","languages set to a list with an element self.__locale , codeset set to a string 'utf-8 ' and fallback set to use_null_fallback , substitute the result for translation . if translation has an attribute '_catalog ' ,"
"setattr ( obj , self . fk . get attname ( ) , getattr ( pk value , STR_ , pk value ) )","get attribute 'pk ' of the pk_value object , if it doesnt exists use pk_value , set to it self.fk.get_attname return value attribute ,"
"if hasattr ( request , STR_ ) :","if request has an attribute named 'urlconf ' ,"
msg . attach ( body msg ),call the method msg.attach with an argument body_msg .
elif char in STR_ :,"otherwise if char is contained in string 'bEFMmNn ' ,"
class BoundField ( object ) :,derive the class BoundField from the base class object .
"messages . update ( getattr ( c , STR_ , { } ) )","get 'default_error_messages ' from the c object , if it doesnt exists return an empty dictionary ,"
raise NotImplementedError ( STR_ ),raise a NotImplementedError with an argument string 'subclasses of Deserializer must provide a __next__ ( ) method ' .
"raise TemplateSyntaxError ( "" STR_ "" % name )","raise an TemplateSyntaxError exception with an argument string `` ' % s ' received too many positional arguments '' ,"
"for option value , option label in chain ( self . choices , choices ) :","call the function chain with arguments self.choices and choices , for every option_value and option_label in the result ,"
except ImportError :,"if ImportError exception is caught ,"
if fake :,"if fake is true ,"
if len ( list  ) == NUM_ :,"is length of list_ equals integer 0 ,"
if args is None :,"if args is None ,"
class Command ( AppCommand ) :,derive class Command from the base class AppCommand .
return value,return value .
def items ( self ) :,define the method items with an argument self .
"raise ValidationError ( self . message , code = self . code , params = params )","raise a ValidationError exception with arguments self.message , code set to self.code and params set to params ."
"def handle field ( self , obj , field ) :","define handle_field method with self , obj and field arguments ."
return self .  create attachments ( self .  create alternatives ( msg ) ),"call the method self._create_alternatives with an argument msg , use it as an argument for the call to the self._create_attachments method , return the result ."
def add move ( move ) :,substitute it for value under the string `` .moves.urllib '' appended to __name__ key of the sys.modules dictionary . define the function add_move with an argument move .
return dec,return dec .
data = compressed,substitute compressed for data .
"for key , value in data . items ( ) :","for every key and value in data.items method return value ,"
"def has error ( self , field , code = None ) :","define the method has_error with 3 arguments : self , field and code set to None ."
def   init   ( self ) :,define the method __init__ with an argument self .
"for node app , node name in migration . branch :","for every node_app and node_name in migration.branch ,"
"callback = lambda response : middleware . process response ( request , response )","callback is an lambda function with an argument response and with return value result of the method middleware.process_response ,"
return default,return default .
"params = { STR_ : value , STR_ : current timezone }","'may be ambiguous or it may not exist . ' , substitute the result for message . params is an dictionary containing 2 initial entries : value for 'datetime ' and current_timezone for 'current_timezone ' ."
while model dependencies :,"while model_dependencies is true ,"
self . charset = charset,substitute charset for self.charset .
if html message :,"if html_message is True ,"
from django . apps import apps,from django.apps import apps into default name space .
"return not module has submodule ( package , module )","call the function module_has_submodule with 2 arguments : package and module , return inverted boolean result ."
"def   delattr   ( self , name ) :",define the method __delattr__ with self and name as arguments .
"message context = message context . strip ( "" STR_ "" )","strip message_context of `` ' '' characters from both ends , substitute the result for message_context ."
"self .  func path = STR_ . join ( [ func .   class   .   module   , func .   class   .   name   ] )","join func.__class__.__module__ and func.__class__.__name__ into a string , separated by character ' . ' , substitute it for self._func_path ."
"self .  cache =  caches . setdefault ( name , { } )","call the _caches.setdefault method with name and empty dictionary as arguments , substitute the result for self_cache ."
self . nodelist = t . nodelist,substitute t.nodelist for self.nodelist .
"def   init   ( self , * args , ** kwargs ) :","define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
if self . is  localized :,"if self.is_localized is true ,"
return new value,code set to an string 'invalid_choice ' and dictionary params with an entry : choice for 'value ' . return new_value .
"for ( k , v ) in kwargs . items ( ) :","for every k and v in items of dictionary kwargs , respectively ,"
new class . declared fields = declared fields,substitute declared_fields for new_class.declared_fields .
if len ( parts ) > NUM_  and parts [ - NUM_ ] in self . compression formats :,"if length of parts is greater than integer 1 and last element of parts is contained in self.compression_formats ,"
return STR_ . join ( statements ),"join statements in a string separated by newline , return the result ."
"def handle ( self , ** options ) :",default as an empty list and help as an string 'Locales to exclude . Default is none . Can be used multiple times. ' . define the handle method with self class instance and dictionary **options as arguments .
"shutdown message = options . get ( STR_ , )","get the value under the 'shutdown_message ' key of the options dictionary , if it exists substitute it for shutdown_message ,"
import copy,import module copy .
def check for language ( lang code ) :,define the function check_for_language with an argument lang_code .
from django . apps import apps,from django.apps import apps into default name space .
elif dirname == STR_ :,"otherwise if dirname equals string 'locale ' ,"
return result == NUM_,"perform bitwise OR with 2 operands : previous result and result , substitute the result for result . if result is equal to integer 0 , return boolean True , otherwise return boolean False ."
def errors ( self ) :,define the method errors with an argument self .
class BaseConfigurator ( object ) :,derive the class BaseConfigurator from object base class .
if item [ STR_ ] is not None :,"if value under the 'enclosure ' key of the item dictionary is not None ,"
"args , kwargs = parse bits ( parser , bits , params , varargs , varkw , defaults , takes context , name )","call the method parse_bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes_context and name ,"
from django . utils import datetime safe,from django.utils import datetime_safe into default name space .
return value,return value .
elif not callable ( formfield callback ) :,"otherwise if formfield_callback is not callable object ,"
if format not in serializers . get public serializer formats ( ) :,"if format is not contained in return value of the method serializers.get_public_serializer_formats ,"
e . django template source = self . source,substitute self.source for e.django_template_source .
"if hasattr ( os , STR_ ) :","if os has an attribute 'utime ' ,"
" urllib request moved attributes = [ MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , ]","_urllib_request_moved_attributes is an list with 33 elements , all of them are the results of the call to the function MovedAttribute with 3 different string arguments ."
DEFAULT MAX NUM = NUM_,DEFAULT_MAX_NUM is an integer 1000 .
self . cdata tag = None,set self.cdata_tag to None .
from django . utils .  os import safe join,from django.utils._os import safe_join into default name space .
"def set ( self , key , value , timeout = DEFAULT TIMEOUT , version = None ) :","define the method set with 5 arguments : self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None ."
dirs . remove ( dirname ),remove dirname key from dirs .
return self . var,return self.var .
"return ( t [ NUM_ ] . lower ( ) , t [ NUM_ ] )","return first element of t converted to lowercase and second element of t , as a tuple ."
in valid tag = next ( tag for tag in tags if not checks . tag exists ( tag ) ),"for every tag in tags , are false , for every tag in tags , if return value of the method checks.tag_exists called with an argument tag , evaluates to false ,"
"def create var ( self , value ) :",define the method create_var with 2 arguments : self and value .
return self . as ul ( ),"call the method self.as_ul , return the result ."
"localedir = os . path . join ( os . path . dirname ( settingsfile ) , STR_ )","use its __file__ field as an argument for the call to the function upath , substitute the result for settingsfile . call the function os.path.dirname with an argument settingsfile , join the result an string 'locale ' into a file path ,"
extra params . update ( field params ),"field_notes , respectively . add field_params to extra_params dictionary ."
"value = ugettext ( "" STR_ "" ) % filesize number format ( bytes / MB )","call the function ugettext with an argument string `` % s MB '' , substitute ' % s ' with the result of the call to the function ,"
new modules = module values -  cached modules,"subtract _cached_modules from module_values , assign the result to new_modules ."
translated = func ( ** kwargs ),"call the function func with unpacked dictionary kwargs as an argument , substitute the result for translated ."
"raise TemplateSyntaxError ( "" STR_ "" % ( name , alen - dlen , plen ) )","raise an TemplateSyntaxError exception with an argument string `` % s requires % d arguments , % d provided '' ,"
@ register . tag,"register.tag decorator ,"
else :,"if not ,"
from django . conf import settings,from django.conf import settings into default name space .
"self . create table ( db , tablename )",call the method self.create_table with arguments : db and tablename .
from django . conf import settings,and RemovedInDjango19Warning . from django.conf import settings into default namespace .
self . path info =,self.path_info is an empty string .
result . append ( ch ),append ch to result .
"except ( ValueError , TypeError ) :","if ValueError or TypeError exceptions occurred ,"
"help = "" STR_ ""","help is a string , `` Prints the custom table modifying SQL statements for the given app name ( s ) . `` ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
else :,"`` Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES . django.contrib.sessions.middleware.SessionMiddleware , django.contrib.auth.middleware.AuthenticationMiddleware , and django.contrib.messages.middleware.MessageMiddleware were removed from the defaults . If your project needs these middleware then you should configure this setting . `` , obj set to None , and id set to a string '1_7.W001 ' , put the result into a list and return it . if not ,"
from django . apps import apps,from django.apps import apps .
self . reader enters ( ),call the method self.reader_enters .
"  all   = ( STR_ , STR_ )",__all__is an tuple with 2 elements : strings 'BaseForm ' and 'Form ' .
if not response . streaming :,"if response.streaming is boolean False ,"
for d in object list :,"substitute boolean False for ignore . for every d in object_list ,"
from django . utils import six,from django.utils import six into default name space .
else :,"if not ,"
yield,yield and empty string as the result .
"def   setstate   ( self , state ) :",define the method __setstate__ with 2 arguments : self and state .
"def ungettext lazy ( singular , plural , number = None ) :","and number set to number , return the result . define the function ungettext_lazy with 3 arguments : singular , plural and number set to None ."
num pages = property (  get num pages ),num_pages is a property object with _get_num_pages as a getter method .
context [ self . var name ] = obj,substitute obj for value under the self.var_name key of the context dictionary .
major = get major version ( version ),"call the get_major_version wit version as argument , store the result in major ."
if not self . leave locale alone :,"if self.leave_locale_alone is false ,"
else :,"if not ,"
for path in paths :,"for every path in paths ,"
output = [ ],output is an empty string .
self . full clean ( ),call the method self.full_clean .
parser . skip past ( STR_ ),call the method parser.skip_past with an argument string 'endcomment ' .
"return decorator ( * args , ** kwargs )","call the function decorator with 2 arugments : unpacked list args and unpacked dictionary kwargs , return the result ."
pass,do nothing .
except LookupError :,if LookupError exception is caught .
try :,"substitute the result for origin . try ,"
status code = NUM_,status_code is an integer 404 .
if not settings . is  overridden ( STR_ ) :,"call the function settings.is_overridden with argument string 'MIDDLEWARE_CLASSES ' , if the result is boolean False ,"
"statements = sql delete ( app config , self . style , connection )","call the function sql_destroy_indexes with 3 arguments : app_config , self.style and connection , substitute the result for statements ."
ugettext noop = gettext noop,substitute gettext_noop for ugettext_noop .
return smart text ( value ),"call the function smart_text with an argument value , return the result ."
return,return an empty string .
now = now . replace ( microsecond = NUM_ ),"call the function now.replace with microseconds set to integer 0 , substitute the result for now ."
if self . max digits is not None and digits > self . max digits :,"if self.max_digits is not None and digits is grater than self.max_digits ,"
"raise ValueError ( "" STR_ "" )",raise an ValueError exception with an argument string `` Base36 input too large '' .
errors . append ( self . get unique error message ( unique check ) ),"call the method self.get_unique_error_message with an argument unique_check , append the result to errors ."
from django . core . cache import caches,from django.core.cache import caches into default name space .
response = self . get response ( request ),"call the self.get_response with request as the argument , substitute the result for response ."
if self . timeout is not None :,"if self.timeout is not None ,"
args = options . args,substitute options.args for args .
"meta = getattr ( form , STR_ , None )","get 'Meta ' attribute from form object , if it exists substitute it for meta , if not meta is None ."
"self . stdout . write ( "" STR_ "" % filename )","substitute ' % s ' in string `` Extracting % s\n '' with filename , write it to self.stdout stream ."
writer = MigrationWriter ( migration ),"writer is an instance of MigrationWriter class , created with an argument migration ."
widget . is  localized = True,widget.is_localized is boolean True .
pass,do nothing .
return self .  queryset,return self._queryset .
new name = STR_ % new name,"convert new_name to a string and append it to string 'field ' , substitute the result for new_name ."
return self .  encoding,return self._encoding .
return not self . file or self . file . closed,"if self.file is false or self.file.closed is true , return boolean true , otherwise return boolean false ."
else :,"covert to lowercase language elements from ( p+1 ) -th index to the end , append it to the previous result , return it . if not ,"
except OSError as e :,"if OSError , renamed to e , exception is caught ,"
if widgets and f . name in widgets :,"if widgets is true and f.name is contained in widgets ,"
if name is not None :,"if name is not None ,"
timeout = self . default timeout,substitute self.default_timeout for timeout .
"def   new   ( mcs , name , bases , attrs ) :","define the method __new__ with 4 arguments mcs , name , bases and attrs ."
if not is abs ( path ) :,"call the function isabs with an argument path , if it evaluates to false ,"
return value,return value .
self . POST = QueryDict ( mutable = True ),self.POST is an instance of QueryDict class created with an argument mutable set to boolean True .
try :,"try ,"
pass,do nothing .
"if name == "" STR_ "" :","if name equals string `` _wrapped '' ,"
"if is in stance ( current , BaseContext ) and getattr ( type ( current ) , bit ) :","if current is an instance of BaseContext and bit attribute of type of current is true ,"
if language code not in self .  namespace dict :,"if language_code is not contained in self._namespace_dict ,"
"options = self . render options ( choices , value )","string ' < select multiple= '' multiple '' { 0 } > ' and result of the function flatatt called with an argument final_attrs . call the method self.render_options with 2 arguments : choices and value , substitute the result for options ."
"new environ [ "" STR_ "" ] = STR_",value under the `` RUN_MAIN '' key of new_environ dictionary is a string 'true ' .
"sql files . append ( os . path . join ( app dir , "" STR_ "" % opts . model name ) )","append the result to sql_files . join into a file path : app_dir and string % s. % s.sql , where ' % s ' is replaced by opts.model_name , append the result to sql_files ."
try :,"try ,"
try :,"try ,"
"base , ext = posixpath . splitext ( the path )",call the method posixpath.splitext with an argument the_path .
"def write message ( self , message ) :",define the method write_message with arguments self and message .
"self . add error ( name , e )",call the method self.add_error with 2 arguments name and e .
if cursor and close connection :,"if both cursor and close_connection are true ,"
num sent = NUM_,num_sent is an integer 0 .
"for i , row in enumerate ( connection . in trospection . get table description ( cursor , table name ) ) :","for every i and row in enumerated result of the method connection.introspection.get_table_description called with arguments : cursor and table_name ,"
digits = decimals,substitute decimals for digits .
"if not value or is in stance ( value , ( list , tuple ) ) :","if value is false or value is not an instance of list or tuple types ,"
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
guid attrs [ STR_ ] = str ( item [ STR_ ] ) . lower ( ),"covert to string value under the 'unique_id_is_permalink ' key of the item dictionary , convert it to lowercase ,"
ch = next ( in put iter ),"get the next element of the iterable pattern_iter , assign the result for ch ."
from django . conf import urls,"from django.conf import urls into default name space ,"
else :,"if not ,"
"self . tag ( function name , compile func )",call the function self.tag with 2 arguments : function_name and compile_func .
return len ( self . children ),return the length of self.children .
in itLock = Lock ( ),evaluate function Lock ( ) assign the result to initLock .
def   nonzero   ( self ) :,define the method __nonzero__ with an argument self .
msg = self . style . HTTP REDIRECT ( msg ),"call the self.style.HTTP_REDIRECT with an argument msg , substitute it for msg ."
return out . getvalue ( ),"call the method out.getvalue , return the result ."
"mail . attach alternative ( html message , STR_ )",call the mail.attach_alternative method with html_message and string 'text/html ' as arguments .
"if kwargs . get ( k , v ) ! = v :","if the value of the kwargs dictionary under the key k is not equal to v ,"
return False,return boolean False .
if source is None :,"if source is None ,"
database = options . get ( STR_ ),substitute value under the 'database ' key of the options dictionary for database .
@ python 2 unicode compatible,"python_2_unicode_compatible decorator ,"
"BUILTIN SERIALIZERS = { "" STR_ "" : "" STR_ "" , "" STR_ "" : "" STR_ "" , "" STR_ "" : "" STR_ "" , "" STR_ "" : "" STR_ "" , }","BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries : `` django.core.serializers.xml_serializer '' for `` xml '' ,"
"parent = ( form . Meta , object )",parent is a tuple with 2 arguments : form.Meta and object .
from xml . sax . expatreader import ExpatParser as  ExpatParser,from xml.sax.expatreader import ExpatParser as _ExpatParser into default name space .
pass,do nothing .
val1 = parser . compile filter ( bits [ NUM_ ] ),"call the method parser.compile_filter with an argument , second element of bits , substitute the result for val1 ."
content type = in fo . get ( STR_ ),"get the value under the 'content-type ' key of the info dictionary , substitute it for content_type ."
if option value in selected choices :,"if option_value is contained in selected_choices ,"
count = since // seconds,"divide since by seconds , store the floored result in count ."
DEFAULT CACHE ALIAS = STR_,'CacheKeyWarning ' and 'BaseCache ' DEFAULT_CACHE_ALIAS is a string 'default ' .
import warnings,import module warnings .
"tt = ( dt . year , dt . month , dt . day , dt . hour , dt . minute , dt . second , dt . weekday ( ) , NUM_ , NUM_ )","tt is a tuple with 9 elements : dt.year , dt.month , dt.day , dt.hour , dt.minute , dt.second , result of the method dt.weekday ,"
"def size ( self , name ) :",define the method size with arguments self and name .
"for key , value in six . iterlists ( self ) :","for key and value in result of the function six.iterlists called with an argument ,"
raise,raise an exception .
"sys . stderr . write ( "" STR_ "" )",call the method sys.stderr.write with an argument string `` http : //www.saddi.com/software/flup/ If you 've already\n '' .
attrs [ STR_ ] = self . html initial id,substitute self.html_initial_id for value under the 'id ' key of the attrs dictionary .
" iterkeys = "" STR_ """,_iterkeys is a string `` keys '' .
class ValidationError ( Exception ) :,derive the class ValidationError from the Exception base class .
def display ( self ) :,where ' % s ' is replaced with self.id . define the method display with an argument self .
return result,return result .
self . params = params,substitute params for self.params .
tmp = url . rstrip ( / ),"strip url of surrounding '/ ' characters , substitute it for tmp ."
url = property ( lambda self : self [ STR_ ] ),"url is a property of the class , lambda function is getter attribute with an argument self and return value is the value under the 'Location ' key of the self dictionary ."
sys . exit ( NUM_ ),call the function sys.exit with an argument integer 1 .
with self .  lock . writer ( ) :,"call the self._lock.writer method , with the result perform the following ,"
" func closure = "" STR_ """,_func_closure is a string `` __closure__ '' .
create models = set ( itertools . chain ( * manifest . values ( ) ) ),"unpack the manifest.values function return value and feed it to the itertools.chain function , create_models is a set containing chanied list ."
def phone2numeric ( phone ) :,define the function phone2numeric with an argument phone .
self . connection . quit ( ),call the method self.connection.quit .
from pprint import pformat,from pprint import pformat into default name space .
"return http . QueryDict ( raw query string , encoding = self .  encoding )","evaluate the http.QueryDict method with raw_query_string and encoding set to self._encoding as arguments , return the result ."
import pylibmc,import pylibmc .
"with transaction . atomic ( using = database , savepoint = connection . features . can rollback ddl ) :","evaluate method transaction.atomic with arguments : using set to database and savepoint set to connection.features.can_rollback_ddl ,"
if len ( fks to parent ) == NUM_ :,"and , if f.rel.toequals parent_model or f.rel.to is contained in result of the call to the method parent_model._meta.get_parent_list . if length of fks_to_parent is integer 1 ,"
if not self . fail silently :,"if self.fail_silently is boolean False ,"
"self . xml . endElement ( "" STR_ "" )",call the method self.xml.startElement with an argument string 'object ' .
"msg = ( "" STR_ "" "" STR_ "" % ( { STR_ : app path , STR_ : e , } ) )","msg is a tuple containing one initial entry : a string `` WSGI application ' % ( app_path ) s ' could not be loaded ; Error importing module : ' % ( exception ) s ' '' , where ' % ( app_path ) s ' is replaced by app_path and ' % ( exception ) s ' is replaced by e ."
"def update ( self , other dict ) :",define the method update with 2 arguments : self and other_dict .
if os . path . exists ( filename ) :,"if file filename exists ,"
self . error list = [ self ],substitute list containing element self for self.error_list .
return value,return value .
if exclude and f . name in exclude :,"if exclude is true and f.name is contained in exclude ,"
continue,"skip this loop iteration ,"
else :,"if not ,"
LPOVERLAPPED = POINTER ( OVERLAPPED ),"second contains : string 'InternalHigh and ULONG_PTR , third : '_offset_union ' and _OFFSET_UNION , forth 'hEvent ' and HANDLE . call the function POINTER with argument OVERLAPPED , substitute the result for LPOVERLAPPED ."
hextets [ in dex ] = hextets [ in dex ] . lstrip ( STR_ ),"get the value under the index key of the hextets dictionary , remove the leading ' 0 ' characters ,"
return False,return boolean False .
if not self . connection :,"if self.connection is false ,"
in valid var format string = None,invalid_var_format_string is None .
"warnings . warn ( STR_ STR_ , RemovedInDjango19Warning , NUM_ )","call the warnings.warn method with string ' ` request.REQUEST ` is deprecated , use ` request.GET ` or ` request.POST ` instead . ' ,"
from django . utils . translation import get language,from django.utils.translation import get_language into default name space .
msg count = NUM_,msg_count is integer 0 .
return self,return self .
"fd = os . open ( full path , flags , NUM_ o666 )","binary or 'O_BINARY ' attribute of the os object , or integer 0 if it doesnt exists . call the os.open function with full_path , flags and octal number 0o666 as arguments , substitute the result for fd ."
except AttributeError :,"if AttributeError exception is caught ,"
class TimeInput ( DateTimeBaseInput ) :,derive the class TimeInput from the DateTimeBaseInput base class .
class Variable ( object ) :,derive the class Variable form the base class object .
def is  ajax ( self ) :,define the method is_ajax with an argument self .
loaded objects in fixture = NUM_,loaded_objects_in_fixture is integer 0 .
"output . append ( STR_ % ( in dent , escaper ( force text ( title ) ) , sublist ) )","substitute every ' % s ' in string ' % s < li > % s % s < /li > ' with indent , with result of the function escaper called with an argument :"
"if not hasattr ( obj , "" STR_ "" ) :","if '_meta ' is not an attribute of obj ,"
"match =  html parser . endtagfind . match ( rawdata , i )","match the rawdata from the position i , with _html_parser.endtagfind pattern , assign the result to the match ."
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
"for name , field in self . fields . items ( ) :","call the method self.fields.items , for every name and field in result ,"
"return cls ( file dict [ STR_ ] , file dict [ STR_ ] , file dict . get ( STR_ , STR_ ) )","call the method cls with 3 arguments : value under the 'filename ' key of file_dict , value under the 'content ' key of file_dict ,"
"serializers . serialize ( format , get objects ( ) , in dent = in dent , use natural foreign keys = use natural foreign keys , use natural primary keys = use natural primary keys , stream = stream or self . stdout )","call the method serializers.serialize with 6 arguments : format , result of the function get_objects , indent set to indent ,"
"po path = os . path . join ( dirpath , f )",po_path is a string containing joined directory path from dirpath and f .
if field . error messages [ STR_ ] not in errors :,"get the value under the 'incomplete ' key of the field.error_messages dictionary , if it is not contained in errors ,"
return len ( list ( self .   iter   ( ) ) ),"convert result of the method self.__iter__ into a list , return its length ."
last = root [ PREV ],substitute value under the PREV key of the root dictionary for last .
"with open ( old path , STR_ ) as template file :","string `` % s already exists , overlaying a project or app into an existing directory wo n't replace conflicting files '' , where ' % s '' is replaced with new_path . open old_path file in 'rb ' mode , with file descriptor renamed to template_file ,"
rest = rest [ m . end ( ) : ],"call the method m.end , slice list rest from previous result as starting index to the end , substitute the result for rest ."
"daemon kwargs [ STR_ ] = in t ( options [ STR_ ] , NUM_ )","convert the value under the 'umask ' key of options dictionary into an integer of base 8 , substitute it for value under the 'umask ' key of daemon_kwargs dictionary ."
"def handle fk field ( self , obj , field ) :","define the method handle_fk_field with arguments self , obj and field ."
self .  callback = None,self._callback is None .
if pickled is not None :,if pickled is not None .
option value = force text ( option value ),"call the function force_text with an argument option_value , substitute the result for option_value ."
if val is None :,"if val is None ,"
"fp = kwargs . pop ( "" STR_ "" , sys . stdout )","remover 'file ' key from the kwargs dictionary , if it exists substitute it for fp , if not substitute sys.stdout for fp ."
"self . is olated context = kwargs . pop ( STR_ , False )","if not self.extra_context is an empty dictionary . remove kwargs dictionary entry under the 'isolated_context ' key , if it exists substitute it for self.isolated_context ,"
dirs . append ( ),append an empty string to dirs list .
"output . append ( self . render option ( selected choices , * option ) )","call the method self.render_option with 2 arguments : selected_choices and unpacked list option , append the result to output ."
self .  add fallback ( ),call the method self._add_fallback .
"def get ( self , key , default = None ) :","define the method get with 3 arguments : self , key and default set to None ."
if opts . model is None :,if opts.model is None .
if not UserModel .  default manager . exists ( ) and options . get ( STR_ ) :,"if return value of the method UserModel._default_manager.exists is false and value under the 'interactive ' key of the options dictionary is true ,"
"help = "" STR_ """,help is a string `` Runs this project as a FastCGI application . Requires flup . `` .
def dec ( func ) :,"define the function dec with an argument func ,"
if ( ( ( self . allow files and os . path . is file ( full file ) ) or ( self . allow folders and os . path . is dir ( full file ) ) ) and ( self . match is None or self . match re . search ( f ) ) ) :,"if self.allow_files is true and full_file is a file , or if self.allow_folders is true and full_file is an directory ,"
content = template . render ( context ),"call the method template.render with an argument context , substitute it for content ."
errors = [ ],errors is an empty list .
class IPAddressField ( CharField ) :,derive the class IPAddressField from the base class CharField class .
if not ( self . in verse match is not bool ( self . regex . search ( force text ( value ) ) ) ) :,"if self.inverse_match equals to return value of the self.regex.search method converted to boolean , called with argument force_text ( value ) ,"
else :,"if not ,"
"def render ( self , context ) :",define the method render with 2 arguments self and context .
try :,"try ,"
if endblock . contents not in acceptable endblocks :,"if endblock.contents is not contained in acceptable_endblocks ,"
return  trans . deactivate ( ),"call the function _trans.deactivate , return the result ."
if graph . nodes [ plan node ] . replaces :,"if replaces filed of graph.nodes element at the plan_node index is true ,"
class StreamingHttpResponse ( HttpResponseBase ) :,derive the class StreamingHttpResponse from the HttpResponseBase base class .
from django . template . loader import BaseLoader,from django.template.loader import BaseLoader into default name space .
else :,"if not ,"
nan = ( NUM_ * NUM_ ) // ( NUM_ * NUM_ ),"divide 10 to the power of 400 by 10 to the power of 400 , substitute the result for nan ."
logger = logging . getLogger ( STR_ ),"call logging.getLogger method with string 'django.request ' as argument , store the result in logger ."
return calendar . is leap ( self . data . year ),"call the method calendar.isleap with an argument self.data.year , return the result ."
"parser . add argument ( STR_ , STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ STR_ )","default set to None , help is a string 'Only look for fixtures in the specified app. ' . call the method parser.add_argument with 6 arguments : string ' -- ignorenonexistent ' , string '-i ' , action as a string 'store_true ' ,"
"def clean ipv6 address ( ip str , unpack ipv4 = False , error message =   ( "" STR_ "" ) ) :","define the function clean_ipv6_address with 3 arguments : ip_str , unpack_ipv4 set to boolean False and error_message ,"
def as table ( self ) :,define the method as_table with an argument self .
"add move ( MovedModule ( "" STR_ "" , "" STR_ "" ) )","and unpacked dictionary kwargs , return the result . call the function MovedModule with 2 arguments : strings `` _dummy_thread '' and `` dummy_thread '' ,"
relations = { },relations is an empty dictionary .
DELETION FIELD NAME = STR_,DELETION_FIELD_NAME is a string 'DELETE ' .
try :,"try ,"
from django . conf import settings,from django.conf import settings into default name space .
elif ch == STR_ :,"otherwise if ch equals a string ' ( ' ,"
"if hasattr ( hashlib , "" STR_ "" ) :","use the result as an argument for the call to the function binascii.unhexlify , return the result . if hashlib had an instance `` pbkdf2_hmac '' ,"
return pickle . loads ( base64 . b64decode ( force bytes ( value ) ) ),"call the function force_bytes with argument value , use the result as an argument for the call to the method base64.b64decode ,"
for dict  in self . dicts :,"for every dict_ in self.dicts ,"
"handler . startElement ( "" STR_ "" , self . item attributes ( item ) )","call the method handler.startElement with 2 arguments : string 'entry ' and result of the function self.item_attributes ,"
class CacheClass ( LocMemCache ) :,derive the class CacheClass from the base class LocMemCache .
unlink = os . unlink,substitute os.unlink for unlink .
with transaction . atomic ( using = db ) :,"with return value of the function transaction.atomic with using set to db as arguments , perform the following ,"
if settings . USE TZ :,"if settings.USE_TZ is true ,"
"args = [ STR_ ] + self . msgmerge options + [ pofile , potfile ]","append self.msgmerge_options to a list containing string 'msgmerge ' , append to it a list containing pofile and potfile , substitute the result for args ."
"def ungettext ( singular , plural , number ) :","define the function ungettext with 3 arguments : singular , plural and number ."
"return map ( self . make bytes , self .  iterator )","map elements of self._iterator through self.make_bytes function , return the result ."
class FirstOfNode ( Node ) :,derive the class FirstOfNode from Node base class .
from django . conf import settings,from django.conf import settings into default name space .
raise,raise an exception .
"html [ STR_ ] = self . create select ( name , self . year field , value , year val , choices , self . year none value )","call the method self.create_select with 6 arguments : name , self.year_field , value , year_val , choices and self.year_none_value ,"
def is  protected type ( obj ) :,datetime.date and datetime.time . define the function is_protected_type with obj as the only argument .
class UnreadablePostError ( IOError ) :,derive the class UnreadablePostError from the base class IOError .
"raise AttributeError ( "" STR_ "" % ( name , ) )","raise an AttributeError with an argument string `` no such move , % r '' , formated with a tuple with an element name ."
def visible fields ( self ) :,define the method visible_fields with an argument self .
for c in lineno comment map [ comment lineno cache ] :,"for every c in lineno_comment_map dictionary value under the comment_lineno_cache key ,"
try :,"try ,"
"if is in stance ( loader , six . string types ) :","if loader is an instance of six.string_types ,"
return self . file . closed,return self.file.closed .
"for attr , value in base .   dict   . items ( ) :","call the method base.__dict__.items , for every attr and value in the result ,"
"wrap = allow lazy ( wrap , six . text type )","call the function allow_lazy with 2 arguments : wrap and six.text_type , substitute the result for wrap ."
from django . db import models,from django.db import models into default name space .
from django . utils import six,from django.utils import six into default name space .
"self . stdout . write ( "" STR_ "" % ( self . style . MIGRATE LABEL ( writer . filename ) , ) )","substitute ' % s ' in a string `` % s : \n '' with return value of the self.style.MIGRATE_LABEL method called with argument writer.filename ,"
if os . fork ( ) > NUM_ :,"fork a child process , if the result equals integer 0 ,"
"self . replace header ( STR_ , STR_ % ( subtype , charset ) )","call the method self.replace_header with argument string 'Content-Type ' , 'text/ % s ; charset= '' % s '' ' , where ' % s ' symbols are replaced by :"
d = d [ n ],substitute value under n key of dictionary d for d .
kwargs [ STR_ ] = safe,substitute safe for value under the 'safe ' key of kwargs dictionary .
"def save new ( self , form , commit = True ) :","call the method get_accessor_name on the result , substitute all occurrences of '+ ' in the result with an empty string , return it . define the method save_new with 3 arguments : self , form and commit set to boolean True ."
raise ImportError,raise an ImportError exception .
"with open ( new path , STR_ ) as new file :","open new_path file in 'wb ' mode , with file descriptor renamed to new_file ,"
FormSet . model = model,"can_order as can_order , can_delete as can_delete , validate_min as validate_min , validate_max as validate_max , substitute the result for form . substitute model for FormSet.model ."
if props :,"if props is true ,"
return new class,return new_class .
offset = date . tzinfo . utcoffset ( date ),"call the method date.tzinfo.utcoffset with an argument date , substitute the result for offset ."
lbp = NUM_,lbp is integer 0 .
try :,"try ,"
else :,"use the result as the argument for the call to the function hashlib.sha1 , call the hexdigest method on the result , join template_name and previous final result into a string , separated with '- ' , return it . if not ,"
pass,do nothing .
result += ugettext ( STR_ ) + avoid wrapping ( name2 % count2 ),"call avoid_wrapping function with name2 modulus count2 as argument , call the ugettext with ' , ' as argument , add previous 2 results , increment variable result by it ."
def next ( self ) :,define the method next with an argument self .
empty = object ( ),empty is an instance of object class .
"for replacement in set ( [ thousand sep , unicodedata . normalize ( STR_ , thousand sep ) ] ) :","call the function unicodedata.normalize with 2 arguments : string 'NFKD ' and thousand_sep , put the result and thousand_sep into a set ,"
else :,"if not ,"
 standard context processors = tuple ( processors ),"convert processors elements into a tuple , substitute it for _standard_context_processors ."
mod = import module ( mod name ),call the function import_module with an argument mod_name .
"elif is in stance ( value , datetime . date ) :","otherwise if value is an instance of datetime.date ,"
if self . paginator . count == NUM_ :,"if self.paginator.count equals a integer 0 ,"
"return os . path . samefile ( src , dst )","call the os.path.samefile with arguments src and dst , return the result ."
"name = "" STR_ "" . join ( [ package .   name   , module name ] )","join package.__name__ and module_name into a string separated with ' . ' , substitute it for name ."
try :,"try ,"
self . field name = field name,"size , charset , content_type_extra . substitute field_name for self.field_name ."
"self . year none value = ( NUM_ , empty label [ NUM_ ] )",self.year_none_value is a tuple containing 2 elements : integer 0 and first element of empty_label .
if node . getElementsByTagName ( None ) :,"call the method node.getElementsByTagName with an argument string 'None ' , if it evaluates to true ,"
mixed subtype = STR_,mixed_subtype is a string 'mixed ' .
except NotImplementedError :,"if NotImplementedError exception is caught ,"
except StandardError as e :,"if StandardError , renamed to e , exception is caught ,"
if pk is not editable ( pk ) or pk . name not in form . fields :,"and pk.rel.parent_link is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk evaluates to true , if function pk_is_not_editable called with an argument pk evaluates to true , or pk.name is not contained in form.fields ,"
from django . utils . six . moves import cPickle as pickle,from django.utils.six.moves import cPickle as pickle into default name space .
resolved path . append ( ns ),call the method resolved_path.append with an argument ns .
from django . core . mail . utils import DNS NAME,from django.core.mail.utils import DNS_NAME into default name space .
else :,"if not ,"
"from django . utils . timezone import get default timezone , is  aware , is  naive","from django.utils.timezone import get_default_timezone , is_aware and is_naive into default name space ."
"g = generator . BytesGenerator ( fp , mangle from  = False )",g is an instance of a class generator.BytesGenerator called with fp and mangle_from_ set to False .
netloc = netloc . encode ( STR_ ) . decode ( STR_ ),"call the method netloc.encode with an argument string 'idna ' , call the method decode on the result with an argument 'ascii ' ,"
cc = { },cc is an empty dictionary .
basedirs . extend ( settings . LOCALE PATHS ),extend basedirs list with settings.LOCALE_PATHS .
if self .  callback is not None :,"if self._callback is not None ,"
"return self . as widget ( TextInput ( ) , attrs , ** kwargs )","call the method self.as_widget with 3 arguments : instance of a class TextInput , attrs and unpacked dictionary kwargs , return the result ."
d = Decimal ( in put val ),d is an instance of Decimal class created with an argument input_val .
i = j + NUM_,"add j and integer 1 , substitute the result for i ."
"self .  css . setdefault ( medium , [ ] ) . append ( path )","or path is not contained in the value under the medium key of self._css dictionary . call the method self._css.setdefault with 2 arguments medium and an empty string , append path to the result ."
"return  generate cache key ( request , request . method , headerlist , key prefix )","call the function _generate_cache_key with request , request.method , headerlist , key_prefix as arguments , return the result ."
self . setlistdefault ( key ) . append ( value ),"call the method self.setlistdefault with an argument key , append value to the result ."
"choices = property (  get choices ,  set choices )",choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function .
def   iter   ( self ) :,define the method __iter__ with an argument self .
"def add arguments ( self , parser ) :",define the method add_arguments with 2 arguments self and parser .
"getattr ( self , STR_ )",get attribute 'error_dict ' from the self object .
from django . conf import settings,from django.conf import settings into default name space .
verbosity = options . get ( STR_ ),substitute value under the 'verbosity ' key of the options dictionary for verbosity .
logging .  acquireLock ( ),call the method logging._acquireLock .
self . html initial name = form . add initial prefix ( name ),"call the method form.add_initial_prefix with an argument name , substitute the result for self.html_initial_name ."
if self . data . hour > NUM_ :,"if self.data.hour is greater than inreger 12 ,"
self . buffer = self . buffer [ size : ],truncate first size number of elements of self.buffer .
if result is not None :,"if result is not None ,"
self . extra headers = headers or { },"if headers exists substitute it for self.extra_headers , if not extra_headers is an empty dictionary ."
if e . errno ! = errno . EEXIST :,"if e.errno is not equal to errno.EEXIST ,"
"return base , ext",return base and ext .
if root :,"if root is true ,"
raise,raise an exception .
try :,"try ,"
if f is None :,"if f is None ,"
must be first = False,must_be_first is boolean False .
terminal char = >,terminal_char is an string ' > ' .
return self .  urlconf module,return self._urlconf_module .
def exit command ( self ) :,define the method exit_command with an argument self .
"resolved args , resolved kwargs = self . get resolved arguments ( context )","call the method self.get_resolved_arguments with context as an argument , substitute the result for resolved_args and resolved_kwargs ."
"if ( is in stance ( message , ValidationError ) and message . code in error messages ) :","if message is an instance of ValidationError class and message.code is contained in error_messages ,"
return True,return boolean True .
self . validate key ( key ),call the method self.validate_key with argument key .
else :,"if not ,"
class LazyObject ( object ) :,derive the class LazyObject from the object base class .
"from django . forms . utils import flatatt , ErrorDict , ErrorList","from django.forms.utils import flatatt , ErrorDict and ErrorList into default name space ."
else :,"if not ,"
text type = str,substitute str for text_type .
if key in d :,"if key is contained in d ,"
return self .  regex dict [ language code ],return the value under the language_code of the self._regex_dict dictionary .
parser = parser class ( lexer . tokenize ( ) ),"call the method lexer.tokenize , use it as an argument for the call to the parser_class function , substitute the result for parser ."
raise,raise an exception .
return PALETTES [ DEFAULT PALETTE ],return value under the DEFAULT_PALETTE key of the PALETTES dictionary .
return ( or d ( byte ) for byte in buf ),"convert byte to its integer representation , return all of the results for every byte in buf ."
"def   init   ( self , config ) :",define the method __init__ with 2 arguments : self and config .
while ( i < num existing ) and ( existing [ i ] [ : pflen ] == prefixed ) :,"while i is lesser than num_existing and first pflen elements of i-th element of existing equals prefixed ,"
"check for migrations ( app config , connection )",call the function check_for_migrations with arguments app_config and connection .
bits = token . split contents ( ) [ NUM_ : ],"call the method token.split_contents , substitute the result without the first element for bits ."
return ( len ( self . queryset ) + ( NUM_  if self . field . empty label is not None else NUM_ ) ),"sum length of self.quertset and integer 1 if self.field.empty_label is not None , or integer 0 if not , return the result ."
buffer  = None,buffer_ is None .
fp . write ( data ),write data to fp .
child loggers . append ( existing [ i ] ),append i-th element of existing to child_loggers .
else :,"if not ,"
if opts . fields is None and opts . exclude is None :,"if opts.fields is None and opts.exclude is None ,"
context . render context [ self ] = itertools cycle ( self . cyclevars ),"call the function itertools_cycle with an argument self.cyclevars , substitute the result for value under the self dictionary context.render_context ."
ugettext = gettext,substitute gettext for ugettext .
"return force bytes ( value , self .  charset )","return the result . call the function force_bytes with arguments value and self._charset , return the result ."
utc = pytz . utc if pytz else UTC ( ),"if pytz is true , substitute pytz.utc for utc , otherwise substitute result of the function UTC for utc ."
"def   contains   ( self , key ) :",define the method __contains__ with 2 arguments : self and key .
"value = getattr ( obj , field . get attname ( ) )","get return value of the field.get_attname function attribute of the obj object , substitute it for value ."
self . message = message,substitute message for self.message .
op . id = key,substitute key for op.id .
"self .  cache . set ( key , value , self . get backend timeout ( timeout ) )","call the method self._cache.set with key , value , self.get_backend_timeout ( timeout ) as arguments ."
"self . stdout . write ( "" STR_ "" % ( self . loaded object count , self . fixture count ) )","call the method self.stdout.write with an argument string `` Installed % d object ( s ) from % d fixture ( s ) '' ,"
if settings . FILE UPLOAD TEMP DIR :,"if settings.FILE_UPLOAD_TEMP_DIR is true ,"
"raise ValidationError ( ungettext ( "" STR_ "" , "" STR_ "" , self . max num ) % self . max num , code = STR_ , )","is greater than self.max_num , or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary , is grater than self.absolute_max , raise an ValidationError with 2 arguments : return value of the function ungettext with 3 arguments :"
"return "" STR_ "" % force text ( e , errors = "" STR_ "" )","return an string `` Error in formatting : % s '' , replace ' % s ' with result of the function force_text ,"
"root , = nonlocal root",substitute nonlocal_root for a tuple with an element root .
s = m . group ( NUM_ ),"call the method m.group with an argument integer 0 , substitute the result for s ."
if f == STR_ :,"if f equals to string '__pycache__ ' ,"
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid ' key of the self.error_messages dictionary and code set to 'invalid ' .
"return dot re . sub ( char , src )","call the method dot_re.sub with 2 arguments : char and src , return the result ."
return self . dicts . pop ( ),"call the method self.dicts.pop , return the result ."
default validators = [ validators . validate slug ],default_validators is an list containing validators.validate_slug .
if attr in obj dict :,"if attr is contained in obj_dict ,"
def w ( self ) :,return result converted into an integer . define the method w with an argument self .
locales = locale or all locales,"take locale or all_locales , whichever is not empty , respectively , and substitute it for locales ."
"return "" STR_ """,return string `` [ Did n't have permission to include file ] '' .
def fastcgi help ( message = None ) :,define the method fastcgi_help with an argument message set to None .
if self . selected fields is None or field . attname in self . selected fields :,if self.selected_fields is None or field.attname is contained in self.selected_fields
in put format = get format ( STR_ ) [ NUM_ ],"call the function get_format with an argument string 'DATE_INPUT_FORMATS ' , substitute the first element of the result for input_format ."
table names = [ model .  meta . db table for model in self . models ],"for model in self.models append model._meta.db_table to a list , substitute the resulting list for table_names ."
if arg is None :,if arg is None
from django . utils import six,from django.utils import six into default name space .
from django . apps import apps,from django.apps import apps into default name space .
if not settings . ADMINS :,"if settings.ADMINS is false ,"
if not locale dir :,"if locale_dir is false ,"
return  cached filenames,return _cached_filenames .
return changeset,return changeset .
if os . path . sep in fixture name :,"if os.path.sep is contained in fixture_name ,"
not  found . append ( e . args [ NUM_ ] ),append first element of e.args to not_found list .
except ImportError :,"if ImportError exception is caught ,"
class SplitHiddenDateTimeWidget ( SplitDateTimeWidget ) :,derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class .
if self . match is not None :,"if self.match is not None ,"
"sys . stderr . write ( "" STR_ "" )","call the method sys.stderr.write with an argument string `` as a FastCGI application , you will need to get flup from\n '' ."
"url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )","call the function urlunsplit with an argument tuple with 4 elements : scheme , netloc , path , query and fragment , substitute the result for url ."
del attr,delete attr .
"value = dict .   getitem   ( self , key )","call the method dict.__getitem__ with 2 arguments self and key , substitute the result for value ."
self . chunk size = chunk size,substitute chunk_size for self.chunk_size .
def G ( self ) :,define the method G with an argument self .
return self . resolve ( value ),"call the method self.resolve with an argument value , return the result ."
if termios :,"if termios is true ,"
parser .   loaded blocks = [ block name ],substitute list with an element block_name for parser.__loaded_blocks .
"for code in ( lang code , generic lang code ) :","for every code in tuple with 2 elements : lang_code and generic_lang_code ,"
continue,skip this loop iteration .
return six . text type ( name ),"call the function six.text_type with an argument name , return the result ."
return self .  num pages,return self._num_pages .
"if hasattr ( error , STR_ ) :","if error has an attribute 'error_dict ' ,"
"help = "" STR_ ""","help is a string `` Prints the CREATE TABLE , custom SQL and CREATE INDEX SQL statements for the given model module name ( s ) . `` ."
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
"default error messages = { STR_ :   ( STR_ STR_ ) , }","default_error_messages is a dictionary with an entry , result of the call to the function _ with an argument ,"
if item [ STR_ ] is not None :,"if value under the 'description ' key of the item dictionary is not None ,"
"patterns = [ pattern for ( possibility , pattern , defaults ) in possibilities ]","append pattern into a list patterns , for every possibility , pattern and defaults in possibilities ."
sites . append ( j ),append j to sites .
return tuple ( bits ),"add bits to a tuple , return it ."
if not self . use ssl and self . use tls :,"and unpacked dictionary connection_params . if self.use_ssl and self.use_tls are false ,"
"from . registry import register , run checks , tag exists , Tags","from .registry import register , run_checks , tag_exists and Tags into default name space ."
try :,"try ,"
self . extra context = extra context or { },"if extra_context is true , substitute it for self.extra_context , if not self.extra_context is an empty dictionary ."
" func closure = "" STR_ """,_func_closure is a string `` func_closure '' .
self . bad cookies = set ( ),self.bad_cookies is an empty set .
if not old method and new method :,"if old_method is false and new_method is true ,"
updates . update ( processor ( request ) ),"call the function processor with an argument request , update updates dictionary with the result ."
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
"self . stream . write ( "" "" )",write a white space to the self.stream file stream .
bpython . embed ( ),call the method bpython.embed .
return ugettext ( message ),call the function ugettext with an argument message .
"e , tb = sys . exc info ( ) [ NUM_ : ]","call the method sys.exc_info , substitute the result without the first element for e and tb ."
for check in checks :,"for every check in checks ,"
"response = self . handle uncaught exception ( request , resolver , sys . exc info ( ) )","call to the self.handle_uncaught_exception method with request , resolver and value of the evaluated function sys.exec_info ,"
"mail = EmailMultiAlternatives ( STR_ % ( settings . EMAIL SUBJECT PREFIX , subject ) , message , settings . SERVER EMAIL , [ a [ NUM_ ] for a in settings . MANAGERS ] , connection = connection )","call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated ,"
def m2m convert ( n ) :,"define the function m2m_convert with an argument n ,"
"field desc += STR_ . join ( [ STR_ % ( k , strip prefix ( repr ( v ) ) ) for k , v in extra params . items ( ) ] )","in string ' % s= % s ' replace ' % s ' with k and return value of the function strip_prefix with an argument printable representation of v ,"
return STR_ % id ,"convert if into a string append to it a string '_month ' , return the result ."
language code = get language ( ),"call the function get_language , substitute the result for language_code ."
"compare = lambda self , a , b : a is not b","compare is a lambda function with arguments self , a and b , return value is boolean True if a is not b , otherwise it is False ."
"def compile func ( parser , token ) :","substitute __name__ field of the result for function_name , in not , substitute func.__name__ for function_name . define the function compile_func with 2 arguments : parser and token ."
"self .  base set ( STR_ , key , value , timeout )","call the method self._base_set with string 'set ' , key , value and timeout as arguments ."
return settings . LANGUAGE CODE,return settings.LANGUAGE_CODE .
class Command ( BaseCommand ) :,derive the class Command from the BaseCommand base class .
StringIO = io . StringIO,substitute io.StringIO for StringIO .
"dig1 , dig2 = in ner . copy ( ) , outer . copy ( )","call the function inner.copy , substitute the result for dig1 , call the function outer.copy , substitute the result for dig2 ."
result . fields = tuple ( [ x .   deepcopy   ( memo ) for x in self . fields ] ),"for every x in self.fields call the method x.__deepcopy__ with an argument memo , put the result into a tuple , substitute it for result.fields ."
else :,"if not ,"
"current fields . append ( ( key , value ) )",append a tuple with elements key and value to current_fields .
self . validators . append ( validators . MinLengthValidator ( in t ( min length ) ) ),"call the method validators.MinLengthValidator with min_length converted into an integer , append the result to list self.validators ."
"if not is in stance ( var , six . string types ) :","if var is not an instance of six.string_types ,"
class BaseMemcachedCacheMethods ( RenameMethodsBase ) :,derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class .
if self .  wrapped is empty :,"if self._wrapped is empty ,"
else :,"'determine whether string is singular or plural . ' , where ' % s ' is replaced with number . if not ,"
else :,"if not ,"
"def handle app config ( self , app config , ** options ) :","and help set to string 'Nominates a database to print the SQL for . Defaults to the `` default '' database. ' . define the handle_app_config with 3 arguments self , app_config and unpacked dictionary options ."
"six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args ,"
if m is None :,"if m is None ,"
"return URLNode ( viewname , args , kwargs , asvar )","return an instance of a URLNode class , created with 4 arguments viewname , args , kwargs and asvar ."
else :,"if not ,"
class NumberInput ( TextInput ) :,derive the class NumberInput from the TextInput base class .
"yield "" STR_ """,yield string `` # * Make sure each model has one field with primary_key=True '' as the result .
self . day none value = self . none value,substitute self.none_value for self.day_none_value .
from django . utils import six,from django.utils import six into default name space .
"def   init   ( self , cmd , ** kwargs ) :","define the method __init__ with arguments : self , cmd and unpacked dictionary kwargs ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"response = sys . modules [   name   + "" STR_ "" ]","append string `` .moves.urllib_response '' to __name__ , use it as an key to get the value from the sys.modules dictionary , substitute it for response ."
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` Invalid arguments provided to simple_tag '' .
"def check for migrations ( app config , connection ) :",define the function check_for_migrations with 2 arguments : app_config and connection .
try :,"try ,"
yield,yield and empty string as the result .
iterator = None,iterator is None .
elif self . name and os . path . exists ( self . name ) :,"otherwise if self.name exists and self.name file path exists ,"
"def send messages ( self , messages ) :",define the method send_messages with arguments self and messages .
self . stream . write ( STR_ % msg data ),"call the method self.stream.write with argument string ' % s\n ' , with ' % s ' replaced with msg_data ."
using sysrandom = True,using_sysrandom is boolean True .
return in t ( value ) + in t ( arg ),"convert value and arg into a integers , return their sum ."
"return debug . technical 500 response ( request , * sys . exc info ( ) , status code = NUM_ )","evaluate the function debug.technical_500_response with request , evaluated value of function sys.exc_info as a list ,"
"first , lang , priority = pieces [ i : i + NUM_ ]","substitute 3 successive elements starting from the i-th index of pieces for first , lang and priority , respectively ."
class SimpleTemplateResponse ( HttpResponse ) :,derive the class SimpleTemplateResponse from the HttpResponse base class .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ )","default set to DEFAULT_DB_ALIAS , help containing string 'Nominates a database to synchronize . Defaults to the `` default '' database . ' as arguments . call the method parser.add_argument with string ' -- fake ' , action containing string 'store_true ' , dest set to string 'fake ' ,"
"if kwargs . pop ( STR_ , False ) :","pop value under the 'ipv6 ' key of the kwargs dictionary , if it is true ,"
"self . stderr . write ( "" STR_ "" % app label )","write string `` App ' % s ' could not be found . Is it in INSTALLED_APPS ? '' with ' % s ' where ' % s ' is replaced with app_label ,"
"alter sql . extend ( [ STR_ + sql for sql in connection . creation . sql for pending references ( model , style , pending references ) ] )","for every sql in return value of the function connection.creation.sql_for_pending_references called with arguments : model , style ,"
if self . localize :,"if self.localize is true ,"
"def end object ( self , obj ) :",define the method end_object with argument self and obj .
BASE2 ALPHABET = STR_,BASE2_ALPHABET is a string '01 ' .
is  usable = True,is_usable is boolean True .
final attrs [ STR_ ] = force text ( self .  format value ( value ) ),"call the method self._format_value with an argument value , use the result as an argument for the call to the function force_text ,"
if not response . has header ( STR_ ) :,"if call to the function response.has_header with string 'Last-Modified ' as an argument returns boolean False ,"
def  strip once ( value ) :,define the function _strip_once with an argument value .
"def handle ( self , ** options ) :","dest set to string 'load_initial_data ' , default=True and help as a string 'Tells Django not to load any initial data after database synchronization. ' . define the method handle with arguments self and unpacked dictionary options ."
def  close files ( self ) :,"slice the filename from the previous result as start index to the end , strip it of white spaces from both ends , if the result is not an empty string and filename is not an empty string , return boolean True , otherwise return boolean False . define the method _close_files with an argument self ."
add to builtins ( STR_ ),call the function add_to_builtins with an argument string 'django.template.defaultfilters ' .
if field . rel . through .  meta . auto created :,"if field.rel.through._meta.auto_created is true ,"
"return format html ( STR_ , flatatt ( final attrs ) )","return the result of the function format_html called with 2 arguments : string ' < input { 0 } / > ' ,"
"def in cr ( self , key , delta = NUM_ , version = None ) :","define the method incr with self , key , delta defaulting to integer 1 and version defaulting to None as arguments ."
from django . utils import six,from django.utils import six into default name space .
"self . file = os . fdopen ( fd , mode , bufsize )","call the os.fdopen function with fd , mode and bufsize as the arguments , assign the file handle object to self.file ."
return item in self . dict,"if item is contained in self.dict , return boolean True , otherwise return boolean False ."
except IOError as e :,"if IOError , renamed to e , exception is caught ,"
filename = os . path . basename ( path ),"call the os.path.basename with path as argument , substitute the result for filename ."
if  supported is None :,"if _supported is None ,"
except socket . error as e :,"if socket.error , renamed to e , exception is caught ,"
"resolved args , resolved kwargs = self . get resolved arguments ( context )","call the method self.get_resolved_arguments with an argument context , substitute the result for resolved_args and resolved_kwargs ."
name = [ ],name is an empty list .
block context = context . render context . get ( BLOCK CONTEXT KEY ),"get value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary , substitute it for block_context ."
"self . connection . login ( self . username , self . password )",call the method self.connection.login with arguments self.username and self.password .
break,break from the loop execution .
raise,raise an exception .
in put type = STR_,input_type is a string 'checkbox ' .
alen = len ( args ),"calculate the length of args , substitute it for alen ."
class SplitDateTimeWidget ( MultiWidget ) :,derive the class SplitDateTimeWidget from the MultiWidget base class .
"if is in stance ( value , six . string types ) and value . lower ( ) in ( STR_ , STR_ ) :","if value is an instance of six.string_types and value converted to lowercase is not equal to strings 'false ' or ' 0 ' ,"
"super ( SplitDateTimeField , self ) .   init   ( fields , * args , ** kwargs )","error_messages as an dictionary with an entry : value under the 'invalid_date ' of errors dictionary for 'invalid ' , localize set to localize , and an instance of the class TimeField created with 3 arguments : input_formats set to input_time_formats , error_messages as an dictionary with an entry : value under the 'invalid_time ' of errors dictionary for 'invalid ' , localize set to localize call the __init__ method with fields , unpacked list args and unpacked dictionary kwargs from the base class of the SplitDateTimeField class ."
exc info = sys . exc info ( ),call the function sys.exc_info with an argument exc_info .
"def time format ( value , format string ) :",define the function time_format with 2 arguments : value and format_string .
return smart text ( self . name or ),"evaluate the function smart_text with argument self.name , if exists , or an empty string , if not , return the result ."
"parser . add argument ( STR_ , STR_ , dest = STR_ , action = STR_ , default = [ STR_ ] , help = STR_ STR_ STR_ )","call the method parser.add_argument with 6 arguments : string ' -- extension ' , string '-e ' , dest set to string 'extensions ' ,"
else :,"if not ,"
try :,"try ,"
try :,"try ,"
"if is in stance ( source , in st ) :","if source is an instance of inst class ,"
"self .  ordering . append ( ( i , form . cleaned data [ ORDERING FIELD NAME ] ) )",append tuple with 2 elements : i and value under the ORDERING_FIELD_NAME key of form.cleaned_data dictionary to self._ordering .
if self . active writers == NUM_  and self . waiting writers == NUM_ :,"if self.active_writers and self.waiting_writers both equal to integer 0 ,"
if len ( new operations ) == len ( operations ) :,"if lengths of new_operations and operations are the same ,"
"super ( ContentFile , self ) .   init   ( stream class ( content ) , name = name )","call the __init__ method with stream_class ( content ) and name set to name arguments , from the base class of the ContentFile class ."
in itial value = in itial value ( ),"call the function initial_value , substitute the result for initial_value ."
self . nodelist loop = nodelist loop,substitute nodelist_loop for self.nodelist_loop .
return VerbatimNode ( nodelist . render ( Context ( ) ) ),"call the method nodelist.render with an argument , an instance of Context class , use the result as an argument for the creation of ,"
"except ( ValueError , TypeError ) :","if exception ValueError or TypeError is caught ,"
pass,do nothing .
"nm , addr = addr",nm and addr are addr .
obj . pk = Model .  default manager . db manager ( db ) . get by natural key ( * natural key ) . pk,"call the method Model._default_manager.db_manager with an argument db , on the result call the get_by_natural_key with ,"
"return LazyStream ( BoundaryIter ( self .  stream , self .  boundary ) )","instantiate class BoundaryIter with 2 arguments : self._stream and self._boundary , use it to instantiate LazyStream class , return it ."
iter ( patterns ),call the function iter with an argument patterns .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ )","dest set to string 'interactive ' , default set to boolean True and help as 'Tells Django to NOT prompt the user for input of any kind . ' call the method parser.add_argument with 5 arguments : string ' -- no-initial-data ' , action set to string 'store_false ' ,"
upto = match . end ( ),"call the method match.end , substitute the result for upto ."
"walk to end ( ch , pattern iter )",call the function walk_to_end with 2 arguments : ch and pattern_iter .
" dict = func ( * resolved args , ** resolved kwargs )","call the function func with 2 arguments : unpacked list resolved_args and unpacked dictionary resolved_kwargs , substitute the result for _dict ."
"base64d = force bytes ( TimestampSigner ( key , salt = salt ) . unsign ( s , max age = max age ) )","instantiate TimestampSigner object with arguments key and salt set to salt , call its method unsign with arguments :"
self .  table = table,substitute table for self._table .
connection = connections [ options [ STR_ ] ],"get the value under the 'database ' key of options dictionary , use it as a index to get connections list element , store it in connection ."
weekday = self . data . weekday ( ) + NUM_,"weekday , increment the result by integer 1 and substitute it for jan1_weekday . call the method self.data.weekday , increment the result by integer 1 , substitute the result for weekday ."
else :,"if not ,"
if not parent :,"if parent is false ,"
return,return nothing .
if os . path . exists ( django po ) :,"if django_po file path exists ,"
STATUS OK = NUM_,"and result of the bitwise OR performed on the re.MULTILINE and re.DOTALL operands , substitute the result for plural_forms_re/ STATUS_OK is integer 0 ."
del obj dict [ attr ],delete entry under the attr key of obj_dict dictionary .
return result,return result .
return FASTCGI HELP,return FASTCGI_HELP .
self . models . add ( obj . object .   class   ),add obj.object.__class__ to self.models set .
from django . core . files . utils import FileProxyMixin,from django.core.files.utils import FileProxyMixin into default name space .
return STR_,return string 'th ' .
if app name not in loader . migrated apps :,"if app_name is not contained in loader.migrated_apps ,"
if self .  cull frequency == NUM_ :,if self._cull_frequency equals to integer 0 .
all files = [ ],"to the negative length of the dir_suffix as the end index and append it to a list , if p doesnt end with dir_suffix , append p to a list , substitute resulting list for norm_patterns . all_files is an empty list ."
value = self . to python ( value ) . strip ( ),"call the method self.to_python with an argument value , strip the whitespaces from the both ends of the result and substitute it for value ."
"found = getattr ( found , frag )","get frag attribute from found object , substitute it for found ."
content disposition = in fo . get ( STR_ ),"get the value under the 'content-disposition ' key of the info dictionary , substitute it for content_disposition ."
return self . render ( ),"call the method self.render , return the result ."
for name in formatters :,"for every name in formatters ,"
generic lang code = lang code . split ( - ) [ NUM_ ],"split lang_code by '- ' , substitute the first element of the result for generic_lang_code ."
while ch ! = terminal char :,"while ch is not equal to terminal_char ,"
def   repr   ( self ) :,"and placed into 2 character spaces , and ' % 02d ' is replaced with reminder of the division of absolute offset by integer 60 , and placed into 2 character spaces . define the method __repr__ with an argument self ."
"super ( CheckboxChoiceInput , self ) .   init   ( * args , ** kwargs )","call the method __init__ from the base class of the class CheckboxChoiceInput , with 2 arguments : unpacked list args ,"
"if hasattr ( self , STR_ ) :","if self has an attribute '_coerce ' ,"
class Module six moves urllib parse (  LazyModule ) :,and to value under the '.moves ' appended to __name__ key of the sys.modules dictionary . derive class Module_six_moves_urllib_parse from the _LazyModule base class .
trailing empty content re = re . compile ( r STR_ ),"formated with string created by joining elements of result of the function re.escape with an argument x , with separator '| ' , for every x in DOTS , and re.DOTALL , substitute the result for hard_coded_bullets_re . call the function re.compile with raw string ' ( ? : < p > ( ? : & nbsp ; |\s| < br \/ > ) * ? < /p > \s* ) +\Z ' , substitute the result for trailing_empty_content_re ."
"return val if is in stance ( val , bytes ) else val . encode ( encoding )","if val is an instance of bytes , return val , otherwise return result of the method val.encode called with an argument encoding ."
from django . utils . encoding import force unicode,from django.utils.encoding import force_unicode .
"Context .   init   ( self , dict  , current app = current app , use l10n = use l10n , use tz = use tz )","use_l10n set to None and use_tz set to None . call the method Context.__init__ with 5 arguments : self , dict_ , current_app as current_app , use_l10n as use_l10n , use_tz as use_tz ."
"error msg = "" STR_ "" % parent","error_msg is a string `` Invalid template name in 'extends ' tag : % r . `` , where ' % s ' is replaced with parent ."
"def do block ( parser , token ) :",define the function do_block with 2 arguments parser and token .
register = Library ( ),register is an instance of Library class .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )","raise an ValidationError exception with 2 arguments : value under the 'invalid_choice ' key of the self.error_messages dictionary ,"
if content length > settings . FILE UPLOAD MAX MEMORY SIZE :,"if content_length is greater than settings.FILE_UPLOAD_MAX_MEMORY_SIZE ,"
"return STR_ % ( bits . hostname , d , bits . path , bits . fragment )","string ' % Y- % m- % d ' , convert the result into a string and append it to ' , ' , substitute the result for d. format string 'tag : % s % s : % s/ % s ' with bits.hostname , d , bits.path and bits.fragment , return it ."
for filename in filelist :,"for every filename is filelist ,"
headerlist = [ ],headerlist is an empty list .
wsgi opts [ STR_ ] = None,set value under the 'bindAddress ' key of wsgi_opts to None .
"to unicode = lambda s : force text ( s , strings only = True )","to_unicode is an lambda function with an argument s , result is the result of the function force_text ,"
self .  namespace dict = { },self._namespace_dict is an empty dictionary .
from threading import local,from threading import local into default name space .
"def validate host ( host , allowed hosts ) :",define the method validate_host with 2 arguments : host and allowed_hosts .
new ip += hextet [ NUM_ ] . split ( STR_ ),"split second element of hextet into parts by ' : ' , append them to new_ip ."
"return super ( URLField , self ) . clean ( value )","call the method clean with an argument data from the base class of the class URLField , return the result ."
def  setup ( self ) :,define the _setup method with argument self .
use func = False,use_func is boolean False .
"states = { STR_ : both before + [ Tok ( "" STR_ "" , literals ( "" STR_ "" ) , next = STR_ ) , ] + both after , STR_ : both before + [ Tok ( "" STR_ "" , r "" "" "" STR_ "" "" "" , next = STR_ ) , ] + both after , }","states is a dictionary with 2 arguments : appended list with an element instance of a class Tok , created with 3 arguments : `` punct '' ,"
trans real .  translations = { },trans_real._translations is an empty dictionary .
"def set many ( self , data , timeout = DEFAULT TIMEOUT , version = None ) :","define the method set_many with arguments , self , data , timeout defaulting to DEFAULT_TIMEOUT and version set to None ."
"raise base . DeserializationError ( "" STR_ "" % ( node . nodeName , model identifier ) )","raise an base.DeserializationError exception with an argument string `` < % s > node has invalid model identifier : ' % s ' '' ,"
from django . forms . models import *,from django.forms.models import everything into default name space .
class BlockNode ( Node ) :,derive the class BlockNode from the Node base class .
"def validate ( self , value ) :",define the method validate with arguments self and value .
m2m data = { },m2m_data is an empty dictionary .
"data [ Model .  meta . pk . attname ] = Model .  meta . pk . to python ( d . get ( "" STR_ "" , None ) )","call the method Model._meta.pk.to_python with one argument : value under the 'pk ' key of dictionary d , or None if previous doesnt exists ,"
return node . render ( context ),"call the method node.render with an argument context , return the result ."
if len ( bits ) == NUM_ :,"if length of bits equals integer 2 ,"
break,break the loop execution .
"return lambda text : colorize ( text , opts , ** kwargs )","return lambda function with text as argument and return value being result of the function colorize , called with 3 arguments : text ,"
return in itial value ! = data value,"if initial_value is not equal to data_value , return boolean True , otherwise return boolean False ."
"fixture files in dir . append ( ( candidate , fixture dir , fixture name ) )","append tuple containing 3 elements : candidate , fixture_dir and fixture_name to list fixture_files_in_dir ."
return EscapeBytes ( bytes ( s ) ),"return an instance of EscapeBytes , created with an argument , reuslt of the call to the function bytes with an argument s ."
silent = True,silent is boolean True .
return,return an empty string .
else :,"if not ,"
if vary on is None :,"if vary_on is None ,"
block . context = context,substitute context for block.context .
"form . fields [ self .  pk field . name ] = ModelChoiceField ( qs , in itial = pk value , required = False , widget = widget )","value under the self._pk_field.name key of form.fields dictionary is an instance of ModelChoiceField class ,"
try :,"try ,"
else :,"if not ,"
"def send messages ( self , email messages ) :",define the method send_messages with arguments self and email_messages .
if not self . is  valid ( ) or not self . can order :,"if call to the self.is_valid method evaluates to false or self.can_order is false ,"
"msg = STR_ % ( error prefix , dotted path , e )","msg is a string ' % sError importing module % s : `` % s '' ' , where ' % s ' is replaced with error_prefix , dotted_path and e , respectively ."
"signals . got request exception . send ( sender = self .   class   , request = request )","call the method signals.got_request_exception.send with the sender set to the type of this class , and request set to request as the arguments ."
def flatten result ( source ) :,define the function flatten_result with an argument source .
if key not in self :,"if key is not contanied in self ,"
if meta is None :,"if meta is None ,"
out = StringIO ( ),"out is an instance of StringIO class , created with an empty string as an argument ."
if field == NON FIELD ERRORS :,"if field equals NON_FIELD_ERRORS ,"
self .  template response middleware = [ ],self._template_response_middleware is an empty list .
else :,"return result converted into an integer . if not ,"
"filter name = match . group ( "" STR_ "" )","call the methof match.group with an argument `` filter_name '' , substitute the result for filter_name ."
now = now . replace ( microsecond = NUM_ ),"call the method now.replace with the argument microsecond set to integer 0 , substitute the result for now ."
def   copy   ( self ) :,define the method __copy__ with an argument self .
BaseRunserverCommand = Command,write it to self.stdout . substitute Command for BaseRunserverCommand .
self .  request middleware = None,self._request_middleware is None .
format module path = settings . FORMAT MODULE PATH,substitute settings.FORMAT_MODULE_PATH for settings.FORMAT_MODULE_PATH .
"get text list = allow lazy ( get text list , six . text type )","separated by result of the function _ called with an argument string ' , ' , for every i in list_ without last element , result of the function force_text called with an argument last_word , result of the function force_text called with an argument : last element of list_ . call the function allow_lazy with 2 arguments : get_text_list and six.text_type , substitute the result for get_text_list ."
finally :,"finally perform ,"
raise CommandError ( STR_ % self . addr ),raise an CommandError exception with an argument string ' '' % s '' is not a valid IPv6 address . ' where ' % s ' is replaced with self.addr .
del self [ STR_ ],and unpacked dictionary kwargs . delete the value under the 'content-type ' key of the self dictionary .
import decimal,import module decimal .
"raise ValueError ( STR_ % ( f , e ) )",raise an ValueError exception with an argument string 'Unable to add filter % r : % s ' formated with f and e .
"raise CommandError ( "" STR_ "" % app label )","raise CommandError with an argument string 'Unknown app in excludes : % s ' , where ' % s ' is replaced with exclude ."
"current uri = STR_ . format ( scheme = self . scheme , host = self . get host ( ) , path = self . path )","format the string ' { scheme } : // { host } { path } ' by replacing scheme with self.scheme , host with return value of the self.get_host method ,"
"def   init   ( self , connection reset = False ) :",define the method __init__ with arguments self and connection_reset defaulting to boolean False .
try :,"try ,"
final attrs [ STR_ ] = force text ( value ),"call the function force_text with an argument value , substitute the result for value under the 'value ' key of the final_attrs ."
"def serialize ( format , queryset , ** options ) :","define the function serializer with 3 arguments : format , queryset and unpacked dictionary options ."
fp . write ( msgs ),"with the result renamed to fp , perform the following : call the method fp.write with an argument msgs ."
self . hint = hint,substitute hint for self.hint .
"def handle m2m field ( self , obj , field ) :","define the method handle_m2m_field with argument self , obj and field ."
"last row = ( normal row % { STR_ : , STR_ : , STR_ : , STR_ : , STR_ : html class attr } )","format string normal_row with an dictionary containing 5 entries : an empty string for 'errors ' , empty string for 'label ' ,"
link next [ PREV ] = link prev,substitute link_prev for value under the PREV key of the link_next dictionary .
"self .  post = QueryDict ( , mutable = True )","self._post is an instance of QueryDict class , created with an empty string and mutable set to boolean True ."
except Exception :,"if Exception exception is caught ,"
if line :,"if line is true ,"
content length = in t ( environ . get ( STR_ ) ),"convert value under the 'CONTENT_LENGTH ' key of the environ dictionary to an integer , substitute it for content_length ."
"form = self . form ( auto id = self . auto id , prefix = self . add prefix ( STR_ ) , empty permitted = True , )","call the function empty_form with 3 arguments : auto_id as self.auto_id , prefix set to the return value of the self.add_prefix method ,"
"parser . add argument ( STR_ , STR_ , default = [ ] , dest = STR_ , action = STR_ , help = STR_ STR_ )","call the method parser.add_argument with 6 arguments : string ' -- locale ' , string '-l ' , default as an empty list ,"
if not match or not match . group ( NUM_ ) :,"if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false ,"
"MIMEText .   setitem   ( self , name , val )","call the method MIMEText.__setitem__ with arguments self , name and val ."
"elif getattr ( current , STR_ , False ) :","otherwise , get the 'alters_data ' attribute of current object , if it exists and is true ,"
"self . locale paths = [ os . path . abspath ( os . path . join ( STR_ , STR_ ) ) ]","join 'conf ' and 'locale ' into a file path , use it as an argument for the call the method os.path.abspath ,"
"while end > NUM_  and s . count ( b STR_ , NUM_ , end ) % NUM_ :","while end is greater than integer 0 and return value of the s.count called with 3 arguments : an empty string , integer 0 and end ,"
if urlconf name :,"if urlconf_name is true ,"
objects = model .  default manager,substitute model._default_manager for objects .
def end index ( self ) :,define the method end_index with an argument self .
run syncdb = False,"with ' % s ' substituted for name_str , as argument . run_syncdb is boolean False ."
if t . token type ! = TOKEN COMMENT :,"if t.token_type is not equal to TOKEN_COMMENT ,"
return len ( list ( email messages ) ),"create list out of email_messages , return the length of the list ."
if STR_ in config :,"if string ' ( ) ' is contained in config ,"
self . exit command ( ),call the method self.exit_command .
"raise NoReverseMatch ( "" STR_ "" % ( key , STR_ . join ( resolved path ) ) )","raise an NoReverseMatch exception with an argument string `` % s is not a registered namespace inside ' % s ' '' ,"
"def utcoffset ( self , dt ) :",define the method utcoffset with 2 arguments : self and dt .
except Exception :,if Exception exception is caught .
exp = connections [ db ] . ops . value to db datetime ( exp ),"on the object under the db key of connections dictionary call the method ops.value_to_db_datetime with argument exp , substitute the result for the exp ."
mail . outbox . extend ( messages ),call the method mail.outbox.extend with messages .
getcallargs ( current ),"call the function getcallargs with an argument current ,"
"return "" STR_ "" % ( self .  func path , self . args , self . kwargs , self . url name , self . app name , self . namespaces )","in the string `` ResolverMatch ( func= % s , args= % s , kwargs= % s , url_name= % s , app_name= % s , namespaces= % s ) '' , replace all the occurrences of :"
"def log message ( self , format , * args ) :",define the function server_bind with an argument self .
"return hmac . new ( key , msg = force bytes ( value ) , digestmod = hashlib . sha1 )","call the method hmac.new with 3 arguments : key , msg set to result of the function force_bytes with an argument value ,"
else :,"if not ,"
"def same origin ( url1 , url2 ) :",is replaced with '\\ '' ' . define the function same_origin with 2 arguments url1 and url2 .
" moved attributes = [ MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" ,   name   + "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" ,   name   + "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" ,   name   + "" STR_ "" ,   name   + "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedModule ( "" STR_ "" , "" STR_ "" ) , ]","_moved_attributes is a list with 55 initial elements , 13 of them are the results of the call to the function MovedAttribute ,"
bits = token . contents . split ( ),"call the method token.contents.split , substitute the result for bits ."
if settings . is  overridden ( STR_ ) :,"call the function settings.is_overridden with argument string 'TEMPLATE_LOADERS ' , if it evaluates to boolean True ,"
from threading import RLock,from threading import RLock .
"elif self . META . get ( STR_ , ) . startswith ( STR_ ) :","otherwise if value under the 'CONTENT_TYPE ' key of hte self.META dictionary starts with 'application/x-www-form-urlencoded ' ,"
"lookup view s = "" STR_ "" % ( m , n )","join m and n into a string , separated by ' . ' , substitute the result for lookup_view_s ."
change = fn ( ),assign the return value of the function fn to change .
"def write pot file ( potfile , msgs ) :",define the function write_pot_file with 2 arguments potfile and msgs .
"if hasattr ( timezone , STR_ ) :","if timezone has an attribute 'localize ' ,"
def title ( value ) :,define the function title with an argument value .
etags = ETAG MATCH . findall ( etag str ),"call the method ETAG_MATCH.findall with an argument etag_str , substitute the result for etags ."
"return six . iteritems ( super ( MultiValueDict , self ) )","call the function six.iteritems with an argument : instance of base class of the MultiValueDict class , return the result ."
if STR_ not in attrs :,"if 'media ' is not contained in attrs ,"
"result = getattr ( t , translation function ) ( eol message )","get translation_function attribute of the object t , call the result with an argument eol_message , substitute the result for result ."
try :,"try ,"
"return  trans . ungettext ( singular , plural , number )","call the method _trans.ungettext with 3 arguments singular , plural and number ."
if self . verbosity > NUM_ :,"if self.verbosity is greater than integer 0 ,"
"handler . startElement ( STR_ , self . root attributes ( ) )",call the method handler.startElement with 2 arguments : string 'feed ' and result of the method self.root_attributes .
return,return an empty string .
def auto id ( self ) :,define the method auto_id with an argument self .
block context . add blocks ( self . blocks ),call the method block_context.add_blocks with an argument self.block .
try :,"try ,"
self .  validate unique = False,self._validate_unique is boolean False .
m2m convert = lambda n : field . rel . to .  meta . pk . to python ( n . getAttribute ( STR_ ) ),"m2m_convert is an lambda function with an argument n , return value is the return value of the method field.rel.to._meta.pk.to_python ,"
try :,"try ,"
nodes = [ ],modes is an empty list .
"new class = ( super ( MediaDefiningClass , mcs ) .   new   ( mcs , name , bases , attrs ) )","call the method __new__ from the base class of the class MediaDefiningClass , called with 4 arguments : mcs , name , bases and attrs ."
"Field .   init   ( self , required , widget , label , in itial , help text , * args , ** kwargs )","call the method Field.__init__ with 8 arguments : self , required , widget , label , initial , help_text , unpacked list args ,"
if simple url re . match ( middle ) :,"call the method simple_url_re.match with an argument middle , if it evaluates to true ,"
"in line re = re . compile ( r "" "" "" STR_ "" [ ^ "" STR_ "" ) | ( ? : STR_ ] * ? STR_ [ ^ STR_ ) ) ) ? \ s * "" "" ""  )
","call the function re.compile with an argument string `` ^\s*trans\s+ ( ( ? : '' [ ^ '' ] * ? '' ) | ( ? : ' [ ^ ' ] * ? ' ) ) ( \s+.*context\s+ ( ( ? : '' [ ^ '' ] * ? '' ) | ( ? : ' [ ^ ' ] * ? ' ) ) ) ? \s* '' , substitute the result for inline_re ."
flush = property ( lambda self : self . file . flush ),"define lambda function that returns self.file.flush field , use it as an argument for property function , put the result in flush ."
msgs = msgs . decode ( STR_ ),"call the method msgs.decode with an argument string 'utf-8 ' , substitute the result for msgs ."
from django . utils import six,from django.utils import six into default name space .
output . append ( STR_ ),append string ' < /optgroup > ' to output .
SINGLE BRACE START = STR_,SINGLE_BRACE_START is a string ' { ' .
"super ( EmailBackend , self ) .   init   ( fail silently = fail silently )","use_tls set to None , fail_silently set to False , use_ssl set to None , timeout set to None and unpacked dictionary kwargs . call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently ."
try :,"try ,"
"def add ( self , key , value , timeout = DEFAULT TIMEOUT , version = None ) :","define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None ."
"new context = context class (  dict , ** { STR_ : context . autoescape , STR_ : context . current app , STR_ : context . use l10n , STR_ : context . use tz , } )",call the function context_class with 2 arguments : _dict and unpacked dictionary containing 4 entries :
if endpos < NUM_ :,"if endpos is lesser than zero ,"
"def   init   ( self , language , deactivate = False ) :","define the method __init__ with 3 arguments : self , language and deactivate set to boolean False ."
elif auto id :,"otherwise if auto_id is true ,"
"return range ( NUM_ , self . num pages + NUM_ )",return all the integers from the integer 1 to the self.num_pages .
iter ( x ),create an iterator out of x .
"copystat ( old file name , new file name )",call the function copystat with old_file_name and new_file_name as arguments .
from django . template . loader import BaseLoader,from django.template.loader import BaseLoader into default name space .
else :,"if not ,"
"super ( BaseModelForm , self ) .   init   ( data , files , auto id , prefix , object data , error class , label suffix , empty permitted )","call the method __init__ from the base class of the class BaseModelForm , with 8 arguments : data , files , auto_id , prefix , object_data ,"
msg count += NUM_,increment msg_count by one .
"for namespace , ( prefix , sub pattern ) in pattern . namespace dict . items ( ) :","and dictionary created by applying defaults mapping on the pattern.default_kwargs dictionary . for every namespace and tuple containing : prefix and sub_pattern , in return value of the method pattern.namespace_dict.items ,"
class TextNode ( Node ) :,derive the class TextNode form the base class Node .
"from django . template . base import TemplateSyntaxError , Library , Node , TextNode , token kwargs , Variable","from django.template.base import TemplateSyntaxError , Library , Node , TextNode , token_kwargs and Variable into default namespace ."
return,return an empty string .
del self . cleaned data [ field ],delete the entry of self.cleaned_data dictionary under the key field .
from django . core . management . utils import handle extensions,from django.core.management.utils import handle_extensions into default name space .
split = [ ],split is an empty list .
"if self . has key ( key , version ) :","evaluate method self.has_key with key and version as arguments , if the result is true ,"
"nodelist = parser . parse ( ( STR_ , ) )","call the method parser.parse with an argument tuple with an element string 'endautoescape ' , substitute the result for nodelist ."
escaped = False,escaped is boolean False .
if self . base url is None :,"if self.base_url is None ,"
pass,do nothing .
from PIL import Image,from PIL import Image into default namespace .
"def handle app config ( self , app config , ** options ) :","and help set to string 'Nominates a database to print the SQL for . Defaults to the `` default '' database. ' . define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options ."
if i % NUM_ :,"re_formatchars.split , for every i and piece in enumerated result , if i is even number ,"
self . path =,self.path is an empty string .
"def new file ( self , field name , file name , content type , content length , charset = None , content type extra = None ) :","define the method new_file with arguments : self , field_name , file_name , content_type , content_length , charset set to None ,"
def  mark post parse error ( self ) :,define the method_mark_post_parse_error with an argument self .
ipv4 re = re . compile ( r STR_ ),"_ with an argument string `` Enter a valid 'slug ' consisting of letters , numbers , underscores or hyphens . `` , and string 'invalid ' . call the re.compile function with an argument raw string '^ ( 25 [ 0-5 ] |2 [ 0-4 ] \d| [ 0-1 ] ? \d ? \d ) ( \ . ( 25 [ 0-5 ] |2 [ 0-4 ] \d| [ 0-1 ] ? \d ? \d ) ) { 3 } $ ' ,"
self .  initialize handlers ( ),"call the method self._initialize_handlers ,"
return context extras,return context_extras .
except http cookies . CookieError :,"if http_cookies.CookieError exception is raised ,"
"def add root elements ( self , handler ) :",define the method add_root_elements with 2 arguments : self and handler .
query = query . items ( ),"call the method query.items , substitute the result for query ."
"def fetch command ( self , subcommand ) :","define the method fetch_command , with arguments self and subcommand ."
class DefaultCacheProxy ( object ) :,derive the class DefaultCacheProxy from the base class object .
import StringIO,import StringIO .
sign = - if seconds < NUM_  else +,"if seconds smaller than integer 0 , sign is '- ' , otherwise sign is '+ ' ,"
if p . image :,"if p.image is not empty ,"
@ property,"property decorator ,"
if not tag or current len >= truncate len :,"substitute the result for tag . if tag is false or current_len is greater or equal to truncate_len ,"
while len ( digits ) <= abs ( exponent ) :,"substitute the resulting list for digits . while length of digits is smaller than or equal to absolute value of exponent ,"
if self .  content length == NUM_ :,"if self._content_length equals integer 0 ,"
"renamed methods = ( ( STR_ , STR_ , RemovedInDjango19Warning ) , )","renamed methods is a tuple containing 3 elements : '_get_memcache_timeout ' , 'get_backend_timeout ' and RemovedInDjango19Warning ."
"super ( SortedDict , self ) .   setitem   ( key , value )","call the method __setitem__ from the base class of the class SortedDict , with 2 arguments key and value ."
return value,return value
"six . reraise ( ImportError , ImportError ( msg ) , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : ImportError , instance of ImportError class created with an argument msg ,"
if not commit :,"if commit is false ,"
if message context [ NUM_ ] == STR_ :,"if first element of message_context equals to character ' '' ' ,"
"return RequestContext ( self .  request , context , current app = self .  current app )","return an instance of RequestContext class , created with 3 arguments : self._request , context and current_app set to self._current_app ."
"return format html ( self . outer html , id attr = format html ( STR_ , id  ) if id  else , content = mark safe ( STR_ . join ( output ) ) )","called with an argument w , and sub_widgets as an empty string , append the result to output . call the function format_html with 3 arguments : self.outer_html ,"
"if json .   version   . split ( STR_ ) >= [ STR_ , STR_ , STR_ ] :","call the method json.__version__.split with an argument ' . ' , if the result is respectively greater than list containing strings ' 2 ' , ' 1 ' and ' 3 ' ,"
"return property ( fget , fset , fdel , doc )","return an property object with getter function fget , setter function fset , destructor fdel and documentation string doc ."
except StandardError as e :,"if StandardError , renamed to e , exception is caught ,"
"def pgettext ( context , message ) :",define the function pgettext with 2 arguments : context and message .
return new key,return new_key .
fields . update ( new class . declared fields ),update fields dictionary with new_class.declared_fields .
return value + arg,"sum value and arg , return the result ."
"for fixture file , fixture dir , fixture name in self . find fixtures ( fixture label ) :","for every fixture_file , fixture_dir and fixture_name in return value of the method self.find_fixtures called with an argument fixture_label ,"
"assert not is in stance ( cc , six . string types ) , STR_",if cc is not an six.string_types instance raise an error with message string ' '' cc '' argument must be a list or tuple ' .
 anonymous  = [ STR_ ],_anonymous_ is a list containing one string : '_offset ' .
if os . path . is file ( f ) :,"if f is a file ,"
"def   getitem   ( self , in dex ) :",substitute it for self.view_name . define the method __getitem__ with arguments self and index .
"parser . add argument ( STR_ , STR_ , dest = STR_ , action = STR_ , default = [ ] , help = STR_ STR_ )","add set to DEFAULT_DB_ALIAS and help is 'Nominates a specific database to dump fixtures from . Defaults to the `` default '' database. ' . call the method parser.add_argument with 6 arguments : string '-e ' , string ' -- exclude ' , dest set to 'exclude ' , action set to 'append ' ,"
if self . queryset is not None :,"if self.queryset is not None ,"
from django . conf import settings,from django.conf import settings into default name space .
app names = sorted ( loader . migrated apps ),"sort loader.migrated_apps , substitute it for app_names ."
"if cleaned line . endswith ( "" STR_ "" ) :","if cleaned_line ends with ' ; ' character ,"
"return iri to uri ( resolver .  reverse with prefix ( view , prefix , * args , ** kwargs ) )","call the method resolver._reverse_with_prefix with 4 arguments : view , prefix , unpacked list args , unpacked dictionary kwargs ,"
ipv4 unpacked =  unpack ipv4 ( ip str ),"call the function _unpack_ipv4 with an argument ip_str , substitute the result for ipv4_unpacked ."
date = form . cleaned data [ unique for ],substitute value under the unique_for key of form.cleaned_data dictionary for date .
if max num is None :,"if max_num is None ,"
"MONTHS = { NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) }","MONTHS is an dictionary with 12 entries : result of the call to the function _ with an argument string 'January ' for 1 ,"
self . locale paths . append ( os . path . abspath ( STR_ ) ),"call the function os.path.abspath with an argument 'locale ' , append the result to self.locale_paths ."
self . merge ( translation ),call the method self.merge with an argument translation .
message %= error . params,"divide message by error.params , substitute the residue of the division for message ."
for loader in self .  loaders :,"for every loader in self._loaders ,"
"work file = os . path . join ( self . dirpath , thefile )","join self.dirpath and thefile in a string , substitute the result for work_file ."
if not new method and old method :,"if new_method is false and old_method is true ,"
return str ( dict ( self . items ( ) ) ),"get dictionary self items , convert the result into a dictionary , convert the result into a string and return it ."
before import registry = copy . copy ( register to .  registry ),"call the method copy.copy with an argument register_to._registry , substitute the result for before_import_registry ."
elif pluralmatch :,"otherwise if pluralmatch is true ,"
"return STR_ % ( self . f ( ) , self . a ( ) )",return a string ' % 02d ' formated with self.data.month .
"missing args message = "" STR_ "" % label","substitute string `` Enter at least one % s . `` , with ' % s ' replaced by label , for missing_args_message ."
"def   init   ( self , META , in put data , upload handlers , encoding = None ) :","define the method __init__ wiht 5 arguments : self , META , input_data , upload_handlers and encoding set to None ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'empty ' key of the self.error_messages dictionary and code set to 'empty ' .
class MLStripper ( HTMLParser ) :,derive the class MLStripper from the HTMLParser base class .
def   iter   ( self ) :,define the method __iter__ with an argument self .
self .  servers = server . split ( STR_ ),"split server with ' ; ' as delimiter , substitute the result for self._servers ."
self . cookies [ key ] [ STR_ ] = path,"get the value under the key key of the self.cookies dictionary , substitute path for 'path ' key of the returned dictionary ."
finally :,"finally perform ,"
if not form . is  valid ( ) :,"call the form.is_valid method , if it evaluates to false ,"
klass . deconstruct = deconstruct,substitute deconstruct for klass.deconstruct .
"if hasattr ( self , STR_ ) :","if self has an 'error_dict ' attribute ,"
def   repr   ( self ) :,define the method __repr__ with an argument self .
return True,return boolean True .
else :,"if not ,"
EventHandler . modified code = FILE MODIFIED,EventHandler.modified_code is FILE_MODIFIED .
"parser . add argument ( STR_ , STR_ , dest = STR_ , action = STR_ , default = [ ] , help = STR_ STR_ STR_ )","action set to 'append ' , default is a list containing string 'py ' and help set to string : 'The file extension ( s ) to render ( default : `` py '' ) . Separate multiple extensions with commas , or use -e multiple times. ' . call the method parser.add_argument with 6 arguments : string ' -- name ' , string '-n ' , dest set to string 'files ' ,"
"tt = ( dt . year , dt . month , dt . day , dt . hour , dt . minute , dt . second , dt . weekday ( ) , NUM_ , NUM_ )","tt is an tuple with 9 elements : dt.year , dt.month , dt.day , dt.hour , dt.minute , dt.second , result of the function dt.weekday ,"
for db in connections . all ( ) :,"call the method connections.all ( ) , perform the following for every db in the result ,"
try :,"try ,"
self . charset = None,self.charset is None .
repo dir = os . path . dirname ( os . path . dirname ( os . path . abspath (   file   ) ) ),"get the absolute path of the __file__ , repo_dir is name of the directory two leveles above it ."
else :,"if not ,"
from django . core . exceptions import ValidationError,from django.core.exceptions import ValidationError into default name space .
declared fields . update ( base . declared fields ),update declared_fields dictionary with entry base.declared_fields .
"return format html ( "" STR_ "" , csrf token )","call the function format_html with 2 arguments : string `` < input type='hidden ' name='csrfmiddlewaretoken ' value= ' { 0 } ' / > '' ,"
attrs . pop ( key ),remove entry at the key key of the attrs dictionary .
try :,"try ,"
errors . extend ( m for m in e . error list if m not in errors ),"extend errors list with m for every m in e.error_list , only if m is not in errors ."
self . m2m data = m2m data,substitute m2m_data for self.m2m_data .
"if hasattr ( self , STR_ % name ) :","if self has an attribute 'clean_ % s ' , where ' % s ' is replaced with name ,"
else :,"if not ,"
extensions = options . get ( STR_ ),"get the value under the 'extensions ' key of the options dictionary , substitute it for extensions ."
"if is in stance ( offset , timedelta ) :","if offset is an instance of timedelta class ,"
"from django . template . base import ( compile string , resolve variable , unescape string literal , generic tag compiler )","Template , TextNode , Token , TokenParser , Variable , VariableNode , constant_string and filter_raw_string . from django.template.base import compile_string , resolve_variable , unescape_string_literal and generic_tag_compiler ."
except ImportError as e :,"if ImportError , renamed to e , exception is caught ,"
"for lineno , line in enumerate ( content . splitlines ( True ) ) :","for every lineno and line is enumerated result of the method content.splitlines , called with an argument boolean True ,"
"usage . append ( "" STR_ "" % name )","append string `` % s '' , where ' % s ' is replaced by name to the usage ."
"def   getattr   ( self , attr ) :",define the method __getattr__ with 2 arguments : self and attr set to None .
"models . signals . pre syncdb . send ( sender = app config . models module , app = app config . models module , create models = create models , verbosity = verbosity , in teractive = in teractive , db = db )","verbosity set to verbosity , interactive set to interactive and using set to db . call the method models.signals.pre_syncdb.send with 6 arguments : sender set to app_config.models_module ,"
reloader = jython reloader,substitute jython_reloader for reloader .
else :,"if not ,"
self . active writers += NUM_,increment self.active_writers by 1 .
class ManagementUtility ( object ) :,derive the class ManagementUtility from object base class .
def is  secure ( self ) :,define the method is_secure with an argument self .
from django . utils . encoding import force str,from django.utils.encoding import force_str into default name space .
"def  has changed ( self , in itial , data ) :","code set to an string 'invalid_choice ' and dictionary params with an entry : val for 'value ' . define the method _has_changed with arguments self , initial and data ."
def   repr   ( self ) :,define the method __repr__ with an argument self .
value = False,value is boolean False .
from django . utils import six,from django.utils import six into default name space .
options = FASTCGI OPTIONS . copy ( ),"call the method FASTCGI_OPTIONS.copy , substitute the result for options ."
else :,"if not ,"
self . parent widget = parent widget,substitute parent_widget for self.parent_widget .
signals . request finished . connect ( cache . close ),call the function signals.request_finished.connect with argument cache.close .
except TemplateDoesNotExist as e :,"if TemplateDoesNotExist , renamed to e , exception is caught ,"
hextets [ in dex ] = STR_,value under the index key of the hextets dictionary is a string ' 0 ' .
result = self . configurator . convert ( value ),"call the method self.configurator.convert with an argument value , substitute the result for result ."
locks . unlock ( fd ),call the function locks.unlock with fd as argument .
raise TypeError ( STR_ ),raise an TypeError exception with an argument string 'other_dict must be a mapping ( dictionary-like ) object . ' .
"new obj = func ( obj , * arg vals )","call the function func with 2 arguments : obj and unpacked list arg_vals , substitute the result for new_obj ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","dest set to string 'load_initial_data ' , default set to True , help containing string 'Tells Django not to load any initial data after database synchronization . ' as arguments . call the method parser.add_argument with string ' -- database ' , action containing string 'store ' , dest set to string 'database ' ,"
try :,"try ,"
from django . utils . six import StringIO,from django.utils.six import StringIO into default name space .
continue,skip this loop iteration .
"setattr ( self , real name , getattr ( trans , real name ) )",set real_name attribute of the self object to value of real_name attribute of trans object .
while self . tokens :,"while self.tokens is true ,"
except InvalidOperation :,"use the result as an argument for the call to the mark_safe function , return the result . if InvalidOperation exception is caught ,"
weight += NUM_,increment weight by integer 2 .
m2m data = { },substitute the result for the value under the Model._meta.pk.attname key of data dictionary . m2m_data is an empty dictionary .
"val = self . get ( k , version = version )","call the self.get method with k and version set to version as arguments , substitute the result for val ."
except AttributeError :,"substitute the result for data . if AttributeError exception is caught ,"
"result = user function ( * args , ** kwds )","call the function user_function with 2 arguments : unpacked list args and unpacked dictionary kwds , substitute the result for result ."
class LocaleRegexProvider ( object ) :,derive the class LocaleRegexProvider with object as base class .
"assert not is in stance ( bcc , six . string types ) , STR_",if bcc is not an six.string_types instance raise an error with message string ' '' bcc '' argument must be a list or tuple ' .
"filters = config . get ( STR_ , None )","get value under the 'filters ' key of the config dictioanry , if it exists substitute it for filters , if not filters is None ."
"@ register . filter ( "" STR_ "" , is  safe = False )",decorator function register.filter with 2 arguments string `` timesince '' and is_safe set to boolean False .
return mark safe ( six . text type ( value ) ),"call the function six.text_type with an argument value , use the result as an argument for the call to the function mark_safe ,"
if func is None :,"if func is None ,"
import flup,import flup
import os,import module os .
self .  cache [ key ] = value,substitute value for the value under the key key of self._cache dictionary .
context . pop ( ),remove the first element of context .
"if bases == ( BaseModelForm , ) :",substitute the result for new_class . if bases equals a tuple with an element : class BaseModelForm .
def   len   ( self ) :,define the method __len__ with an argument self .
raise StopIteration ( ),raise an StopIteration exception .
warning = STR_,warning is a string 'ImmutableList object is immutable . ' .
"def handle ( self , ** options ) :",define the method handle with 3 arguments : self and unpacked dictionary options .
class FilterExpression ( object ) :,substitute the result for filter_re . derive the class FilterExpression form the base class object .
res = to digits [ digit ] + res,increment res by element of to_digit at the digit index .
return True,return boolean True .
if six . PY3 :,"if six.PY3 is true ,"
if self . waiting writers ! = NUM_ :,"if self.waiting_writers is not equal to integer 0 ,"
return,return nothing .
"if is in stance ( form .  meta . fields , tuple ) :","if form._meta.fields is an instance of tuple type ,"
return False,return boolean False .
"if ( getattr ( Meta , STR_ , None ) is None and getattr ( Meta , STR_ , None ) is None ) :","if 'fields ' attribute of Meta object is None and 'exclude ' attribute of Meta object is None ,"
extend = complain,substitute complain for extend .
while True :,"endless loop ,"
def   str   ( self ) :,define the method __str__ with argument self .
try :,"try ,"
return property (  media ),return property object with _media as getter function .
return,"return an empty string ,"
m2m convert = lambda v : smart text ( field . rel . to .  meta . pk . to python ( v ) ),"m2m_convert is a lambda function with an argument v , return value is the result of the function smart_text called with an argument :"
def path ( self ) :,define the method path with an argument self .
fp . write ( src data ),"with the result renamed to fp , perform the following : call the method fp.write with an arguments src_data ."
args = hashlib . md5 ( force bytes ( key ) ),call the hashlib.md5 fuction with force_bytes ( key ) as argument .
args . append ( work file ),"string ' -- keyword=gettext_noop ' , string ' -- keyword=gettext_lazy ' , string ' -- keyword=ngettext_lazy:1,2 ' , string ' -- keyword=pgettext:1c,2 ' , string ' -- keyword=npgettext:1c,2,3 ' and string ' -- output=- ' , substitute it for args . append work_file to args ."
return template,return template .
from django . apps import apps,from django.apps import apps into default name space .
return current,return current .
"self . handle m2m field ( obj , field )",call the method self.handle_m2m_field with arguments obj and filed .
"if re . search ( STR_ % ( prefix norm , pattern ) , candidate pat % candidate subs , re . UNICODE ) :","call the function re.search with 3 arguments : string '^ % s % s ' , with ' % s ' replaced for prefix_norm and pattern , respectively ,"
return { },return an empty dictionary .
elif safe input :,"otherwise if safe_input is true ,"
pass,do nothing .
"if is in stance ( s , Promise ) :",if s is an instance of an object Promise .
if STR_ in args [ NUM_ ] :,"if ' , ' is contained in second element of args ,"
"def   promise   ( cls , klass , funcname , method ) :","define the method __promise__ with 4 arguments : cls , klass , funcname and method ."
else :,"if not ,"
"def   delitem   ( self , key ) :",define the method __delitem__ with 3 arguments : self and key .
elif cls .  delegate bytes :,"otherwise if cls._delegate_bytes is true ,"
exclude . append ( name ),append name to exclude .
"kwargs = dict ( ( k , config [ k ] ) for k in config if valid ident ( k ) )","kwargs is a dictionary created with tuples with 2 elements : k and value under k key of config dictionary ,"
return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone ),"call the function timedelta with an argument seconds as negative time.timezone , subtract the result from the result of the call ,"
from django . utils . xmlutils import SimplerXMLGenerator,from django.utils.xmlutils import SimplerXMLGenerator into default name space .
"data = method ( self , * args , ** kwargs )","call the function method with 3 arguments : self , unpacked list args and unpacked dictionary kwargs , substitute the result for data ."
"handler . addQuickElement ( "" STR_ "" , , { "" STR_ "" : item [ STR_ ] . url , "" STR_ "" : item [ STR_ ] . length , "" STR_ "" : item [ STR_ ] . mime type } )","call the method handler.addQuickElement with 3 arguments : string 'title ' , an empty string and a dictionary with 3 entries :"
else :,"if not ,"
response . content = b,response.content is bytes empty string .
"termios . tcsetattr ( fd , termios . TCSANOW , attr list )","call the method termios.tcsetattr with fd , termios.TCSANOW and attr_list , as arguments ."
for app label in app labels :,"for every app_label in app_labels ,"
if words and length <= NUM_ :,"if words is not empty and length is smaller than or equal to integer 0 ,"
try :,"try ,"
nodelist . append ( node . render ( context ) ),"call the method node.render with an argument context , append the result to the nodelist ."
class VerbatimNode ( Node ) :,derive the class VerbatimNode from Node base class .
raise CommandError ( STR_ ),raise an CommandError exception with an argument string 'Your Python does not support IPv6 . ' .
def  get regex ( self ) :,define the method _get_regex an argument self .
"def chunks ( self , chunk size = None ) :",define the method chunks with arguments self ad chunk_size set to None .
return output,return output .
"from django . utils import six , timezone",from django.utils import six and timezone into default name space .
"from django . utils . safestring import SafeData , mark safe",from django.utils.safestring import SafeData and mark_safe into default name space .
return,return an empty string .
continue,skip this loop iteration .
for statement in sql :,"for statements is sql ,"
in ternal use only = False,internal_use_only is a boolean False .
"self . alternatives . append ( ( content , mimetype ) )","append a tuple containing 2 elements : content and mimetype , to the self.alternatives list ."
"changes = autodetector . changes ( graph = loader . graph , trim to apps = app labels or None , convert apps = app labels or None , )","call the method autodetector.changes with 3 arguments : graph set to loader.graph , trim_to_apps set to app_labels ,"
self . addr = STR_ if self . use ipv6 else STR_,"if self.use_ipv6 substitute string ' : :1 ' for self.addr , if not substitute '127.0.0.1 ' for self.addr ."
self . label = pretty name ( name ),"call the method pretty_name with an argument name , substitute the result for self.label ."
self . close ( ),call the method close on self .
if not in clude is allowed ( filepath ) :,"call the function include_is_allowed with an argument filepath , if it evaluates to false ,"
message = email message . message ( ),"call the function email_message.message , substitute the result for message ."
if len ( compressed ) < ( len ( data ) - NUM_ ) :,"if length of compressed is lesser than length of data decremented by 1 ,"
"output . extend ( f . post create sql ( style , model .  meta . db table ) )","call the method f.post_create_sql with arguments : style and model._meta.db_table , extend the output with the result ."
"yes , no , maybe = bits","assign bits elements to yes , no and maybe , respectively ."
break,break from this loop execution .
"parser . add argument ( STR_ , help = STR_ )",call the method parser.add_argument with 2 arguments : string 'name ' and help set to string 'Name of the application or project . ' .
language code = get language ( ),"call the function get_language , substitute the result for language_code ."
"return timezone . make aware ( value , current timezone )","call the function timezone.make_aware with arguments value and current_timezone , return the result ."
"return force text ( widget . render ( name , self . value ( ) , attrs = attrs ) )","call the method widget.render with 3 arguments : name , return value of the method self.value , attrs set to attrs ,"
import pickle,import pickle .
TOKEN COMMENT = NUM_,TOKEN_COMMENT is integer 3 .
"warnings . warn ( "" STR_ "" , RemovedInDjango19Warning , stacklevel = NUM_ )","call the function warnings.warn with string `` 'get_cache ' is deprecated in favor of 'caches ' . `` , RemovedInDjango19Warning ,"
@ cached property,"decorator cached_property ,"
def as ul ( self ) :,"with an argument escape_html for f , for every f and e in list of tuples of self dictionary key , pair entries , return the result . define the method as_ul with an argument self ."
if sublist item :,"if sublist_item is true ,"
elif bytes < TB :,"filesize_number_format with result of division of bytes by MB as an argument , substitute the result for value . otherwise if bytes is smaller than TB ,"
"return NUM_ , ch2",return integer 0 and ch2 .
return version,return version
"executor = MigrationExecutor ( connection , self . migration progress callback )","if exists , if not use None as the second argument , return the result . call the function MigrationExecutor with connection and self.migration_progress_callback as arguments , substitute the result fro executor ."
from django . core . management . base import CommandError,from django.core.management.base import CommandError into default name space .
break,break from the smallest enclosing loop execution .
"parser . add argument ( STR_ , metavar = STR_ , nargs = * )","call the method parser.add_argument with 3 arguments : string 'args ' , metavar set to string 'app_label ' and nargs set to '* ' ."
"raise ValueError ( "" STR_ "" % ( model .  meta . app label , model .  meta . object name , parent model .  meta . app label , parent model .  meta . object name ) )","raise an ValueError with an argument string `` ' % s. % s ' has more than one ForeignKey to ' % s. % s ' . `` , where ' % s ' is replaced with ,"
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid ' key of the self.error_messages dictionary and code set to 'invalid ' .
self .  name = name,"append ext to the end of it , substitute the resulting list for name . substitute name for self._name ."
except ValueError :,"if ValueError exception is caught ,"
self .  cache . clear ( ),call the method self._cache.clear .
return value,return value .
from collections import UserList,from collections import UserList into default namespace .
if resolver . urlconf module is None :,if resolver.urlconf_module is None :
value = self . coerce ( value ),"call the function self.coerce with an argument value , substitute it for value ."
else :,"if not ,"
class ModelChoiceField ( ChoiceField ) :,"and result of the method self.field.label_from_instance , called with an argument obj . derive the class ModelChoiceField from the ChoiceField base class ."
self . filter expression = filter expression,substitute filter_expression for self.filter_expression .
def writer leaves ( self ) :,define the method writer_leaves with an argument self .
tagname = tagname . lower ( ),"convert tagname to lowercase , substitute it for tagname ."
if not self .  populated :,"if self._populated is false ,"
widget . is  localized = self . is  localized,substitute self.is_localized for widget.is_localized .
def tz ( request ) :,define the function tz with an argument request .
try :,"try ,"
"return [ k for k , v in six . iteritems (  serializers ) if not v . Serializer . in ternal use only ]","append k into a list for every k and v in return value of the six.iteritems function with an argument _serializers ,"
@ stringfilter,"decorator stringfilter ,"
words = self .  wrapped . split ( ),"split self._wrapped into words , substitute the result for words ."
except ImportError :,except ImportError .
def   iter   ( self ) :,define the method __iter__ with an argument self .
class CacheClass ( DummyCache ) :,derive the class CacheClass from the DummyCache base class .
"for app name , model list in manifest . items ( ) :","for every app_name and model_list in return value of manifest.items function ,"
return func,return func .
if settings . TEMPLATE DEBUG :,"if settings.TEMPLATE_DEBUG is true ,"
"comment re = re . compile ( r "" STR_ "" )","call the function re.compile with an argument raw string `` ^ ( ( ? : ' [ ^ ' ] *'| [ ^ ' ] ) * ? ) -- . * $ '' , substitute the result for comment_re ."
cc = dict ( dictitem ( el ) for el in cc ),"assign the result to cc . cc is a dictionary populated with items by calling function dictitem with el as argument , for every el in cc ."
self . cookies = SimpleCookie ( self . cookies ),self.cookies is an instance of SimpleCookie class created with self.cookies as an argument .
return value,return value .
class LazyStream ( six . Iterator ) :,derive the class LazyStream from the six.Iterator base class .
code = STR_,code is a string 'invalid ' .
"return self . strptime ( value , format )","call the method self.strptime with arguments value and format , return the result ."
"def   eq   ( self , other ) :",define the method __eq__ with arguments self and other .
return STR_ . join ( output ),"join all the results into a string separated by newlines , append the result to output . join elements of output into a string , separated by newline characters , return the result ."
return None,return None .
"def wrapper ( * args , ** kwds ) :",define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
"digits . in sert ( - exponent , STR_ )",insert ' . ' to digits at negative exponent index .
except IndexError :,"if IndexError exception is caught ,"
"table output . append ( "" "" . join ( field output ) )","a string ' % s_ % s ' , where ' % s ' is replaced with tablename and f.name , respectively , return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name . join field_output elements into a string , separated by whitespaces , append it to table_output ."
self .   dict   . update ( obj dict ),update self.__dict__ dictionary with obj_dict .
from django . utils import six,from django.utils import six into default name space .
else :,"if not ,"
if name is None :,"if name is None ,"
continue,skip this loop iteration .
fp . write ( content ),"and encoding set to string 'utf-8 ' as arguments , with the result renamed to fp , perform the following : call the method fp.write with an argument content ."
"if sys . version info [ : NUM_ ] >= ( NUM_ , NUM_ ) :","if first and second element of sys.version_info are both equal to integer 3 ,"
if o in opt dict :,"if o is contained in opt_dict ,"
i = i + NUM_,"increment i by integer 1 , substitute the result for i ."
def add never cache headers ( response ) :,"define function add_never_cache_headers , with response as an argument ."
if STR_ in d :,"if 'pk ' is contained in d ,"
"LocaleRegexProvider .   init   ( self , regex )",call the method LocaleRegexProvider.__init__ with arguments self and regex .
return mark safe ( STR_ . join ( lines ) ),"and result of the function escape called with an argument line , substitute the result for i-th element of lines . call the method mark_safe with lines joined into a string , separated by newlines as argument , return the result ."
def writer ( self ) :,define the method writer with an argument self .
"def   init   ( self , queryset , empty label = "" STR_ "" , cache choices = None , required = True , widget = None , label = None , in itial = None , help text = , to field name = None , limit choices to = None , * args , ** kwargs ) :","string 'Select a valid choice . That choice is not one of the available choices . ' for 'invalid_choice ' . define the method __init__ with 13 arguments : self , queryset , empty_label set to a string `` -- -- -- -- - '' , cache_choices set to None ,"
"self . widgets = [ w ( ) if is in stance ( w , type ) else w for w in widgets ]","for every w in widgets , call the function w and append the result to a list , if w is an instance of type class ,"
m = Media ( ),m is an instance of Media class .
if date is not None :,"if date is not None ,"
raise TypeError ( msg ),"with new_class.__name__ , ' % ( opt ) s ' is replaced with opt and ' % ( value ) s ' is replaced with value . raise an TypeError exception with an argument msg ."
elif type ( s ) ! = six . text type :,"otherwise if , type of s doesnt equal to six.text_type ,"
default storage = DefaultStorage ( ),"call the DefaultStorage method , substitute the result for default_storage ."
return self . as ul ( ),"call the method self.as_ul , return the result ."
if not os . path . exists ( self .  dir ) :,"if self._dir path doesnt exists ,"
raise TemplateSyntaxError ( STR_ STR_ % bits [ NUM_ ] ),"raise an TemplateSyntaxError exception with an argument string ' '' with '' in % r tag needs at least one keyword argument . ' ,"
if new value == value :,"if new_value equals value ,"
"strip entities = allow lazy ( strip entities , six . text type )","called with an argument value , return the result . call the function allow_lazy with 2 arguments : strip_entities , six.text_type , substitute the result for strip_entities ."
self . current token = self . next token ( ),"call the method self.next_token , substitute the result for self.current_token ."
"def get ( self , key , default = None , version = None ) :","define the method get with 4 arguments , self , key , default set to None and version set to None ."
finally :,"finally perform ,"
sublist item = next item,substitute next_item for sublist_item .
"warnings . warn ( "" STR_ "" "" STR_ "" , RemovedInDjango19Warning , stacklevel = NUM_ )","call the function warnings.warn with 3 argument : string `` AppCommand.handle_app ( ) is superseded by AppCommand.handle_app_config ( ) . `` ,"
except KeyError :,"where ' % s ' is replaced with migration_name and app_label . if KeyError exception is caught ,"
return text,return text .
return all ( w . is  hidden for w in self . widgets ),"for every w in self.widgets , if all elements w.is_hidden are true , return boolean True , otherwise return boolean False ."
if new attr is None :,"if new_attr is None ,"
from django . apps import apps,from django.apps import apps into default name space .
"return urlquote ( value , ** kwargs )","call the function urlquote with 2 arguments value and unpacked dictionary kwargs , return the result ."
expression = parser . compile filter ( var name + VARIABLE ATTRIBUTE SEPARATOR + bits [ NUM_ ] ),"concatenate var_name , VARIABLE_ATTRIBUTE_SEPARATOR and fourth element of bits , use the result as an argument for the call the method ,"
"super ( EmailBackend , self ) .   init   ( * args , ** kwargs )",call the __init__ method of the base class of the EmailBackend class with arguments : unpacked list args and unpacked dictionary kwargs .
items =  iteritems,substitute _iteritems for items .
from django . utils . functional import Promise,from django.utils.functional import Promise into default name space .
BLOCK TAG START = STR_,BLOCK_TAG_START is a string ' { % ' .
"def get ( self , key , default = None ) :","define the method get with 3 arguments : self , key and default set to None ."
raise,raise an exception .
raise ValueError ( STR_ % s ),raise an ValueError exception with an argument string 'Not a valid Python identifier : % r ' formated with s .
self .  app dict = { },self._app_dict is an empty dictionary .
msg [ name ] = value,substitute value for value under name key of msg dictionary .
else :,"if not ,"
self . fixture object count += objects in fixture,increment self.fixture_object_count by objects_in_fixture .
value = None,value is None .
raise ValidationError ( errors ),"raise an ValidationError exception with an argument errors ,"
"def patch vary headers ( response , newheaders ) :","define function patch_vary_headers , with response and newheaders as arguments ."
except KeyError :,"with ' % s ' substituted for migration_name and app_label , respectively , as arguments . if KeyError exception is caught ,"
"def   new   ( cls , name , bases , attrs ) :","define the method __new__ with 4 arguments : cls , name , bases and attrs ."
"local , domain = middle . rsplit ( STR_ , NUM_ )","evaluates to true , split middle into two parts from the right by ' @ ' character , assign the resulting parts to local and domain ."
with connections [ db ] . cursor ( ) as cursor :,"call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,"
return data,return data .
self . settings exception = exc,"substitute exc for self.settings_exception ,"
class Command ( BaseCommand ) :,derive the class Command from the BaseCommand class .
yield self,yield self .
self . locale paths = [ ],self.locale_paths is an empty list .
"def in dent ( self , level ) :",define the method indent with argument self and level .
"def handle ( self , * args , ** options ) :","define the method handle with 3 arguments : self , unpacked args and unpacked dictionary options ."
if not self . is  required :,"called with an argument value , substitute the result for value under the 'initial ' key of the substitutions dictionary . if self.is_required is false ,"
return msg count,return msg_count .
return len ( value ),"return length of value ,"
"parser = OptionParser ( prog = prog name , usage = self . usage ( subcommand ) , version = self . get version ( ) )","`` is deprecated , use ArgumentParser instead '' and RemovedInDjango20Warning . parser is an instance of the object OptionParser , created with arguments : prog set to prog_name ,"
@ wraps ( func ),decorator function wraps with an argument func .
sites = [ ],sites is an empty list .
if trim :,"if trim is true ,"
pass,do nothing .
"raise ValueError ( "" STR_ "" )",raise an ValueError with an string `` Zip-compressed fixtures must contain one file . `` .
def tag ( self ) :,define the method tag with an argument self .
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
x = x * len ( from digits ) + from digits . in dex ( digit ),"multiply x by length of from_digits add the return value of method from_digits.index with digit argument , substitute the result for x ."
day of year = self . z ( ),"call the method self.z , substitute the result for day_of_year ."
"def render ( self , name , value , attrs = None ) :","define the method render with 4 arguments : self , name , value and attrs set to None ."
return self . get fqdn ( ),"evaluate the self.get_fqdn method , return the result ."
else :,"if not ,"
class MultiPartParser ( object ) :,derive the class MultiPartParser from the object base class .
self . name = name or func .   name  ,"if name is true , substitute it for self.name , otherwise substitute func.__name__ for self.name ."
random = random . SystemRandom ( ),random is an instance of random.SystemRandom class .
def back ( self ) :,define the method back with an argument self .
"if os . environ . get ( "" STR_ "" ) == "" STR_ "" :","if value under the `` RUN_MAIN '' key of the os.environ dictionary equals to string `` true '' ,"
if in stance is None :,"if instance is None ,"
"def   init   ( self , filter expr , nodelist ) :","define the method __init__ with 3 arguments : self , filter_expr and nodelist ) ."
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a listdir ( ) method ' .
use func = True,use_func is boolean True .
else :,"for every app_config in return value of the method apps.get_app_configs , only if app_config.models_module is not None , and app_config is not contained in excluded_apps . if not ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
def method decorator ( decorator ) :,define the function method_decorator with an argument decorator .
self .   offset = offset,substitute offset for self.__offset .
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
current len = NUM_,current_len is equal to integer 0 .
def num items ( self ) :,define the method num_items with an argument self .
"if not autoescape or is in stance ( value , SafeData ) :","use length of result as an argument for the call to the function six.text_type , substitute the result for width . if autoescape is false , if value is an instance of SafeData ,"
"def   init   ( self , data = None , files = None , auto id = STR_ , prefix = None , in itial = None , error class = ErrorList , label suffix = None , empty permitted = False , in stance = None ) :","define the method __init__ with 10 arguments : self , data set to None , files set to None , auto_id set to string 'id_ % s ' ,"
try :,"substitute self.urlconf_module for self.urlconf_module . try ,"
result = force text ( message ),"call the function force_text with an argument message , return the result ."
INFO = NUM_,INFO is integer 20 .
except ImportError :,"if ImportError exception occurred ,"
"validate slug = RegexValidator ( slug re ,   ( "" STR_ "" ) , STR_ )","validate_slug is a instance of a RegexValidator class , created with 3 arguments : slug_re , return value of the call to the function ,"
DEFAULT ATTACHMENT MIME TYPE = STR_,DEFAULT_ATTACHMENT_MIME_TYPE is a string 'application/octet-stream ' .
escaped = True,escaped is boolean True .
return localtime ( value ) if should convert else value,"with an argument value evaluates to false , and if 'convert_to_local_time ' attribute of value object doesnt exists , or is it does is boolean True , should_convert is boolean True , otherwise is boolean False . if should_convert is true , call the function localtime with an argument value and return the result , otherwise return value ."
if not in hibit post migrate :,"and third element of the return value of the function sys.exc_info . if inhibit_post_migrate is false ,"
"self . set ( key , value , timeout , version )","call the method self.set with key , value , timeout and version as arguments ."
return retval,return retval .
from django . conf import settings,from django.conf import settings .
if sys . platform . startswith ( STR_ ) :,"if sys.platform starts with string 'java ' ,"
"raise ValueError ( "" STR_ "" % ch )",raise an ValueError with an argument string `` Non-reversible reg-exp portion : ' ( ? % s ' '' formated with ch .
"super ( Command , self ) . add arguments ( parser )","call the method add_arguments from the base class of the class Command , with an argument parser ."
self . help text = field . help text or,"if field.help_text is true , substitute field.help_text for self.help_text , if not self.help_text is an empty string ."
self . merge ( translation ),call the method self.merge with an argument translation .
self . format = format if format else None,"substitute format for self.format if format is true , if not self.format is None ."
except TypeError as te :,"if TypeError , renamed to te , exception is caught ,"
else :,"if not ,"
raise ValueError ( STR_ STR_ % name ),raise an ValueError exception with an argument string 'No handler found with name % r ' formated with name .
return None,return None .
self . config = ConvertingDict ( config ),"self.config is an instance of ConvertingDict , called with an argument config ."
if attrvalue :,"if attrvalue is not an empty string ,"
except LookupError :,"if LookupError exception is caught ,"
"in itial = [ for x in range ( NUM_ , len ( data ) ) ]","for every x in sequence of integer from integer 0 to length of data , append an empty string to a list , substitute the resulting list for initial ."
"args = [ self . program ] + self . program options + [ STR_ , npath ( base path + STR_ ) , npath ( base path + STR_ ) ]","extend self.program list with self.program_options , string '-o ' ,"
try :,"try ,"
def remove potfiles ( self ) :,define the method remove_potfiles with an argument self .
if objects in fixture == NUM_ :,"if objects_in_fixture equals integer 0 ,"
"return mark safe ( value . replace ( STR_ , STR_ ) )","replace every occurrence of newline character in value with string ' < br / > ' , use it as an argument for the call to the mark_safe ,"
"if getattr ( self , STR_ , None ) is None :","if self object has an attribute '_client ' ,"
from django . utils import six,from django.utils import six into default name space .
"status = STR_ % ( response . status code , response . reason phrase )","replace ' % s ' in the string ' % s % s ' with response.status_code and response.reason_phrase , respectively , substitute it for status ."
"from django . utils . deprecation import RemovedInDjango19Warning , RemovedInDjango20Warning",from django.utils.deprecation import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space .
self . save as new = save as new,substitute save_as_new for self.save_as_new .
self . fields = copy . deepcopy ( self . base fields ),"call the function copy.deepcopy with an argument self.base_fields , substitute the result for self.fields ."
if not content type :,"if content_type is false ,"
return self . object list [ in dex ],return self.object_list element at index .
"for key , value in data . items ( ) :","for every key and value in data.items function return value ,"
else :,"if not ,"
return False,return boolean False .
raise,"raise an exception ,"
yield bit . group ( NUM_ ),"call the method bit.group with an argument integer 0 , yield the result ."
"dirs = [ os . path . join ( basedir , l , STR_ ) for l in locales ]","join basedir , l and string 'LC_MESSAGES ' into a path separated by '/ ' for every l in locales , assign the list to dirs ."
raise ValueError ( STR_ ),raise ValueError exception with string 'Sign character found in converter base digits . ' as an argument .
for supported code in  supported :,"for every supported_code in _supported ,"
for f in fields :,"for every f in fields ,"
" win = ( sys . platform == "" STR_ "" )","_win is a tuple containing 1 initial boolean : True is sys.platform equals to string `` win32 '' , False otherwise ."
from django . template . defaultfilters import date,from django.template.defaultfilters import date into default name space .
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
return mark safe ( STR_ . join ( in puts ) ),"input_attrs , append the result to inputs list . join inputs elements into a string , separated with newline character , use it as an argument for the call to the function mark_safe ,"
"if is in stance ( attachment , MIMEBase ) :","if attachment is an instance of MIMEBase ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
if BLOCK CONTEXT KEY not in context . render context :,"if BLOCK_CONTEXT_KEY is not contained in context.render_context ,"
from django . utils . six . moves import socketserver,from django.utils.six.moves import socketserver into default name space .
if value :,"if value is true ,"
from django . utils import six,from django.utils import six into default name space .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = "" STR_ "" )","dest as a string 'no_obsolete ' , default as boolean False and help as a string `` Remove obsolete message strings. '' . call the method parser.add_argument with 5 arguments : string ' -- keep-pot ' , action as a string 'store_true ' ,"
with context . push ( var = output ) :,"call the method context.push with an argument var set to output , with the result perform ,"
if six . PY2 :,"if six.PY2 is true ,"
return value . pk,return value.pk .
 format cache = { },_format_cache is an empty dictionary .
"result = middleware . process exception ( request , e )","call the method middleware.process_exception with 2 arguments : request and e , substitute the result for result ."
this year = datetime . date . today ( ) . year,"call the function datetime.date.today , substitute the year field of the result for this_year ."
return self . has key ( key ),"call the method self.has_key with an argument key , return the result ."
"days = ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ )","days is a tuple with 7 elements : strings 'Mon ' , 'Tue ' , 'Wed ' , 'Thu ' , 'Fri ' , 'Sat ' and 'Sun ' ."
else :,"if not ,"
return self . copy ( ),"call the method self.copy , return the result ."
dot = len ( package ),substitute length of package for dot .
if or d ( char ) < NUM_  or or d ( char ) == NUM_ :,"if ascii value of char is smaller than integer 33 or is equal to integer 127 ,"
return offset . days * NUM_ + offset . seconds,"multiply offset.days with 86400 , add offset.seconds to the result , return the result ."
"loader = MigrationLoader ( None , ignore no migrations = True )","loader is an instance of MigrationLoader class , created with 2 arguments : None and ignore_no_migrations set to boolean True ."
import time,import module time .
import warnings,import module warnings .
"def skip past ( self , endtag ) :",define the method skip_past with 2 arguments : self and endtag .
return True,return boolean True .
if ip str . count ( STR_ ) ! = NUM_ :,"if count of occurrence of ' . ' in ip_str is not equal to integer 3 ,"
"def join tokens ( tokens , trim = False ) :",define the function join_tokens with 2 arguments : tokens and trim set to boolean False .
in dent = options . get ( STR_ ),"get the value under the 'indent ' key of the options dictionary , substitute the result for indent ."
class URLInput ( TextInput ) :,derive the class URLInput from the TextInput base class .
"handler . addQuickElement ( "" STR_ "" , cat )",call the method handler.addQuickElement with 2 arguments : string `` category '' and cat .
"kwargs = { STR_ : form , STR_ : formfield callback , STR_ : formset , STR_ : extra , STR_ : can delete , STR_ : can order , STR_ : fields , STR_ : exclude , STR_ : min num , STR_ : max num , STR_ : widgets , STR_ : validate min , STR_ : validate max , STR_ : localized fields , STR_ : labels , STR_ : help texts , STR_ : error messages , }","kwargs is a dictionary with 17 entries : form for 'form ' , formfield_callback for 'formfield_callback ' , formset for 'formset ' ,"
return get template ( parent ),"call the function get_template with an argument parent , return the result ."
from importlib import import module,from importlib import import_module into default name space .
values =  itervalues,substitute _itervalues for values .
return STR_,"return string 'StopUpload : Consume request data , then halt . ' ."
"def open ( self , name , mode = STR_ ) :","define the method open with arguments self , name and mode defaulting to string 'rb ' ."
@ register . tag ( STR_ ),"decorator method register.tag with an argument 'extends ' ,"
"fn ( * args , ** kwargs )",call the function fn with list of arguments args and dictionary of argument values kwargs .
if used name ! = guessed filename :,"if used_name is not equal to guessed_filename ,"
iter ( second item ),"convert second item to an iterable ,"
"if not hasattr ( e , STR_ ) :","if e doesnt have an 'django_template_source ' attribute ,"
  setitem   = complain,substitute complain for __setitem__ .
"from django . db import connections , DEFAULT DB ALIAS",from django.db import connections and DEFAULT_DB_ALIAS into default name space .
basedirs . extend ( [ upath ( path ) for path in settings . LOCALE PATHS ] ),"call function update with path as the argument , for every path in settings.LOCALE_PATHS , extend basedirs list with previous items ."
"def add arguments ( self , parser ) :",define the method add_arguments with 2 arguments : self and parser .
r = o . is oformat ( ),call the method o.isoformat substitute the result for r .
"self . create table ( db , cache .  table )",all the method self.create_table with arguments : db and cache._table .
self . attr = old attr,substitute old_attr for self.attr .
"POST = property (  get post ,  set post )",_get_post is a getter function and _set_post is a setter function for POST attribute of this class .
self . dict [ item ] = None,value under the item key of self.dict dictionary is None .
renderer = CheckboxFieldRenderer,substitute CheckboxFieldRenderer for renderer .
"def lru cache ( maxsize = NUM_ , typed = False ) :",define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False .
return response,return response .
"super ( Truncator , self ) .   init   ( lambda : force text ( text ) )","call the method __init__ from the base class of the class Truncator ,"
"gettext lazy = lazy ( gettext , str )","call the function lazy with 2 arguments : gettext and str , substitute gettext_lazy ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
else :,"if not ,"
 load serializers ( ),call the function _load_serializers .
" dec .  decorated function = getattr ( func , STR_ , func )","get '_decorated_function ' attribute from the func object , substitute it for _dec._decorated_function , if it doesnt exist ,"
if tzinfo [ NUM_ ] == - :,"substitute the result for offset . if first element of tzinfo equals '- ' ,"
"return super ( Debug , self ) .   init   ( DEBUG , * args , ** kwargs )","call the __init__ method with 3 arguments : DEBUG , unpacked list args and unpacked dictionary kwargs from the base class of Debug ."
if self . connection reset :,"if self.connection_reset is true ,"
return result,return result .
silent variable failure = True,silent_variable_failure is an boolean True .
"localize = kwargs . get ( STR_ , False )","get the value under the 'localize ' key of the kwargs dictionary , substitute it for localize , if the key doesnt exists , substitute the result for localize ."
class Module six moves urllib robotparser (  LazyModule ) :,"assign it to value under the string `` .moves.urllib_response '' appended to __name__ key of the sys.modules dictionary , and to value under the string `` .moves.urllib.response '' appended to __name__ key of the sys.modules dictionary . derive class Module_six_moves_urllib_robotparser from the _LazyModule base class ."
def urlsafe base64 encode ( s ) :,define the function urlsafe_base64_encode with an argument s .
@ property,"property decorator ,"
"from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit",from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space .
"module = importlib . import module ( STR_ % flup module , STR_ )","call the function importlib.import_module with 2 arguments : flup_module converted to string and appended to ' . ' character , and string 'flup ' , substitute the result for module ."
if self .  isdst ( dt ) :,"call the method self._isdst with an argument dt , if it evaluates to true ,"
def   enter   ( self ) :,define the method __enter__ with argument self .
class Rss201rev2Feed ( RssFeed ) :,derive the class Rss201rev2Feed from the RssFeed base class .
return  time . tzname [ self .  isdst ( dt ) ],"call the method self._isdst with an argument dt , use it as an key to get the value from the _time.tzname dictionary , return it ."
pass,do nothing .
"def   init   ( self , file , name = None ) :","define the method __init__ with self class instance , file , and name defaulting to None as arguments ."
self [ key ] = result,substitute result for value under key key of self dictionary .
def in itial form count ( self ) :,define the method initial_form_count with an argument self .
if callable ( limit choices to ) :,"if limit_choices_to is callable object ,"
"response = self . get exception response ( request , resolver , NUM_ )","'status_code ' with value 403 , and 'request with value request , respectively use the previous as the arguments for the call to the logger.warning function . call the method self.get_exception_response with request , resolver and integer 403 as the arguments , assign the result to response ."
"return  trans . pgettext ( context , message )",call the method _trans.pgettext with 2 arguments context and message .
"def write ( self , msg , style func = None , ending = None ) :","define the method write with 4 arguments : self , msg , style_func with None and ending set None ."
return self .  handle object ( node ),"call the method self._handle_object with an argument node , return the result ."
self . active readers += NUM_,increment self.active_readers by 1 .
cookies = ( pformat ( COOKIES override ) if COOKIES override is not None else pformat ( request . COOKIES ) ),"get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override ,"
if tags and any ( not checks . tag exists ( tag ) for tag in tags ) :,"if tags exists and if all elements in the return value of the method checks.tag_exists called with an argument tag ,"
"for attr in ( STR_ , STR_ , STR_ ) :","for every attr in tuple with 3 arguments : strings 'expects_localtime ' , 'is_safe ' and 'needs_autoescape ' ,"
"apps . setdefault ( app name , [ ] ) . extend ( namespace list )","call the method apps.setdefault with 2 arguments : app_name and an empty list , extend the resulting list with namespaces_list ."
"if is in stance ( source , NonCapture ) :","if source is an instance of NonCapture class ,"
"def   init   ( self , redirect to , * args , ** kwargs ) :","define the method __init__ with 4 arguments : self , redirect_to , unpacked list args and unpacked dictionary kwargs ."
@ stringfilter,"decorator stringfilter ,"
pass,do nothing .
app configs = None,app_configs is None .
"html [ STR_ ] = self . create select ( name , self . day field , value , day val , choices , self . day none value )","substitute the resulting string for choices . call the method self.create_select with 6 arguments : name , self.year_field , value , day_val , choices and self.day_none_value ,"
self . silent = silent,substitute silent for self.silent .
LOCK SH = fcntl . LOCK SH,substitute fcntl.LOCK_SH for LOCK_SH .
self .  is rendered = False,self._is_rendered is boolean False .
self . stderr . write ( msg ),write msg to self.stderr stream .
"self . require all fields = kwargs . pop ( STR_ , True )","if 'require_all_fields ' key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields ,"
def list ( self ) :,define the method list with an argument self .
return self . html name,return self.html_name .
return not ( self == other ),"if self equals to other return boolean False , otherwise return True ."
if self . variable name :,if self.variable_name is true .
"cache =  create cache ( backend , ** kwargs )","and stacklevel set to 2 as arguments . call the _create_cache with backend and dictionary kwargs as arguments , substitute the result for cache ."
def configure ( self ) :,define the method configure with an argument self .
return copy . copy ( self ),"call the method copy.copy with an argument self , return the result ."
assert iterations > NUM_,"if iterations is lesser than integer 0 , raise an error ."
num sent += NUM_,increment num_sent by one .
class HttpResponseNotAllowed ( HttpResponse ) :,derive the class HttpResponseNotAllowed from the HttpResponse base class .
return value . replace ( tzinfo = None ),"call the method value.replace with an arugment tzinfo set to None , return the result ."
for template name in template name list :,"for every template_name in template_name_list ,"
"sup cls = super ( cls , self )",sup_cls is base class of the class cls .
"choice value , choice label = choice","substitute choice for choice_value and choice_label , respectively ."
"return self . loader ( self . loadname , self . dirs ) [ NUM_ ]","call the method self.loader with 2 arguments : self.loadname and self.dirs , return the first element of the result ."
"s = s . replace ( "" STR_ "" , "" STR_ "" )",replace every occurrence of `` ' '' in s with `` \\ ' '' .
"for lineno , line in enumerate ( content . splitlines ( True ) ) :","for every lineno and line is enumerated result of the method content.splitlines , called with an argument boolean True ,"
except KeyError :,"if KeyError exception is caught ,"
if match :,"if match is true ,"
 mtimes [ filename ] = mtime,substitute mtime for the value under the filename key of _mtimes dictionary .
output . append ( options ),append options to output .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = None , help = STR_ STR_ STR_ ) ,","and help set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting. ' . call the method parser.add_argument with 5 arguments : string ' -- liveserver ' , action set to string 'store ' , dest set to 'liveserver ' ,"
error messages = kwargs . get ( STR_ ) or { },"get the value under the 'error_messages ' key of the kwargs dictionary , if it exists substitute it for error_messages , if not ,"
return wrapper,return wrapper .
pdict = { },substitute the result for key . pdict is an empty dictionary .
in ternal use only = True,internal_use_only is boolean True .
return iri to uri ( location ),"call the function iri_to_uri with an argument location , return the result ."
self .  content length = content length,substitute content_length for self._content_length .
if app config . models module is None :,if app_config.models_module is None .
"final attrs = self . build attrs ( attrs , type = self . in put type , name = name )","call the method self.build_attrs with 3 arguments : attrs , type set to self.input_type , name set to name ,"
collect . extend (  builtin context processors ),extend collect list with _builtin_context_processors .
import tempfile,import module tempfile .
def get complete version ( version = None ) :,"define the function get_complete_version with in argument version , defaulting to None ."
class FileInput ( Input ) :,derive the class FileInput from the Input base class .
break,use the result and file_obj as arguments for the call to the method self._files.appendlist . break the loop execution .
"if is in stance ( self . regex , six . string types ) :","if self.regex is not an instance of a six.string_types type ,"
if bf . label :,"if bf.label is true ,"
except ValueError :,"if ValueError exception is caught ,"
def get language from path ( request ) :,define the function get_language_from_path with an argument request .
major = STR_ . join ( str ( x ) for x in version [ : parts ] ),"convert x into a string for every x in list of version elements up to the parts index , join the previous into a string separated by ' . ' , assign the result to major ."
def close ( self ) :,define the method close with argument self .
import memcache,import memcache .
if item [ STR_ ] is not None :,"called with value under the 'pubdate ' key of the item dictionary . if value under the 'comments ' key of the item dictionary is not None ,"
"def   init   ( self , table ) :",define the initialization method __init__ with self class instance and table as arguments .
class dummy :,define class dummy .
return self . has key ( key ),"evaluate the self.has_key method with key as argument , return the result ."
best doublecolon start = doublecolon start,substitute doublecolon_start for best_doublecolon_start .
next = in dex + len ( self .  boundary ),"sum index and length of self._boundary , substitute the result for next ."
version = get complete version ( version ),"call the get_complete_version function with version as argument , store the result in version ."
"IDENTIFIER = re . compile ( STR_ , re . I )","compile regex from string '^ [ a-z_ ] [ a-z0-9_ ] * $ ' in case insensitive mode , substitute it for IDENTIFIER ."
@ deconstructible,"and code set to string 'invalid ' . decorator deconstructible ,"
"nodelist = parser . parse ( ( elif , else , STR_ ) )","call the method parser.parse with an argument tuple with 3 elements strings 'elif ' , 'else ' and 'endif ' , substitute the result for nodelist ."
  delitem   = new method proxy ( operator . delitem ),"call the function new_method_proxy with an argument operator.delitem , substitute the result for __delitem__ ."
"def compile filter ( self , token ) :",define the function compile_filter with 2 arguments : self and token .
else :,"if not ,"
return language . lower ( ),"convert language to lowercase , return it ."
"def time format ( value , format = None , use l10n = None ) :","format , if its true , otherwise string 'DATE_FORMAT ' and use_l10n as use_l10n , return the result . define the function time_format with 3 arguments : value , format set to None and use_l10n set to None ."
def cleanup url ( url ) :,define the function cleanup_url with an argument url .
def handle default options ( options ) :,define the function handle_default_options with an argument options .
plist = [ ],plist is an empty list .
"from django . utils . safestring import mark safe , SafeData , mark for escaping","from django.utils.safestring import mark_safe , SafeData and mark_for_escaping into default name space ."
"def do extends ( parser , token ) :",define the function do_extends with 2 arguments parser and token .
"pofile = os . path . join ( basedir , STR_ % str ( self . domain ) )","convert self.domain into a string and append string '.po ' to it , join basedir and result in file path , substitute it for pofile ."
"def write items ( self , handler ) :",define the method write_items with 2 arguments : self and handler .
model dependencies = [ ],model_dependencies is an empty list .
filemsg = STR_ % or igin,"filemsg is a string 'file % s , ' , where ' % s ' is replaced with origin ."
else :,"if not ,"
"def resolve error handler ( self , view type ) :",define the method resolve_error_handler with arguments self and view_type .
"def push ( self , name , block ) :","define the method push with 3 arguments : self , name and block ."
for d in reversed ( self . dicts ) :,"for every d in reversed list self.dicts ,"
"label output = self . handle label ( label , ** options )","call the method self.handle_label with 2 arguments : label and unpacked dictionary options , substitute the result for label_output ."
def upload handlers ( self ) :,define the method upload_handlers with an argument self .
combined = Media ( ),combined is an instance of Media class .
class Command ( BaseCommand ) :,derive the class Command from the BaseCommand base class .
i += NUM_,"increment i by integer 1 ,"
dirs . append ( app dir ),append app_dir to dirs list .
if not self . in voked for django :,"if self.invoked_for_django is false ,"
"def   init   ( self , attrs = None , render value = False ) :","define the method __init__ with 3 arguments : self , attrs set to None and render_value set to boolean False ."
"def get digit ( value , arg ) :",define the function get_digit with 2 arguments value and arg .
try :,"try ,"
def get host ( self ) :,define the method get_host with an argument self .
"def  get foreign key ( parent model , model , fk name = None , can fail = False ) :","define the function _get_foreign_key with 4 arguments : parent_model , model , fk_name set to None and can_fail set to boolean False ."
for sql file in sql files :,"for every sql_file in sql_files ,"
out += truncate text,append truncate_text to out .
"raise EntitiesForbidden ( name , value , base , sysid , pubid , not ation name )","raise an EntitiesForbidden exception with arguments name , value , base , sysid , pubid and notation_name ."
logging config func ( DEFAULT LOGGING ),call the function logging_config_func with an argument DEFAULT_LOGGING .
if data :,"if data is true ,"
f = s [ : end ],substitute first end elements of s for f .
return False,return boolean False .
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
for obj in self . queryset . all ( ) :,"for every obj in result of the call to the method self.queryset.all ,"
try :,"try ,"
return len ( value . split ( ) ),"split value into words , return the length of the result ."
"self . stderr . write ( "" STR_ "" % ( app name , model .  meta . object name , e ) )","call the self.stderr.write method with string `` Failed to install index for % s. % s model : % s\n '' as argument ,"
else :,"if not ,"
"attrname , rest , attrvalue = m . group ( NUM_ , NUM_ , NUM_ )","find the first , second and third subgroup of the m regular expression match , assign the result to the attrname , rest and attrvalue , respectively ."
old field name = field name,substitute field_name for old_field_name .
else :,"if not ,"
"def unparsed entity decl ( self , name , base , sysid , pubid , not ation name ) :","define the method unparsed_entity_decl with arguments self , name , base , sysid , pubid and notation_name ."
"def  has changed ( self , in itial , data ) :","define the method has_changed with arguments self , initial and data ."
"message = "" STR_ "" % top dir","replace ' % s ' in string `` ' % s ' already exists '' with top_dir , substitute it for message ."
"ch , escaped = next ( pattern iter )","get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively ."
objects = json . loads ( stream or string ),"call the function json.loads with an argument stream_or_string , substitute the result for objects ."
widget = SelectMultiple,substitute SelectMultiple for widget .
else :,"and an empty dictionary , substitute the result for httpd_cls . if not ,"
"def   init   ( self , protocol = STR_ , unpack ipv4 = False , * args , ** kwargs ) :","define the method __init__ with 5 arguments : self , protocol set to string 'both ' , unpack_ipv4 set to boolean False ,"
stream = StringIO ( stream or string ),"call the function StringIO with an argument stream_or_string , substitute the result for stream ."
return False,return boolean False .
self . command stack . pop ( ),remove first element from self.command_stack .
raise,raise an exception .
@ property,"and unpacked dictionary kwargs , return the result . property decorator ,"
"def   init   ( self , message = None , code = None , whitelist = None ) :","define the __init__ method with 4 arguments : self , message set to None , code set to None and whitelist set to None ."
import re,import module re .
"def emit post migrate ( verbosity , in teractive , database ) :","define the method emit_post_migrate with arguments verbosity , interactive and database ."
formfield = f . formfield ( ** kwargs ),"call the method f.formfield with an argument , unpacked dictionary kwargs , substitute the result for formfield ."
class MovedAttribute (  LazyDescr ) :,derive class MovedAttribute from the _LazyDescr base class .
def   repr   ( self ) :,define the method __repr__ with an argument self .
else :,"if not ,"
self . name = name,substitute name for self.name .
self . callback = None,self.callback is None .
"def exists ( self , name ) :",define the method exists with arguments self and name .
if STR_ not in klass .   dict   :,"if string '__str__ ' is not contained in __dict__ field of klass ,"
"path = join ( os . getcwdu ( ) , path )","get the unicode representation of current working directory , join it and path into a string , substitute the result for path ."
"tt = ( NUM_ , ) + tt [ NUM_ : ]","create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element , substitute the result for tt ."
for node in self . nodelist loop :,"for every node in self.nodelist_loop ,"
def import library ( taglib module ) :,define the function import_library with an argument taglib_module .
from itertools import chain,from itertools import chain into default name space .
import zipfile,import module zipfile .
"yield representative , True",yield representative and boolean True .
return reversed ( self . keyOrder ),"reverse order of elements of self.keyOrder , return the result ."
except ValueError :,"if ValueError exception is caught ,"
self . validate key ( key ),call the method self.validate_key with key as argument .
return obj,return obj .
"raise self . error class ( "" STR_ "" % self . current token . display ( ) )","raise an exception self.error_class with an argument string `` '' Unused ' % s ' at end of if expression '' ,"
in ner text . extend ( getInnerText ( child ) ),"call the function getInnerText with an argument child , use the result as an argument for the call to the method inner_text.extend ."
if key in d :,"if key is contained in d ,"
import msvcrt,import msvcrt .
  bool   = new method proxy ( bool ),"call the function new_method_proxy with an argument bool , substitute the result for __bool__ ."
cls .  delegate bytes = bytes in resultclasses,"if bytes is contained in resultclasses , cls._delegate_bytes is boolean True , otherwise it is boolean False ."
"def   getattr   ( self , name ) :",define the method __getattr__ with self and name as arguments .
output = [ ],output is an empty list .
self . keyOrder . append ( key ),append key to self.keyOrder .
from django . utils . functional import LazyObject,from django.utils.functional import LazyObject into default name space .
"html = endtag re . sub ( , html )","call the function endtag_re.sub with 2 arguments : an empty string and html , substitute the result for html ."
def as p ( self ) :,"separated by newline , use it as an argument for the call to the function mark_safe , return the result . define the method as_p with an argument self ."
try :,"try ,"
return pformat ( value ),"call the function pformat with an argument value , return the result ."
fk = fks to parent [ NUM_ ],substitute first element of fks_to_parent for fk .
if namespaces :,"if namespaces is true ,"
@ register ( Tags . compatibility ),decorator register with argument Tags.compatibility .
"raise SignatureExpired ( STR_ % ( age , max age ) )","raise an SignatureExpired exception with an argument string 'Signature age % s > % s seconds ' , where ' % s ' is replaced by age and max_age , respectively ."
"def nud ( self , parser ) :",define the method nud with 2 arguments : self and parser .
"raise ValueError ( "" STR_ "" % config [ STR_ ] )",raise an ValueError exception with an argument string `` Unsupported version : % s '' formated with value under 'version ' key of config dictionary .
"def prefix ( bp , func ) :",define the function prefix with 2 arguments bp and func .
"super ( Command , self ) . handle ( STR_ , app name , target , ** options )","`` as an app name . Please try another name . `` , where ' % r ' is replaced with app_name . call the method handle from the base class of Command class , with 4 arguments : string 'app ' , app_name , target and unpacked dictionary options ."
"def utcoffset ( self , dt ) :",define the method utcoffset with 2 arguments self and dt .
escaped = False,escaped is boolean False .
return os . path . getsize ( self . file . name ),"call the os.path.getsize function with argument self.file.name , return the result ."
"def import by path ( dotted path , error prefix = ) :",and third element of result of the function sys.exc_info . define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string..
def  get request ( self ) :,define the method _get_request with self class instance as argument .
def media property ( cls ) :,define the function media_property with an argument cls .
"super ( WSGIServer , self ) .   init   ( * args , ** kwargs )","call the __init__ method from the base class of the WSGIServer class , with 2 arguments : unpacked list args and unpacked dictionary kwargs ."
return False,return boolean False .
g = g . strip ( STR_ ),"strip g of ' '' ' from both ends ,"
 supported = None,_supported is None .
sys . exit ( NUM_ ),close the process with an argument 1 .
def u ( s ) :,define the function u with an argument s .
try :,"try ,"
"return self . filter ( name , func , ** flags )","call the method self.filter with 3 arguments : name , func and unpacked dictionary flags , return the result ."
self . attachments = attachments or [ ],"if attachments exists substitute it for self.attachments , if not attachments is an empty list ."
return True,return boolean True .
if self . no obsolete :,"if self.no_obsolete is true ,"
error class = TemplateSyntaxError,substitute TemplateSyntaxError for error_class .
encoding = encoding or settings . DEFAULT CHARSET,if encoding does not exists substitute it for settings.DEFAULT_CHARSET .
return None,return None .
continue,"skip this loop iteration , s"
"self . salt = force str ( salt or STR_ % ( self .   class   .   module   , self .   class   .   name   ) )","call the force_str function with an argument : salt , if it exists , if not with a string ' % s. % s ' , with ' % s ' replaced by ,"
parts . append ( value ),append value to parts .
"def extend nodelist ( self , nodelist , node , token ) :","define the method extend_nodelist with 4 arguments : self , nodelist , node and token ."
re newlines = re . compile ( r STR_ ),"re.U and re.S , substitute the result for re_chars . call the function re.compile with an argument raw string '\r\n|\r ' , substitute the result for re_newlines ."
del self . dict [ item ],delete entry under item key of self.dict dictionary .
except UnicodeEncodeError :,"if the UnicodeEncodeError exception is caught ,"
import sys,import module sys .
msg [ STR_ ] = formatdate ( ),"call the formatdate function , substitute it for value under the 'Date ' key of msg dictionary ."
"def   init   ( self , stream , boundary ) :","define the method __init__ with arguments self , stream and boundary ."
try :,"try ,"
"self . localized fields = getattr ( options , STR_ , None )","get 'localized_fields ' attribute from the options object , if it exists substitute it for self.localized_fields ,"
self . make writeable ( new path ),call the method self.make_writeable with an argument new_path .
"raise ValidationError ( self . message , code = self . code )",raise a ValidationError exception with arguments self.message and code set to self.code .
if domain == STR_ and file ext in command . extensions :,"if domain equals a string 'djangojs ' and file_ext is contained in command.extensions ,"
"param , value = list ( six . iteritems ( kwarg ) ) [ NUM_ ]","call the method six.iteritems with an argument kwarg , convert the result into a list ,"
"taglib module = STR_ % ( module , library name )","taglib_module is an string ' % s. % s ' , where ' % s ' is replaced to module and library_name ."
if m . group ( NUM_ ) :,"call the function m.group , if the result evaluates to true ,"
"for field , messages in message . items ( ) :","for every field , messages in return value of the message.items method ,"
from email . mime . text import MIMEText,from email.mime.text import MIMEText into default name space .
def list ( self ) :,define the method list with an argument self .
"file move safe ( content . temporary file path ( ) , full path )",call the function file_move_safe with content.temporary_file_path function result and full_path .
old field name = None,assign the handle to stream . old_field_name is None .
"return self . load template ( template name , template dirs )","call the method self.load_template with 2 arguments : template_name and template_dirs , return the result ."
"app list value = app list . setdefault ( app config , [ ] )","call the method app_list.setdefault with 2 arguments app_config and an empty list , substitute the result for app_list_value ."
table output = [ ],"name set to a string 'cache_key ' , max_length set to integer 255 , unique set to boolean True and primary_key set to boolean True , return value of the method models.TextField called with argument name set to a string 'value ' , and return value of the method models.DateTimeField called with 2 arguments : name set to string 'expires ' and db_index set to True . table_output is an empty list ."
deps = [ apps . get model ( dep ) for dep in deps ],"for every dep in deps call the method apps.get_model with an argument dep , and append the result to the list , substitute it for deps ."
for templatetag module in templatetags modules candidates :,"for every app_config in result of the method apps.get_app_configs , append the resulting list to templatetags_modules_candidates . for every templatetag_module in templatetags_modules_candidates ,"
priority = float ( priority ),"convert priority into a floating point integer , substitute it for priority ."
self . func = func,substitute func for self.func .
"return bytes ( ( i , ) )","call the function bytes with an argument tuple with an element i , return the result ."
return text .   html   ( ),"call the method text.__html__ , return the result ."
def popitem ( self ) :,define the method popitem with an argument self .
def start serialization ( self ) :,define the method start_serialization with an argument self .
return [ ],return an empty list .
self .  assert mutable ( ),call the method self._assert_mutable .
value = [ conditional escape ( v ) for v in value ],"for every v in value call the function conditional_escape with an argument v , append the result in a list , substitute the resulting list for value ."
target app labels only = True,target_app_labels_only is boolean True .
"response = middleware method ( request , e )","call the middleware_method with request and e as the arguments , substitute the result for response ."
"if hasattr ( cls , k ) :","if cls has an attribute k ,"
import re,import module re .
from django . utils . deconstruct import deconstructible,from django.utils.deconstruct import deconstructible into default name space .
pass,do nothing .
app list value . append ( model ),append model to app_list_value .
else :,"called with 2 arguments : singular and trimmed , write the result to out . if not ,"
if localized fields == ALL FIELDS or ( localized fields and f . name in localized fields ) :,"if localized_fields equals ALL_FIELDS , or if localized_fields is true and f.name is contained in localized_fields ,"
attrs = { STR_ : id  } if id  else { },"if not , substitute self.auto_id for id_ . if if_is true attrs is an dictionary with initial entry : id_ for 'id ' , if not , attrs is an empty dictionary ."
"app label , migration name = options [ STR_ ] , options [ STR_ ]","get the values under the 'app_label ' and 'migration_name ' keys of the options dictionary ,"
raise ContentNotRenderedError ( STR_ STR_ ),raise an ContentNotRenderedError exception with an argument string 'The response content must be rendered before it can be pickled . ' .
if bits [ NUM_ ] ! = as :,"if fift element of bits is not equal to a string 'as ' ,"
"bit = self . render node ( node , context )","call the method self.render_node with 2 arguments : node and context , substitute the result for bit ."
continue,"skip this loop iteration ,"
"if value in ( True , True , STR_ ) :","if value is boolean True , string 'True ' or string ' 1 ' ,"
return   ( STR_ ),"call the function _ with an argument string 'AM ' , return the result ."
try :,"try ,"
@ property,"where ' % s ' is replaced with self.__class__.__name__ . property decorator ,"
class ResolverMatch ( object ) :,derive the class ResolverMatch with object as base class .
"return key , pdict",return key and pdict .
"parser . in valid block tag ( endblock , STR_ , acceptable endblocks )","call the method parser.invalid_block_tag with 3 arguments : endblock , 'endblock ' and acceptable_endblocks ."
if limit choices to is not None :,"if limit_choices_to is not None ,"
def   repr   ( self ) :,define the method __repr__ with an argument self .
"cursor . execute ( "" STR_ "" "" STR_ "" % table , [ key ] )","call the method cursor.execute with string `` DELETE FROM % s WHERE cache_key = % % s '' as argument ,"
@ property,"property decorator ,"
"BaseCache .   init   ( self , params )",call the BaseCache.__init__ method with self class instance and params as the arguments .
self . in voked for django = False,substitute ' % s ' with return value of the function get_text_list called with 2 arguments : self.extensions converted into a list and string 'and ' . self.invoked_for_django is boolean False .
res = subject [ p : i ],substitute subject elements from p-th to i-th index for res .
" meth func = "" STR_ """,_meth_func is a string `` im_func '' .
from django . core . files . base import File,from django.core.files.base import File into default name space .
return self .  is rendered,return self._is_rendered .
"def has key ( self , key , version = None ) :","define the method has_key with self class instance , key and version defaulting to None as arguments ."
"for i , handler in enumerate ( self .  upload handlers ) :","for every i and handler in enumerated iterator self._upload_handlers ,"
bf = self [ name ],substitute value under the name key for bf .
self .  populate ( ),"call the method self._populate ,"
result . setLevel (  checkLevel ( level ) ),"call function _checkLevel with an argument level , use the result as an argument for the method result.setLevel ."
except Resolver404 as e :,"if Resolver404 , renamed to e , exception is caught ,"
"self .  lock =  locks . setdefault ( name , RWLock ( ) )","call the _lock.setdefault method with name and RWLock ( ) as arguments , substitute the result for self_lock ."
title = plan node [ NUM_ ],substitute second element of plan_node for title .
"def set cookie ( self , key , value = , max age = None , expires = None , path = / , domain = None , secure = False , httponly = False ) :","if it exists return the second element of the result , if not , return alternate . define the method set_cookie with 9 arguments : self , key , value set to an empty string , max_age set to None , expires set to None ,"
"return name , ser fmt , cmp fmt","return name , ser_fmt and cmp_fmt ."
"from django . template . base import Lexer , Parser , tag re , NodeList , VariableNode , TemplateSyntaxError","from django.template.base import Lexer , Parser , tag_re , NodeList , VariableNode and TemplateSyntaxError into default name space ."
"return s . decode ( STR_ , errors ) . encode ( encoding , errors )","evaluate the method s.decode with string 'utf-8 ' and errors as the arguments ,"
"value = super ( URLField , self ) . to python ( value )","call the method to_python with an argument data from the base class of the class URLField , substitute the result for value ."
"for name , field in self . fields . items ( ) :","call the method self.fields.items , for every name and field in the result ,"
for processor in get standard processors ( ) + processors :,"call the function get_standard_processors , append processors to the result , for every processor is the result ,"
self . model name = STR_,self.model_name is a string 'cacheentry ' .
"def get field type ( self , connection , table name , row ) :","define the method get_field_type with 4 arguments : self , connection , table_name and row ."
@ python 2 unicode compatible,"decorator python_2_unicode_compatible ,"
raise,re raise an exception .
try :,"try ,"
message context = None,message_context is None .
"cache . set ( cache key , headerlist , cache timeout )","call the method cache.set , with cache_key , headerlist , cache_timeout as arguments ."
"opt dict = { STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ }","opt_dict is an dictionary with 5 elements : ' 1 ' for 'bold ' , ' 4 ' for 'underscore ' , ' 5 ' for 'blink ' , ' 7 ' for 'reverse ' ,"
import warnings,import warnings .
new result . append ( item + i item ),"sum item and i_item together , append the result to new_result ."
self .  iterator = iter ( value ),"convert value into a iterator , substitute the result for self._iterator ."
elif  locs  is None :,"otherwise if _locs_ is None ,"
DEFAULT LOCALE ENCODING = get system encoding ( ),"evaluate the function get_system_encoding ( ) , substitute the return vale for DEFAULT_LOCALE_ENCODING ."
import operator,import module opera .
return len ( self . non form errors ( ) ) + sum ( len ( form errors ) for form errors in self . errors ),"for every form_errors in self.errors sum length of return value of the method self.non_form_errors and length of form_errors , return the result ."
class SimpleCookie ( http cookies . SimpleCookie ) :,derive class SimpleCookie from the base class http_cookies.SimpleCookie .
if root :,"if root is true ,"
else :,"if not ,"
from django . utils import six,from django.utils import six into default name space .
"content length = in t ( META . get ( STR_ , META . get ( STR_ , NUM_ ) ) )","convert value under the 'HTTP_CONTENT_LENGTH ' key of the META dictionary to an integer of base of value under the 'CONTENT_LENGTH ' key of META dictionary , if the key doesnt exists use 0 as the base , substitute the result for content_length ."
" CacheInfo = namedtuple ( "" STR_ "" , [ "" STR_ "" , "" STR_ "" , "" STR_ "" , "" STR_ "" ] )","_CacheInfo is an instance of namedtuple class created with 2 arguments : string `` CacheInfo '' and a list with 4 elements : string 'hits ' ,"
"if args [ - NUM_ ] ! = "" STR_ "" :","if last element of args is not equal to a string `` silent '' ,"
old = STR_ + work file [ NUM_ : ],"append work_file to string ' # : ' , substitute it for old ."
if name :,"if name is true ,"
return self .   class   ( * self . dicts ),"call the method __copy__ with an argument unpacked list self.dicts , return the result ."
"self . choices . append ( ( f , f . replace ( path , "" "" , NUM_ ) ) )","append a tuple with 2 elements : f and f with first occurrence of the path replaced with an empty string , to self.choices ."
else :,"if not ,"
else :,"if not ,"
"sys . stderr . write ( "" STR_ "" % ( e . errno , e . strerror ) )","call the method sys.stderr.write with an argument string `` fork # 1 failed : ( % d ) % s\n '' , formated with e.errno and e.strerror ."
cursor . execute ( line ),call the method cursor.execute with an argument line .
statement = [ ],statement is an empty list .
return force text ( unquote ( force str ( quoted url ) ) ),"call the function force_str with an argument quoted_url , use the result as an argument for the call to the function unquote ,"
return wrapper,return wrapper .
remaining bits = bits [ NUM_ : ],substitute bits without the first element for remaining_bits .
else :,"if not ,"
else :,"substitute the ' % s ' with table and 3 elements of a list : b64encoded , exp and key , respectively . if not ,"
"if ( ( context . autoescape and not is in stance ( value , SafeData ) ) or is in stance ( value , EscapeData ) ) :","if context.autoescape is true and value is not an instance of SafeData , or value is an instance of EscapeData ,"
return . join ( rendered widgets ),"join rendered_widgets into a string , return it ."
return STR_,return string 'https ' .
"output = self . handle ( * args , ** options )","call the method self.handle with 2 arguments unpacked list args and unpacked dictionary options , substitute the result for output ."
html class attr = STR_ % css classes,"replace `` % s '' from the string ' class= '' % s '' ' with css_classes , substitute it for html_class_attr ."
chunk length = len ( chunk ),substitute length of chunk for chunk_length .
if css classes :,"if css_classes is true ,"
"if not is in stance ( self . object list , list ) :","if self.object is not an instance of list type ,"
"if not os . access ( self . file path , os . W OK ) :","replace ' % s ' with self.file_path and err , respectively . if self.file_path file is not writable ,"
return self . data . is ocalendar ( ) [ NUM_ ],"call the method self.data.isocalendar , return the first element of the result ."
in trans = True,intrans is boolean True .
else :,"if not ,"
"self . add item elements ( handler , item )",call the method self.add_item_elements with 2 arguments : handler and item .
offset = self . timezone . utcoffset ( self . data ),"call the method self.timezone.utcoffset with an argument self.data , substitute the result for offset ."
try :,"try ,"
except LookupError :,"if LookupError exception is caught ,"
"all models = [ ( app config . label , router . get migratable models ( app config , connection . alias , in clude auto created = True ) ) for app config in apps . get app configs ( ) if app config . models module is not None and app config . label in app labels ]","for every app_config in return value of the method apps.get_app_configs if app_config.models_module is not None ,"
newretval = post callback ( retval ),"call the function post_callback with an argument retval , substitute the result for newretval ."
return list ( self . iterkeys ( ) ),"call the method self.iterkeys , return the list of results ."
"warnings . warn ( "" STR_ "" , RemovedInDjango19Warning )",call the method warnings.warn with 2 arguments : string `` The syncdb command will be removed in Django 1.9 '' and RemovedInDjango19Warning .
value . encode ( charset ),call the method value.encode with an argument charset .
"def make naive ( value , timezone ) :",define the function make_naive with 2 arguments : value and timezone .
return response,return response .
if id  :,"if id_ is true ,"
timezone = ( offset . days * NUM_ * NUM_ ) + ( offset . seconds // NUM_ ),"multiply offset.days , integer 24 and integer 60 , sum the result with floored result of dividing offset.seconds by integer 60 ,"
"def source error ( self , source , msg ) :","define the method source_error with 3 arguments : self , source and msg ."
return,return nothing .
self .  separator = b STR_ + boundary,"append boundary to bytes string ' -- ' , substitute the result for self._separator ."
if self . connection is None :,"if self.connection is None ,"
bits = token . split contents ( ),"call the method token.split_contents , substitute the result for bits ."
pattern iter = next char ( iter ( pattern ) ),"call the function next_char with an argument iterator pattern , substitute the result for pattern_iter ."
seen . add ( k ),add k to seen .
if ( not normcase ( final path ) . startswith ( normcase ( base path + sep ) ) and normcase ( final path ) ! = normcase ( base path ) and dirname ( normcase ( base path ) ) ! = normcase ( base path ) ) :,"if return value of the function normcase called with an argument final_path doesnt starts with result of the function normcase ,"
"lookup view = get callable ( lookup view , True )","call the function get_callable with arguments lookup_view and boolean True , substitute the result for lookup_view ."
self .  handler class = None,self._handler_class is None .
pass,do nothing .
from django . utils . translation import ugettext as  ,from django.utils.translation import ugettext as _ into default name space .
pass,do nothing .
class RegexURLResolver ( LocaleRegexProvider ) :,derive the class RegexURLResolver with LocaleRegexProvider as base class .
pass,do nothing .
leave locale alone = True,leave_locale_alone is boolean True
if self . verbosity >= NUM_ :,"otherwise ser_fmts is a list containing ser_fmt . if self.verbosity is greater or equal to integer 2 ,"
if level is not None :,"if level is not None ,"
if fields is not None :,"if fields is not None ,"
"if not is in stance ( error , ValidationError ) :","if error is not an instance of ValidationError ,"
attrs [ class ] = self . form . required css class,substitute self.form.required_css_class for the value under the 'class ' key of the attrs dictionary .
self . method = environ [ STR_ ] . upper ( ),"convert value under the 'REQUEST_METHOD ' key of the environ dictionary to uppercase , substitute it for self.method ."
if len ( bits ) ! = NUM_ :,"if length of bits is not equal to integer 2 ,"
del self .  get,delete self._get .
in put text = ugettext lazy ( STR_ ),"call the function ugettext_lazy with an argument string 'Change ' , substitute the result for input_text ."
base36 . append ( digits [ i // j ] ),"floor the division of i by j , use it an an index to get the element of the digits list , append the result for base36 ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ STR_ ) ,","default set to boolean True , help set to string 'Tells Django to NOT prompt the user for input of any kind. ' . call the method parser.add_argument with 5 arguments : string ' -- failfast ' , action set to string 'store_true ' , dest set to 'failfast ' ,"
class SignatureExpired ( BadSignature ) :,derive the class SignatureExpired from the BadSignature base class .
return type ( self ) .   next   ( self ),"call the function type with an argument self , on the result call the method __next__ with an argument self , return the result ."
"if is in stance ( settings . TIME ZONE , six . string types ) and pytz is not None :","if settings.TIME_ZONE is an instance of six.string_types and pytz is not None ,"
new name = STR_ % new name,"convert new_name to a string and append it to string 'number_ ' , substitute the result for new_name ."
"msgs = msgs . replace ( old , new )","replace every occurrence of old for new in msgs , substitute the result for msgs ."
if new is None :,"if new is None ,"
return bool ( value ),substitute value for value . return value converted into a boolean .
else :,"if not ,"
if six . PY3 or os . name == STR_ :,"otherwise call the function sys.getdefaultencoding and substitute its result for fs_encoding . if six.PY3 is true or os.name equals a string 'nt ' ,"
class SelectMultiple ( Select ) :,"boolean True for 'True ' , boolean False for ' 3 ' , boolean False for 'False ' and boolean False for boolean False , return it if the key exists , if not return None . derive the class SelectMultiple from the Select base class ."
if not language code re . search ( lang code ) :,"call the method language_code_re.search with an argument lang_code , if it evaluates to false ,"
"for func , args in self . filters :","for every func and args in self.filters ,"
if self . feed [ STR_ ] is not None :,"cat for 'term ' . if value under the 'feed_copyright ' key of the self.feed dictionary is not None ,"
  nonzero   = new method proxy ( bool ),"call the function new_method_proxy with an argument bool , substitute the result for __nonzero__ ."
@ stringfilter,"decorator stringfilter ,"
self . cookies [ key ] [ STR_ ] = domain,"get the value under the key key of the self.cookies dictionary , domain expires for 'domain ' key of the returned dictionary ."
t = file name,substitute file_name for t .
pass,do nothing .
if not dictionary :,"if dictionary is false ,"
return False,return boolean False .
raise NotImplementedError ( STR_ ),raise NotImplementedError exception with an argument string 'Subclasses must implement this method . ' .
return,return nothing .
try :,"try ,"
DEFAULT MIN NUM = NUM_,DEFAULT_MIN_NUM is an integer 0 .
"def add arguments ( self , parser ) :",define the method add_arguments with self and parser as arguments .
self . label suffix = label suffix if label suffix is not None else   ( STR_ ),"if label_suffix is not None substitute label_suffix for self.label_suffix ,"
import time,import time module .
"super ( MovedAttribute , self ) .   init   ( name )",call the method __init__ with an argument name form the base class of the class MovedAttribute .
raise,raise an exception .
date re = re . compile ( r STR_ ),"compile regex from raw string ' ( ? P < year > \d { 4 } ) - ( ? P < month > \d { 1,2 } ) - ( ? P < day > \d { 1,2 } ) $ ' , substitute it for date_re ."
for template dir in template dirs :,"for every template_dir in template_dirs ,"
"def   init   ( self , display name , loader , name , dirs ) :","define the method __init__ with 5 arguments : self , display_name , loader , name and dirs ."
else :,"if not ,"
def dictitem ( s ) :,define function dictitem with s as an argument .
"list  = [ bytes to text ( elt , self . encoding ) for elt in list  ]","for every elt in list_ call the method bytes_to_text with 2 argument : elt and self.encoding , append the result into a list ,"
"assert version [ NUM_ ] in ( STR_ , STR_ , STR_ , STR_ )","if fourth element of version does not equals to string 'alpha ' or 'beta ' or 'rc ' or 'final ' , raise an exception ."
date = datetime safe . new datetime ( date ),"call the function datetime_safe.new_datetime with an argument date , substitute the result for date ."
self . unpack ipv4 = unpack ipv4,"unpacked list args , unpacked dictionary kwargs . substitute unpack_ipv4 for self.unpack_ipv4 ."
"self .  payload = payload . decode ( STR_ , STR_ )","call the method payload.decode with 2 arguments : string 'ascii ' and string 'surrogateescape ' , substitute the result for self._payload ."
try :,"try ,"
"from django . utils . encoding import force text , iri to uri",from django.utils.encoding import force_text and iri_to_uri into default name space .
"def render ( self , context ) :","and for every _ , nodelist in self.conditions_nodelists . define the method render with 2 arguments : self and context ."
"clean = lambda self , x : len ( x )","clean is a lambda function with self and x as arguments , return value is length of x ."
 cached modules = set ( ),_cached_modules is an empty set .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , help = STR_ )","and help is a string 'Tells Django to use plain Python , not IPython or bpython. ' . call the method parser.add_argument with 4 arguments : string ' -- no-startup ' , action as a string 'store_true ' ,"
return SafeBytes ( data ),"return an instance of SafeBytes , created with an argument data ."
def activate ( timezone ) :,define the function activate with an argument timezone .
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
"if options [ "" STR_ "" ] . lower ( ) in ( STR_ , STR_ , STR_ ) :","convert the value under the 'daemonize ' key of options dictionary to lowercase , if it equals to string 'true ' , 'yes ' or 't ' ,"
"def to locale ( language , to lower = False ) :",define the function to_locale with 2 arguments language and to_lower set to boolean False .
msg . attach ( attachment ),call the method msg.attach with an argument attachment .
self . label = self . field . label,substitute self.field.label for self.label .
"if hasattr ( timezone , STR_ ) :","if timezone has an attribute 'normalize ' ,"
return smart text ( obj ),"call the function smart_text with an argument obj , return the result ."
node . replace ( decorated ),and prefix as node.prefix . call the method node.replace with an argument decorated .
if self . feed [ STR_ ] is not None :,"if value under the 'subtitle ' key of the self.feed dictionary is not None ,"
last [ NEXT ] = root [ PREV ] = cache [ key ] = link,"substitute link for value under the NEXT key of the last dictionary , for value under the PREV key of the root dictionary ,"
try :,"try ,"
TRANSLATOR COMMENT MARK = STR_,TRANSLATOR_COMMENT_MARK is a string 'Translators ' .
if value in self . empty values :,"if value is contained in self.empty_values ,"
def   iter   ( self ) :,define the method __iter__ with an argument self .
class InvalidCacheBackendError ( ImproperlyConfigured ) :,derive class InvalidCacheBackendError from the ImproperlyConfigured base class .
new result = [ ],new_result is an empty list .
self . second = None,self.second is None .
if request .  post parse error :,"if request._post_parse_error is true ,"
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
value = related . natural key ( ),"call the method related.natural_key , substitute the result for value ."
"super ( PyLibMCCache , self ) .   init   ( server , params , library = pylibmc , value not found exception = pylibmc . NotFound )","call method __init__ from the base class of the class PyLibMCCache with arguments : server , params ,"
"def get template sources ( self , template name , template dirs = None ) :","define the method get_template_sources with 3 arguments : self , template_name , template_dirs set to None ."
def  cache ( self ) :,define the method _cache with argument self .
pass,"do nothing ,"
def check errors ( fn ) :,define the function check_errors with argument fn .
"stderr . write ( STR_ % ( e .   class   .   name   , e ) )","created with arguments sys.stderr and self.style.ERROR . replace ' % s ' in string ' % s : % s ' with e.__class__.__name__ and e , respectively , write it to the stderr stream ."
"except ( TypeError , AttributeError ) :","if TypeError and AttributeError exceptions are caught ,"
return STR_ . join ( usage ),"join usage elements in a string separated by newline characters , return it ."
for finder in sys . meta path :,"for every finder in sys.meta_path ,"
return None,return None .
except KeyError :,"if KeyError exception is caught ,"
field value = [ getInnerText ( k ) . strip ( ) for k in keys ],"call the function getInnerText with argument k , on the result call the method strip , for every k in keys , append the results to field_value list ."
"self . template cache [ key ] = ( template , None )","substitute a tuple with 2 elements : template and None , for self.find_template_cache dictionary value under the key key ."
self . validate ( out ),call the method self.validate with an argument out .
"def   init   ( self , callback ) :",define the method __init__ with 2 arguments : self and callback .
s = six . text type ( s ),"call the function six.text_type with s as an argument , substitute result for s ."
import datetime,import module datetime .
"return "" STR_ "" % ( self .   class   .   name   , self )","return string `` < % s : % s > '' , formated with self.__class__.__name__ and self ."
  str   = serialize headers,substitute serialize_headers for __str__ .
return view,"with the argument view , store the result in the view . return view"
else :,"if not ,"
os . makedirs ( directory ),call the function os.makedirs with argument directory .
"def lock ( f , flags ) :",define the function lock with arguments f and flags .
"def clean ( self , value ) :",define the method clean with arguments self and value .
lang code = request . COOKIES . get ( settings . LANGUAGE COOKIE NAME ),"get the value under the settings.LANGUAGE_COOKIE_NAME key of the request.COOKIES dictionary , substitute it for lang_code ."
self . active readers += t,increment self.active_readers by t .
loop dict [ STR_ ] = ( i == len values - NUM_ ),"if i is equal to len_values decremented by 1 , value under the 'last ' key of the loop_dict dictionary is boolean True , otherwise it is False ."
import calendar,import module calendar .
"def patch response headers ( response , cache timeout = None ) :","define the function patch_response_headers , with response and cache_timeout with None as default value , as arguments ."
self . addr =,self.addr is an empty string .
end -= NUM_,decrement end by one .
obj = Model ( ** data ),"obj is an instance of Model class , created with an unpacked dictionary data as argument ."
"def  reverse with prefix ( self , lookup view ,  prefix , * args , ** kwargs ) :","define the method _reverse_with_prefix with arguments self , lookup_view , _prefix , unpacked list args and unpacked dictionary kwargs ."
if show traceback :,"if show_traceback is true ,"
output . append ( STR_ ),append string ' < /select > ' to output .
if self . verbosity >= NUM_ :,"and returns x striped of the surrounding whitespaces , extend the extra_files with the mapped list . if self.verbosity is greater or equal to integer 2 ,"
return potfiles,return potfiles .
value =,value is an empty string .
if nodelist . get nodes by type ( ExtendsNode ) :,"call the method nodelist.get_nodes_by_type with an argument ExtendsNode , if it evaluates to true ,"
from django . db . migrations . state import ProjectState,from django.db.migrations.state import ProjectState into default name space .
return self .  regex,return self._regex .
pass,do nothing .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
keys = n . getElementsByTagName ( STR_ ),"call the method n.getElementsByTagName with string 'natural ' as argument , substitute result for keys ."
if not ip str . split ( STR_ ) [ - NUM_ ] == hextet :,"split ip_str by ' : ' , if last element of the result is not equal to hextet ."
return False,return boolean False .
try :,"try ,"
loaders = [ ],loaders is an empty list .
"signature = base64 hmac ( self . salt + STR_ , value , self . key )","call the function base64_hmac with 3 arguments : string 'signer ' appended to self.salt , value and self.key , substitute the result for signature ."
from django . utils . encoding import force str,from django.utils.encoding import force_st into default name space .
if confirm == STR_ :,"if confirm equals string 'yes ' ,"
def addslashes ( value ) :,define the function addslashes with an argument value .
if self . merge and not conflicts :,"with name_str , use it as an argument to throw an CommandError exception . if self.merge is true and conflicts is false ,"
attrvalue = None,set attrvalue to None .
def to locale ( language ) :,define the function to_locale with an argument language .
"return value . replace ( STR_ \ \ \ \ STR_ "" STR_ "" "" , ""\\'"" )
","replace all occurrences of '\\ ' with '\\\\ ' in value , replace all occurrences of ' '' ' with '\\ '' ' in the previous result ,"
if token . contents == else :,"if token.contents equals string 'else ' ,"
"parser . add argument ( STR_ , nargs = STR_ , help = STR_ )","call the method parser.add_argument with 3 arguments : string 'directory ' , nargs set to ' ? ' and help set to string 'Name of the application or project . ' ."
state = tok . next,substitute tok.next for state .
"except ( ValueError , TypeError ) :","if ValueError or TypeError are caught ,"
@ property,"called with an argument final_attrs , return the result . property decorator ,"
if ch in STR_ :,"if ch is contained in string '* ? + ' ,"
"def module has submodule ( package , module name ) :",define the function module_has_submodule with 2 arguments : package and module_name .
" itervalues = "" STR_ """,_iterkeys is a string `` iterkeys '' .
"raise CommandError ( "" STR_ "" "" STR_ "" "" STR_ "" % app name )",raise an CommandError exception with an argument string `` % r conflicts with the name of an existing Python module and can not be used ``
self . path info = path info,substitute path_info for self.path_info .
if i >= NUM_ :,"if i is greater or equal to integer 0 ,"
os . unlink ( work file ),call the function os.unlink with an argument work_file .
current expires = typecast timestamp ( str ( current expires ) ),"convert current_expires to a string , use it as the argument for the call to the function typecast_timestamp , substitute the result for current_expires ."
"handler . addQuickElement ( "" STR_ "" , "" "" , { "" STR_ "" : "" STR_ "" , "" STR_ "" : self . feed [ STR_ ] } )","call the method handler.addQuickElement with 3 arguments : string 'link ' , an empty string and a dictionary with 2 entries :"
if self . verbosity >= NUM_  and not fixture files in dir :,"if self.verbosity is greater or equals integer 2 and fixture_files_in_dir is false ,"
style . ERROR OUTPUT = style . ERROR,substitute style.ERROR for style.ERROR_OUTPUT .
if attrs :,"if attrs is true ,"
"for k , list  in self . lists ( ) :","dictionary containing element v for k. for every k and list_ in return value of the method self.lists ,"
"choices . in sert ( NUM_ , none value )",insert none_value at the beginning of the choices list .
return self .  namespace dict [ language code ],return the value under the language_code key of the self._namespace_dict dictionary .
closed = property (  get closed ),closed is a property object with _get_closed as a getter method .
else :,"if not ,"
"def add prefix ( self , field name ) :",define the method add_prefix with 2 arguments : self and field_name .
pass,do nothing .
"def add arguments ( self , parser ) :",define the method add_arguments with arguments self and parser .
middle = middle [ len ( opening ) : ],"substitute elements of middle from length of opening index to the end , for middle ."
"def render ( self , context ) :",and unpacked dictionary kwargs . define the method render with 2 arguments self and context .
if fake :,"if fake is true ,"
if self . current token is not EndToken :,"if self.current_token is not EndToken ,"
def get current timezone name ( ) :,define the function get_current_timezone_name .
try :,"try ,"
continue,skip this loop execution .
else :,"if not ,"
return   ( STR_ ),"call the function _ with an argument string 'PM ' , return the result ."
except KeyError as key :,"if KeyError , renamed to key , exception is caught ,"
alternative subtype = STR_,alternative_subtype is a string 'alternative ' .
"def  prepare data ( self , data ) :",define the method _prepare_data with 2 arguments : self and data .
if set ( kwargs . keys ( ) ) | set ( defaults . keys ( ) ) ! = set ( params ) | set ( defaults . keys ( ) ) | set ( prefix args ) :,if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix
"for char in self . add truncation text ( , truncate ) :","for every char in result of the self.add_truncation_text , called with 2 arguments : an empty string and truncate ."
"msgs = msgs . replace ( STR_ , STR_ )","replace every occurrence of string 'charset=CHARSET ' for string 'charset=UTF-8 ' in msgs , substitute the result for msgs ."
else :,"if not ,"
"values = dict ( ( key , val . resolve ( context ) ) for key , val in six . iteritems ( self . extra context ) )","values is an dictionary created with result of the method val.resolve called with an argument context , for key ,"
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'title ' and value under the 'title ' key of the self.feed dictionary .
old handler = None,old_handler is None .
"fname = self .  key to file ( key , version )","call the function self._key_to_file with key and version as arguments , substitute it for fname ."
bits = iter ( smart split ( self . contents ) ),"call the function smart_split with an argument self.contents , substitute the result converted to an iterable for bits ."
def make middleware decorator ( middleware class ) :,define the function make_middleware_decorator with an argument middleware_class .
"six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : ImproperlyConfigured , ImproperlyConfigured ( msg ) and third element of return value of the function sys.exc_info ."
"if options [ STR_ ] in ( STR_ , STR_ ) :","if value under the 'method ' key of the options dictionary equals to string 'perfork ' or 'fork ' ,"
class ConvertingList ( list ) :,derive the class ConvertingList from list base class .
else :,"if not ,"
for attr in  moved attributes :,"with different 3 string arguments , the others are results of the call to the function MovedModule called with 3 string arguments . for every attr in _moved_attributes ,"
"def linebreaksbr ( value , autoescape = None ) :",define the function linebreaksbr with 2 arguments value and autoescape set to None .
else :,"called with 2 arguments : singular and trimmed and result of the function join_tokens called with 2 arguments : plural and trimmed , write the result to out . if not ,"
"  version   = "" STR_ """,__version__ is a string `` 1.6.1 '' .
"def add arguments ( self , parser ) :",define the method with self class instance and parser as arguments .
return str ( self ),convert self into a string and return it .
"value = values . get ( value . lower ( ) , value )","get the value of the values dictionary under the value converted to lowercase key , substitute it for value , if the key doesnt exists ,"
self . attrs = { },self.attrs is an empty dictionary .
try :,"try ,"
if secure :,"if secure is true ,"
"def  set choices ( self , value ) :",define the method _set_choices with arguments self and value .
return etags,"string 'unicode_escape ' , substitute the list of results for etags . return etags ."
match = None,match is None .
obj = copy . copy ( self ),"call the method copy.copy , substitute the result for obj ."
if self .  count is None :,"if self._count is None ,"
class DateField ( BaseTemporalField ) :,derive the class DateField from the base class BaseTemporalField class .
class DebugParser ( Parser ) :,derive the class DebugParser from the Parser base class .
"if self . flags and not is in stance ( self . regex , six . string types ) :","if self.flags is true and self.regex is not an instance of a six.string_types type ,"
from django . core . management . templates import TemplateCommand,from django.core.management.templates import TemplateCommand into default name space .
import sys,import module sys .
self . help text = help text,substitute help_text for self.help_text .
request middleware . append ( mw instance . process request ),append mw_instance.process_request at the end of request_middleware .
args = [ sys . executable ] + [ STR_ % o for o in sys . warnoptions ] + sys . argv,"in string '-W % s ' replace ' % s ' with o for every o in sys.warnoptions , put the result into a list , append the list to a list containing sys.executable , append sys.argv to the end of the resulting list , substitute the result for args ."
pending references = { },pending_references is a empty dictionary .
"attrs . setdefault ( STR_ , STR_ )","if 'step ' attribute of attrs dictionary does not exists , set it to to string 'any ' ."
class TypedChoiceField ( ChoiceField ) :,derive the class TypedChoiceField from the base class ChoiceField class .
return self .  queryset,return self._queryset .
else :,"if not ,"
"def has key ( self , key , version = None ) :","define the method has_key with self class instance , key and version defaulting to None as arguments ."
else :,"if not ,"
"pickled = pickle . dumps ( value , pickle . HIGHEST PROTOCOL )","call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments , substitute the result for pickled ."
self . context = context,substitute context for self.context .
res = in stance .   dict   [ self . name ] = self . func ( in stance ),"call the function self.func with an argument instance , substitute the result for res and value under the self.name key of the instance.__dict__ dictionary ."
ctx . update ( force bytes ( value ) ),"call function force_bytes with value as argument , use the result to as the result for the call to the methgod ctx.update ."
if not using sysrandom :,"if using_sysrandom is false ,"
"eol message = message . replace ( str ( STR_ ) , str ( STR_ ) ) . replace ( str ( STR_ ) , str ( STR_ ) )","replace every occurrence of string '\r\n ' in message with '\n ' , replace every occurrence of string '\r ' ,"
return mark safe ( contents ),"call the function mark_safe with an argument contents , return the result ."
"def   call   ( self , value ) :",define the method __call__ with arguments self and value .
return sign + in t part + dec part,"sum sign , int_part and dec_part , return the result ."
result = middleware . process request ( request ),"call the method middleware.process_request with an argument request , substitute the result for result ."
return locale [ : p ] . lower ( ) + - + locale [ p + NUM_ : ] . lower ( ),"convert fist p elements of locale to lowercase , append ' _ ' to it ,"
else :,"if not ,"
else :,"if not ,"
for cat in item [ STR_ ] :,"`` enclosure '' for 'rel ' , field url of value under the `` enclosure '' key of item dictionary for 'href ' , field length of value under the `` enclosure '' key of item dictionary for 'length ' , and field mime_type of value under the `` enclosure '' key of item dictionary for 'type ' . for every cat in value under 'categories ' key of item dictionary ,"
class SelectDateWidget ( Widget ) :,derive the class SelectDateWidget for the Widget base class .
"if not hasattr ( callback , STR_ ) :","if callback doesnt have '__name__ ' attribute ,"
"return cls ( date . year , date . month , date . day , time . hour , time . minute , time . second , time . microsecond , time . tzinfo )","call the function cls with 8 arguments : date.year , date.month , date.day , time.hour , time.minute , time.second , time.microsecond ,"
"self . path , self . match , self . recursive = path , match , recursive","allow_files set to boolean True , allow_folders set to boolean False , required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , unpacked list args , unpacked dictionary kwargs . substitute path , match and recursive for self.path , self.match and self.recursive ."
return True,return boolean True .
"raise base . SerializationError ( "" STR_ "" % type ( obj ) )","raise an base.SerializationError exception with argument string `` Non-model object ( % s ) encountered during serialization '' ,"
from django . conf import settings,from django.conf import settings into default name space .
return True,return boolean True .
from django . db . migrations . loader import MigrationLoader,from django.db.migrations.loader import MigrationLoader into default name space .
"if is in stance ( choice label , ( tuple , list ) ) :","if choice_label is an instance of tuple or list ,"
field params = OrderedDict ( ),field_params is an instance of a class OrderedDict .
"args = [ self . name , self . value , self . attrs ]","args is an list with 3 initial elements self.name , self.value and self.attrs ."
if six . PY2 :,"if six.PY2 is true ,"
return self .   language,return self.__language .
self . xgettext options = self . xgettext options [ : ] + [ STR_ ],append list containing string ' -- no-location ' to self.xgettext_options .
"s = s . replace ( STR_ \ \ \ \  )
",replace every occurrence of '\\ ' in s with '\\\\ ' .
"FASTCGI OPTIONS = { STR_ : STR_ , STR_ : None , STR_ : None , STR_ : None , STR_ : STR_ , STR_ : None , STR_ : / , STR_ : None , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : None , STR_ : None , STR_ : None , STR_ : None , }","FASTCGI_OPTIONS is a dictionary containing 16 initial entries : 'fcgi ' for 'protocol ' , None for 'host ' , None for 'port ' ,"
self .  callback strs . add ( lookup str ),call the method self._callback_strs.add with an argument lookup_str .
return fp . getvalue ( ),"call the method fp.getvalue , return the result ."
cc delim re = re . compile ( r STR_ ),"compile regular expression based on the string '\s* , \s* ' and assign the result to cc_delim_re ."
""""""" """"""",doctring
sub match dict . update ( sub match . kwargs ),call the method sub_match_dict.update with an argument sub_match.kwargs .
from django . core . management import call command,from django.core.management import call_command into default name space .
return json . loads ( data . decode ( STR_ ) ),"call the data.decode method with a string 'latin-1 ' as an argument , use the result as an argument for the call to the json.load function , return the result ."
from django . utils . six . moves . urllib . parse import quote,from django.utils.six.moves.urllib.parse import quote into default name space .
if app == STR_ :,"if app equals a string 'django.core ' ,"
return self .  app dict [ language code ],return the value under the language_code key of the self._app_dict dictionary .
fs encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( ),"call the function sys.getfilesystemencoding , if it evaluates to true , substitute the result for fs_encoding ,"
else :,"if not ,"
d = d [ idx ],substitute value under idx key of dictionary d for d .
for site in sites :,"for every site in sites ,"
def   prepare class   ( cls ) :,define the method __prepare_class__ with an argument self .
"self . configure logger ( name , loggers [ name ] )",call the method self.configure_logger with 2 arguments : name and value under loggers dictionary key name .
self .  callback strs . add ( pattern .  callback str ),call the method self._callback_strs.add with an argument pattern._callback_str .
app dirs = [ ],app_dirs is an empty list .
namelist = self .  archive . namelist ( ),"call the method self._archive.namelist , substitute the result for namelist ."
"def   new   ( cls , name , this bases , d ) :","define the method __new__ with 4 arguments : cls , name , this_bases and d ."
"def   exit   ( self , exc , value , tb ) :","define method __exit__ with self , exc , value and tb as the arguments ."
"check for migrations ( app config , connection )",call the method check_for_migrations with arguments : app_config and connection .
if self .  encoding is None :,"if self._encoding is None ,"
 localtime = LocalTimezone ( ),_localtime is an instance of LocalTimezone class .
timeout = self . get backend timeout ( timeout ),"call the method self.get_backend_timeout with argument timeout , substitute the result for timeout ."
"sub match dict = dict ( match . groupdict ( ) , ** self . default kwargs )",sub_match_dict is a dictionary created from self.default_kwargs dictionary using mapping function match.groupdict .
from django . utils . datastructures import MultiValueDict,from django.utils.datastructures import MultiValueDict into default name space .
yield STR_,yield string 'month ' as an return value of the generator .
"return force text ( s , encoding , strings only , errors )","return the result of the call to the function force_text , with s , encoding , string_only and errors as arguments ."
"def is  safe url ( url , host = None ) :",define the function is_safe_url with 2 arguments url and host set to None .
"self . stdout . write ( "" STR_ "" % new path )","replace ' % s ' in string `` Creating % s\n '' with new_path , write it to the self.stdout stream ."
self . msgattrib options = self . msgattrib options [ : ] + [ STR_ ],append list containing string ' -- no-location ' to self.msgattrib_options .
"widget = form .  meta . widgets . get ( self .  pk field . name , HiddenInput )","get the value under self._pk_field.name key of form._meta.widgets dictionary , if it exists substitute it for widget , if not ,"
"os . dup2 ( si . fileno ( ) , sys . stdin . fileno ( ) )",call the method os.dup2 with 2 arguments : result of the method si.fileno and result of the method sys.stdin.fileno .
else :,"if not ,"
"with open ( path , STR_ ) as f :","open file named path in 'rb ' mode , with file descriptor as f ,"
self . saved forms = [ ],self.saved_forms is an empty list .
class Tok ( object ) :,derive the class Tok from the object base class .
"return STR_ % ( y , m , d )","substitute ' % s ' in string ' % s- % s- % s ' with y , m and d , return the result ."
primary keys = [ ],primary_keys is an empty list .
value = field . clean ( value ),"call the method field.clean with an argument value , substitute the result for value ."
"self . stdout . write ( "" STR_ "" )",write string `` Installing indexes ... \n '' to the standard output .
"if not is in stance ( urlconf name , six . string types ) :","if urlconf_name is not an instance of six.string_types class ,"
break,break the execution of the smallest enclosing loop .
"with open ( old file name , STR_ ) as old file :","open file old_file_name in read bytes mode , with file descriptor as f ,"
raise NotImplementedError ( STR_ ),raise a NotImplementedError with an argument string
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute it for key ."
"from django . views . debug import ExceptionReporter , get exception reporter filter",from django.views.debug import ExceptionReporter and get_exception_reporter_filter into default name space .
new matches = normalize ( parent pat + pat ),"call the method normalize with sum of parent_pat and pat as an argument , substitute the result for new_matches ."
time . sleep ( NUM_ ),call the function time.sleep with argument integer 1 .
class DictWrapper ( dict ) :,derive the class DictWrapper from the dict base class .
def callback ( self ) :,define the method callback with an argument self .
headerlist . append ( STR_ + header ),"append header to the string 'HTTP_ ' , append the result to the list headerlist ."
import warnings,import module warnings .
"self . add handlers ( logger , handlers )",call the method self.add_handlers with 2 arguments : logger and handlers .
if not response . has header ( STR_ ) :,"if return value of function response.has_header with string 'Vary ' as argument is boolean False ,"
"setattr ( cls , opname , opfunc )",set opname attribute of cls object to opfunc .
widget = CheckboxInput,substitute CheckboxInput for widget .
self . app label = STR_,self.app_label is a string 'django_cache ' .
return result,return result .
del self .  cache [ key ],delete the value under the key key of self._cache dictionary .
for location in format locations :,"for every location in format_locations ,"
"for name , tok in lexer . lex ( js ) :","call the method lexer.lex with an arguments js , for every name and tok in the result ,"
if display num errors :,"if display_num_errors is true ,"
"def extract ( self , to path ) :",define the method extract with 2 arguments self and to_path .
filemsg = STR_ % or igin,"filemsg is a string 'file % s , ' , where ' % s ' is replaced with origin ."
return self . cleaned data,return self.cleaned_data .
from django . core . exceptions import ImproperlyConfigured,from django.core.exceptions import ImproperlyConfigured into default name space .
"if next item and is in stance ( next item , ( list , tuple ) ) :","if next_item is true and next_item is an instance of list or tuple type ,"
from django . utils . http import urlquote,and remove_tags . from django.utils.http import urlquote into default name space .
output = force text ( output ),"call the function force_text with an argument output , substitute the result for output ."
"def main ( main func , args = None , kwargs = None ) :","define the function main , with main_func , args defaulting to None and kwargs defaulting to None as arguments ."
except InvalidTemplateLibrary as e :,"if InvalidTemplateLibrary , renamed to e , exception is caught ,"
hlen = digest ( ) . digest size,"call the function digest , substitute the filed digest_size of the result for hlen ."
post = STR_,post is a string ' < could not parse > ' .
"if contains ( elt , in st ) :","call the function contains with 2 arguments : elt and inst , if it evaluates to true ,"
return False,return boolean False .
self [ key ] = result,substitute result for self dictionary under key key .
text args = [ force text ( v ) for v in args ],"call the function force_text with an argument v , for every v in args , put the results in a text_args list ."
end = len ( s ),substitute length of s for end .
"item = { STR_ : to unicode ( title ) , STR_ : iri to uri ( link ) , STR_ : to unicode ( description ) , STR_ : to unicode ( author email ) , STR_ : to unicode ( author name ) , STR_ : iri to uri ( author link ) , STR_ : pubdate , STR_ : updateddate , STR_ : to unicode ( comments ) , STR_ : to unicode ( unique id ) , STR_ : unique id is permalink , STR_ : enclosure , STR_ : categories or ( ) , STR_ : to unicode ( item copyright ) , STR_ : ttl , }","item is a dictionary with 15 initial entries : result of the function to_unicode called with an argument title for 'title ' ,"
try :,"try ,"
"file  ,   ,   = imp . find module ( module name , [ entry ] )","call the method imp.find_module with 2 arguments : module_name and list containing element entry , assign the result to file_ , _ ,"
"new class = super ( ModelFormMetaclass , mcs ) .   new   ( mcs , name , bases , attrs )","if not formfield_callback is None . call the method __new__ from the base class of the class ModelFormMetaclass , with 4 arguments : mcs , name , bases and attrs ,"
self . xgettext options = self . xgettext options [ : ] + [ STR_ ],append list containing string ' -- no-wrap ' to self.xgettext_options .
except AttributeError :,"if AttributeError exception is caught ,"
for x in arg . split ( STR_ ) :,"split arg by ' : ' , for every x in result ,"
" func globals = "" STR_ """,_func_globals is a string `` __globals__ '' .
return p . image . size,return size of the image that was fed to the parser p .
"if hasattr (  active , "" STR_ "" ) :","if _active has an attribute `` value '' ,"
@ python 2 unicode compatible,"decorator python_2_unicode_compatible ,"
"def splitext ( self , the path ) :",define the method splitext with arguments self and the_path .
if use base manager :,"if use_base_manager is true ,"
"return "" STR_ """,return a string `` UTC '' .
from django . conf import settings,from django.conf import settings into default name space .
"from django . http . multipartparser import MultiPartParser , MultiPartParserError",from django.http.multipartparser import MultiPartParser and MultiPartParserError into default name space .
"values = { STR_ : True , STR_ : False }",values is an dictionary with 2 arguments : boolean False for 'false ' and boolean True for 'true ' .
del self .  expire info [ key ],delete the value under the key key of the self._expire_info dictionary .
"def add arguments ( self , parser ) :",define the method add_arguments with arguments self and parser .
basedirs = [ os . path . abspath ( basedir ) for basedir in basedirs if os . path . is dir ( basedir ) ],"replace all the elements of the basedir list by its corresponding absolute directory path , only is that directory exists ."
self . close ( ),call the self.close method .
"def   init   ( self , * args , ** kwargs ) :","define the method __init__ with arguments : self , unpacked list args and unpacked dictionary kwargs ."
return result,return result .
except IndexError :,"if IndexError exception is caught ,"
"def id for label ( self , id  ) :",define the method id_for_label with 2 arguments : self and id_ .
arg = args [ NUM_ ],substitute first element of args for arg .
return . join ( force text ( s ) for s in strings ),"for every s in strings , call the function force_text with an argument s , join the results in a string , return the result ."
from django . utils . translation import trans real as trans,from django.utils.translation import trans_real as trans .
label = STR_,label is a string 'label '
break,break from the loop execution .
"yield "" STR_ """,yield string `` # Also note : You 'll have to insert the output of 'django-admin.py sqlcustom [ app_label ] ' '' as the result .
class URLValidator ( RegexValidator ) :,derive the class URLValidator form the RegexValidator base class .
"def is  url ( self , template ) :",define the method is_url with arguments self and template .
ch2 = None,ch2 is None .
for ldir in dirs :,"for every ldir in dirs ,"
self . nodelist = nodelist,substitute nodelist for self.nodelist .
return not bool ( self . option list ),"convert self.option_list into a boolean , return the inverted value ."
return self . data . hour,return self.data.hour .
pass,do nothing .
"extra files . extend ( map ( lambda x : x . strip ( ) , file . split ( STR_ ) ) )","split file by ' , ' character , apply on its every element a lambda function which takes an argument x ,"
if item [ STR_ ] is not None :,"and dictionary with an entry : 'html ' for 'type ' . if value under the 'enclosure ' key of the item dictionary is not None ,"
if settings . DEBUG PROPAGATE EXCEPTIONS :,"if settings.DEBUG_PROPAGATE_EXCEPTIONS is True ,"
"def import module ( name , package = None ) :",define the function import_module with 3 arguments : name and package set to None .
"return date ( datetime . now ( tz = tzinfo ) , self . format string )","call the function date with 2 arguments : result of the call to the function datetime.now with an argument tz set to tzinfo ,"
"def format html join ( sep , format string , args generator ) :","use the result as an argument for the call to the function mark_safe , return the result . define the function format_html_join with 3 arguments : sep , format_string and args_generator ."
if settings . configured :,"if settings.configured is true ,"
"key = self . make key ( key , version = version )","call the method self.make_key Whit key and version set to version as arguments , substitute the result for key ."
return final path,where ' % s ' is replaced with final_path and base_path . return final_path .
from django . conf import settings,from django.conf import settings into default name space .
params = [ source [ NUM_ ] ],params is a list with second element of source as a element .
return t [ NUM_ ],return first element of t .
self [ k ] = v,substitute v for value under the k key of self dictionary .
try :,"try ,"
class Command ( BaseCommand ) :,derive the class Command from the BaseCommands base class .
def filepath to uri ( path ) :,"and with safe set to bytes string `` / # % [ ] = : ; $ & ( ) + , ! ? * @ '~ '' , return the result . define function filepath_to_uri with path as the argument ."
self . auto id = auto id,and substitute the result for self.prefix . substitute auto_id for self.auto_id .
else :,"if not ,"
else :,"if not ,"
option = STR_,option is a string ' -- testrunner= ' .
"elif hasattr ( s , STR_ ) :","otherwise , if s has an attribute '__unicode__ ' ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
raise TypeError ( STR_ STR_ ),raise an TypeError exception with an argument string 'In order to allow non-dict objects to be serialized set the safe parameter to False ' .
in itial value = in itial if in itial is not None else,"substitute initial for initial_value , if initial is not None , if not , initial_value is an empty string ."
"for matches , pat , defaults in pattern . reverse dict . getlist ( name ) :","for every matches , pat and defaults in return value of the method pattern.reverse_dict.getlist called with an argument name ,"
if self . takes context :,"if self.takes_context is true ,"
count = itertools . count ( NUM_ ),"call the itertools.count function with argument integer 1 , substitute the result for count ."
try :,"try ,"
if self .  should delete form ( form ) :,"call the method self._should_delete_form with an argument , if it evaluates to true ,"
for error in self . as data ( ) :,"call the method self.as_data , for every error in the result ."
streaming = True,streaming is boolean True .
usage = sorted ( get commands ( ) . keys ( ) ),"call the function get_commands , call the method keys on the result , substitute sorted result for usage ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"from django . db import connections , DEFAULT DB ALIAS",from django.db import connections and DEFAULT_DB_ALIAS into default name space .
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
else :,"if not ,"
"space = unicode ( "" "" )",convert whitespace character to unicode and substitute the result for space .
def content ( self ) :,define the method content with an argument self .
value =,value is an empty string .
"def render ( self , name , value , attrs = None ) :","define the method render with 4 arguments : self , name , value and attrs set to None ."
"super ( HttpResponseRedirectBase , self ) .   init   ( * args , ** kwargs )","where ' % s ' is replaced with parsed.scheme . call the __init__ method from the base class of the HttpResponseRedirectBase class , called with arguments : unpacked list args ,"
match = ( pattern == * or pattern . startswith ( STR_ ) and ( host . endswith ( pattern ) or host == pattern [ NUM_ : ] ) or pattern == host ),"if pattern equals '* ' or pattern starts with ' . ' or pattern equals host , and only if :"
return id ,return id_ .
return guessed path,return guessed_path .
self .  body = self . read ( ),"call the method self.read , substitute the result or self._body ."
pass,do nothing .
if best doublecolon end == len ( hextets ) :,"if best_doublecolon_end equals length of hextets ,"
smart str = smart text,substitute smart_text for smart_str .
"def render to string ( template name , dictionary = None , context instance = None , dirs = None ) :","define the function render_to_string with 4 arguments : template_name , dictionary set to None , context_instance set to None and dirs set to None ."
signals = STR_,signal is a string 'signals '
def next char ( in put iter ) :,define the function next_char with an argument input_iter .
"from django . utils . html import format html , format html join , escape","from django.utils.html import format_html , format_html_join and escape into default name space ."
else :,"if not ,"
if not template dirs :,"if template_dirs is false ,"
"return type ( form ) ( class name , ( form , ) , form class attrs )","get the type of form object , return an instance of resulting class created with 3 arguments : class_name , tuple with an element form ,"
for module in templatetags modules :,"for every module in templatetags_modules ,"
raise NotImplementedError ( STR_ ),raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a receive_data_chunk ( ) method ' .
from django . utils . six import StringIO,from django.utils.six import StringIO into default name space .
endbmatch = endblock re . match ( t . contents ),"call the function endblock_re.match with an argument t.contents , substitute the result for endbmatch ."
return repr ( dict ( self ) ),return the printable representation of the self object converted to a dictionary .
else :,"if not ,"
"raise self . error ( token , "" STR_ "" % ( command , get text list ( [ "" STR_ "" % p for p in parse until ] ) ) )","raise an self.error exception with 2 arguments : token and string `` Invalid block tag : ' % s ' , expected % s '' ,"
"return "" STR_ """,return an string `` < IfNode > '' .
else :,"and csrf_token , return the result . if not ,"
return value,return value .
"def urlize ( value , autoescape = None ) :",define the function urlize with 2 arguments value and autoescape set to None .
return value [ NUM_ ],return first element of value .
import code,import code .
if protocol ! = STR_ and unpack ipv4 :,"if protocol is not equal to string 'both ' and unpack_ipv4 is true ,"
"or ig vars . pop ( STR_ , None )",remove '__weakref__ ' key from the orig_vars dictionary .
if value in self . empty values :,"if value is contained in self.empty_values ,"
if threading :,"if threading is true ,"
self .  input data = in put data,substitute input_data for self._input_data .
"return func ( * self .   args , ** self .   kw )","call the function func with 2 arguments : unpacked list self.__args and unpacked dictionary self.__kw , return the result ."
if app config . models module is None :,"if app_config.models_module is None ,"
return True,return boolean True .
memoryview = buffer,substitute buffer for memoryview .
try :,"try ,"
in put type = STR_,input_type is a string 'file ' .
return not self .  is expired ( f ),"call the method self._is_expired with argument f , invert the boolean result and return it ."
if tag not in TemplateTagNode . mapping :,"if tag is not contained in TemplateTagNode.mapping ,"
"mail = EmailMultiAlternatives ( subject , message , from email , recipient list , connection = connection )","call the EmailMultiAlternatives function with , subject , message , from_email , recipient_list and connection set to connection , as arguments , assign the result to mail ."
"def render ( self , name , value , attrs = None ) :","define the method render with 4 arguments : self , name , value and attrs set to None ."
base url = settings . MEDIA URL,substitute settings.MEDIA_URL for base_url .
in ternal use only = False,internal_use_only is a boolean False .
if auto id and STR_ not in attrs and STR_ not in widget . attrs :,"if auto_id is true and 'id ' is not contained in attrs and 'id ' is not contained in widget.attrs ,"
ttl = force text ( ttl ),"call the function force_text with an argument ttl , substitute the result for ttl ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid ' key of the self.error_messages dictionary and code set to 'invalid ' .
"def build instance ( Model , data , db ) :","define the function build_instance with 3 arguments : Model , data and db ."
if code changed ( ) :,"if return value of the code_changed function is true ,"
vary on = ( ),vary_on is an empty tuple .
for path in collect :,"for every path in collect ,"
def  get validation exclusions ( self ) :,define the method _get_validation_exclusions with an argument self .
bits = bits [ : - NUM_ ],substitute bits without last two elements for bits .
start = non capturing groups . pop ( ),"remove first element from non_capturing_groups , substitute it for start ."
"@ register . filter ( expects localtime = True , is  safe = False )",decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False .
return sorted ( all files ),sort all_files and return it .
return parser,return parser
except NoReverseMatch :,"substitute the result for url . if NoReverseMatch exception is caught ,"
"def to python ( self , value ) :",define the method to_python with arguments self and value .
pass,do nothing .
raise,raise an exception .
self . connection . ehlo ( ),call the method self.connection.ehlo .
if bf . is  hidden :,"called with an argument error , for every error in bf.errors , substitute the result for bf_errors . if bf.is_hidden is true ,"
table = connections [ db ] . ops . quote name ( self .  table ),"call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary , substitute the result for table ."
selected choices = set ( force text ( v ) for v in selected choices ),"call the function force_text with an argument v , for every v in selected_choices , add results to a set ,"
"return STR_ % ( self .   class   .   name   , dictreprs )",return a string ' % s ( % s ) ' formated with self.__class__.__name__ and dictreprs .
"return TimestampSigner ( key , salt = salt ) . sign ( base64d )","instantiate the TimestampSigner object with arguments key and salt set to salt , call its method sign with an argument base64 , return it ."
if has old option :,"if has_old_option is true ,"
return obj dict,return obj_dict .
p = locale . find ( STR_ ),"find first index of occurrence of character '- ' in locale , substitute it for p ."
opts = in stance .  meta,substitute instance._meta for opts .
"msgs , errors , status = popen wrapper ( args )","substitute the result for args . call the function popen_wrapper with an argument args , assign the result to msgs , errors and status , respectively ."
def   enter   ( self ) :,define __enter__ method with self as the argument .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid_date ' key of the self.error_messages dictionary and code set to string 'invalid_date ' .
self . id = id,substitute id for self.id .
self . options . update ( { STR_ : False } ),"call the method self.options.update with dictionary as an argument , containing 1 element : boolean False for 'use_decimal ' ."
return,return an empty string .
return [ ],return an empty list .
try :,"try ,"
@ python 2 unicode compatible,"python_2_unicode_compatible decorator ,"
"if is in stance ( rhs , SafeText ) :","if rhs is an instance of SafeText ,"
if STR_ in self . attrs :,"if 'id ' is contained in self.attrs ,"
translators comment start = None,translators_comment_start is None .
"self . xml . startElement ( "" STR_ "" , { "" STR_ "" : field . name , "" STR_ "" : field . rel .   class   .   name   , "" STR_ "" : smart text ( field . rel . to .  meta ) , } )","call the method self.xml.startElement with 2 arguments : string 'field ' and dictionary containing 3 entries : field.name for 'name ' ,"
else :,"if not ,"
self .  populate ( ),call the method self._populate .
"error msg = "" STR_ """,error_msg is a string `` Your TEMPLATE_DIRS setting is empty . Change it to point to at least one template directory . `` .
"def resolve variable ( path , context ) :",define the method resolve_variable with 2 arguments : path and context .
ip ( ),call the function ip .
"def pbkdf2 ( password , salt , iterations , dklen = NUM_ , digest = None ) :","define the function pbkdf2 with 5 arguments : password , salt , iterations , dklen set to integer 0 and digest set to None ."
"get format lazy = lazy ( get format , six . text type , list , tuple )","call the function lazy with 4 arguments : get_format , six.text_type , list and tuple , substitute the result for get_format_lazy ."
except KeyError :,"if KeyError exception is caught ,"
class  MovedItems (  LazyModule ) :,derive class _MovedItems from the _LazyModule base class .
class Command ( BaseCommand ) :,derive the class Command from the BaseCommand base class .
"return super ( SlugField , self ) . clean ( value )","call the clean method wiht value argument from the base class of the SlugField class , return the result ."
self .  post = QueryDict ( ),self._post is an instance of QueryDict class created with an empty string as argument .
try :,"binary or os.O_EXCL if allow_overwrite is boolean False , use the previous as the mode to open new_file_name file , assign the file descriptor to fd . try ,"
@ stringfilter,"decorator stringfilter ,"
"def  wrapped view ( request , * args , ** kwargs ) :","called with an argument view_func . define the function _wrapped_view with 3 arguments : request , unpacked list args and unpacked dictionary kwargs ."
validate ipv6 address ( value ),call the function validate_ipv6_address with an argument value .
confirm = STR_,confirm is a string 'yes ' .
"lineno comment map . setdefault ( t . lineno , [ ] ) . append ( t . contents )","call the method lineno_comment_map.setdefault with 2 arguments : t.lineno and an empty list , append t.contents to the result ."
"id  = final attrs . get ( STR_ , None )","substitute the result for final_attrs . get the value under the 'id ' key of final_attrs dictionary , substitute if for id_ if the key doesnt exists , id_ is None ."
config [ STR_ ] = self . as tuple ( config [ STR_ ] ),"call the method self.as_tuple with an argument value under 'mailhost ' key of config dictionary ,"
except AttributeError :,"if AttributeError exception is caught ,"
"parser . add argument ( STR_ , metavar = self . label , nargs = + )","call the method parser.add_argument with 3 arguments : string 'args ' , metavar set to self.label and nargs set to '+ ' ."
"HttpResponse . content . fset ( self , value )",call the method HttpResponse.content.fset with 2 arguments : self and value .
"name , ext = os . path . splitext ( name )","call the os.path.splitex with argument name , assign the result to name and ext , respectively ."
else :,"if not ,"
"for field , errors in self . error dict . items ( ) :","for every field , errors in self.error_dict.items method return value ,"
import sys,import module sys .
data = base64 . b64decode ( raw data ),"call the function base64.b64decode with an argument raw_data , substitute the result for data ."
mode = stat . S IMODE ( st . st mode ),"call the function stat.S_IMODE with argument st.st_mode , substitute the result for mode ."
try :,"try ,"
else :,"if not ,"
ext = self . splitext ( guessed filename ) [ NUM_ ],"call the method self.splitext with an argument guessed_filename , substitute the second element of the result for ext ."
language code = get language ( ),"call the method get_language , substitute the result for language_code ."
"if end not in ( "" > "" , "" STR_ "" ) :","if end is not a ' > ' or '/ > ' character ,"
from django . utils . module loading import import string,from django.utils.module_loading import import_string into default name space .
for field name in self . fields :,"error_class , label_suffix and empty_permitted . for every field_name in self.fields ,"
import django,import module django .
or iginal = UnicodeDecodeError .   str   ( self ),"call the method UnicodeDecodeError.__str__ , with self as the argument , substitute the result for original ."
from django . core . files . utils import FileProxyMixin,from django.core.files.utils import FileProxyMixin into default name space .
"def encoding ( self , value ) :",define the method encoding with arguments self and value .
from django . core . files import temp as tempfile,from django.core.files import temp as tempfile into default name space .
old style list = True,old_style_list is boolean True .
current = current [ bit ],substitute element at the bit index of current for current .
self . saved forms . append ( form ),append form to self.saved_forms .
import logging,import module logging .
if STR_ not in os . environ :,"if string 'DJANGO_AUTO_COMPLETE ' is not contained in os.environ ,"
tried = [ ],tried is an empty list .
else :,"with unpacked list value as an argument , return the pk field of the result . if not ,"
except KeyboardInterrupt :,"if KeyboardInterrupt exception is caught ,"
if CONTEXT SEPARATOR in result :,"if CONTEXT_SEPARATOR is contained in result ,"
"return func ( self .  wrapped , * args )",call the function func with 2 arguments : self._wrapped and unpacked list args .
"for x , y in zip ( val1 , val2 ) :","zip val1 and va2 into list of tuples , for every x and y in the result ,"
return STR_ . join ( statements ),"join statements into a string , separated by newlines , return it ."
renamed = False,renamed is boolean False .
"return [ widget . value from datadict ( data , files , name + STR_ % i ) for i , widget in enumerate ( self . widgets ) ]","for every i and widget in enumerated iterable self.widgets , call the function widget.value_from_datadict with 3 arguments : data ,"
"def  truncate html ( self , length , truncate , text , truncate len , words ) :","define the method _truncate_html with 6 arguments : self , length , truncate , text , truncate_len and words ."
if klass not in cls .   dispatch :,"if klass is not contained in cls.__dispatch ,"
"def   init   ( self , * args , ** kwargs ) :","define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
return self . id,return self.id .
return False,return boolean False .
os . remove ( old file name ),remove the old_file_name file .
from binascii import Error as BinasciiError,from binascii import Error as BinasciiError into default name space .
return False,return boolean True .
except KeyError :,"if KeyError exception is caught ,"
VARIABLE ATTRIBUTE SEPARATOR = STR_,VARIABLE_ATTRIBUTE_SEPARATOR is a string ' . ' .
return language [ : p ] . lower ( ) + STR_ + language [ p + NUM_ ] . upper ( ) + language [ p + NUM_ : ] . lower ( ),"convert fist p elements of language to lowercase , append ' _ ' to it ,"
"return val , encoded",return val and encoded as a tuple .
"elif is in stance ( o , decimal . Decimal ) :","otherwise if o is an instance of decimal.Decimal object ,"
if form in forms to delete :,"if form is contained in forms_to_delete ,"
"if is in stance ( expires , datetime . datetime ) :","if expires is an instance of datetime.datetime class ,"
extra classes = extra classes . split ( ),"split extra_classes into words , by whitespaces , substitute the result for extra_classes ."
"filters = config . pop ( STR_ , None )","remove config dictionary element under 'filter ' key , if it exists substitute it for filters , if not , filters is None ."
if i + NUM_ < len ( chunks ) :,"if i incremented by 1 is lesser than length of chunks ,"
for arg in list ( args ) + list ( six . itervalues ( kwargs ) ) :,"call the function six.itervalues with an argument kwargs , convert the result to a list and append it to a list containing args ,"
self .  num pages = NUM_,self._num_pages is a integer 0 .
self .  set regex ( regex ),unpacked dictionary kwargs . call the method self._set_regex with an argument regex .
"if not is in stance ( stream or string , ( bytes , six . string types ) ) :","if stream_or_string is not an instance of bytes or six.string_types ,"
def  get val ( ) :,define the function _get_val .
from django . core . serializers . python import Deserializer as PythonDeserializer,from django.core.serializers.python import Deserializer as PythonDeserializer into default name space .
"base , ext = os . path . splitext ( base )","call the method os.path.splitext with an argument base , substitute the result for base and ext , respectively ."
"new msg = ( "" STR_ "" "" STR_ "" "" STR_ "" "" STR_ "" "" STR_ "" "" STR_ "" ) % ( connection . settings dict [ STR_ ] , e )",new_msg is a tuple containing a string : `` Database % s could n't be flushed . Possible reasons : \n ''
"patch response headers ( response , cache timeout = - NUM_ )",call the function patch_response with response and cache_timeout decremented by integer 1 as arguments .
class PageNotAnInteger ( InvalidPage ) :,derive the class PageNotAnInteger from the InvalidPage base class .
else :,"covert to lowercase locale elements from ( p+1 ) -th index to the end , append it to the previous result , return it . if not ,"
"def add item elements ( self , handler , item ) :","define the method add_item_elements with 2 arguments , handler self and item ."
"raise CommandError ( "" STR_ "" )",raise an CommandError exception with an argument `` Database inspection is n't supported for the currently selected database backend . `` .
"cursor . execute ( connections [ db ] . ops . cache key culling sql ( ) % table , [ cull num ] )","evaluate the method connections [ db ] .ops.cache_key_culling_sql , evaluate the result by table modulus , call the method cursor.execute ,"
return ValidationError ( self . data ) . error list,"instantiate ValidationError class with an argument self.data , return its field error_list ."
if options :,"if options is true ,"
"in itial value = field . to python ( hidden widget . value from datadict ( self . data , self . files , in itial prefixed name ) )","call the method ( hidden_widget.value_from_datadict with 3 arguments : self.data , self.files and initial_prefixed_name ,"
self . object list = object list,substitute object_list for self.object_list .
if self . save as new :,"and unpacked dictionary kwargs , substitute the result for form . if self.save_as_new is true ,"
"parser . add argument ( STR_ , STR_ , dest = STR_ , help = STR_ STR_ STR_ , action = STR_ )","dest as a string 'all ' default as boolean False and help as a string 'Updates the message files for all existing locales. ' . call the method parser.add_argument with 5 arguments : string ' -- extension ' , string '-e ' , dest set to string 'extensions ' ,"
"from django . utils . datastructures import MultiValueDict , MergeDict",from django.utils.datastructures import MultiValueDict and MergeDict into default name space .
ULONG PTR = c int64,substitute c_int64 for ULONG_PTR .
"return super ( Info , self ) .   init   ( INFO , * args , ** kwargs )","call the __init__ method with 3 arguments : INFO , unpacked list args and unpacked dictionary kwargs from the base class of Info ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","call the method parser.add_argument with arguments : string ' -- database ' , action set to string 'store ' , dest set to string 'database ' ,"
class ContentNotRenderedError ( Exception ) :,derive the class ContentNotRenderedError from the Exception base class .
pk = self . data [ pk key ],and self.model._meta.pk.name . substitute the value under the pk_key key of the self.data dictionary for pk .
"def find command ( cmd , path = None , pathext = None ) :","define the function find_command with 3 arguments : cmd , path set to None and pathext set to None ."
"def default ( self , o ) :",define the method defalt with arguments self and o .
if settings . STATIC URL is None :,"if settings.STATIC_URL is None ,"
"super ( DictWrapper , self ) .   init   ( data )","call the method __init__ with an argument data , from the base class of the class DictWrapper ."
return mark safe ( STR_ . join ( output ) ),"join elements of output into a string with newline as separator , use it as an argument for the call to the function mark_safe , return it ."
def regex ( self ) :,define the method regex with an argument self .
"msgs = STR_ . join ( dropwhile ( len , msgs . split ( STR_ ) ) )","call the function dropwhile with 2 arguments : function len and msgs spit into parts at newlines , join the result into a string ,"
self . fail silently = fail silently,substitute fail_silently for self.fail_silently .
self .  closable objects . append ( value ),append value to the self._closable_objects list .
deactivate ( ),call the method deactivate .
"parser . add argument ( STR_ , help = STR_ )","call the method parser.add_argument with 2 arguments : string 'app_label ' ,"
from django . core . files import uploadhandler,from django.core.files import uploadhandler into default name space .
"for x , y in zip ( val1 , val2 ) :","zip val1 and va2 into list of tuples , for every x and y in the result ,"
"def chars ( self , num , truncate = None , html = False ) :","define the method chars with 4 arguments : self , num , truncate set to None , html set to boolean False ."
"def prepare value ( self , value ) :",define the method prepare_value with 2 arguments : self and value .
"if hasattr ( self . file , STR_ ) and hasattr ( self . file , STR_ ) :","if self.file has an attribute 'tell ' and an attribute 'seek ' ,"
"s = six . text type ( s , encoding , errors )","call the function six.text_type with s , encoding and errors as the arguments , substitute the result for s ."
def stringfilter ( func ) :,define the method stringfilter with an argument func .
"return import string ( path ) ( * args , ** kwargs )","call the import_string with arguments path , call the return function with arguments : unpacked list args and unpacked dictionary kwargs , return the result ."
class CsrfTokenNode ( Node ) :,derive the class CsrfTokenNode from Node base class .
raise MultiPartParserError ( STR_ % boundary ),raise an MultiPartParserError with an argument string 'Invalid boundary in multipart : % s ' is replaced with boundary .
return [ ],return an empty list .
return self . management form . cleaned data [ INITIAL FORM COUNT ],return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary .
module =  import module ( self . mod ),"call the function _import_module with an argument self.mod , substitute the result for module ."
else :,"if not ,"
"extension map = { STR_ : TarArchive , STR_ : TarArchive , STR_ : TarArchive , STR_ : TarArchive , STR_ : TarArchive , STR_ : ZipArchive , }","extension_map is a dictioanry with 6 initial elntries : TarArchive for '.tar ' , TarArchive for '.tar.bz2 ' , TarArchive for '.tar.gz ' ,"
elif len ( fks to parent ) == NUM_ :,"otherwise if length of fks_to_parent is zero ,"
"yield key , self [ key ]",yield key and value under key key of self dictionary .
"def   init   ( self , url , length , mime type ) :","define the method __init__ with 4 arguments : self , url , length and mime_type ."
"def simple tag ( self , func = None , takes context = None , name = None ) :","define the method simple_tag with 4 arguments : self , func and None , takes_context and None and name set to None ."
raise OverflowError ( STR_ ),raise an OverflowError exception with an argument string 'dklen too big ' .
token = self . next token ( ),"call the method self.next_token , substitute the result for token ."
cache = dict ( ),cache is an empty dictionary .
"assert name , "" STR_ """,if name is boolean False raise an assert error with message string `` The name argument is not allowed to be empty . `` .
loader = MigrationLoader ( connection ),"loader is an instance of MigrationLoader class , created with an argument connection ."
"def add arguments ( self , parser ) :",define the method add_arguments with 2 arguments self and parser .
if not self . render value :,"if self.render_value is false ,"
def slugify ( value ) :,define the function slugify with an argument value .
if not want unicode :,"if want_unicode is false ,"
if app config . models module is None :,"if app_config.models_module is None ,"
if self . field . cache choices :,"if self.field.cache_choices is true ,"
if result and ( mode == STR_ or ( mode == STR_ and current expires < now ) ) :,"if mode equals to string 'add ' and current_expires is lesser than now , or mode equals to string 'set ' , and result is true ,"
else :,"if not ,"
class Serializer ( object ) :,derive the class Serializer from the object base class .
if id  :,"if id_ is true ,"
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a created_time ( ) method ' .
break,break from the loop execution .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
f . seek ( NUM_ ),call the method f.seek with an argument integer 0 .
self . tags = { },self.tags is an empty dictionary .
from django . utils . safestring import mark safe,from django.utils.safestring import mark_safe into default name space .
if STR_ in kwargs :,"if 'file_path ' is contained in kwargs ,"
"def templatize ( src , or igin = None ) :",define the function templatize with 2 arguments : src and origin set to None .
try :,"try ,"
continue,skip this loop iteration .
pass,do nothing .
else :,"if not ,"
collect = [ ],collect is an empty list .
if filename not in  mtimes :,"if filename is not contained in _mtimes ,"
return self . field . prepare value ( data ),"self.form.initial , if it exists , or self.field.initial if not , substitute the result for data . call the method self.field.prepare_value with an argument data , return the result ."
context . render context . pop ( ),remove the first element from context.render_context .
else :,"if not ,"
"raise InvalidTemplateLibrary ( "" STR_ "" "" STR_ "" , ( name , filter func ) )","raise an InvalidTemplateLibrary exception with an argument string ( `` Unsupported arguments to Library.filter : ( % r , % r ) '' ,"
def d ( self ) :,define the method d with an argument self .
all unique checks = all unique checks . union ( set ( unique checks ) ),all_unique_checks is union of all_unique_checks set and unique_checks set .
if STR_ in context :,"if string 'forloop ' is contained in context ,"
"def timeuntil filter ( value , arg = None ) :",define the function timeuntil_filter with 2 arguments value and arg set to None .
self .  archive = zipfile . ZipFile ( file ),"call the method zipfile.ZipFile with an argument self , substitute the result for self._archive ."
if not supported platform or not is  a tty :,"if supported_platform is False or is_a_tty is False ,"
self . save m2m = save m2m,substitute save_m2m for self.save_m2m .
self . template dirs = template dirs,substitute template_dirs for self.template_dirs .
def start serialization ( self ) :,define the method start_serialization with an argument self .
"new class = super ( RenameMethodsBase , cls ) .   new   ( cls , name , bases , attrs )","call the method __new__ with 4 arguments : cls , name , bases and attrs , from the base class of the class RenameMethodsBase ."
"def get format modules ( lang = None , reverse = False ) :",define the function get_format_modules with 2 arguments : lang set to None and reverse set to boolean False .
return settings . LANGUAGE CODE,return settings.LANGUAGE_CODE .
"first item , second item = list ","substitute list_ for first_item and second_item , respectively ."
def media ( self ) :,define the method media with an argument self .
if field type == STR_ and row [ NUM_ ] :,"if field_type equals a string CharField ' and fourth element of row is true ,"
hfile = msvcrt . get osfhandle (  fd ( f ) ),"call the function msvcrt.get_osfhandle with return value of the _fd ( f ) function as argument , substitute the result for hfile ."
self . kwargs = kwargs,substitute kwargs for self.kwargs .
if middle . startswith ( opening ) :,"if middle starts with opening ,"
if t . contents . lstrip ( ) . startswith ( TRANSLATOR COMMENT MARK ) :,"strip t.contents from the left side of whitespaces , if the result starts with TRANSLATOR_COMMENT_MARK ,"
"for line in content . split ( "" STR_ "" ) :","split content by newline character , for every line in result ,"
import sys,import module sys .
UnlockFileEx = windll . kernel32 . UnlockFileEx,substitute windll.kernel32.UnlockFileEx for UnlockFileEx .
value = str ( value ),convert value to an string and substitute it for value .
base64d = base64d [ NUM_ : ],substitute first element of base64d for base64d .
import re,import module re .
self . can write . release ( ),call the method self.can_write.release .
import io,import module io .
return mark safe ( value ),"call the function mark_safe with an argument value , return the result ."
class BaseEmailBackend ( object ) :,derive the class BaseEmailBackend from the object base class .
week number = j // NUM_,"divide j by integer 7 , substitute the floored result for week_number ."
for part in singular :,"and trimmed and result of the function join_tokens called with 2 arguments : plural and trimmed , write the result to out . for every part in singular ,"
selected choices . remove ( option value ),call the method selected_choices.remove with an argument option_value .
plural = [ ],plural is an empty list .
"handler . endElement ( "" STR_ "" )",call the method handler.endElement with an argument string 'entry ' .
"resolver = urlresolvers . RegexURLResolver ( r STR_ , urlconf )","call the method urlresolvers.RegexURLResolver with raw literal string '^/ ' and urlconf as the arguments , substitute the result for resolver ."
if urlconf is None :,"if urlconf is None ,"
if self . is  bound and i < self . in itial form count ( ) :,"if self.is_bound is true and i is smaller than self.initial_form_count ,"
self . add root elements ( handler ),call the method self.add_root_elements with an argument handler .
errors . extend ( new errors ),call the method errors.extend with argument new_errors .
"if value and hasattr ( value , "" STR_ "" ) :","substitute the result for value under the 'input ' key of the substitutions dictionary . if value is true and value has an attribute 'url ' ,"
"choices = [ ( i , i ) for i in range ( NUM_ , NUM_ ) ]","substitute the result for the value under the 'month ' key of the html dictionary . for every i in successive list of integers from 1 to 30 , append tuple containing i and i elements into a list ,"
from io import BytesIO,from io import BytesIO into default name space .
if not url :,"if url is false ,"
cmp fmt = None,cmp_fmt is None .
"def handle ( self , * app labels , ** options ) :","and help set to string 'One or more application label. ' . define the method handle with 3 arguments : self , unpacked list app_labels and unpacked dictionary options ."
"warnings . warn ( "" STR_ "" "" STR_ "" , RemovedInDjango19Warning )","call the function warnings.warn with 2 arguments : string `` Custom SQL location ' < app_label > /models/sql ' is deprecated , use ' < app_label > /sql ' instead . '' and RemovedInDjango19Warning ."
class BooleanField ( Field ) :,derive the class BooleanField from the base class Field class .
"def delete cookie ( self , key , path = / , domain = None ) :","define the method delete_cookie with 4 arguments : self , key , path set to character '/ ' and domain set to None ."
if token . contents == STR_ :,"if token.contents equals string 'empty ' ,"
"except ( OSError , IOError ) :","if OSError or IOError exceptions were raised ,"
self . active writers += NUM_,"increment self.active_writers by integer 1 ,"
except OSError as err :,"if OSError , renamed to err , is caught ,"
code list . append ( opt dict [ o ] ),append value under the 0 key of the opt_dict dictionary to code_list .
try :,"try ,"
for f in opts . many to many + opts . virtual fields :,"append opts.virtual_fields to opts.many_to_many , for every f in the result ,"
if self . use natural keys :,"if the key doesnt exists substitute boolean False for self.use_natural_keys . if self.use_natural_keys is true ,"
if six . PY2 :,"if six.PY2 is true ,"
else :,if not .
"def to python ( self , value ) :",define the method to_python with arguments self and value .
import os,import module os .
"elif options [ "" STR_ "" ] and not options [ "" STR_ "" ] and not options [ "" STR_ "" ] :","of the options dictionary and value under the 'port ' key of the options dictionary converted into an integer . if value under the 'socket ' key of the options dictionary is true and values under the 'host ' and 'port ' keys of the options dictionary are false ,"
self .  callback = callback,substitute callback for self._callback .
if os . path . abspath ( dirpath ) . startswith ( os . path . dirname ( path ) ) :,"call the function os.path.abspath with an argument dirpath , if it starts with return value of the method os.path.dirname ,"
def quote etag ( etag ) :,define the function quote_etag with an argument etag .
"args = [ STR_ , STR_ , domain , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ] + command . xgettext options","append command.xgettext_options to list containing 15 elements : string 'xgettext ' , string '-d ' , domain , string ' -- language=Python ' ,"
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % var )","or first element of var equals ' _ ' , raise an TemplateSyntaxError exception with an argument string `` Variables and attributes may not begin with underscores : ' % s ' '' ,"
"if is in stance ( stream or string , bytes ) :","if stream_or_string is instance of bytes type ,"
self .  start relational field ( field ),call the method self._start_relational_field with the argument field .
self . validate key ( key ),call the self.validate_key method with argument key .
"parser . add argument ( STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","call the method parser.add_argument with 3 arguments : string ' -- database ' , default set to DEFAULT_DB_ALIAS ,"
new value = value + delta,"add value and delta together , substitute the result for new_value ."
defaults [ STR_ ] = self . data,substitute self.data for value under the 'data ' key of the defaults dictionary .
f . required = False,f.required is boolean False .
result . parent = self,substitute self for result.parent .
except StopIteration :,"if StopIteration exception ,"
commands = get commands ( ),"call the function get_commands , substitute it for commands ."
  [ m [ k ] ] = v,substitute v for value under the k-th element of m key of _ dictionary .
"def has vary header ( response , header query ) :","substitute it for value of dictionary response under the key 'Vary ' . define function has_vary_header , with response and header_query as arguments ."
"parentmod , submod = get mod func ( mod name )","call the function get_mod_func with an argument mod_name , store the result in parentmod and submod , respectively ."
if not is  valid ipv6 address ( ip str ) :,"call he function is_valid_ipv6_address with an argument ip_str , if it evaluates to false ,"
config [ STR_ ] = config . pop ( STR_ ),"remove config dictionary entry under 'format ' key , substitute it for value under 'fmt ' key of config dictionary ."
"def iter format modules ( lang , format module path = None ) :",define the function iter_format_modules with 2 arguments : lang and format_module_path set to None .
except IndexError :,"if IndexError exception is caught ,"
"def do ntranslate ( singular , plural , number , translation function ) :","define the function do_ntranslate with 4 arguments : singular , plural , number and translation_function ."
except UnicodeDecodeError as e :,"if an exception of the type UnicodeDecodeError , renamed to e , is caught ,"
"def open ( self , mode = None ) :",define the method open with arguments self and mode defaulting to None .
"super ( HttpResponseNotModified , self ) .   init   ( * args , ** kwargs )","call the __init__ method from the base class of the HttpResponseNotModified class , called with arguments : unpacked list args ,"
if not m :,"if m is false ,"
self . style = no style ( ),"call the function no_style , substitute it for self.style ."
def in ner ( check ) :,define the method inner with argument check .
"return [ Warning ( "" STR_ "" , hint = ( "" STR_ "" "" STR_ "" "" STR_ "" ) , obj = field , id = STR_ , ) for field in problem fields ]","or model._meta.app_config is contained in app_configs , for every field in model._meta.local_fields , # ANNOTATION only if field is an instance of models.BooleanField and field.has_default ( ) evaluates to False . call the Warning function with 4 arguments : string `` BooleanField does not have a default value . `` ,"
return s,return s .
write ( end ),call the function write with an argument end .
obj pk = obj pk . pk,substitute obj_pk.pk for obj_pk .
return False,return boolean False .
"def  long to bin ( x , hex format string ) :",define the function _long_to_bin with 2 arguments : x and hex_format_string .
if format not in  serializers :,"if format is not contained in _serializers ,"
raise LookupError ( lang code ),raise an LookupError with an argument lang_code .
"self . nodelist = compile string ( template string , or igin )","call the function compile_string with 2 arguments : template_string and origin , substitute the result for self.nodelist ."
"iterator = ChunkIter ( stream or iterable , NUM_ )","iterator is an instance of ChunkIter class , created with arguments : stream_or_iterable and integer 16384 ."
if app names :,"if app_names is not empty ,"
"for obj in PythonDeserializer ( yaml . load ( stream , Loader = SafeLoader ) , ** options ) :","for every obj in return value of the PythonDeserializer created with 2 arguments : return value of the function yaml.load ,"
else :,"if not ,"
"from django . db import connections , router , transaction , DEFAULT DB ALIAS","from django.db import connections , router , transaction and DEFAULT_DB_ALIAS into default name space ."
"warnings . warn ( "" STR_ "" "" STR_ "" , RemovedInDjango19Warning )",call the function warnings.warn with 2 arguments : `` django.utils.tzinfo.FixedOffset will be removed in Django 1.9. ``
if self . paths to remove :,"with new_path and self.style.NOTICE , respectively , write it to self.stderr stream . if self.paths_to_remove is true ,"
except OSError as e :,"if OSError , renamed to e , exception is caught ,"
return [ self [ k ] for k in self . keyOrder ],"append value under k key of self dictionary to a list , for every k in self.keyOrder , return the result ."
if STR_ in response and request . get host ( ) :,"if 'Location ' is contained in response and function request.get_host evaluates to True ,"
return id ,return id_ .
id for label = widget . id for label ( id  ),"call the method widget.id_for_label with an argument id_ , substitute the result for id_for_label ."
"def send messages ( self , email messages ) :",define the method send_messages with arguments self and email_messages .
offset mins = in t ( tzinfo [ - NUM_ : ] ) if len ( tzinfo ) > NUM_  else NUM_,"if length of tzinfo is greater than integer 3 , convert elements of tzinfo from indexes 1 to 3 to an integer ,"
"chunks = ( ( NUM_ * NUM_ * NUM_ * NUM_ , ungettext lazy ( STR_ , STR_ ) ) , ( NUM_ * NUM_ * NUM_ * NUM_ , ungettext lazy ( STR_ , STR_ ) ) , ( NUM_ * NUM_ * NUM_ * NUM_ , ungettext lazy ( STR_ , STR_ ) ) , ( NUM_ * NUM_ * NUM_ , ungettext lazy ( STR_ , STR_ ) ) , ( NUM_ * NUM_ , ungettext lazy ( STR_ , STR_ ) ) , ( NUM_ , ungettext lazy ( STR_ , STR_ ) ) )",chunks is a tuple containing 6 initial tuples :
def   repr   ( self ) :,called with an argument BlockNode . define the method __repr__ with an argument self .
subcommand cls = self . fetch command ( cwords [ NUM_ ] ),"call the method self.fetch_command with first element of cwords as an argument , substitute it for subcommand_cls ."
field params [ STR_ ] = row [ NUM_ ] if row [ NUM_ ] is not None else NUM_,"if fifth element of row is not None , substitute it for value under the 'max_digits ' key of the field_params ,"
number = str ( number ) [ NUM_ : ],"convert number to a string , truncate first element ."
bad serializer = BadSerializer ( exc ),"ba_serializer is a instance of BadSerializer class , created with an argument exc ."
"response = middleware method ( request , callback , callback args , callback kwargs )","call the middleware_method with request , callback , callback_args and callback_kwargs as the arguments , substitute the result for response ."
else :,"if not ,"
"value = tuple .   getitem   ( self , key )","call the method tuple.__getitem__ with 2 arguments : self and key , substitute the result for value ."
if value is None :,"if value is None ,"
"parts . append ( "" STR_ "" % ( groupid , tok . regex ) )","format a string `` ( ? P < % s > % s ) '' with groupid and tok.regex , append it to the parts ."
"def sanitize address ( addr , encoding ) :",define the function sanitize_address with arguments addr and encoding .
return self . data . month,return self.data.month .
"def ngettext ( singular , plural , number ) :","define the function ngettext with 3 arguments : singular , plural and number ."
empty values = list ( validators . EMPTY VALUES ),"put elements of validators.EMPTY_VALUES to a list , substitute the result for empty_values ."
self . mutex = threading . RLock ( ),"call the method threading.RLock , substitute the result for self.mutex ."
s = s1,substitute s1 for s .
bits = [ ],bits is an empty list .
def clear url caches ( ) :,define the function clear_url_caches .
with self . mutex :,"with self.mutex perform ,"
message =   ( STR_ ),"call a function _ with a string 'Enter a valid value . ' as an argument , substitute the result for message ."
"def default ( value , arg ) :",define the function default with 2 arguments value and arg .
def   getstate   ( self ) :,define the method __getstate__ with an argument self .
from importlib import import module,from importlib import import_module into default name space .
break,break from the loop execution .
"def get ns resolver ( ns pattern , resolver ) :",define the function get_ns_resolver with arguments ns_pattern and resolver .
new class . base fields = declared fields,substitute declared_fields for new_class.base_fields .
"context [ self . target var ] = func ( * resolved args , ** resolved kwargs )","call the function func with 2 arguments : unpacked list resolved_args and unpacked dictionary resolved_kwargs ,"
def clear ( self ) :,define the method clear with an argument self .
continue,skip this loop iteration .
if six . PY3 :,"if six.PY3 is true ,"
if pos >= last :,"if pos is greater than or equal to last ,"
"final attrs = dict ( final attrs , id = STR_ % ( id  , i ) )","call the dict function with 2 arguments : final_attrs and id set to string ' % s_ % s ' , where ' % s ' is replaced with id_ and i ,"
"app dirs . append ( os . path . normpath ( os . path . join ( app dir , STR_ ) ) )","join app_dir and string 'sql ' into a file path , use the result as an argument for the call to the function os.path.normpath ,"
"return min ( self . management form . cleaned data [ TOTAL FORM COUNT ] , self . absolute max )","get the element with minimal value between the value under the TOTAL_FORM_COUNT key of self.management_form.cleaned_data dictionary ,"
if self .   dispatch is None :,if self.__dispatch is None .
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'subtitle ' and value under the 'subtitle ' key of the self.feed dictionary .
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
if STR_ in content params :,"use it to call the cgi.parse_header method , assign the result to the _ and content_params respectively . if string 'charset ' is contained in content_params ,"
"raise CommandError ( "" STR_ "" "" STR_ "" % top dir )","raise an CommandError exception with an argument string `` Destination directory ' % s ' does not exist , please create it first . `` ,"
if result is not None :,"and encoding , substitute the result for result . if result is not None ,"
if not self .  is expired ( f ) :,"evaluate self._is_expired method with f as argument , if the result is false ,"
@ stringfilter,"decorator stringfilter ,"
self . template parser = parser,substitute parser for self.template_parser .
"signals . got request exception . send ( sender = self .   class   , request = request )",call the method signals.got_request_exception.send with sender set to type of the self class instance and request set to request .
"if is in stance ( obj , models . signals . ModelSignal ) :","if obj is instance of models.signals.ModelSignal class ,"
self . requires system checks = ( self . requires system checks if has new option else self . requires model validation if has old option else True ),"'and `` requires_system_checks '' , which is illegal . Use only `` requires_system_checks '' . ' , replace ' % s ' for self.__class__.__name__ . call the method self.requires_system_checks with an argument : self.requires_system_checks if has_new_option is true ,"
save m2m ( ),call the function save_m2m .
"return json . dumps ( obj , separators = ( STR_ , STR_ ) ) . encode ( STR_ )","call the json.dumps function with 2 arguments : obj and separators set to tuple containing ' , ' and ' : ' characters ,"
"handler . endElement ( "" STR_ "" )",call the method handler.endElement with an argument string 'author ' .
def striptags ( value ) :,define the function striptags with an argument value .
"def check all models ( app configs = None , ** kwargs ) :",define the function check_all_models with app_configs defaulting to None and unpacked dictionary kwargs as arguments .
except ValueError :,"if ValueError exception is caught ,"
return palette,return palette .
extracted . close ( ),call the method extracted.close .
"def   init   ( self , filter expression ) :",define the method __init__ with 2 arguments : self and filter_expression .
"def ngettext lazy ( singular , plural , number = None ) :","define the function ngettext_lazy with 3 arguments : singular , plural and number set to None ."
return False,return boolean False .
from django . utils . functional import lazy,from django.utils.functional import lazy into default name space .
@ cached property,decorator cached_property .
if language not in  translations :,"if language is not contained in _translations ,"
class LoaderOrigin ( Origin ) :,derive the class LoaderOrigin from the Origin base class .
def reload ( self ) :,define the method reload with an argument self .
"return func ( * resolved args , ** resolved kwargs )","call the function func with 2 arguments : unpacked list resolved_args and unpacked dictionary resolved_kwargs , return it ."
elif ch == STR_ :,"otherwise if ch equals a string ' ) ' ,"
"warnings . warn ( "" STR_ "" )","call the function warnings.warn with an argument string `` A { % csrf_token % } was used in a template , but the context did not provide the value . This is usually caused by not using RequestContext . `` ."
"if not is in stance ( fk , ForeignKey ) or ( fk . rel . to ! = parent model and fk . rel . to not in parent model .  meta . get parent list ( ) ) :","if fk is not an instance of ForeignKey class , or fk.rel.to is not equal to parent_model ,"
"from django . utils . six . moves . urllib . parse import parse qsl , urlencode , quote , urljoin , urlsplit","from django.utils.six.moves.urllib.parse import parse_qsl , urlencode , quote , urljoin and urlsplit into default name space ."
method = kwargs . pop ( STR_ ),"remove kwargs dictionary element under the 'method ' key , substitute it for method ."
return cache,return cache .
"def dumps ( self , obj ) :",define the method dumps with arguments self and obj .
if six . PY3 :,"if PY3 field of six is boolean True ,"
def   repr   ( self ) :,define the method __repr__ with an argument self .
from django . utils . six . moves import xrange,from django.utils.six.moves import xrange into default name space .
"super ( FilePathField , self ) .   init   ( choices = ( ) , required = required , widget = widget , label = label , in itial = in itial , help text = help text , * args , ** kwargs )","call the __init__ method of the base class of the class FilePathField , with arguments : choices set to an empty tuple,4"
if var obj is None :,"where ' % s ' is replaced with first upto elements of token string , token string elements from upto to start index , and token string elements from start index to the end . if var_obj is None ,"
subcommand = STR_,subcommand is a string 'help ' .
response . streaming content = [ ],response.streaming_content is an empty list .
shutdown message = STR_ % db name,"replace ' % r ' from string '\nServer stopped.\nNote that the test database , % r , has not been deleted . You can explore it on your own . ' , with db_name , substitute it for shutdown_message ."
"if is in stance ( value , datetime . datetime ) :","if value is an instance of datetime.datetime ,"
"value = str ( Header ( value , STR_ , maxlinelen = sys . maxsize ) . encode ( ) )","instantiate class Header with 3 arguments : value , string 'utf-8 ' , maxlinelen set to sys.maxsize , call the encode method on it ,"
if current app and current app in app list :,"if current_app and is true and current_app is contained in app_list ,"
models . add ( model ),add model to models set .
requires system checks = False,"`` pulls out all strings marked for translation . It creates ( or updates ) a message `` `` file in the conf/locale ( in the django tree ) or locale ( for projects and `` `` applications ) directory.\n\nYou must run this command with one of either the `` `` -- locale , -- exclude or -- all options. '' . requires_system_checks is boolean False ."
self .  remaining = length,substitute length for self._remaining .
def  get choices ( self ) :,define the method _get_choices with an argument self .
check . tags = tags,replace tags for check.tags .
try :,"try ,"
"form . fields [ name ] = InlineForeignKeyField ( self . in stance , ** kwargs )",value under the name key of the form.fields dictionary is an instance of InlineForeignKeyField created with 2 arguments :
return serializer ( ) . loads ( data ),"call the serializer function , call the loads method on the return value with an argument data , return the result ."
"all files . append ( TranslatableFile ( dirpath , filename , locale dir ) )","where ' % s ' is replaced with file_path . create an object TranslatableFile with arguments : dirpath , filename and locale_dir , append it to all_files ."
if self . verbosity >= NUM_ :,if self.verbosity is greater or equal to integer 2 .
doy += NUM_,increment doy by integer 1 .
def  get scheme ( self ) :,define the method _get_scheme with self class instance as argument .
for opt in self . option list :,"dest set to string 'no_color ' default set to boolean False and help set to a string `` Do n't colorize the command output. '' . for every opt in self.option_list ,"
except UnicodeError :,"substitute the result for domain . if UnicodeError exception is caught ,"
from django . utils . module loading import import string,from django.utils.module_loading import import_string into default name space .
app name = commands [ subcommand ],substitute value under the subcommand key of the commands dictionary for app_name .
self . file . close ( ),call the method self.file.close .
"@ register . filter ( "" STR_ "" , is  safe = True )",decorator function register.filter with 2 arguments string `` phone2numeric '' and is_safe set to boolean True .
from django . core . mail import get connection,from django.core.mail import get_connection into default name space .
op = OPERATORS [ token ],substitute OPERATORS dictionary element under token key for op .
created models = [ ],create_models is an empty list .
HTMLParser =  html parser . HTMLParser,substitute HTMLParser from the module _html_parser for HTMLParser .
self .  deleted form indexes = [ ],self._deleted_form_indexes is an empty list .
"if self . data . day in ( NUM_ , NUM_ , NUM_ ) :","if self.data.day equals integer 11 , 12 or 13 ,"
os . umask ( umask ),call the function os.umask with an argument umask .
"self . stdout . write ( "" STR_ "" % writer . path )","substitute ' % s ' in a string `` \nCreated new merge migration % s '' with writer path , write it to self.stdout ."
can import settings = False,can_import_settings is boolean False .
else :,"if not ,"
"def add handlers ( self , logger , handlers ) :","define the method add_handlers with 3 arguments : self , logger and handlers ."
if target app labels only :,"use it as an argument for the call to the self.style.MIGRATE_LABEL method , use the result of the previous method as an argument for the call to the self.stdout.write method . if target_app_labels_only is true ,"
elif callable ( func ) :,"otherwise if func is callable ,"
class DjangoJSONEncoder ( json . JSONEncoder ) :,third element of the return value of the function sys.exc_info . define the class DjangoJSONEncoder from the json.JSONEncoder base class .
return None,return None .
supported platform = plat ! = STR_ and ( plat ! = STR_ or STR_ in os . environ ),"evaluate the logic expression , plat does not equals to string 'Pocket PC ' , and plat does not equals to string 'win32 '"
"self . extra context = kwargs . pop ( STR_ , { } )","remove kwargs dictionary entry under the 'extra_context ' key , if it exists substitute it for self.extra_context ,"
return name + STR_,"concatenate name and string '-clear ' , return it ."
"def create variable node ( self , contents ) :",define the method create_variable_node with 2 arguments : self and contents .
self . active writers += NUM_,"increment self.active_writers by integer 1 ,"
@ property,"property decorator ,"
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'rights ' and value under the 'item_copyright ' key of the item dictionary .
elif  len ( cache ) >= maxsize :,"otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize ,"
elif ch == STR_ :,"otherwise if ch equals a string ' . ' ,"
"final attrs = self . build attrs ( attrs , name = name )","call the method self.build_attrs with 2 arguments : attrs and name set to name , substitute the result for final_attrs ."
from django . utils . module loading import module has submodule,from django.utils.module_loading import module_has_submodule into default name space .
"elif not hasattr ( message , STR_ if six . PY3 else STR_ ) :","alternatively , if six.PY3 is true check if message does not have an attribute 'message ' , if six.PY3 is false , check if message doesnt have an attribute 'code ' , perform the following ,"
"return super ( ModelChoiceField , self ) . prepare value ( value )","call the method prepare_value from the base class of the class ModelChoiceField , with an argument value , return the result ."
if mimetype is None :,"if mimetype is None ,"
I18N MODIFIED = NUM_,I18N_MODIFIED is integer 2
return week number,return week_number .
"if is in stance ( s , Promise ) :","if s is instance of a class Promise ,"
set script prefix ( get script name ( environ ) ),"call the get_script_name function with environ as argument , use the result as an argument for call to the set_script_prefix function ."
@ content . setter,"content.setter decorator ,"
if nodelist :,"if nodelist is true ,"
import sys,import module sys .
if bf errors :,"if bf_errors is true ,"
logging . Handler .   init   ( self ),call the method logging.Handler.__init__ with an argument self .
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'language ' and value under the 'language ' key of the self.feed dictionary .
elif subcommand == STR_ or self . argv [ NUM_ : ] == [ STR_ ] :,"with 2 arguments : self.prog_name and first element of options.args . otherwise if subcommand equals a string 'version ' or self.argv , without the first element equals a list containing a string ' -- version '"
raise ImproperlyConfigured ( STR_ ),raise an ImproperlyConfigured exception with an argument string 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values . ' .
format key = STR_,format_key is a string 'DATE_INPUT_FORMATS ' .
"in teger types = ( in t , long )",integer_types is a tuple with 2 elements int and long .
self . base fields [ TOTAL FORM COUNT ] = IntegerField ( widget = HiddenInput ),"value under the TOTAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class ,"
return path,"return path ,"
if in stance is not None :,"if instance is not None ,"
except StandardError as e :,"if StandardError , renamed to e , exception is caught ,"
content = content . encode ( STR_ ),"call the method content.encode with an argument string 'utf-8 ' , substitute it for content ."
def request ( request ) :,define the function request with an argument request .
if args [ NUM_ ] [ NUM_ ] == STR_ :,"if first element of the second row of args equals a string ' 2 ' ,"
pass,do nothing .
"def delete ( self , key , version = None ) :","define the method delete with self class instance , key and version defaulting to None as arguments ."
"name = self .  save ( name , content )","call the method self._save with arguments name and content , substitute it for name ."
"substitutions [ STR_ ] = format html ( self . url markup template , value . url , force text ( value ) )","call the function format_html with 3 arguments : self.url_markup_template , value.url and return value of the function force_text ,"
else :,"if not ,"
if with base fields :,"if with_base_fields is true ,"
if auto id and STR_ in smart text ( auto id ) :,"if auto_id is true and ' % s ' is contained in result of the call to the function smart_text with an argument auto_id ,"
@ lru cache . lru cache ( maxsize = NUM_ ),decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000 .
"def   init   ( self , server , params ) :","define the method __init__ with argument self , server and params ."
return bytes ( s ),"evaluate the function bytes with the argument s , and return the result ."
"raise InvalidTemplateLibrary ( "" STR_ "" "" STR_ "" % taglib module )","raise an InvalidTemplateLibrary exception with an argument string `` Template library % s does not have a variable named 'register ' '' ,"
help = STR_,help is a string 'Prints the SQL statements for resetting sequences for the given app name ( s ) . ' .
"return ForNode ( loopvars , sequence , is  reversed , nodelist loop , nodelist empty )","return an instance of ForNode class , created with 5 arguments : loopvars , sequence , is_reversed , nodelist_loop and nodelist_empty ."
current chunk = old file . read ( chunk size ),"read chunk_size bytes from the old_file file , substitute the result for current_chunk ."
data = BytesIO ( self .  body ),"data is an instance of BytesIO class , created with an argument : self._body ."
buf = self . readline ( ),"read one line from self file stream , substitute the result for buf ."
try :,"for every k in config , only if result of the function valid_ident called with an argument k evaluates to true . try ,"
elif field . required :,"otherwise if field.required is true ,"
"self . nodelist true , self . nodelist false = nodelist true , nodelist false","substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false , respectively ."
"if not hasattr ( self , STR_ ) :","if self does not have '_files ' attribute ,"
return repr ( self . value ),return printable representation of self.value .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
six . reraise ( * exc info ),"call the function reraise from the module six , with list of arguments exec_info ."
if is  relation :,"if is_relation is true ,"
"def add filters ( self , filterer , filters ) :","define the method add_filters with 3 arguments : self , filterer and filters ."
if self . body :,"if self.body is true ,"
"def close ( self , ** kwargs ) :",define the method close with self and dictionary pairs of elements kwargs .
self . children . append ( data ),append data to self.children .
@ stringfilter,"decorator stringfilter ,"
if data [ last : last + NUM_ ] == b STR_ :,element of data at the index last equals to newline bytes character .
"super ( TemplateResponse , self ) .   init   ( template , context , content type , status )","call the __init__ method from the base class of the class TemplateResponse , with 4 arguments : template , context , content_type , status ."
"handlers = config . get ( STR_ , None )","get value under the 'handlers ' key of the config dictioanry , if it exists substitute it for handlers , if not handlers is None ."
"return types . MethodType ( func , obj , obj .   class   )","call the method types.MethodType with 3 arguments : func , obj and obj.__class__ , return the result ."
week number = NUM_,week_number is integer 52 .
self . name = name,substitute name for self.name .
ETAG MATCH = re . compile ( r STR_ ),"call the function re.compile with an argument raw string ' ( ? : W/ ) ? '' ( ( ? : \\.| [ ^ '' ] ) * ) '' ' , substitute the result for ETAG_MATCH ."
yield import module ( STR_ % ( location % loc ) ),"call the function import_module with an argument string ' % s.formats ' formated with location , which is formated with loc ,"
"if hasattr ( parent , STR_ ) :","if parent has an attribute 'render ' ,"
cursor . close ( ),"call the method cursor.close ,"
return fastcgi help ( ),"call the fastcgi_help function , return the result ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ , params = { STR_ : ( self . max digits - self . decimal places ) } , )","self.max_digits and self.decimal_places , raise an ValidationError with 3 arguments : value under the 'max_whole_digits ' key of the self.error_messages dictionary ,"
"var , constant = match . group ( "" STR_ "" , "" STR_ "" )","call the method match.group with 2 arguments : strings `` var '' and `` constant '' , substitute the result for var and constant , respectively ."
"if not hasattr ( self , STR_ ) :","where ' % s ' is replaced with self.__class__.__name__ . if self doesnt have an '_ordering ' attribute ,"
p pattern = p pattern [ NUM_ : ],remove the first element from p_pattern .
"def default if none ( value , arg ) :",define the function default_if_none with 2 arguments value and arg .
try :,"try ,"
iterbytes = iter,substitute iter for iterbytes .
return   wrapper  ,return __wrapper__ .
opts = in stance .  meta,substitute instance._meta for opts .
import warnings,import module warnings .
yield node,yield node .
"from django . forms . formsets import BaseFormSet , formset factory",from django.forms.formsets import BaseFormSet and formset_factory into default name space .
raise NotImplementedError ( STR_ ),raise an NotImplementedError with an argument string 'subclasses of SyndicationFeed must provide a write ( ) method ' .
"def wrapper ( * args , ** kwargs ) :",define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwargs .
from django . conf import settings,from django.conf import settings into default name space .
if str number [ NUM_ ] == - :,if first element of str_number equals a string '- ' .
for handler in self .  upload handlers :,"for every handler in self._upload_handlers ,"
except IndexError :,"if IndexError exception is caught ,"
"def   init   ( self , urlconf name , default kwargs = None , app name = None , namespace = None ) :","define the __init__ method with 5 arguments : self , urlconf_name , default_kwargs set to None , app_name set to None and namespace set to None ."
"raise ValueError ( "" STR_ "" % ( model .  meta . app label , model .  meta . object name , parent model .  meta . app label , parent model .  meta . object name ) )","raise an ValueError with an argument string `` ' % s. % s ' has no ForeignKey to ' % s. % s ' . `` , where ' % s ' is replaced with ,"
return six . unichr ( html entities . name2codepoint [ text ] ),"call the function six.unichr with value under the text key of the html_entities.name2codepoint dictionary , return the result ."
self .  chunk size = min ( [ NUM_ ** NUM_ - NUM_ ] + possible sizes ),"bring integer 2 to the power of 31 , subtract the result by 4 , put the result into a list , append possible_sizes to it ,"
USE INOTIFY = False,USE_INOTIFY is boolean False .
"attachment . add header ( STR_ , STR_ , filename = filename )","call the method attachment.add_header with 3 arguments : string 'Content-Disposition ' , string 'attachment ' and filename set to filename ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid ' key of the self.error_messages dictionary and code set to 'invalid ' .
class EndToken ( TokenBase ) :,derive the class EndToken from the TokenBase base class .
value = force text ( value ),"call the function force_text with an argument value , substitute the result for value ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
return response,return response .
template dir = template dir . decode ( fs encoding ),"call the function template_dir.decode with an argument fs_encoding , substitute the result for template_dir ."
from django . utils . encoding import force str,from django.utils.encoding import force_str into default name space .
" add doc ( b , "" "" "" STR_ "" "" "" )",call the function _add_doc with 2 arguments : b and string `` '' '' Byte literal '' '' '' .
"if is in stance ( stream or string , bytes ) :","if stream_or_string is an instance of bytes ,"
if msg :,"if msg is true ,"
"def  has changed ( self , in itial , data ) :","define the method _has_changed with 3 arguments : self , initial and data ."
from django . conf import settings,from django.conf import settings into default name space .
def all valid ( formsets ) :,"is derived from the formset base class and with fields contained in attrs , return an instance of the obtained class . define the function all_valid with an argument formsets ."
"def  has changed ( self , in itial , data ) :","define the method _has_changed with 3 arguments : self , initial and data ."
from email . header import Header,from email.header import Header into default name space .
def save m2m ( ) :,define the function save_m2m .
return path . encode ( fs encoding ),"call the method path.encode with an argument fs_encoding , return the result ."
comment lineno cache = None,"format with it a string ' # % s ' , write it to out . comment_lineno_cache is None ,"
continue,skip this loop execution .
"super ( Serializer , self ) . handle field ( obj , field )","call the handle_filed method of the base class of the Serializer class , with arguments obj and field ."
break,break from the loop execution .
return message,return message .
from django . core . signals import request finished,from django.core.signals import request_finished into default name space .
converter = connection . in trospection . table name converter,substitute connection.introspection.table_name_converter for converter .
to delete = set ( ),to_delete is an empty set .
default settings = module to dict ( global settings ),"call the function module_to_dict with an argument global_settings , substitute it for default_settings ."
form = self . forms [ i ],substitute i-th element of self.forms for form .
return MONTHS [ self . data . month ],return the value under the self.data.month key of the MONTHS dictionary .
"databases = [ self . using , None ]",databases is a list containing 2 elements : self.using and None .
DEFAULT CHUNK SIZE = NUM_ * NUM_ ** NUM_,"bring integer 2 to the power of 10 , multiply it by integer 64 , substitute the result for DEFAULT_CHUNK_SIZE ."
self . msguniq options = self . msguniq options [ : ] + [ STR_ ],append list containing string ' -- no-location ' to self.msguniq_options .
"for cnt , digit in enumerate ( in t part [ : : - NUM_ ] ) :","for every cnt and digit in enumerated list int_part with reversed ordering of elements ,"
def   enter   ( self ) :,define the method __enter__ with an argument self .
self . domain whitelist = whitelist,substitute whitelist for self.domain_whitelist .
def T ( self ) :,define the method T with an argument self .
finally :,"finally perform ,"
self [ STR_ ] = content type,"if not , self.reason_phrase is a string 'UNKNOWN STATUS CODE ' . substitute content_type for value under the 'Content-Type ' key of the self dictionary ."
else :,"if not ,"
"def list ( self , * args , ** kwargs ) :",define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs .
"cursor . execute ( "" STR_ "" "" STR_ "" % table , [ key ] )","call the method cursor.execute with string `` SELECT cache_key , value , expires FROM % s WHERE cache_key = % % s '' as argument ,"
field = self . fields [ name ],"get the value under the name key of the self.fields dictionary , substitute it for field ."
return make middleware decorator ( middleware class ) ( ),"call the function make_middleware_decorator with an argument middleware_class , call the result , return the new result ."
"function name = ( name or getattr ( func , STR_ , func ) .   name   )","if name is true , substitute it for function_name , if not get '_decorated_function ' attribute from func object , if it exists ,"
"pk key = "" STR_ "" % ( self . add prefix ( i ) , self . model .  meta . pk . name )","pk_key is a string `` % s- % s '' , where ' % s ' is replaced with : result of the method self.add_prefix called with an argument i ,"
class RendererMixin ( object ) :,derive the class RendererMixin from the object base class .
def abspathu ( path ) :,define the function abspathu with an argument path .
def   iter   ( self ) :,define the method __iter__ with an argument self .
"proxy = lazy ( func , resultclass ) ( ** kwargs )","call the function lazy with 2 arguments : func and resultclass , call the result with an argument , unpacked dictionary kwargs ,"
try :,"try ,"
for chunk in content . chunks ( ) :,"for every chunk in content.chunks function return value ,"
"result = super ( SortedDict , self ) . pop ( k , * args )","call the method pop from the base class of the class SortedDict , with 2 arguments k and unpacked list args ,"
continue,skip this loop iteration .
class HttpResponseRedirectBase ( HttpResponse ) :,derive the class HttpResponseRedirectBase from the HttpResponse base class .
"if arg not in ( STR_ , STR_ ) :","if arg is not string 'on ' or 'off ' ,"
UNKNOWN SOURCE = STR_,UNKNOWN_SOURCE is a string ' < unknown source > ' .
for form in valid forms :,"and form is not contained in forms_to_delete , substitute the resulting list for valid_forms . for every form in valid_forms ,"
from django . core . management . base import AppCommand,from django.core.management.base import AppCommand into default name space .
lead = lead + opening,"sum lead and opening , substitute the result for lead ."
"def handle uncaught exception ( self , request , resolver , exc info ) :","define the method handle_uncaught_exception with self class instance , request , resolver and exec_info as arguments ."
"def   init   ( self , file , field name , name , content type , size , charset , content type extra = None ) :","define the method __init__ with 8 arguments : self , file , field_name , name , content_type , size , charset and content_type_extra set to None ."
"def  set name ( self , name ) :",define the method _set_name with arguments self and name .
return self .  count,return self._count .
format = force str ( default or get format ( STR_ ) [ NUM_ ] ),"call the function force_str with an argument : default if it is true , or if not , first element of the result of the function ,"
"def   init   ( self , timezone ) :",define the method __init__ with 2 arguments : self and timezone .
"self . empty = options . get ( STR_ , False )","if not , self.merge is boolean False . get the value under the 'empty ' key of the options dictionary , if the key exists substitute it for self.empty ,"
value = [ ],value is an empty list .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , help = STR_ )","dest set to string 'tags ' and help set to string 'Run only checks labeled with given tag. ' . call the method parser.add_argument with 4 arguments : string ' -- list-tags ' , action set to string 'store_true ' ,"
"self . regex = re . compile ( self . regex , self . flags )","call the re.compile function with self.regex and self.flags as arguments , substitute the result for self.regex ."
"help = "" STR_ """,help is a string `` Starts a lightweight Web server for development . `` .
"FIELD = "" STR_ """,FIELD is a field '' .
"return strftime ( self , fmt )","call the function strftime with 2 arguments : self and fmt , return the result ."
if decimals > digits :,"if decimals is greater than digits ,"
if not self .  mutable :,"if not self._mutable ,"
value = urlunsplit ( url fields ),"substitute the result for url_fields . call the function urlunsplit with an argument url_fields , substitute the result for value ."
pass,do nothing .
"  all   = ( STR_ , STR_ , STR_ , STR_ )","__all__ is a tuple containing strings : 'UploadedFile ' , 'TemporaryUploadedFile ' , 'InMemoryUploadedFile ' and 'SimpleUploadedFile ' ."
self .  populate ( ),call the method self._populate .
raise NotImplementedError ( STR_ ),raise an NotImplementedError with an argument string 'Subclasses must implement this method . ' .
"full statement . append ( STR_ % ( line , STR_ if i < len ( table output ) - NUM_  else ) )","replace % s in string ' % s % s ' with : line and character ' , ' if i is lesser than length of table_output decremented by one ,"
"def   init   ( self , nodelist ) :",define the method __init__ with 2 arguments : self and nodelist .
else :,"if not ,"
if timeout == DEFAULT TIMEOUT :,"if timeout equals to DEFAULT_TIMEOUT ,"
else :,"if not ,"
return output,return output .
from django . utils . jslex import prepare js for gettext,from django.utils.jslex import prepare_js_for_gettext into default name space .
try :,"try ,"
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = None , help = STR_ )","default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a specific database to load fixtures into . Defaults to the `` default '' database . ' call the method parser.add_argument with 5 arguments : string ' -- app ' , action as a string 'store ' , dest as a string 'app_label ' ,"
"if is in stance ( value , str ) :","if value is an instance of str type ,"
self .  errors = None,self._errors is None .
from django . core . management . base import AppCommand,from django.core.management.base import AppCommand into default name space .
GB = NUM_ << NUM_,"move integer 1 left for 30 bits , substitute the result for GB ."
import errno,import module errno .
"def handle template ( self , template , subdir ) :","define the method handle_template with 3 arguments : self , template and subdir ."
 called from command line = False,_called_from_command_line is boolean False .
df = DateFormat ( value ),"df is an instance of DateFormat class , created with an argument value ."
self .  encoding = settings . DEFAULT CHARSET,substitute settings.DEFAULT_CHARSET for self._encoding .
parser . print help ( ),call the method parser.print_help .
id  = self . field . widget . attrs . get ( STR_ ) or self . auto id,"get the value under the 'id ' key of the self.field.widget.attrs dictionary , if the key exists substitute it for id_ ,"
obj = force str ( self . obj ),"call the function force_str with argument self.obj , substitute the result for obj ."
if e . errno ! = errno . EEXIST :,"if e.errno is not equal to errno.EEXIST ,"
trail = punctuation + trail,"sum punctuation and trail , substitute the result for trail ."
from django . core . management . base import BaseCommand,from django.core.management.base import BaseCommand into default name space .
"if not is in stance ( data , basestring ) :","if data is not an instance of basestring ,"
if not self .  has expired ( key ) :,"if call to the _has_expired method with argument key evaluates to boolean False ,"
gettext noop = gettext lazy =   = gettext,"substitute gettext for gettext_noop , gettext_lazy and _ ."
b64encoded = base64 . b64encode ( pickled ),"call the method base64.b64encode with argument pickled , substitute the result for b64encoded ."
self . limit value = limit value,substitute the limit_value for self.limit_value .
"name , val = forbid multi line headers ( name , val , self . encoding )","call the function forbid_multi_line_headers with 3 arguments : name , val and self.encoding , substitute the result for name and val , respectively ."
urlresolvers . set urlconf ( urlconf ),call the function urlresolvers.set_urlconf with urlconf as the argument .
for path in self . locale paths :,"for every path in self.locale_paths ,"
else :,"substitute the result for value . if not ,"
if tags is not None :,if tags is not None .
pop context = True,pop_context is boolean True .
elif self . verbosity > NUM_ :,"otherwise if self.verbosity is greater than integer 0 ,"
data = zlib . decompress ( data ),"call the function zlib.decompress with an argument data , substitute the result for data ."
"if not re . search ( r STR_ , name ) :","and app_or_project if app_or_project equals to string 'app ' , if not , it is replaced with ' a ' and app_or_project . call the method re.search with 2 arguments : raw string '^ [ _a-zA-Z ] \w* $ ' and name , if it evaluates to false ,"
"def register ( self , * tags ) :",define the method register with self ans unpacked list tags as arguments .
"thread . start new thread ( main func , args , kwargs )","call the function thread.start_new_thread with main_func , args and kwargs as arguments ."
if item [ STR_ ] is not None :,"cat for 'term ' . if value under the 'item_copyright ' key of the item dictionary is not None ,"
from datetime import datetime,from datetime import datetime into default name space .
potfiles = self . build potfiles ( ),"call the method self.build_potfiles , substitute the result for potfiles ."
raise NotImplementedError ( STR_ ),raise an exception of class NotImplementedError with string 'subclasses of BaseCache must provide an add ( ) method ' as argument .
"newline = unicode ( "" STR_ "" )",convert newline character to unicode and substitute the result for newline .
"obj . children = copy . deepcopy ( self . children , memodict )","call the function copy.deepcopy with 2 arguments : self.children and memodict , substitute the result for obj.children ."
"if hasattr ( file or path , STR_ ) :","if file_or_path has an attribute 'read ' ,"
base2 = BaseConverter ( BASE2 ALPHABET ),"call the BaseConverter function with BASE2_ALPHABET as argument , store the result in base2 ."
"from django . core . exceptions import ImproperlyConfigured , ViewDoesNotExist",from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space .
kw = match . groupdict ( ),"call the method match.groupdict , substitute the result for kw ."
pass,do nothing .
try :,"try ,"
"if filename . endswith ( "" STR_ "" ) or filename . endswith ( "" STR_ "" ) :","if filename ends with string `` .pyc '' or it ends with `` .pyo '' ,"
try :,"try ,"
for field in model .  meta . fields :,"for every field in model._meta.fields ,"
"return filename and filename [ filename . rfind ( "" \\"" ) + 1 : ] . strip ( )
","call the method filename.rfind with an argument string `` \\ '' , increment the result by one ,"
def callable ( obj ) :,define the function callable with an argument obj .
msg = self . style . HTTP INFO ( msg ),"call the self.style.HTTP_INFO with an argument msg , substitute it for msg ."
"def render ( self , context ) :",define the method render with 2 arguments self and context .
if file  :,"and _ , respectively . if file_ is true ,"
from django . conf import settings,from django.conf import settings into default name space .
changeset = timestamp . strftime ( STR_ ),"call the timestamp.strftime with string ' % Y % m % d % H % M % S ' as an argument , substitute the result for changeset ."
additional headers = [ newheader for newheader in newheaders if newheader . lower ( ) not in existing headers ],"put every header in newheaders in a list , only if newheader converted to lowercase does not exist in existing_headers ,"
if num > self .  max entries :,"if num is greater than self._max_entries ,"
except ImportError :,"if ImportError exception is caught ,"
"def render ( self , context ) :","string 'ascii ' and errors set to a string 'replace ' , return the result . define the method render with 2 arguments : self and context ."
used = name . pop ( NUM_ ),"remove first element from name , substitute the result for used ."
"output . append ( normal row % { STR_ : force text ( bf errors ) , STR_ : force text ( label ) , STR_ : six . text type ( bf ) , STR_ : help text , STR_ : html class attr , STR_ : bf . html name , } )","format string normal_row with an dictionary containing 6 entries : return value of the function force_text with an argument bf_errors ,"
"setattr ( Module six moves urllib error , attr . name , attr )",set attr.name attribute of the Module_six_moves_urllib_error object to attr .
for model in app models :,"for every model in app_models ,"
self . value = value,substitute value for self.value .
except UnicodeDecodeError :,"if UnicodeDecodeError exception is caught ,"
definition [ STR_ ] = opts,substitute opts for value under the 'opts ' key of definition dictionary .
import sys,import module sys .
yield STR_ % line [ : space - NUM_ ],"get the first space decremented with integer 1 elements from string line , append newline character to it , and yield the result ."
"from django . core . exceptions import ValidationError , NON FIELD ERRORS",from django.core.exceptions import ValidationError and NON_FIELD_ERRORS into default name space .
content = File ( content ),content is a File object instance created with content argument .
"def add arguments ( self , parser ) :",define the method add_arguments with arguments self and parser .
used column names . append ( att name ),append att_name to used_column_names list .
"new name = STR_ % ( new name , num )","in string ' % s_ % d ' , replace ' % s ' with new_name and ' % d ' with num , substitute the result for new_name ."
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'copyright ' and value under the 'feed_copyright ' key of the self.feed dictionary .
except VariableDoesNotExist :,"if VariableDoesNotExist exception is caught ,"
"script url = get bytes from wsgi ( environ , STR_ , )","call the get_bytes_from_wsgi function with environ , string 'REDIRECT_URL ' and empty strings as arguments , substitute the result for script_url ."
class InMemoryUploadedFile ( UploadedFile ) :,derive the InMemoryUploadedFile class from the UploadedFile base class .
"url = quote ( url , safe = b STR_ )","call the function quote with 2 arguments : url and safe as bytes string ' ! *\ ' ( ) ; : @ & =+ $ , / ? # [ ] ~ ' , substitute the result for url ."
@ classmethod,"classmethod decorator ,"
"m = re . match ( naiveip re , options [ STR_ ] )","call the method re.match with 2 arguments : naiveip_re and value under the 'addrport ' key of the options dictionary , substitute the result for m ."
while i < l :,"while i is smaller than l ,"
except SuspiciousOperation as e :,"if exception SuspiciousOperation as e is caught ,"
"msgmerge options = [ STR_ , STR_ ]",msgmerge_options is an list with elements : strings '-q ' and ' -- previous ' .
class CachedDnsName ( object ) :,derive class CachedDnsName from the object base class .
return bytes ( value ),"call the function bytes with an argument value , return the result ."
if len ( bits ) == NUM_ :,"if length of bits equals integer 3 ,"
"def   new   ( mcs , name , bases , attrs ) :","define the method __new__ with 4 arguments : mcs , name , bases and attrs ."
return OrderedDict ( fields ),"return an instance of OrderedDict class , created with an argument fields ."
from django . core . files . move import file move safe,from django.core.files.move import file_move_safe into default name space .
"cursor . execute ( "" STR_ "" "" STR_ "" % table , [ key ] )","call the method cursor.execute with string `` SELECT cache_key , expires FROM % s WHERE cache_key = % % s '' as argument ,"
 ExpatParser . reset ( self ),call the method _ExpatParser.reset with an argumen sefl .
style = no style ( ),substitute return value of function no_style for style .
message = STR_,message is an string 'Unknown field ( s ) ( % s ) specified for % s ' .
class Node ( object ) :,derive the class Node from object base class .
"for name , field in self . fields . items ( ) :","call the method self.fields.items , for every name and field in result ,"
assert mimetype is not None,"if mimetype is None , raise an error ."
if not self .  upload handlers :,"if self._upload_handlers is false ,"
s = get serializer ( format ) ( ),"call the get_serializer function with an argument format , call the return value object and substitute it for s ."
"k = force bytes ( k , self . encoding )","call the function force_bytes with arguments k and self.encoding , substitute the result for k ."
"def add item elements ( self , handler , item ) :","define the method add_item_elements with 3 arguments : self , handler and item ."
help = STR_,help is a string 'Discover and run tests in the specified modules or the current directory . ' .
"locale dirs = filter ( os . path . is dir , glob . glob ( STR_ % basedir ) )","locale_dirs is a list of elements from the list of path names that maths the basedir path with '/* ' wild card characters for which call to the os.path.isdir returned true , assign it to locale_dirs ."
self . error class = error class,substitute error_class for self.error_class .
"def empty variable ( self , token ) :",define the method empty_variable with 2 arguments : self and token .
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
"handler . new file ( field name , file name , content type , content length , charset , content type extra )","call the method handler.new_file with 6 arguments : field_name , file_name , content_type , content_length , charset and content_type_extra ."
result . validators = self . validators [ : ],substitute elements of self.validators list for result.validators .
"def render ( self , name , value , attrs = None , choices = ( ) ) :","define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple ."
import os,import module os .
settings . configure ( ),call the method settings.configure .
"domains = ( STR_ , )",domains is a tuple with element string 'django ' .
"if hasattr ( self . data , STR_ ) and self . data . tzinfo :","is self.data has an attribute 'tzinfo ' and self.data.tzinfo is true ,"
if not digest :,"if digest is false ,"
connection = connections [ options [ STR_ ] ],"get the value under the 'database ' key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection ."
"def format html ( format string , * args , ** kwargs ) :","define the function format_html with 3 arguments : format_string , unpacked list args and unpacked dictionary kwargs ."
"if is in stance ( other , BaseContext ) :","if other is an instance of BaseContext class ,"
if settings . DEBUG :,"if settings.DEBUG is true ,"
"for field , in itial , data in zip ( self . fields , in itial , data ) :","for every field , initial and data in list of tuples tuple containing elements of self.fields , initial and data , respectively ,"
return STR_ % self . data . microsecond,return a string ' % 06d ' formated with self.data.microsecond .
app = STR_,app is a string 'django '
messages = ValidationError ( messages ),messages is an instance of the ValidationError class created with an argument messages .
"raw query string = get bytes from wsgi ( self . environ , STR_ , )","call the get_bytes_from_wsgi function with self.environ , string 'QUERY_STRING ' and empty string as arguments , substitute the return value for raw_query_string ."
requires system checks = False,requires_system_checks is boolean False .
content = content . decode ( STR_ ),"call the method content.decode with an argument string 'utf-8 ' , substitute it for content ."
"target dir = path . join ( top dir , relative dir )","join top_dir and relative_dir into a file path , substitute it for target_dir ."
"unique id = get tag uri ( item [ STR_ ] , item [ STR_ ] )","call the function get_tag_uri with 2 arguments : values under 'link ' and 'pubdate ' keys of item dictionary , substitute the result for unique_id ."
for migration in app migrations :,"use it as an argument for the call to the method self.style.MIGRATE_HEADING , write the result to self.stdout . for every migration in app_migrations ,"
from django . core . exceptions import ValidationError,from django.core.exceptions import ValidationError into default name space .
result = factory ( ** kwargs ),"call the function factory with an argument unpacked dictionary kwargs , substitute the result for result ."
"exc value = exc type ( "" STR_ "" % dt )","call the function exc_type with an argument string `` Unsupported value : % r . You should install pytz . `` , replace ' % s ' with dt ,"
"f . save form data ( in stance , cleaned data [ f . name ] )",call the method f.save_form_data with 2 arguments : instance and value under the f.name key of cleaned_data dictionary .
"if hasattr ( extra classes , STR_ ) :","if extra_classes has an attribute 'split ' ,"
cmatch = constant re . match ( parts [ NUM_ ] ),"call the method constant_re.match with first element of parts as an argument , substitute the result for cmatch ."
else :,"if not ,"
"def   init   ( self , subject = , body = , from email = None , to = None , bcc = None , connection = None , attachments = None , headers = None , alternatives = None , cc = None ) :","define the method __init__ with 11 arguments : self , subject set to an empty string , body set to an empty string ,"
del kwargs [ STR_ ],delete element under 'warning ' key of kwargs dictionary .
raise NotImplementedError ( STR_ ),raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a file_complete ( ) method ' .
"self . setFeature ( handler . feature external pes , False )",call the method self.setFeature with 2 arguments : handler.feature_external_pes and boolean False .
return STR_,return an string ' 0 ' .
self .  mark post parse error ( ),call the method self._mark_post_parse_error .
import re,import module re .
if STR_ in word or STR_ in word or STR_ in word :,"if ' . ' is contained in words or ' @ ' is contained in word or ' : ' is contained in word ,"
try :,"try ,"
else :,"if not ,"
for handler in handlers :,"for every handler in handlers ,"
if dt . year >= NUM_ :,"if dt.year is greater than or equal to integer 1900 ,"
return value,return value .
"except ( archive . ArchiveException , IOError ) as e :","if archive.ArchiveException or IOError , renamed to e , exception are caught ,"
try :,"try ,"
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ )","dest set to string 'use_ipv6 ' , default set to boolean False and help set to string 'Tells Django to use an IPv6 address. ' . call the method parser.add_argument with 5 arguments : string ' -- nothreading ' , action set to string 'store_false ' ,"
in put type = STR_,input_type is a string 'text ' .
@ decorator,decorator decorator .
extra params [ STR_ ] = True,"value under the 'unique ' key of the extra_params dictionary is boolean True ,"
"def add js ( self , data ) :",define the method __getitem__ with arguments self and name .
pass,do nothing .
self . next = next,substitute next for self.next .
return self .  size,return self._size .
self . dirpath = dirpath,substitute dirpath for self.dirpath .
import re,import module re .
current = settings . TEMPLATE STRING IF INVALID,"substitute settings.TEMPLATE_STRING_IF_INVALID for current ,"
docs version = STR_ % django . VERSION [ : NUM_ ],"convert first 2 elements of django.VERSION into a strings , join them together , separated by a ' . ' , substitute the result for docs_version ."
CONVERT PATTERN = re . compile ( r STR_ ),"compile a regex from raw string '^ ( ? P < prefix > [ a-z ] + ) : // ( ? P < suffix > . * ) $ ' , substitute it for CONVERT_PATTERN ."
"use workaround = ( ( current version < ( NUM_ , NUM_ , NUM_ ) ) or ( current version >= ( NUM_ , NUM_ ) and current version < ( NUM_ , NUM_ , NUM_ ) ) )","set use_workaround to boolean True if current_version tuple elements are smaller than the tuple ( 2,7,3 ) , respectively ,"
self . namespaces = [ ],self.namespaces is an empty list .
msg = self . style . HTTP SERVER ERROR ( msg ),"call the self.style.HTTP_SERVER_ERROR with an argument msg , substitute it for msg ."
if self . in stance . pk is None :,"if self.instance.pk is None ,"
translation . activate ( STR_ ),call the method translation.activate with an argument string 'en-us ' .
self . url name = url name,substitute url_name for self.url_name .
if fields is not None and f . name not in fields :,"if fields is not None and f.name is not contained in fields ,"
"def multiple chunks ( self , chunk size = None ) :",define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None .
pass,do nothing .
"def make bytes ( self , value ) :","expires as a string 'Thu , 01-Jan-1970 00:00:00 GMT ' , return the result . define the method make_bytes with 2 arguments : self and value ."
"def   init   ( self , offset ) :",define the method __init__ with 2 arguments : self and offset .
class AutoEscapeControlNode ( Node ) :,derive the class AutoEscapeControlNode from Node base class .
"options += [ ( app config . label , NUM_ ) for app config in app configs ]","append tuple containing two entries : app_config.label and integer 0 to options , for every app_config in app_configs ."
return,"return an empty string ,"
if self . old timezone is None :,"if self.old_timezone is None ,"
pass,do nothing .
if len ( fks to parent ) == NUM_ :,if length of fks_to_parent equals integer 1 .
while i < len ( subject ) and subject [ i ] ! = subject [ p ] :,"while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject ,"
if path is None :,"if path is None ,"
raise BadSignature ( STR_ % sig ),"raise an BadSignature exception with an argument string 'Signature `` % s '' does not match ' , where ' % s ' is replaced by sig ."
if cached is not None :,"if cached is not None ,"
if cache timeout is None :,"if cache_timeout equals to None ,"
"def save new objects ( self , commit = True ) :",define the method save_new_objects with 2 arguments : self and commit set to boolean True .
  getitem   = new method proxy ( operator . getitem ),"call the function new_method_proxy with an argument operator.getitem , substitute the result for __getitem__ ."
if decimal pos is not None :,"if decimal_pos is not None ,"
elif simple url 2 re . match ( middle ) :,"otherwise if call the method simple_url_2_re.match with an argument middle evaluates to true ,"
return message,return message .
self . in teractive = options . get ( STR_ ),"get the value from the options dictionary under the key 'interactive ' , substitute it for self.interactive ."
if args :,"if args in true ,"
field desc += STR_,"for every k and v in return value of the extra_params.items method , join all results into a string separated by a string ' , ' , substitute it for field_desc . append string ' ) ' to field_desc ."
if PY3 :,"if PY3 is true ,"
if status ! = STATUS OK :,"if status is not equal to STATUS_OK ,"
return self . id in settings . SILENCED SYSTEM CHECKS,"if self.id is contained in settings.SILENCED_SYSTEM_CHECKS return boolean True , False otherwise ."
item . update ( kwargs ),"result of the function iri_to_uri called with an argument link for 'link ' , result of the function to_unicode called with an argument description for 'description ' , result of the function to_unicode called with an argument author_email for 'author_email ' , result of the function to_unicode called with an argument author_name for 'author_name ' , result of the function iri_to_uri called with an author_link link for 'author_link ' , pubdate for 'pubdate ' , updateddate for 'updateddate ' , result of the function to_unicode called with an comments author_name for 'comments ' , result of the function to_unicode called with an argument unique_id ) for 'unique_id ) ' , unique_id_is_permalink for 'unique_id_is_permalink ' , enclosure for 'enclosure ' , if true , categories is value for 'categories ' key , if not , empty tuple is value for 'categories ' key , result of the function to_unicode called with an argument item_copyright for 'item_copyright ' , ttl for 'ttl ' . update dictionary item with an argument kwargs ."
return,return nothing .
raise CommandError ( STR_ % exclude ),"raise an CommandError exception with an argument string 'Unknown model in excludes : % s ' , where ' % s ' is replaced with exclude ."
"guts = re . sub ( r "" STR_ "" , escape quotes , tok [ NUM_ : - NUM_ ] )","call the function re.sub with 3 arguments : raw string `` \\.| . `` , escape_quotes and tok without the first and last element ,"
return bytes ( value ),"call the function bytes with an argument value , return the result ."
"for field , messages in errors . error dict . items ( ) :","call the function errors.error_dict.items , for every field and messages in the result ,"
if PY3 :,"if PY3 is true ,"
self . add arguments ( parser ),call the method self.add_arguments with an argument parser .
"raise InvalidTemplateLibrary ( "" STR_ "" % ( taglib module , e ) )","raise an InvalidTemplateLibrary exception with an argument string `` ImportError raised loading % s : % s '' ,"
file field list = [ ],file_field_list is an empty list .
def keys ( self ) :,define the method keys with an argument self .
"if hasattr ( request , STR_ ) :","if request has an attribute 'session ' ,"
"linebreaks = allow lazy ( linebreaks , six . text type )","call the function allow_lazy with 2 arguments : linebreaks , six.text_type , substitute the result for linebreaks ."
"default error messages = { STR_ :   ( STR_ ) , }",default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string 'Enter a valid URL . ' for 'invalid ' .
if strings only and is  protected type ( s ) :,"if the boolean return vale of the call to the function is_protected_type ( s ) and string_onlys are boolean True ,"
"if is in stance ( data , ( MultiValueDict , MergeDict ) ) :","if data is an instance of MultiValueDict or MergeDict class ,"
"except ( ValueError , TypeError ) :","if ValueError or TypeError exceptions are caught ,"
if not os . path . exists ( top dir ) :,"if file path top_dir doesnt exists ,"
"def has key ( self , key ) :",define the method has_key with 2 arguments : self and key .
"for filepath in self . get template sources ( template name , template dirs ) :","call the method self.get_template_sources with 2 arguments template_name and template_dirs , for every filepath in the result ,"
from importlib import import module,from importlib import import_module into default name space .
"raise TemplateSyntaxError ( "" STR_ "" % bits [ NUM_ ] )","raise an TemplateSyntaxError exception with an argument string `` ' % s ' takes one argument '' , where ' % s ' is replaced with first element of bits ."
pass,do nothing .
"with io . open ( work file , "" STR_ "" , encoding = STR_ ) as fp :","call the function io.open with 3 arguments : work_file , string ' w ' and encoding set to string 'utf-8 ' as arguments ,"
if STR_ in ip str . split ( STR_ ) [ - NUM_ ] :,"split ip_str into parts by ' : ' , if ' . ' is contained in the last element of the result ,"
Module six moves urllib robotparser .  moved attributes =  urllib robotparser moved attributes,substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes .
display url = url,substitute url for display_url .
"value = unicodedata . normalize ( STR_ , value ) . encode ( STR_ , STR_ ) . decode ( STR_ )","call the method unicodedata.normalize with 2 arguments : string 'NFKD ' and value , encode the result with 2 arguments : string 'ascii ' ,"
parts = [ ],parts is an empty list .
memo [ id ( self ) ] = result,"get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it ."
attrs [ STR_ ] = auto id,substitute auto_id for value under the 'id ' key of the attrs dictionary .
attrs [ STR_ ] = widgets,substitute widgets for value under the 'widgets ' key of attrs dictionary .
class StringOrigin ( Origin ) :,derive the class StringOrigin form the base class Origin .
handle default options ( options ),call the function handle_default_options with an argument options .
"parser . add argument ( STR_ , help = STR_ )","call the add_argument method on the parser object , with string 'migration_name ' , and help set to string 'Migration name to print the SQL for . ' as arguments ."
pass,do nothing .
@ python 2 unicode compatible,"python_2_unicode_compatible decorator ,"
class UnrecognizedArchiveFormat ( ArchiveException ) :,derive the class UnrecognizedArchiveFormat from the ArchiveException base class .
from django . core . management . base import AppCommand,from django.core.management.base import AppCommand into default name space .
self . first = True,self.first is boolean True .
self . write migration files ( changes ),call the method self.write_migration_files with an argument changes .
"in hibit post migrate = options . get ( STR_ , False )","get the value 'inhibit_post_migrate ' key of the options dictionary , if it exists substitute it for inhibit_post_migrate , otherwise inhibit_post_migrate is boolean False ."
except :,"otherwise if any other exception is caught ,"
import copy,import module copy .
found = self . importer ( used ),"call the method self.importer with an argument used , substitute the result for found ."
self . close ( ),call the method self.close .
def get valid filename ( s ) :,define the function get_valid_filename with an argument s .
self .  boundary = boundary,substitute boundary for self._boundary .
def lower ( value ) :,define the function lower with an argument value .
"if is in stance ( addr , six . string types ) :","if addr is a instance of six.string_types ,"
except UnicodeDecodeError :,"return the result . if UnicodeDecodeError exception is caught ,"
def deactivate ( ) :,define the function deactivate .
"def   init   ( self , params ) :",define the initialization function __init__ with self class instance and params as arguments .
def forms ( self ) :,define the method forms with an argument self .
break,break the loop execution .
"outdict [ name ] = value , params",assign value and params to the value under the name key of the outdict dictionary .
"  all   = ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , )","__all__ is a tuple of strings : 'Media ' , 'MediaDefiningClass ' , 'Widget ' , 'TextInput ' , 'EmailInput ' , 'URLInput ' , 'NumberInput ' ,"
if field in self . errors :,"if field is contained in self.errors ,"
return,return an empty string .
"def has leading dir ( self , paths ) :",define the method has_leading_dir with 2 arguments self and paths .
"return self . represent scalar ( STR_ , str ( data ) )","call the method self.represent_scalar with 2 arguments : string 'tag : yaml.org,2002 : str ' and data converted into a string , return the result ."
extra classes . add ( self . form . error css class ),add self.form.error_css_class to extra_classes set .
try :,"try ,"
context match = context re . match ( bmatch . group ( NUM_ ) ),"call the method bmatch.group with an argument integer 1 , use the result as an argument for the call to the function context_re.match ,"
elif str ( level ) == level :,"otherwise if level converted into a string equals level ,"
"self . stdout . write ( "" STR_ "" % operation . describe ( ) )","substitute ' % s ' in a string `` - % s\n '' with return value of the operation.describe method , write the result to self.stdout ."
return timedelta ( seconds = - time . altzone ),"call the function timedelta with an argument seconds as negative time.altzone , return the result ."
"def   init   ( self , media = None , ** kwargs ) :","define the method __init__ with 3 arguments : self , media set to None and unpacked dictionary kwargs ."
return str ( o ),"convert o to an string , return it ."
else :,"if not ,"
break,break the loop execution .
"self . stream = options . pop ( "" STR_ "" , six . StringIO ( ) )","remove the 'stream ' key from the options dictionary and substitute it for self.stream ,"
return list ( self .   iter   ( ) ) [ idx ],"convert result of the method self.__iter__ into a list , return element at the idx index ."
"def  create mime attachment ( self , content , mimetype ) :","define the method _create_mime_attachment with arguments self , content and mimetype ."
from django . core . mail . backends . base import BaseEmailBackend,from django.core.mail.backends.base import BaseEmailBackend into default name space .
"def wrapper ( * args , ** kwds ) :",define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
 default = translation ( settings . LANGUAGE CODE ),"call the function translation with an argument settings.LANGUAGE_CODE , substitute the result for _default ."
in put type = STR_,input_type is a string 'url ' .
return attrs,return attrs .
@ property,"property decorator ,"
arg vals . append ( arg . resolve ( context ) ),"call the method arg.resolve with an argument context , append the result to arg_vals ."
from django . core . management . base import CommandError,from django.core.management.base import CommandError into default name space .
tag exists = registry . tag exists,substitute registry.tag_exists for tag_exists .
"choices = ( ( STR_ , ugettext lazy ( STR_ ) ) , ( STR_ , ugettext lazy ( STR_ ) ) , ( STR_ , ugettext lazy ( STR_ ) ) )","choices is a tuple with 3 elements : tuple with 2 elements : string ' 1 ' and return value of the function ugettext_lazy ,"
def render ( self ) :,define the method render with an argument self .
def   init   ( self ) :,define the method __init__ with an argument self .
get language = lambda : settings . LANGUAGE CODE,get_language is a lambda function returning settings.LANGUAGE_CODE .
"super ( Textarea , self ) .   init   ( default attrs )","call the method __init__ from the base class of the class Textarea , with an argument default_attrs ."
match = date re . match ( value ),"match regex date_re with value , substitute the result for match ."
"parser . add argument ( STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","call the add_argument method on the parser object , with string ' -- database ' , default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database to create SQL for . Defaults to the default '' database . ' as arguments ."
"super ( EmailBackend , self ) .   init   ( * args , ** kwargs )","call the method __init__ from the base class of EmailBackend class , with arguments : unpacked list args and unpacked dictionary kwargs ."
"def   ne   ( self , other ) :",define the method __ne__ with 2 arguments : self and other .
msg = message . message ( ),"call the method message.message , substitute the result for msg ."
BASE56 ALPHABET = STR_,BASE56_ALPHABET is a string '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz ' .
else :,"if not ,"
return time str + STR_,"append string '-0000 ' to time_str , return the result ."
try :,"try ,"
"def in fix ( bp , func ) :",define the function infix with 2 arguments bp and func .
import sys,import module sys .
new ip . append ( STR_ ),append string '0000 ' to new_ip .
"elif hasattr ( query , STR_ ) :","otherwise if query has an attribute 'items ' ,"
"self . max digits , self . decimal places = max digits , decimal places","decimal_places set to None , unpacked list args and unpacked dictionary kwargs . substitute max_digits and decimal_places for self.max_digits and self.decimal_places ."
except Exception as e :,"as the arguments , substitute the result for response . if Exception , renamed to e , exception is caught ,"
r = r [ : - NUM_ ] + STR_,"cut the last 6 elemetns from r , append character ' Z ' to it , substitute the result for r ."
else :,"replace ' % s ' with : elements of last element of parts joined into a string and last element of parts . if not ,"
pass,do nothing .
"if hasattr ( rel model , STR_ ) and rel model ! = model :","if rel_model has an 'natural_key ' attribute and rel_model is not equal to model ,"
extra params [ STR_ ] = True,value under the 'null ' key of the extra_params dictionary is boolean True .
yield item,yield item .
"raise AttributeError ( "" STR_ "" % self .   class   .   name   )","raise an AttributeError exception with an argument string : `` ' % s ' object has no attribute 'cleaned_data ' '' ,"
return value . strftime ( format ),"get_format called with an argument string 'DATE_INPUT_FORMATS ' , substitute the result for format . call the method value.strftime with an argument format , return the result ."
kwargs [ str ( param ) ] = value,"convert param to a string , use it as a key to get the value from kwargs dictionary , assign it value ."
"def Deserializer ( object list , ** options ) :",define the function Deserializer with arguments object_list and unpacked dictionary options .
from xml . dom import pulldom,from xml.dom import pulldom into default name space .
return result,return result .
for f in file list :,"for f in file_list ,"
"cursor . execute ( "" STR_ "" % table )","substitute the ' % s ' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary , respectively . call the method cursor.execute with string `` SELECT COUNT ( * ) FROM % s '' as argument , substitute the ' % s ' with table ."
return STR_,return string 'nd ' .
self . tags . update ( lib . tags ),update self.tags dictionary with lib.tags .
return SafeText ( data ),"return an instance of SafeText , created with an argument data ."
"def constant time compare ( val1 , val2 ) :",call the function constant_time_compare with 2 arguments : val1 and val2 .
return self . STDOFFSET,return self.STDOFFSET .
class TextInput ( Input ) :,"result of the function flatatt called with an argument final_attrs , return the result . derive the class TextInput from the Input base class ."
try :,"try ,"
model fields = Model .  meta . get all field names ( ),"call the method Model._meta.get_all_field_names , substitute the result for model_fields ."
if not bits :,"if bits is false ,"
return,return an empty string .
fileno = property ( lambda self : self . file . fileno ),"define lambda function that returns self.file.fileno field , use it as an argument for property function , put the result in fileno ."
"return ( NUM_ , NUM_ )",return a tuple with 2 elements : integers 1 and 0 .
unichr = chr,substitute chr for unichr .
"value = data . get ( name , None )","get the value under the name key of the data dictionary , if it exists substitute it for value , if not , value is None ."
return list ( self ),convert self to a list and return it .
self . default locale path = None,self.default_locale_path is None .
try :,"try ,"
ignored = [ ],ignored is an empty list .
BASE62 ALPHABET = STR_,BASE62_ALPHABET is string '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ' .
"self . stream . write ( "" STR_ "" )","write ' , ' to the self.stream file stream ."
"def to python ( self , value ) :",define the method to_python with arguments self and value .
if not extra context :,"if extra_context is false ,"
e . message = self . error messages [ e . code ],"get the value under the e.code key of the self.error_messages dictionary , substitute the result for e.message ."
from django . http . cookie import SimpleCookie,from django.http.cookie import SimpleCookie into default name space .
"def transform ( self , node , results ) :","define the method transform with 3 arguments : self , node and results ."
stats [ HITS ] += NUM_,increment stats dictionary value under the HITS key by integer 1 .
def m2m convert ( value ) :,define the function m2m_convert with an argument value .
except ImportError :,"if ImportError exception is caught ,"
  bytes   = serialize,substitute serialize for __bytes__ .
prefix = get script prefix ( ),"call the function get_script_prefix , substitute the result for prefix ."
pass,do nothing .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
bits = arg . split ( STR_ ),"split arg by ' , ' , substitute the result for bits.s"
return dec,return dec .
if typed :,"if typed is true ,"
ip str =  sanitize ipv4 mapping ( ip str ),"call the function _explode_shorthand_ip_string with an argument ip_str , substitute the result for ip_str ."
"extensions = tuple ( handle extensions ( options [ STR_ ] , ignored = ( ) ) )","where ' % s ' is replaced with top_dir . call the function handle_extensions with 2 arguments : value under the 'extensions ' key of the options dictionary ,"
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'ttl ' and value under the 'ttl ' key of the item dictionary .
return in put val,return input_val .
self .  caches = local ( ),"call the function local , substitute the result for self._caches ."
class TemplateDoesNotExist ( Exception ) :,derive the class TemplateDoesNotExist form the base class Exception .
self . symlinks = options . get ( STR_ ),"get the value under the 'symlinks ' key of the options dictionary , substitute it for self.symlinks ."
class Trans ( object ) :,derive the class Trans from the object base class .
"if not getattr ( f , STR_ , False ) :","get 'editable ' attribute from object f , if it doesnt exists or its true ,"
else :,"if not ,"
"return urljoin ( self . base url , filepath to uri ( name ) )","call the urljoin function with arguments : self.base_url and result of the call to the function filepath_to_uri with argument name , return the result ."
"val = STR_ . join ( sanitize address ( addr , encoding ) for addr in getaddresses ( ( val , ) ) )","call the function sanitize_address with arguments addr and encoding , for every addr in return value of the getadresses function with tuple containing val as argument , join all the results into a string separated by ' , ' , substitute the result for val ."
response [ STR_ ] = http date ( time . time ( ) + cache timeout ),"sum return value of the function call time.time ( ) and cache_timeout , use it as an argument for function call of http_date ,"
bytes read += len ( bytes ),increment bytes_read by length of bytes .
if self . allow folders :,"if self.allow_folders is true ,"
try :,"try ,"
import fcntl,import fcntl .
if not email messages :,"if email_messages is false ,"
continue,"skip this loop iteration ,"
"from django . core . servers . basehttp import run , get internal wsgi application",from django.core.servers.basehttp import run and get_internal_wsgi_application into default name space .
value = bool ( value ),convert value into boolean and substitute it for value .
import base64,import module base64 .
"constant string = constant string . replace ( "" STR_ "" , "" "" )","where 'strdq ' is replaced with ' '' [ ^ '' \\ ] * ( ? : \\ . [ ^ '' \\ ] * ) * '' ' , 'strsq ' is replaced with `` ' [ ^'\\ ] * ( ? : \\ . [ ^'\\ ] * ) * ' '' , 'i18n_open ' is replaced with return value of function re.escape called with an argument string ' _ ( ' , 'i18n_close ' is replaced with return value of function re.escape called with an argument string ' ) ' . remove all occurrences of newline character from constant_string ."
unhandled params . pop ( NUM_ ),remove first element of unhandled_params .
return result,return result .
"  , params = cgi . parse header ( content disposition )","call the method cgi.parse_header with an argument content_disposition , assign the result to _ and params , respectively ."
import warnings,import module warnings .
def get serializer ( format ) :,define the function get_serializer with an argument format .
else :,"if not ,"
if old handler is not None :,"if old_handler is not None ,"
if field . help text :,"if field.help_text is true ,"
if bytes < KB :,"if bytes is smaller than KB ,"
TYPE = RAW,substitute RAW for TYPE .
return unbound,return unbound .
if last == NUM_ :,"if las equals integer 3 ,"
"assert remaining > NUM_ , STR_","if remaining is not greater than 0 , assert an error with the message string 'remaining bytes to read should never go negative ' ."
key += kwd mark,increment key by kwd_mark .
"kwargs safe = dict ( ( k , conditional escape ( v ) ) for ( k , v ) in six . iteritems ( kwargs ) )","kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs ,"
"clean = lambda self , x : x","clean is a lambda function with arguments self and x , return value is x ."
result = c ( ** kwargs ),"called with an argument k. call the function c with an argument unpacked dictionary kwargs , substitute the result for result ."
signed value = force str ( signed value ),"call the function signed_value with an argument value , substitute the result for signed_value ."
def   str   ( self ) :,define the method __str__ with an argument self .
try :,"try ,"
def getvalue ( self ) :,define the method getvalue with an argument self .
if self . active writers == NUM_  and self . waiting writers == NUM_  and self . active readers == NUM_ :,"if self.active_writers equals integer 0 and self.waiting_writers equals integer 0 and self.active_readers equals integer 0 ,"
"raise CommandError ( "" STR_ "" % format )","raise CommandError with an argument string 'Unknown serialization format : % s ' , where ' % s ' is replaced with format ."
def upload complete ( self ) :,define the method upload_complete with argument self .
return self .   cast ( ) % rhs,"call the function sself.__cast with an argument self , divide the result with rhs and return the reminder of the division ."
"raise TemplateSyntaxError ( "" STR_ "" % ( name , param ) )","raise an TemplateSyntaxError exception with an argument string `` ' % s ' received multiple values for keyword argument ' % s ' '' ,"
"def id for label ( self , id  ) :",define the method id_for_label with 2 arguments : self and id .
"for refto , refs in references . items ( ) :","for every refto and refs in return value of the method references.items ,"
illegal formatting =  illegal formatting . search ( fmt ),"call the method _illegal_formatting.search with an argument fmt , substitute the result for illegal_formatting ."
try :,"try ,"
raise self . exception,raise an self.exception exception .
j = NUM_ ** factor,"bring integer 36 to the power of factor , substitute the result for j ."
for statement in in dex output :,"tablename and return value of the function force_text called with an argument e , respectively . for every statement in index_output ,"
s = s . encode ( STR_ ),"call the method s.encode with an argument string 'utf-8 ' , substitute the result for s ."
with Archive ( path ) as archive :,"instantiate Archive class with an argument path , with it renamed to archive , perform ,"
"def  cull ( self , db , cursor , now ) :","define the protected method _cull with self class instance , db , cursor and now as arguments ."
"def run from argv ( self , argv ) :",define the method run_from_argv with arguments self and argv .
"os . utime ( dst , ( st . st atime , st . st mtime ) )",call the os.utime function with arguments dst and tuple containing 2 elements : st.st_atime and st.st_mtime .
"self . fields = getattr ( options , STR_ , None )","get 'fields ' attribute from the options object , if it exists substitute it for self.fields , if not self.fields is None ."
KB = NUM_ << NUM_,"called with 2 arguments : value rounded to 1 decimal point and integer 1. move integer 1 left for 10 bits , substitute the result for KB ."
self . GET = QueryDict ( mutable = True ),self.GET is an instance of QueryDict class created with an argument mutable set to boolean True .
"def unsign ( self , value , max age = None ) :","define the method unsign with arguments self , value and max_age set to None ."
"item , old style list = convert old style list ( sublist )","call the function convert_old_style_list with an argument sublist , substitute the result for item and old_style_list ."
return  get timezone name ( get current timezone ( ) ),"call the function get_current_timezone , use the result as an argument for the call to the function _get_timezone_name , return the result ."
return self .  regex dict [ language code ],return the value under the language_code key of the self._regex_dict dictionary .
"def send messages ( self , email messages ) :",define the method send_messages with arguments self and email_message .
from django . core import checks,from django.core import checks into default name space .
try :,"try ,"
"super ( SimpleTemplateResponse , self ) .   init   ( , content type , status )","call the __init__ method from the base class of the class SimpleTemplateResponse , with 3 arguments : an empty string , content_type and status ."
"suffixes = ( STR_ . join ( ext for ext in combo if ext ) for combo in product ( databases , ser fmts , cmp fmts ) )","for every ext in combo , if ext is true , join it to a string , separated by ' . ' , put the result in a tuple ,"
"except ( ValueError , TypeError ) :","if ValueError or TypeError exceptions are caught ,"
"if is in stance ( o , datetime . datetime ) :",if o is an instance of datetime.datetime object .
x = NUM_,x is integer 0 .
return self . limit choices to,return self.limit_choices_to .
"def enter command ( self , command , token ) :","define the method enter_command with 3 arguments : self , command and token ."
def date ( self ) :,"and time.tzinfo , return the result . define the method date with an argument self ."
" html parser . HTMLParser .   init   ( self , convert charrefs = convert charrefs , ** kwargs )","and dictionary of arbitrary length **kwargs as arguments . call the initialization method for the base class , _html_parser.HTMLParser.__init__ with self ,"
"os . utime ( path , None )","call the os.utime unction , with path and None as arguments ."
top errors = self . non field errors ( ),"call the method self.non_field_errors , substitute the result for top_errors ."
requires system checks = False,requires_system_checks is boolean False .
ret ip = [ ],ret_ip is an empty list .
label = conditional escape ( force text ( bf . label ) ),"call the function force_text with an argument bf.label , use the result as an argument for the call to the function conditional_escape , substitute the result label ."
"if is in stance ( value , datetime . date ) :","if value is an instance of datetime.date ,"
elif self .  delegate text :,"otherwise if self._delegate_text is true ,"
"def  text words ( self , length , truncate ) :","define the method _text_words with 3 arguments : self , length and truncate ."
if self . is  checked ( ) :,"substitute the result for final_attrs . call the method self.is_checked , if it evaluates to true ,"
"help = "" STR_ """,help is an string `` Creates the tables needed to use the SQL cache backend . `` .
"def literals ( choices , prefix = "" "" , suffix = "" "" ) :","define the function literals with 3 arguments : choices , prefix set to an empty string and suffix set to an empty string ."
for line in text . splitlines ( True ) :,"call the method text.splitlines with an argument boolean True , for every line in the result ,"
def gettext ( message ) :,define the function gettext with an argument message .
tt = time . localtime ( stamp ),"call the method time.localtime with an argument stamp , substitute the result for tt ."
def latest post date ( self ) :,define the method latest_post_date with an argument self .
if new name . startswith ( STR_ ) :,"if new_name starts with a string ' _ ' ,"
"meth = cls .   promise   ( resultclass , k , v )","call the method cls.__promise__ with 3 arguments : resultclass , k and v , substitute the result for meth ."
del cc [ STR_ ],delete dictionary item 'public ' from cc .
try :,"try ,"
"def convert ( self , value ) :",define the method convert with 2 arguments : self and value .
if in itial is None :,"if initial is None ,"
"f = super ( ImageField , self ) . to python ( data )","call the method to_python with an argument data from the base class of the class ImageField , substitute the result for f ."
"if is in stance ( s , six . memoryview ) :",if s is an instance of an object six.memoryview .
return obj,return obj .
exclude = options . get ( STR_ ),"get the value under the key 'exclude ' of the options dictionary , substitute it for exclude ."
"def combine ( cls , date , time ) :","define the method combine with 3 arguments : cls , date and time ."
"REASON PHRASES = {}","REASON_PHRASES is a dictionary containing 59 initial entries : 'CONTINUE ' for 100 , 'SWITCHING PROTOCOLS ' for 101 ,"
pass,do nothing .
total forms = in itial forms,substitute initial_forms for total_forms .
"args safe = map ( conditional escape , args )","map elements from args through the function conditional_escape , substitute the result for args_safe ."
return - NUM_,return integer -1 .
except UnicodeEncodeError :,"if UnicodeEncodeError exception is caught ,"
def is  valid ( self ) :,define the method is_valid with an argument self .
else :,"if not ,"
"modules =  format modules cache . setdefault ( lang , list ( iter format modules ( lang , settings . FORMAT MODULE PATH ) ) )","call the method _format_modules_cache.setdefault with 2 arguments : lang and list created out of the results of the function ,"
def  sanitize ipv4 mapping ( ip str ) :,define the function _sanitize_ipv4_mapping with an argument ip_str .
del options [ STR_ ],delete the value under the 'liveserver ' key of the options dictionary .
"new path = path . join ( top dir , relative dir , filename . replace ( base name , name ) )","join top_dir , relative_dir and return value of the function filename.replace called with 2 arguments : base_name and name ,"
pass,do nothing .
if template . startswith ( STR_ ) :,"if template starts with a string 'file : // ' ,"
"return func ( * args , ** kwargs )","use the result as an argument for the call to the mark_safe function , return the result . call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs , return the result ."
writelines = property ( lambda self : self . file . writelines ),"define lambda function that returns self.file.writelines field , use it as an argument for property function , put the result in writelines ."
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
try :,"try ,"
"return form . cleaned data . get ( DELETION FIELD NAME , False )","get the value under the DELETION_FIELD_NAME key of the form.cleaned_data dictionary , if it exists return it , if not , return boolean False ."
if value in self . empty values :,"if value is contained in self.empty_values ,"
"self .  post , self .  files = QueryDict ( self . body , encoding = self .  encoding ) , MultiValueDict ( )","self._post is an instance of QueryDict created with arguments : self.body and encoding set to self._encoding ,"
return EscapeText ( s ),"return an instance of EscapeText , created with an argument s ."
"def   contains   ( self , other ) :",define the method __contains__ with 2 arguments : self and other .
declared fields = OrderedDict ( ),declared_fields is an instance of OrderedDict class .
elif name is not None and compile function is not None :,"otherwise if name is not None and compile_function is not None ,"
"def create token ( self , token string , in  tag ) :","define the method create_token with 3 arguments : self , token_string and in_tag ."
"if is in stance ( value , bytes ) :","if value is an instance of bytes class ,"
"if not hasattr ( self , STR_ ) :","if self doesnt have an '_deleted_form_indexes ' attribute ,"
try :,"try ,"
except ValueError :,"if ValueError exception is caught ,"
self . html initial id = form . add initial prefix ( self . auto id ),"call the method form.add_initial_prefix with an argument self.auto_id , substitute the result for self.html_initial_id ."
"def find files ( self , root ) :",define the method find_potfiles with an arguments self and root .
return force str ( self .  tzname ),"call the function force_str with an argument self._tzname , return the result ."
result . append ( ch ),append ch to result .
k = item [ NUM_ ],substitute first element of item for k .
"value = self . get ( key , version = version )","call the method self.get with key and version set to version as arguments , substitute the result for value ."
"in dex sql = connection . creation . sql indexes for model ( model , no style ( ) )","call the connection.creation.sql_indexes_for_model with model and no_style ( ) as arguments , substitute the result for index_squl ."
"from django . utils . encoding import force text , python 2 unicode compatible",from django.utils.encoding import force_text and python_2_unicode_compatible into default name space .
if fget is not None :,"if fget is not None ,"
"def   init   ( self , data = None , files = None , in stance = None , save as new = False , prefix = None , queryset = None , ** kwargs ) :","define the method __init__ with 8 arguments : self , data set to None , files set to None , instance set to None ,"
"handler . addQuickElement ( "" STR_ "" , "" "" , { "" STR_ "" : cat } )","call the method handler.addQuickElement with 3 arguments : string 'link ' , an empty string and a dictionary with an entry :"
return { },return is empty dictionary .
self . event stream . expandNode ( node ),call the method self.event_stream.expandNode with an argument node .
try :,"try ,"
except IndexError :,"if IndexError exception is caught ,"
kwargs = { },kwargs is an empty dictionary .
"from . messages import ( CheckMessage , Debug , Info , Warning , Error , Critical , DEBUG , INFO , WARNING , ERROR , CRITICAL )","from .messages import CheckMessage , Debug , Info , Warning , Error , Critical , DEBUG , INFO , WARNING , ERROR and CRITICAL into default name space ."
self .  varlist = varlist,substitute varlist for self.varlist .
try :,"try ,"
obj = form . save ( commit = False ),"call the method form.save , with an argument commit set to boolean False , substitute the result for obj ."
obj . widgets = copy . deepcopy ( self . widgets ),"call the method copy.deepcopy with an argument self.widgets , substitute the result for obj.widgets ."
from io import BytesIO,from io import BytesIO into default name space .
"def  check boolean field default value ( app configs = None , ** kwargs ) :",define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments .
from django . utils import six,from django.utils import six into default name space .
def in itial form count ( self ) :,define the method initial_form_count with an argument self .
"except ( ImportError , IndentationError , NameError , SyntaxError , TypeError , AttributeError ) :","if ImportError , IndentationError , NameError , SyntaxError , TypeError or AttributeErrorexception is caught ,"
if settings . USE L10N :,"if settings.USE_L10N is true ,"
"stream = open ( output , STR_ ) if output else None","open the output file in writing mode if output is true , assign the file descriptor to stream , otherwise stream is None ."
"filter expr = parser . compile filter ( "" STR_ "" % ( rest ) )","call the method parser.compile_filter with an argument string `` var| % s '' , where ' % s ' is replaced with rest , substitute the result for filter_expr ."
is  usable = False,is_usable is boolean False .
if escaped :,"if escaped is true ,"
else :,"if not ,"
"def process default ( self , event ) :",define the method process_default with self class instance and event as arguments .
except ValueError :,"if ValueError exception is caught ,"
MAXSIZE = in t ( ( NUM_ << NUM_ ) - NUM_ ),"bitwise shift integer 1 to the left by 31 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE ."
"return f ( * args , ** kwargs )","formated with 3 elements : self.class_name , self.old_method_name and self.new_method_name , self.deprecation_warning and integer 2. call the function f with a arguments : unpacked list args and unpacked dictionary kwargs , return the result ."
"def  update unget history ( self , num bytes ) :",define the method _update_unget_history with arguments self and num_bytes .
return self [ key ],return value under the key key of self dictionary .
s = Select ( choices = choices ),"s is an instance of the Select class , created with choices set to choices ."
self . mod = new,substitute new for self.mod .
"sites2 =  findall ( s2 , str ( year + NUM_ ) )","added to a tuple with an element sum of year an integer 28 , substitute the result for s2 . call the function _findall with 2 arguments : s2 and sum of year and integer 28 , converted into a string , substitute the result for sites2 ."
from . import six,from . import six into default name space .
return ret,return ret .
"basedirs . append ( os . path . join ( app config . path , STR_ ) )","join app_config.path and 'locale ' into a valid directory path , separated by '/ ' , append it to basedirs ."
out . write ( STR_ % cmatch ),"format string ' _ ( % s ) ' , with fmatch , write it to out ."
"ch , escaped = next ( pattern iter )","get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively ."
"if not is in stance ( value , ( bytes , six . text type ) ) :","if value is not an instance of bytes or six.text_type classes ,"
"yield "" STR_ """,yield string `` # '' as the result .
if check path :,"if check_path is true ,"
"raise KeyError ( "" STR_ "" % lang code )","raise an KeyError with an argument `` Unknown language code % s . `` , where ' % s ' is replaced with lang_code ."
"msg = SafeMIMEMultipart (  subtype = self . mixed subtype , encoding = encoding )","msg is an instance of a class SafeMIMEMultipart , created with arguments : _subtype set to self.mixed_subtype and encoding set to encoding ."
from django . core . management . sql import sql custom,from django.core.management.sql import sql_custom into default name space .
"if getattr ( current , STR_ , False ) :","get the 'do_not_call_in_templates ' attribute of current object , if it exists and is true ,"
"def   wrapper   ( self , * args , ** kw ) :","define the method __wrapper__ with 3 arguments : self , unpacked list args and unpacked dictionary kw ."
return,return nothing .
if in stance . pk is None :,"if instance.pk is None ,"
opfunc .   name   = opname,substitute opname for opfunc.__name__ .
pass,do nothing .
def   repr   ( self ) :,define the method __repr__ with argument self .
if key not in self :,"if key is not contained in self ,"
def tokenize ( self ) :,define the method tokenize with an argument self .
self . deleted objects . append ( obj ),append obj to self.deleted_objects list .
if data is FILE INPUT CONTRADICTION :,"if data is bound to the same object as FILE_INPUT_CONTRADICTION ,"
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , help = STR_ STR_ ) ,","default set to boolean False and help set to string 'Tells Django to stop running the test suite after first failed test. ' . call the method parser.add_argument with 4 arguments : string ' -- testrunner ' , action set to string 'store ' , dest set to 'testrunner ' ,"
defaults = parser . parse args ( args = args ),"call the method parser.parse_args with an argument args set to args , substitute the result for defaults ."
args = [ ],args is an empty list .
yield buf . read ( ),"read data from buf , yield the result ."
time . sleep ( NUM_ ),call the function time.sleep with an argument integer 1 .
self . attrs = attrs . copy ( ),"call the method attrs.copy , substitute the result for self.attrs ."
table = connections [ db ] . ops . quote name ( self .  table ),"call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary , substitute the result for table ."
else :,"if not ,"
return r,return r .
else :,"if not ,"
class MemoryFileUploadHandler ( FileUploadHandler ) :,derive the class MemoryFileUploadHandler from the FileUploadHandler base class .
"raise SuspiciousFileOperation ( "" STR_ "" % name )","raise an SuspiciousFileOperation exception with string `` Attempted access to ' % s ' denied . '' as argument , replace ' % s ' with name ."
"check for migrations ( app config , connection )",call the function check_for_migrations with arguments app_config and connection .
except IndexError :,"if IndexError exception is caught ,"
if transfer encoding is not None :,"if transfer_encoding is not None ,"
for bit in tag re . split ( self . template string ) :,"split tag_re by self.template_string separator , for every bit in result ,"
if not self .  is rendered :,"if self._is_rendered is false ,"
try :,"try ,"
else :,"if not ,"
for log in existing :,"for every log in existing ,"
def unescape string literal ( s ) :,define the function unescape_string_literal with an argument s .
self . clear ( ),call self.clear method .
line = sio . readline ( size ),"call the sio.readline method with size as an argument , substitute the result for line ."
"final attrs = self . build attrs ( attrs , type = STR_ , name = name )","call the method self.build_attrs with 3 arguments : attrs , type as a string 'checkbox ' , name as name , substitute the result for final_attrs ."
pattern = pattern . lower ( ),"convert pattern to lowercase , substitute it for pattern ."
with connections [ db ] . cursor ( ) as cursor :,"call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,"
"super (  LazyModule , self ) .   init   ( name )",call the method __init__ with an argument name form the base class of the class _LazyModule .
try :,"try ,"
if field in form . cleaned data :,"if field is contained in form.cleaned_data ,"
yield node,yield node as an return value of a generator .
result = None,result is None .
"found = getattr ( found , frag )","get frag attribute from found object , substitute it for found ."
self . nodelist empty = NodeList ( ),self.nodelist_empty is an instance of NodeList class .
"def   call   ( self , value ) :",define the method __call__ with arguments self and value .
start ipython ( argv = [ ] ),call the method start_ipython with an argument argv as an empty list .
file = tempfile . NamedTemporaryFile ( suffix = STR_ ),call the method tempfile.NamedTemporaryFile with argument suffix set to string '.upload ' .
except AttributeError :,"if AttributeError exception is caught ,"
locks . unlock ( fd ),call the function locks.unlock with argument fd .
if i < self . in itial form count ( ) and STR_ not in kwargs :,"if i is smaller than result of the method self.initial_form_count and key 'instance ' is not contained in kwargs ,"
try :,"try ,"
self . remove potfiles ( ),call the method self.remove_potfiles .
"loggers = config . get ( STR_ , EMPTY DICT )","get config dictionary element under 'loggers ' key , if it exists substitute it for loggers , if not , loggers is EMPTY_DICT ."
"def add ( self , key , value , timeout = DEFAULT TIMEOUT , version = None ) :","define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None ."
"def render ( self , name , value , attrs = None ) :","define the method render with 4 arguments : self , name , value and attrs set to None ."
def is  multipart ( self ) :,define the method is_multipart with an argument self .
import os,import module os .
try :,"for every migration in merge_migrations . try ,"
"context [ self . var name ] = [ { STR_ : key , STR_ : list ( val ) } for key , val in groupby ( obj list , lambda obj : self . resolve expression ( obj , context ) ) ]",value under the self.var_name key of the context dictionary is an list with dictionary elements with 2 entries :
import hashlib,import module hashlib .
unhandled params = unhandled params [ : - len ( defaults ) ],"slice list unhandled_params from the beginning to the length of defaults last element ,"
raise TemplateDoesNotExist ( template name ),raise an TemplateDoesNotExist exception with an argument template_name .
else :,"if not ,"
if value :,"if value is true ,"
translation = self .  new gnu trans ( localedir ),"call the method self._new_gnu_trans with an argument localedir , substitute the result for translation ."
if key in cache :,"if key is contained in cache ,"
widget = EmailInput,substitute EmailInput for widget .
else :,"if not ,"
"val , encoded = super ( SimpleCookie , self ) . value encode ( val )","from the base class of the class SimpleCookie call the value_encode method with val as the argument , store the result in the val and encoded , respectively ."
if formatter :,"if formatter is true ,"
"self . xml . startElement ( "" STR_ "" , attrs )",call the method self.xml.startElement with arguments string 'object ' and attrs .
"data = self . form . in itial . get ( self . name , self . field . in itial )","get the value under the self.name key of the self.form.initial dictionary , if it exists , substitute it for data ,"
return filenames,return filenames .
fields = new class . declared fields,substitute new_class.declared_fields for fields .
target = parser . compile filter ( bits [ NUM_ ] ),"call the method parser.compile_filter with an argument first element of bits , substitute the result for target ."
"definition = getattr ( cls , STR_ , None )","get the attribute 'Media ' of the cls object , if it exists substitute it for definition , if not definition is None ."
"def set many ( self , data , timeout = DEFAULT TIMEOUT , version = None ) :","define the method set_many with self , data , timeout set to DEFAULT_TIMEOUT and version set to None as arguments ."
"stream class = StringIO if is in stance ( content , six . text type ) else BytesIO","substitute StringIO for stream_class if content is an instance of six.text_type , otherwise substitute BytesIO for stream_class ."
while field . rel is not None :,"while field.rel is not None ,"
name = self . get available name ( name ),"call the method self.get_available_name with argument name , substitute the result for name ."
for app config in apps . get app configs ( ) :,"for app_config in return value of the method apps.get_app_configs ,"
BLOCK TAG END = STR_,BLOCK_TAG_END is a string ' % } ' .
"self . stdout . write ( "" STR_ "" )",write string `` Performing system checks ... \n\n '' to self.stdout stream .
pass,do nothing .
"models . signals . post syncdb . send ( sender = app config . models module , app = app config . models module , created models = created models , verbosity = verbosity , in teractive = in teractive , db = db )","verbosity set to verbosity , interactive set to interactive and using set to db . call the method models.signals.post_syncdb.send with 6 arguments : sender set to app_config.models_module ,"
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ )","default is boolean False and help is a string 'Use natural keys if they are available ( deprecated : use -- natural-foreign instead ) . ' . call the method parser.add_argument with 5 arguments : string ' -- natural-foreign ' , action set to string 'store_true ' ,"
reset translations ( ),call the function reset_translations .
 default = translation ( settings . LANGUAGE CODE ),"call the function translation with an argument settings.LANGUAGE_CODE , substitute the result for _default ."
lists =  iterlists,substitute _iterlists for lists .
cls = extension map . get ( ext ),"get the value under the ext key of the extension_map dictionary , substitute it for cls ."
in plural = False,inplural is boolean False .
if self . app label and app config . label ! = self . app label :,"if self.app_label is true and app_config.label is not equal to self.app_label ,"
if value is not result :,"if value is not contained in result ,"
"self . use natural keys = options . pop ( "" STR_ "" , False )","if the key doesnt exists substitute None for self.selected_fields . remove the 'use_natural_keys ' key from the options dictionary and substitute it for self.use_natural_keys ,"
return value,return value .
return duplicate,return duplicate
old attr = name,substitute name for old_attr .
return from current timezone ( result ),"call the method from_current_timezone with an argument result , return the result ."
"urlunquote plus = allow lazy ( urlunquote plus , six . text type )","use the result as an argument for the call to the function force_text , return the result . call the function allow_lazy with 2 arguments : urlunquote_plus and six.text_type , substitute the result for urlunquote_plus ."
from django . utils . six . moves import zip,from django.utils.six.moves import zip into default name space .
or ig vars = cls .   dict   . copy ( ),call the method cls.__dict__.copy substitute the result for orig_vars .
"headers = [ ( b STR_ . join ( [ to bytes ( key , STR_ ) , to bytes ( value , STR_ ) ] ) ) for key , value in self .  headers . values ( ) ]","for every key and value in return value of the self._headers.values method , call the function to_bytes with 2 arguments : key ,"
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
"attrs . setdefault ( STR_ , step )",if 'step ' key of the attrs dictionary doesnt exists assign it step as an value .
return self . data . year,return self.data.year .
return errors,"with an argument message for 'message ' , or if not message for 'message ' and error.code for 'code ' in error.code is true , if not , an empty string for 'code ' . return errors ."
except TypeError :,"if TypeError exception is caught ,"
os . umask ( old umask ),call the os.umask function with argument old_umask .
ALL FIELDS = STR_,"'ModelChoiceField ' , 'ModelMultipleChoiceField ' , 'ALL_FIELDS ' , 'BaseModelFormSet ' , 'modelformset_factory ' , 'BaseInlineFormSet ' , and 'inlineformset_factory ' . ALL_FIELDS is a string '__all__ ' ."
response . add post render callback ( callback ),called with 2 arguments : request and response . call the method response.add_post_render_callback with an argument callback .
return language [ : p ] . lower ( ) + STR_ + language [ p + NUM_ : ] . upper ( ),"append ' _ ' to string created from first p elements of languages converted to lowercase ,"
sys . stderr . write ( msg ),call the sys.stderr.write function with an argument msg .
"def get nodes by type ( self , nodetype ) :",define the method get_nodes_by_type with 2 arguments : self and nodetype .
if kwarg format :,"if kwarg_format is true ,"
except InputStreamExhausted :,"if InputStreamExhausted exception is caught ,"
"raise ValueError ( "" STR_ "" % line )","raise an ValueError with an argument string `` Invalid header : % r '' , where ' % s ' is replaced with line ."
"if is in stance ( offset , timedelta ) :","`` Use django.utils.timezone.get_fixed_timezone instead . '' and RemovedInDjango19Warning . if offset is an instance of timedelta class ,"
"header = header . upper ( ) . replace ( - , STR_ )","convert string header to uppercase and replace all occurrences of '- ' with ' _ ' , substitute it for header ."
" itervalues = "" STR_ """,_itervalues is a string `` values '' .
opts = self .  meta,"prefix set to None , initial set to None , error_class set to ErrorList , label_suffix set to None , empty_permitted set to boolean False , instance set to None . substitute self._meta for opts ."
"self . max length = kwargs . pop ( STR_ , None )","remove the value under 'max_length ' key from the kwargs dictionary and if the key exists substitute it for self.max_length ,"
def b ( self ) :,"integer 212 , integer 243 , integer 273 , integer 304 and integer 334. define the method b with an argument self ."
import warnings,import module warnings .
def   repr   ( self ) :,define the method __repr__ with an argument self .
"app models = router . get migratable models ( app config , connection . alias )",call the method router.get_migratable_models with arguments app_config and connection.alias .
if - not in lang code :,"if character '- ' is not contained in lang_code ,"
with lock :,"with lock ,"
except UnicodeDecodeError :,"if UnicodeDecodeError exception is caught ,"
"xgettext options = [ STR_ , STR_ ]",xgettext_options is an list with elements : strings ' -- from-code=UTF-8 ' and ' -- add-comments=Translators ' .
"unpacked vars = dict ( zip ( self . loopvars , item ) )","zip self.loopvars and item is a list to tuples , convert the result to an dictionary , substitute it for unpacked_vars ."
"def   init   ( self , name , content type , size , charset , content type extra = None ) :","define the __init__ method with 6 arguments : self , name , content_type , size , charset and content_type_extra set to None ."
self . view name = view name,substitute view_name for self.view_name .
if self . verbosity > NUM_ :,"if self.verbosity is greater than integer 0 ,"
"def get image dimensions ( file or path , close = False ) :",define the function get_image_dimension with file_or_path and close set to boolean False as the arguments .
last = self . data . day % NUM_,"divide self.data.day by 10 , substitute reminder of the result for last ."
def bpython ( self ) :,define the method bpython with an argument self .
"ch , escaped = next ( pattern iter )","get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively ."
possibilities = self . reverse dict . getlist ( lookup view ),"original_lookup , RemovedInDjango20Warning and stacklevel set to integer 3. call the method self.reverse_dict.getlist with an argument lookup_view , substitute the result for possibilities ."
UnlockFileEx . restype = BOOL,substitute BOOL for UnlockFileEx.restype .
"super ( JsonResponse , self ) .   init   ( content = data , ** kwargs )","call the __init__ method from the base class of the JsonResponse class , called with arguments : content set to data ,"
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
"return getattr ( self .  caches , STR_ , { } ) . values ( )","get attribute 'caches ' from the self._caches if exists , otherwise get an empty dictionary , call the values method on the return value , return it ."
location = settings . MEDIA ROOT,substitute the settings.MEDIA_ROOT for location .
handle app = self . handle app,substitute self.handle_app for handle_app .
@ python 2 unicode compatible,"python_2_unicode_compatible decorator ,"
self . in dent ( NUM_ ),call the method self.indent with argument integer 1 .
return STR_ . join ( statements ),"join the list of statements into a string separated by new lines , return it ."
return . join ( output ),"join elements of output into a string , return the result ."
self . connection . starttls ( ),call the method self.connection.starttls .
class BaseModelForm ( BaseForm ) :,derive the class BaseModelForm from the BaseForm base class .
colors = styles . pop ( ) . split ( / ),"remove first element from styles , split it by the '/ ' character , substitute the result for colors ."
if callable ( lookup view ) :,"if lookup_view is a callable object ,"
if filters :,"if filters is true ,"
else :,"where ' % s ' is replaced with taglib and e. if not ,"
self . in dent ( NUM_ ),call the method self.indent with argument integer 2 .
"def readline ( self , * args , ** kwargs ) :","third element of the result of the function sys.exc_info . define the method readline with 3 arguments : self , unpacked list args and unpacked list kwargs ."
self . validate key ( key ),call the method self.validate_key with argument key .
attr = import string ( dotted path ),"call the function import_string with an argument dotted_path , substitute the result for attr ."
class CacheEntry ( object ) :,derive CacheEntry class from the object base class .
  iadd   = complain,substitute complain for __iadd__ .
return  trans . get language ( ),"call the function _trans.get_language , return the result ."
"content type = META . get ( STR_ , META . get ( STR_ , ) )","get the value from META dictionary , under the 'HTTP_CONTENT_TYPE ' key , if the key doesnt exist ,"
return self . flatten ( ) == other . flatten ( ),"call the flatten method of the self and other objects , if they are equal , return boolean True , if not return boolean False ."
import pytz,import pytz .
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to 3 ,"
if self . to field name :,"if self.to_field_name is true ,"
"def   add   ( self , rhs ) :",define the method __add__ with 2 arguments self and rhs .
readlines = property ( lambda self : self . file . readlines ),"define lambda function that returns self.file.readlines field , use it as an argument for property function , put the result in readlines ."
if default is not RAISE ERROR :,"if default is true and RAISE_ERROR is false ,"
self .  callback = get callable ( self .  callback str ),"call the function get_callable with an argument self._callback_str , substitute the result for self._callback ."
"return ( STR_ % ( token name , self . contents [ : NUM_ ] . replace ( STR_ , ) ) )","return a string ' < % s token : `` % s ... '' > ' with ' % s ' , replace ' % s ' with token_name and 20 self.contents elements with every newline deleted ."
 translations [ language ] = DjangoTranslation ( language ),"_translations dictionary value , under the language key is an instance of DjangoTranslation class , created with an argument language ."
"e . args = ( "" STR_ "" % { STR_ : obj . object .  meta . app label , STR_ : obj . object .  meta . object name , STR_ : obj . object . pk , STR_ : force text ( e ) } , )","e.args is a tuple containing string `` Could not load % ( app_label ) s. % ( object_name ) s ( pk= % ( pk ) s ) : % ( error_msg ) s ,"
self .  fqdn = socket . getfqdn ( ),"call the function socket.getfqdn , substitute the result for self._fqdn ."
rel model = field . rel . to,substitute field.rel.to for rel_model .
except UnicodeDecodeError :,"if UnicodeDecodeError exception is caught ,"
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ , params = { STR_ : value } , )","raise an ValidationError with 3 arguments : value under the 'invalid_choice ' key of the self.error_messages dictionary ,"
"def   eq   ( self , other ) :",define the method __eq__ with an argument self .
self . value = value,substitute value for self.value .
except StandardError as e :,"if StandardError , renamed to e , exception is caught ,"
from django . utils import translation,"`` ( % s ) and 'can_import_settings ' ( % s ) command options . `` , replace ' % s ' with self.leave_locale_alone and self.can_import_settings . from django.utils import translation into default namespace ."
return raw data,return raw_data .
self .  current = None,self._current is None .
if ( BLOCK CONTEXT KEY in render context and render context [ BLOCK CONTEXT KEY ] . get block ( self . name ) is not None ) :,"if BLOCK_CONTEXT_KEY is contained in render_context and call to the method get_block with an argument self.name from the object ,"
obj = new obj,substitute new_obj for obj .
import stat,import module sta .
self . buffer = b,substitute empty bytes string for self.buffer .
"self . stdout . write ( "" STR_ "" )",write string `` No changes detected '' to self.stdout stream .
try :,"try ,"
"start response ( force str ( status ) , response headers )","format the previous in a tuple , append the tuple to the response_headers . call the start_response function with force_str ( status ) method return value and response_headers as arguments ."
response . content = b,response.content is bytes empty string .
"value = localize ( value , use l10n = context . use l10n )","call the function localize with 2 arguments : value and use_l10n=context.use_l10n , substitute the result for value ."
provided = list ( provided ),convert provided into a list and substitute it for provided .
"def urlencode ( query , doseq = NUM_ ) :",define the function urlencode with 2 arguments query and doseq set to integer 0 .
class RWLock ( object ) :,derive the class RWLock from the object base class .
p = i,substitute i for p .
" assertCountEqual = "" STR_ """,_assertCountEqual is a strnig `` assertCountEqual '' .
return,return .
self . show hidden initial = show hidden initial,substitute show_hidden_initial for self.show_hidden_initial .
colors . reverse ( ),"reverse the order of colors elements ,"
return klass,return klass .
class ContextPopException ( Exception ) :,derive the class ContextPopException from the Exception base class .
class override ( object ) :,derive the class override from the object base class .
def iriencode ( value ) :,define the function iriencode with an argument value .
"substitutions = { STR_ : self . in itial text , STR_ : self . in put text , STR_ : , STR_ : self . clear checkbox label , }","substitutions is a dictionary with 4 initial entries : self.initial_text for 'initial_text ' , self.input_text for 'input_text ' ,"
yield self [ key ],yield value under key key of self dictionary .
try :,"try ,"
"result = super ( TimestampSigner , self ) . unsign ( value )","call the unsign method from the base class of the TimestampSigner class with an argument value , substitute the result for result ."
fixture name = os . path . basename ( fixture name ),"append it to a list , perform the previous for every dir_ in fixture_dirs , substitute the resulting list for fixture_dirs . call the method os.path.basename with an argument fixture_name , substitute the result for fixture_name ."
from django . core . cache . backends . db import BaseDatabaseCache,from django.core.cache.backends.db import BaseDatabaseCache into default name space .
if settings . is  overridden ( STR_ ) :,"call the function settings.is_overridden with argument string 'MANAGERS ' , if it evaluates to boolean True ,"
return NowNode ( format string ),"return an instance of a NowNode class , created with an argument format_string ."
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
"def   init   ( self , host , * args , ** kwargs ) :","define initialization method __init__ with 4 arguments : self , host , list of arguments args and dictionary of arguments kwargs ."
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
def  iterlists ( self ) :,define the method _iterlists with an argument self .
data = b64 decode ( base64d ),"call the method b64_decode with an argument base64 , substitute the result for data ."
self . value = value,substitute value for self.value .
return self . save existing objects ( commit ) + self . save new objects ( commit ),"sum results of method self.save_existing_objects called with an argument commit and of method self.save_new_objects ,"
for message in messages :,"for every message in messages ,"
return result,return result .
from django . apps import apps,from django.apps import apps into default name space .
migrations directory = os . path . dirname ( writer . path ),"call the function os.path.dirname with an argument writer.path , substitute the result for migrations_directory ."
@ property,"property decorator ,"
"if not hasattr ( template , STR_ ) :","if template has an attribute 'render ' ,"
status code = NUM_,status_code is an integer 200 .
pass,do nothing .
num = NUM_,num is an integer 0 .
def in otify code changed ( ) :,define the function inotify_code_changed .
"if hasattr ( decorator , STR_ ) :","called with an argument decorator . if decorator has an attribute 'process_view ' ,"
"for app config , model list in app list :","for every app_config and model_list in app_list ,"
if STR_ in options :,"if 'args ' is contained in options ,"
fail message = STR_,fail_message is a string 'created ' .
if six . PY2 :,"if six.PY2 is boolean True ,"
if ( ( ip str . startswith ( STR_ ) and not ip str . startswith ( STR_ ) ) or ( ip str . endswith ( STR_ ) and not ip str . endswith ( STR_ ) ) ) :,"if ip_str starts with ' : , but it doesnt starts with ' : : ' , or if ip_str ends with ' : , but it doesnt ends with ' : : ' ,"
"return update wrapper ( wrapper , user function )","call the function update_wrapper with 2 arguments : wrapper and user_function , return the result ."
"i = next space index ( subject , i )","call the function next_space_index with 2 arguments subject and i , substitute the result for i ."
f . required = False,f.required is boolean False .
new = STR_ + or ig file [ NUM_ : ],"append orig_file to string ' # : ' , substitute it for new ."
"def save existing ( self , form , in stance , commit = True ) :","define the method save_existing with 4 arguments : self , form , instance and commit set to boolean True ."
self . file . seek ( NUM_ ),set the file pointer at the beginning of the self.file file .
"@ register . filter ( is  safe = True , needs autoescape = True )",decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
if id  :,"substitute the result input_attrs . if id_ ,"
"def verbatim ( parser , token ) :",define the function verbatim with 2 arguments : parser and token .
quant = [ ],quant is an empty list .
"def parse boundary stream ( stream , max header size ) :",define the function parse_boundary_stream with arguments stream and max_header_size .
"while i < len ( subject ) and subject [ i ] in ( , STR_ ) :",while i is lesser than length of subject and i-th element of subject is an empty space or tab character .
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to integer 2 ,"
return host,return host .
if not name :,"if name is false ,"
"def   getitem   ( self , in dex ) :",define the method __getitem__ with an argument self .
"self . empty value = kwargs . pop ( STR_ , )","if not , self.coerce is an identity lambda function with an argument val . if 'empty_value ' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value ,"
"def   getitem   ( self , name ) :",define the method __getitem__ with 2 arguments : self and name .
""""""" """"""",docstirng
timestamp = datetime . datetime . utcfromtimestamp ( in t ( timestamp ) ),"call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument , substitute result for timestamp ."
self . stdout . write ( shutdown message ),write shutdown_message to self.stdout file stream .
"date data = ( getattr ( form . cleaned data [ unique for ] , lookup ) , )",date_data is a tuple with an entry : attribute lookup from the value under the unique_for key of the form.cleaned_data dictionary .
"return ip str . rsplit ( STR_ , NUM_ ) [ NUM_ ]","split ip_str into 2 parts from right , return second element of the result ."
self . validate key ( key ),call the method self.validate_key with argument key .
class BaseConverter ( object ) :,derive class BaseCOnverter from object base class .
"warnings . warn ( msg % ( language ,  DJANGO DEPRECATED LOCALES [ language ] ) , RemovedInDjango19Warning , stacklevel = NUM_ )","call the method call the function warnings.warn with 3 arguments : msg formatted with language and value under the language key ,"
"object data = model to dict ( in stance , opts . fields , opts . exclude )","call the method model_to_dict with 3 arguments : instance , opts.fields , opts.exclude and substitute the result for object_data ."
else :,"if not ,"
return  trans . deactivate all ( ),"call the function _trans.deactivate_all , return the result ."
"handler . startElement ( STR_ , self . item attributes ( item ) )",call the method handler.startElement with 2 arguments : string `` item '' and result of the method self.item_attributes with an argument item .
else :,"if not ,"
if autoescape :,"if autoescape is true ,"
"call command ( STR_ , STR_ , verbosity = self . verbosity , database = connection . alias , skip validation = True , app label = app label , hide empty = True )","call the method call_command with string 'loaddata ' , string 'initial_data ' , verbosity set to self.verbosity ,"
"super ( SortedDict , self ) .   init   ( data )","call the method __init__ from the base class of the class SortedDict , called with an argument data ."
for basedir in basedirs :,"for every basedir in basedirs ,"
return,return nothing .
"if self . errors and hasattr ( self . form , STR_ ) :","if self.errors is true and self.form has an attribute 'error_css_class ' ,"
pass,do nothing .
self . cookies [ key ] [ STR_ ] = expires,"get the value under the key key of the self.cookies dictionary , substitute expires for 'expires ' key of the returned dictionary ."
del attrs [ attr ],delete entry under the attr key of the attrs dictionary .
final output = [ ],final_output is an empty list .
PVOID = c void p,substitute c_void_p for PVOID .
"field output . append ( "" STR_ "" )",append string `` PRIMARY KEY '' to field_output .
new errors = check ( app configs = app configs ),"call the check function with argument app_config set to app_config , substitute the result for new_errors ."
"raise CommandError ( "" STR_ "" % ( "" STR_ "" if app or project == "" STR_ "" else "" STR_ "" , app or project ) )","raise an CommandError exception with an argument string `` you must provide % s % s name '' , where ' % s ' is replaced with string 'an ' ,"
else :,"if not ,"
"literal regex = re . compile ( r STR_ , re . IGNORECASE )","and re.IGNORECASE , substitute the result for domain_regex . call the re.compile function with 2 arguments : raw string '\ [ ( [ A-f0-9 : \ . ] + ) \ ] $ ' and re.IGNORECASE , substitute the result for literal_regex ."
return LANG INFO [ generic lang code ],"get the LANG_INFO dictionary value under the generic_lang_code key , return the result ."
bits = urlparse ( url ),"call the method urlparse with an argument url , substitute the result for bits ."
result = self .   class   ( ),"call the method self.__class__ , substitute the result for result ."
replaces = [ ],write it to self.stdout stream . replaces is an empty list .
class date ( real date ) :,derive the class date from the real_date base class .
"raise ValueError ( "" STR_ "" % ( fk name , parent model .  meta . app label , parent model .  meta . object name ) )","and fk.rel.to is not contained in result of the call to the method parent_model._meta.get_parent_list . raise an ValueError with an argument string `` fk_name ' % s ' is not a ForeignKey to ' % s. % ' . `` , where ' % s ' is replaced with ,"
self . lineno = NUM_,self.lineno is integer 1 .
"decode = curry (  proxy method , method = bytes . decode )","call the function curry with 2 arguments : _proxy_method and method set to bytes.decode , substitute the result for decode ."
from django . http import QueryDict,from django.http import QueryDict into default namespace .
"return self .  html output ( normal row = STR_ , error row = STR_ , row ender = STR_ , help text html = STR_ , errors on separate row = False )","return the result of the method self._html_output , called with 5 arguments : normal_row to a string ,"
if type ( field type ) is tuple :,"if field_type is a tuple ,"
"raise ValueError ( "" STR_ "" % ( self .   class   .   name   , field ) )","raise an ValueError with an argument string `` ' % s ' has no field named ' % s ' . `` , with ' % s ' replaced with self.__class__.__name__ and field , respectively ."
else :,"convert slice of language string from ( p+1 ) -th index to the end to uppercase , append it to the previous result , return the resulting string . if not ,"
"self . stream . write ( "" STR_ "" )",write new line to the self.stream file stream .
if link is not None :,"if link is not None ,"
ns = app list [ NUM_ ],substitute first element of app_list for ns .
return sys . modules [ name ],return sys.modules dictionary value under the name key .
@ deconstructible,"decorator deconstructible ,"
else :,"with unpacked list field_value as an argument , substitute the field pk of the result for obj_pk . if not ,"
def gettext noop ( message ) :,define the function gettext_noop with an argument message .
yield data,yield one element of data iterable .
class UTC ( tzinfo ) :,derive the class UTC from the tzinfo base class .
"conditions nodelists = [ ( condition , nodelist ) ]",conditions_nodelists is a list containing tuple with 2 elements condition and nodelist .
return field . rel . to .  meta . get field ( field . rel . field name ) . to python ( field value ),"call the field.rel.to._meta.get_field method with an field.rel.field_name argument , on the result call the method to_python ,"
"def render ( self , context ) :",define the method render with 2 arguments self and context .
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to integer 2 ,"
if self .  should delete form ( form ) :,"call the method self._should_delete_form with an argument form , if it evaluates to true ,"
@ stringfilter,"decorator stringfilter ,"
for fixture label in fixture labels :,"for every fixture_label in fixture_labels ,"
return STR_ . join ( output ),"join output into a string , separated by newline characters , return it ."
def   str   ( self ) :,define the method __str__ with an argument self .
try :,"try ,"
"return STR_ % STR_ . join ( STR_ % ( k , v ) for k , v in six . iteritems ( self ) )","for every k and v in result of the function six.iteritems , called with an argument self ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
else :,"if not ,"
"from django . core . cache . backends . base import BaseCache , DEFAULT TIMEOUT",from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space .
get function globals = operator . attrgetter (  func globals ),"call the method operator.attrgetter with an argument _func_globals , substitute the result for get_method_globals ."
@ classmethod,"decorator classmethod ,"
def  ipython pre 011 ( self ) :,dest as a string 'interface ' and help as a string 'Specify an interactive interpreter interface . Available options : `` ipython '' and `` bpython '' ' . define the method _ipython_pre_011 with an argument self .
"return func .   get   ( self , type ( self ) ) ( * args2 , ** kwargs2 )","call the method func.__get__ with 2 arguments : self and type of self object , call the result with 2 arguments :"
"self . stderr . write ( "" STR_ "" % error text )","replace ' % s ' in a string `` Error : % s '' with error_text , write it to self.stderr ."
media = sorted ( self .  css . keys ( ) ),"call the method self._css.keys , sort the result and substitute it for media ."
pass,do nothing .
"role , in structions = part . split ( = )","split part by '= ' character , substitute the result for role and instructions , respectively ."
"if is in stance ( self . warning , Exception ) :","if self.warning is an instance of Exception class ,"
from django . utils . html import format html,from django.utils.html import format_html into default name space .
year = dt . year,"integer 0 , appended to a string `` strftime of dates before 1900 does not handle '' . substitute dt.year for year ."
ns pattern = ns pattern + extra,"add ns_pattern and extra , substitute the result for ns_pattern ."
FILE MODIFIED = NUM_,FILE_MODIFIED is integer 1 .
from django . db . migrations . writer import MigrationWriter,from django.db.migrations.writer import MigrationWriter into default name space .
value = next ( cycle iter ) . resolve ( context ),"call the function next with an argument cycle_iter , call the method resolve on the result with an argument context , substitute the result for value ."
executor = MigrationExecutor ( connection ),"call the MigrationExecutor with the connection as the argument , substitute it for executor ."
"with io . open ( fname , STR_ ) as f :","with return value of the function io.open with fname and string 'rb ' as arguments , named as f ,"
class BaseLoader ( object ) :,derive the class BaseLoader from the object base class .
"def   init   ( self , parent instance , * args , ** kwargs ) :","string 'The inline foreign key did not match the parent instance primary key . ' for 'invalid_choice ' . define the method __init__ with 4 arguments : self , parent_instance , unpacked list args and unpacked dictionary kwargs ."
processors . append ( func ),append func to processors .
name = args [ - NUM_ ],substitute the last element of args for name .
styles . reverse ( ),reverse the order of elements of styles .
"t = super ( SafeBytes , self ) .   add   ( rhs )","call the __add__ method with an arguments rhs from the base class of the class SafeBytes , substitute the result for t ."
except LookupError :,"if LookupError exception is caught ,"
if end . endswith ( STR_ ) :,"with it replace % r in the string `` junk characters in start tag : % r '' , call the method self.error with the resulting string as an argument . if string end ends with string '/ > ' ,"
"ASCTIME DATE = re . compile ( r STR_ % (   M ,   D2 ,   T ,   Y ) )","substitute the result for RFC850_DATE . call the function re.compile with an argument raw string '^\w { 3 } % s % s % s % s $ ' formated with __M , __D2 , __T and __Y ,"
from django . apps import apps,from django.apps import apps into default name space .
try :,"try ,"
from collections import OrderedDict,from collections import OrderedDict into default name space .
else :,"if not ,"
"src = force text ( src , settings . FILE CHARSET )",call the function force_text with 2 arguments : src and settings.FILE_CHARSET .
"raise ValueError ( "" STR_ "" )",raise an ValueError with an argument string `` attempted relative import beyond top-level package '' .
for form in valid forms :,"for every form in valid_forms ,"
renderer = None,renderer is None .
payload = text . encode ( utf8 charset . output charset ),"call the method text.encode with argument utf8_charset.output_charset , substitute the result for payload ."
self . validate key ( key ),call the method self.validate_key with argument key .
self . META [ STR_ ] = path info,assign path_info to the value under the 'PATH_INFO ' key of the self.META dictionary .
"M = self . get ( key , Morsel ( ) )","get the value under the key of the dictionary self , if key does not exists return evaluated result of the function Morsel , substitute it for M ."
if encoding == STR_ :,if encoding equals to string 'utf-8 ' .
"return getattr ( settings , format type )","get format_type attribute of the settings object , return it ."
backend name = connection . settings dict [ STR_ ] . split ( STR_ ) [ - NUM_ ],"once split at the ' . ' value under the 'ENGINE ' key of the connection.settings_dict dictionary , substitute last element of the result for backend_name ."
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
"cache key =  generate cache header key ( key prefix , request )","call function _generate_cache_header_key with arguments key_prefix and request , substitute the result for cache_key ."
"from email = sanitize address ( email message . from email , email message . encoding )","call the function sanitize_address with arguments email_message.from_email and email_message.encoding , substitute the result for from_email ."
clean data . append ( field . clean ( field value ) ),"call the method field.clean with an argument field_value , append the result to clean_data ."
"def start object ( self , obj ) :",define the method start_object with argument self and obj .
"def   init   ( self , tup , hash = hash ) :","define the method __init__ with 3 arguments : self , tup and hash set to hash ."
"starttag re = re . compile ( r STR_ % tags re , re . U )","call the function re.compile with 2 arguments : raw string ' < % s ( / ? > | ( \s+ [ ^ > ] * > ) ) ' formated with tags_re and re.U ,"
handler . setLevel (  checkLevel ( level ) ),"call the function _checkLevel with an argument level , use the result as an argument for the call to the function handler.setLevel ."
self . can write . acquire ( ),call the method self.can_write.acquire .
import datetime,import module datetime .
from shutil import copystat,from shutil import copystat into default name space .
Morsel = http cookies . Morsel,substitute http_cookies.Morsel for Morsel .
self . error messages = messages,substitute messages for self.error_messages .
return t . render ( context instance ),"call the function t.render with an argument context_instance , return the result ."
"if is in stance ( arg , unicode ) :","if arg is an instance of unicode ,"
continue,skip this loop iteration .
result = func ( * args ),"call the function func with an argument unpacked list args , substitute the result for result ."
except AttributeError :,"if AttributeError exception is caught ,"
return build request repr ( self ),"call the method build_request_repr with an argument self , return the result ."
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
from django . conf import settings,from django.conf import settings into default name space .
import re,import module re .
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % subject )","raise an TemplateSyntaxError exception with an argument string `` expected another tag , found end of string : % s '' ,"
"return callback [ : dot ] , callback [ dot + NUM_ : ]","return callback split into two lists at the dot index , without the element at the dot index ."
"raise CommandError ( "" STR_ "" % e )","raise an CommandError with an argument string `` % s . Are you sure your INSTALLED_APPS setting is correct ? `` , with ' % s ' replaced by e ."
for field in self . fields :,"for every field in self.fields ,"
"namemap = options . get ( with , { } )","if not , isolated_context is boolean False . get the value under the 'width ' key of the options dictionary , if it exists , substitute it for namemap , if not namemap is an empty dictionary ."
value = timezone . normalize ( value ),"call the method timezone.normalize with an argument value , substitute the result for value ."
break,and database set to value under the 'database ' key of the options dictionary . break the loop execution .
 active . value = gettext module . NullTranslations ( ),"call the method gettext_module.NullTranslations , substitute the result for _active.value ."
"super ( SortedDict , self ) . clear ( )",call the method clear from the base class of the class SortedDict .
"raise ImproperlyConfigured ( STR_ % ( self . file path , err ) )","raise an ImproperlyConfigured exception with argument string 'Could not create directory for saving email messages : % s ( % s ) ' ,"
self . add library ( lib ),call the method self.add_library with an argument lib .
if nodelist empty is None :,"if nodelist_empty is None ,"
from functools import lru cache,from functools import lru_cache .
return self,return self .
except KeyError :,"if KeyError exception is caught ,"
else :,"if not ,"
else :,"if not ,"
return val,return val .
return self,return self .
base62 = BaseConverter ( BASE62 ALPHABET ),"call the BaseConverter function with BASE62_ALPHABET as argument , store the result in base62 ."
self .  changed data = [ ],self._changed_data is an empty list .
"basedir = os . path . join ( os . path . dirname ( potfile ) , locale , STR_ )","call the method os.path.dirname with an argument potfile , join the result , locale and string 'LC_MESSAGES ' into a file path ,"
table name filter = options . get ( STR_ ),"substitute the result for connection . get the value under the 'table_name_filter ' key of the options dictionary , substitute it for table_name_filter ."
"def get language from path ( path , strict = False ) :",define the function get_language_from_path with 2 arguments : path and strict set to boolean False .
"if hasattr ( rel model , STR_ ) and rel model ! = model :","if rel_model has an attribute 'natural_key ' and rel_model is not equal to model ,"
"def set cdata mode ( self , tag ) :","define method set_cdata_mode , with self class instance and tag as the arguments ."
timezone = ( offset . days * NUM_ * NUM_ ) + ( offset . seconds // NUM_ ),"multiply offset.days , integer 24 and integer 60 , sum the result with floored result of division of offset.seconds ,"
for h in logger . handlers [ : ] :,"for every h in elements of logger.handlers list ,"
"def ifnotequal ( parser , token ) :",define the function ifnotequal with 2 arguments : parser and token .
choice input class = RadioChoiceInput,substitute RadioChoiceInput for choice_input_class .
del  urlconfs . value,delete _urlconfs.value .
else :,"if not ,"
def readlines ( self ) :,define the method __init__ with an argument self .
"from django . utils . encoding import force str , force text , iri to uri","from django.utils.encoding import force_str , force_text and iri_to_uri into default name space ."
"ignore patterns += [ STR_ , STR_ , STR_ , STR_ ]","append list containing 4 elements : 'CVS ' , ' . * ' , '*~ ' and '*.pyc ' , to ignore_patterns ."
opts = model .  meta,substitute model._meta for opts .
base path = abspathu ( base ),"get the unicode representation of the absolute path of base , substitute it for base_path ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
return [ field for field in self if not field . is  hidden ],"for field in self if field.is_hidden is false , append field to a list , return the resulting list ."
output = [ ],output is an empty list .
"if is in stance ( callback , functools . partial ) :","if callback is an instance of functools.partial object ,"
return sample [ : NUM_ ] == b STR_ or sample . startswith ( codecs . BOM UTF16 LE ) or sample . startswith ( codecs . BOM UTF16 BE ),"evaluate the boolean expression , if first three characters of sample equals to string of bytes '\xef\xbb\xbf\ ' ,"
for f in sorted ( opts . concrete fields + sortable virtual fields + opts . many to many ) :,"concatenate opts.concrete_fields , sortable_virtual_fields and opts.many_to_many , for every f in sorted result ,"
from django . utils . functional import total ordering,from django.utils.functional import total_ordering into default name space .
"return func ( context , self . first , self . second )","call the function func with 3 arguments : context , self.first and self.second , return the result ."
"extra , resolver = resolver . namespace dict [ ns ]","substitute the value under the ns key of the resolver.namespace_dict dictionary for extra and resolver , respectively ."
"color names = ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ )","color_names is a tuple with 8 elements : strings 'black ' , 'red ' , 'green ' , 'yellow ' , 'blue ' , 'magenta ' , 'cyan ' and 'white ' ."
if len ( self . namelist ( ) ) ! = NUM_ :,"call the method self.namelist , if the length of the result is not integer 1 ,"
"super ( Command , self ) . handle ( ** options )",call the handle function with dictionary pair of elements options from the base class of the class Command .
"if hasattr ( self , STR_ ) :",if self has an '_files ' attribute .
else :,"if not ,"
@ lru cache . lru cache ( maxsize = None ),decorator lru_cache.lru_cache with an argument maxsize set to None .
self . cookies [ key ] = value,substitute value for self.cookies dictionary value under the key key .
def render ( self ) :,define the method render with an argument self .
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
CRITICAL = NUM_,CRITICAL is integer 50 .
"def load label ( self , fixture label ) :","substitute ' % d ' with self.loaded_object_count , self.fixture_object_count and self.fixture_count . define the method load_label with self and fixture_label as arguments ."
def  ipython ( self ) :,define the method _ipython with an argument self .
@ cached property,"library set to pylibmc and value_not_found_exception set to pylibmc.NotFound . decorator cached_property ,"
"return timesince ( value , arg )","call the function timesince with 2 arguments : value and arg , return the result ."
n = in t ( idx ),"convert idx to an integer , substitute it or n ."
fill to = NUM_,fill_to is an integer 7 .
try :,"try ,"
widget = TextInput,substitute substitute TextInput for widget .
 error files . append ( filename ),append filename to _error_files .
in dex output = [ ],index_output is an empty list .
try :,"try ,"
form . save m2m ( ),call the function form.save_m2m .
"elif is in stance ( self . obj , models . base . ModelBase ) :","otherwise if self.object is an instance of the models.base.ModelBase class ,"
else :,"if not ,"
"key , value = match . groups ( )",call the method match.groups with 2 arguments : key and value .
"response = self . get exception response ( request , resolver , NUM_ )","call the method self.get_exception_response with request , resolver and integer 404 as the arguments , assign the result to response ."
else :,"if not ,"
self . buffer = b,substitute empty bytes string for self.buffer .
try :,"try ,"
self . code = code,substitute code for self.code .
def  unpack ipv4 ( ip str ) :,define the function _unpack_ipv4 with an argument ip_str .
"autodetector = MigrationAutodetector ( loader . project state ( ) , ProjectState . from apps ( apps ) , InteractiveMigrationQuestioner ( specified apps = app labels , dry run = self . dry run ) , )","autodetector is an instance of the MigrationAutodetector class , created with 3 arguments : result of the method loader.project_state ,"
else :,"if not ,"
"from io import BytesIO , StringIO , UnsupportedOperation","from io import BytesIO , StringIO and UnsupportedOperation into default name space ."
def  media ( self ) :,define the method _media with an argument self .
raise,raise an exception .
"def   getitem   ( self , key ) :",define the method __getitem__ with 2 arguments : self and key .
"t = getattr (  active , "" STR_ "" , None )","get 'value ' attribute of the _active object , if it exists substitute it for t , if not t is None ."
self . files = files or { },"if files is true , substitute it for self.files , if not self.files is an empty dictionary ."
from xml . sax import handler,from xml.sax import handler into default name space .
import module ( templatetag module ),call the function import_module with an argument templatetag_module .
if msgs :,"if msgs is true ,"
"if sys . version info [ : NUM_ ] == ( NUM_ , NUM_ ) :","if first two elements of sys.version_info equal to integers 2 ant 7 , respectively ,"
else :,"if not ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"super ( CommandParser , self ) .   init   ( ** kwargs )","call the method __init__ from the base class of the CommandParser class , with unpacked dictionary kwargs as argument ."
get function closure = operator . attrgetter (  func closure ),"call the method operator.attrgetter with an argument _func_closure , substitute the result for get_method_closure ."
"except ( OverflowError , ValueError ) as exc :","if OverflowError or ValueError , renamed to exc , exceptions are caught ,"
natural key = obj . natural key ( ),"call the method obj.natural_key , substitute the result for natural_key ."
pass,do nothing .
class ObjectDoesNotExist ( Exception ) :,derive the class ObjectDoesNotExist from the Exception base class .
import binascii,import module binascii .
closable . close ( ),call the method closable.close .
return value,return value .
"elif not is in stance ( value , ConvertingList ) and is in stance ( value , list ) :","otherwise if vale is not an instance of ConvertingList and value is an instance of list type ,"
import warnings,import module warnings .
kwargs . update ( self . default args ),call the method kwargs.update with an argument self.default_args .
value = timezone . normalize ( value ),"call the method timezone.normalize with an argument value , substitute the result for value ."
def   repr   ( self ) :,define the method __repr__ with an argument self .
"from django . core . management . color import color style , no style",from django.core.management.color import color_style and no_style into default name space .
"m2m value = lambda value : smart text ( value .  get pk val ( ) , strings only = True )","m2m_value is a lambda function with an argument value , return value is the result of the function smart_text called with arguments :"
year = year + ( ( NUM_ - year ) // NUM_ ) * NUM_,"subtract year from integer 2000 , divide the result by integer 28 , floor the result , multiply it with 28 and increment by year ,"
len item = NUM_,len_item is integer 1 .
len values = len ( values ),substitute length of values for len_values .
"default error messages = { STR_ :   ( STR_ ) , }",default_error_messages is an dictionary containing entry : return value of the function _ called with an string 'This field is required . ' for 'required ' .
"return new name , field params , field notes","return new_name , field_params and field_notes ."
return [ ],return an empty list .
p . feed ( data ),feed data to the parser p .
"def parse args ( self , args = None , namespace = None ) :","define the method parse_args with 3 arguments : self , args set to None and namespace set to None ."
return template . render ( context ),"call the method template.render with an argument context , return the result ."
 dec .   name   = STR_ % decorator .   class   .   name  ,_dec.__name__ is a string 'method_decorator ( % s ) ' formated with decorator.__class__.__name__ .
def force escape ( value ) :,define the function force_escape with an argument value .
"tag , this value expr , max value expr , max width , as  , asvar = bits","assign the bits elements to tag , this_value_expr , max_value_expr , max_width , as_ and asvar ."
k = match . end ( ),"find the ending position of the regular expression match of the object match , substitute the result for k ."
"self . widgets = getattr ( options , STR_ , None )","get 'widgets ' attribute from the options object , if it exists substitute it for self.widgets , if not self.widgets is None ."
return value,return value .
return False,return boolean False .
script name = get script name ( environ ),"call the get_script_name function with environ as argument , substitute the result for script_name ."
"def to python ( self , value ) :",define the method to_python with arguments self and value .
try :,"try ,"
if data is None :,"if data is None ,"
if token . contents == else :,"if token.contents equals a string 'else ' ,"
"if is in stance ( number , in t ) :",if number is an instance of int type .
"check programs ( STR_ , STR_ , STR_ )","call the function check_programs with 3 arguments : strings 'msguniq ' , 'msgmerge ' and 'msgattrib ' ."
"localpart = str ( Header ( localpart , encoding ) )","instantiate Header class with localpart and encoding , convert it to a string , substitute the result for localpart ."
output = self .  leftover,substitute self._leftover for output .
"value = self . get ( key , version = version )","call the self.get method with arguments key and version set to version , substitute the result for value ."
return self .  fname,return self._fname .
return self .  urlconf module,return self._urlconf_module .
raise TypeError ( STR_ ),raise an TypeError with an string 'formfield_callback must be a function or callable ' .
return other in self . children,"if other is contained in self.children , return boolean True , otherwise return boolean False ."
def rendered content ( self ) :,define the method rendered_content with an argument self .
"return timezone . make naive ( value , current timezone )","call the function timezone.make_naive with 2 arguments value , current_timezone , return the result ."
import zipfile,import module zipfile .
return mark safe ( six . text type ( number ) ),"call the function six.text_type with an argument number , use the result as an argument for the call to the function mark_safe ,"
while current len <= length :,"while current_len is smaller than or equal to length ,"
if second item == [ ] :,"if second_item is an empty list ,"
"  all   = [ STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , ]","__all__ is a list containing next strings , 'CheckMessage ' , 'Debug ' , 'Info ' , 'Warning ' , 'Error ' , 'Critical ' ,"
widget = NumberInput,substitute NumberInput for widget .
 load serializers ( ),call the function _load_serializers .
hextets = [ ] + hextets,prepend an empty string to hextets list .
return None,return None .
except AppRegistryNotReady :,"if AppRegistryNotReady exception is caught ,"
"encode = lambda k , v : STR_ % ( ( quote ( k , safe ) , quote ( v , safe ) ) )","encode is an lambda function with arguments k and v , return value is string ' % s= % s ' , where ' % s ' is replaced with :"
check programs ( STR_ ),call the function check_programs with an argument string 'xgettext ' .
whole digits = digits - decimals,"subtract decimals from digits , substitute the result for whole_digits ."
"self . stdout . write ( "" STR_ "" % app labels . pop ( ) )","substitute ' % s ' in string `` No changes detected in app ' % s ' '' with the result of the method app_labels.pop , write it to self.stdout ."
self . form = form,substitute form for self.form .
 anonymous  = [ STR_ ],_anonymous_ is a list containing one string : '_offset_union ' .
return func,return func .
"if hasattr ( self , STR_ ) :","if self has an attribute '_body ' ,"
"def   init   ( self , attrs = None , choices = ( ) ) :","define the method __init__ with 3 arguments : self , attrs set to None and choices set to an empty tuple ."
return get supported language variant ( lang code ),"call the function get_supported_language_variant with an argument lang_code , return the result ."
except ValidationError as e :,"if ValidationError , renamed to e , is caught ,"
EMPTY DICT = { },incremental is boolean False . EMPTY_DICT is an empty dictionary .
return expanded template,return expanded_template .
"if hasattr ( self , STR_ ) :",if self has an attribute '_size ' .
def calculate app template dirs ( ) :,define the function calculate_app_template_dirs .
self . old method name = old method name,substitute old_method_name for self.old_method_name .
"super ( SimpleUploadedFile , self ) .   init   ( BytesIO ( content ) , None , name , content type , len ( content ) , None , None )","call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments : BytesIO ( content ) , None , name ,"
elif field in self .  errors . keys ( ) :,"otherwise if field is contained in the result of the call to the method self._errors.keys ,"
self .  regex = regex,substitute regex for self._regex .
"def   lt   ( self , other ) :",define the mehod __lt__ with self and other .
"return LoaderOrigin ( display name , loader , name , dirs )","return an instance of LoaderOrigin class , created with 4 arguments : display_name , loader , name and dirs ."
boundary = opts . get ( STR_ ),"assign the result to ctypes and opts . get the value under the 'boundary ' key of the opts dictionary , substitute it for boundary ."
import sys,import module sys .
context match = context re . match ( imatch . group ( NUM_ ) ),"call the method imatch.group with an argument integer 2 , use the result as an argument for the call to the method context_re.match ,"
debugs = [ e for e in all issues if e . level < checks . INFO and not e . is  silenced ( ) ],"append e to debugs list for every e in all_issues , if e.level is lesser than checks.INFO and result of the method e.is_silenced in false ."
"msg = "" STR_ "" % ( command , STR_ . join ( parse until ) )","msg is an string `` Unclosed tag ' % s ' . Looking for one of : % s `` , where ' % s ' is replaced with command ,"
"hits = max ( NUM_ , self . count - self . or phans )","get greater value between integer 1 and result of subtraction of self.orphans from self.count , substitute it for hits ."
continue,skip this loop iteration .
from django . utils . itercompat import is  iterable,from django.utils.itercompat import is_iterable into default name space .
"attrs = super ( FloatField , self ) . widget attrs ( widget )","call the method widget_attrs with an argument widget , from the base class of the FloatField class , substitute the result for attrs ."
else :,"if not ,"
except AmbiguityError :,"if AmbiguityError exception is caught ,"
forms valid = True,forms_valid is True .
del self .  post,del self._post
else :,"if not ,"
"def   init   ( self , data , func , prefix ) :","define the method __init__ with 4 arguments : self , data , func and prefix ."
"def handle label ( self , label , ** options ) :","define the method handle_label with 3 arguments : self , label and unpacked dictionary options ."
self . name = name,substitute name for self.name .
from django . db . migrations . loader import AmbiguityError,from django.db.migrations.loader import AmbiguityError into default name space .
if not self . recipients ( ) :,"call the method self.recipients , if it evaluates to false ,"
flags = NUM_,flags is a integer 0 .
return list ( self . iterlists ( ) ),"call the method self.iterlists , return list of results ."
"t = getattr (  active , "" STR_ "" , None )","get 'value ' attribute of the _active object , if it exists substitute it for t , if not t is None ."
class CacheClass ( FileBasedCache ) :,derive the class CacheClass from the base class FileBasedCache .
self . dicts [ - NUM_ ] [ key ] = value,substitute value for value under the key key of dictionary at last element of self.dicts .
help =,help is an empty string .
del self [ STR_ ],delete the value under the 'Content-Transfer-Encoding ' key of self dictionary .
self .  cache . disconnect all ( ),call the method self._cache.disconnect_all .
"content = templatize ( src data , or ig file [ NUM_ : ] )","call the function templatize with 2 arguments : src_data and sliced orig_file , without first 2 elements , substitute the result for content ."
"if is in stance ( callback , types . FunctionType ) :","if callback is of instance types.FunctionType ,"
if pattern . namespace :,"if pattern.namespace is true ,"
cursor . close ( ),call the cursor.close method .
"from . . import Warning , register , Tags","from .. import Warning , register and Tags into default name space ."
def is  iterable ( x ) :,define the function is_iterable with an argument x .
"def write ( self , s ) :",define the method write with 2 arguments : self and s .
from django . core . management . color import color style,from django.core.management.color import color_style into default name space .
for header in headerlist :,"for every header in headerlist ,"
result = self . configure custom ( config ),"call the method self.configure_custom with an argument config , substitute the result for result ."
while t > NUM_ :,"while t is greater than integer 0 ,"
elif var is None :,"otherwise if var is None ,"
continue,continue with the next iteration of the for loop .
"def fset ( in stance , value , name = fset .   name   ) :","define the function fset with 3 arguments : instance , valse to None and name set to fset.__name__ ."
for v in self . validators :,"for every v in self.validators ,"
"warnings . warn ( "" STR_ "" , RemovedInDjango19Warning , stacklevel = NUM_ )","call the function warnings.warn with 3 arguments : string `` django.utils.dictconfig will be removed in Django 1.9 . `` ,"
return STR_ % self . G ( ),return a string ' % 02d ' formated with the result of the function self.G .
except ZeroDivisionError :,"if ZeroDivisionError exception is caught ,"
return self . size > chunk size,"if self.size is greater than chunk_size , return boolean True , otherwise return boolean False ."
"if not is in stance ( node , TextNode ) :","if node is not an instance of TextNode ,"
"basetype , subtype = mimetype . split ( / , NUM_ )","call the method mimetype.split with arguments : character '/ ' and integer 1 , substitute the result for basetype and subtype , respectively ."
"def to python ( self , value ) :",define the method to_python with arguments self and value .
"def value encode ( self , val ) :",define method value_encode with self class instance and val as arguments .
"nodelist = getattr ( self , attr , None )","get attr attribute of self object , if it exists substitute it for nodelist , if not nodelist is None ."
hfile = msvcrt . get osfhandle (  fd ( f ) ),"call the function msvcrt.get_osfhandle with return value of the _fd ( f ) function as argument , substitute the result for hfile ."
try :,"try ,"
self . style func = style func,substitute style_func for self.style_func .
"statements = connection . ops . sql flush ( style , tables , seqs , allow cascade )","call the method connection.ops.sql_flush with arguments : style , tables , seqs and allow_cascade , substitute the result for statements ."
"if hasattr ( value , STR_ ) and not is in stance ( value , ( bytes , six . string types ) ) :",if value has an '__iter__ ' attribute and value is not an instance of bytes or six.string_types class .
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
@ register . filter ( is  safe = False ),"and autoescape as autoescape , use the result as an argument for the call to the function mark_safe , return the result . decorator function register.filter with an argument is_safe set to boolean False ."
else :,"if not ,"
activate = lambda x : None,activate is a lambda function which returns None for any argument x .
return dec,return dec .
def all ( self ) :,define the method all with argument self .
return STR_ . join ( statements ),"join statements into a string , separated by newline characters , return it ."
self . endChannelElement ( handler ),call the method self.endChannelElement with an argument handler .
"for pythonrc in ( os . environ . get ( "" STR_ "" ) , STR_ ) :","for every pythonrc in tuple containing 2 elements : return value of the function os.environ.get called with a string `` PYTHONSTARTUP '' ,"
"super ( ModelMultipleChoiceField , self ) .   init   ( queryset , None , cache choices , required , widget , label , in itial , help text , * args , ** kwargs )","widget set to None , label set to None , initial set to None , help_text set to an empty strign , unpacked list args and unpacked dictionary kwargs . call the method __init__ from the base class of the class ModelMultipleChoiceField , with 10 arguments : queryset , None ,"
if self . negated :,"if self.negated ,"
break,"break from the loop execution ,"
"self . set ( key , value , timeout = timeout , version = version )","call the method self.set with arguments key , value , timeout set to timeout , version set to version ."
print ( FASTCGI HELP ),print FASTCGI_HELP to the standard output .
self .  errors . append ( form . errors ),append form.errors to self._errors .
pass,do nothing .
"or ig = getattr ( self . parent instance , self . to field )","get self.to_field attribute of self.parent_instance , substitute it for orig ."
if self . localize :,"if self.localize is true ,"
"def   init   ( self , limit value ) :",define the method __init__ with self and limit_value as arguments .
def iri to uri ( iri ) :,define the function iri_to_uri with iri as an argument .
compatibility = STR_,compatibility is a string 'compatibility ' .
"super ( Command , self ) . add arguments ( parser )","call the function add_arguments with parser as an argument , from the base class of the Command class ."
"l = lambda x : self . make key ( x , version = version )","l is lambda function with argument x , that calls the method self.make_key with x and version set to version as arguments ."
raise NotImplementedError ( STR_ ),raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_serialization ( ) method ' .
self . close called = False,substitute False for self.close_called .
if middle . endswith ( punctuation ) :,"if middle ends with punctuation ,"
host = host . lower ( ),convert host to lowercase .
if self . selected fields is None or field . attname in self . selected fields :,"if self.selected_fields is None or field.attname is contained in self.selected_fields ,"
if url :,"if url is true ,"
"self . children = [ obj , data ]",self.children is an list with 2 elements : obj and data .
value = field .  get val from obj ( obj ),"call the method field._get_val_from_obj with obj argument , substitute the result for value ."
"new keys = [ self . make key ( x , version = version ) for x in keys ]","define the method get_many with 3 arguments , self class instance , keys and version set to None ."
"args . append ( ( False , Variable ( constant arg ) . resolve ( { } ) ) )","take a tuple with 2 elements : boolean False and method resolve called with an empty dictionary on the instance of Variable class ,"
if item [ STR_ ] is not None :,"value under the 'author_name ' key of the item dictionary and dictionary with an entry : `` http : //purl.org/dc/elements/1.1/ '' for `` xmlns : dc '' . if value under the 'pubdate ' key of the item dictionary is not None ,"
errors . extend (  check test runner ( ** kwargs ) ),"call the function _check_test_runner with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend ."
def   init   ( self ) :,define the method __init__ with an argument self .
"return Field . validate ( self , value )","call the method Field.validate with 2 arguments : self and value , return the result ."
try :,"try ,"
from django . core . exceptions import ValidationError,from django.core.exceptions import ValidationError into default name space .
"pgettext lazy = lazy ( pgettext , six . text type )","call the function lazy with 2 arguments : pgettext and six.text_type , substitute pgettext_lazy ."
return self .  reverse dict [ language code ],return the value under the language_code key of the self._reverse_dict dictionary .
"class BaseMemcachedCache ( six . with metaclass ( BaseMemcachedCacheMethods , BaseCache ) ) :",derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache .
"def   init   ( self , var ) :",define the method __init__ with 2 arguments self and var .
"raise ValueError ( STR_ STR_ % ( value , rest ) )",raise an ValueError exception with an argument string 'Unable to convert % r at % r ' formated with value and rest .
return force text ( url ),"call the function force_text with an argument url , return the result ."
"if hasattr ( out , STR_ ) and out . is atty ( ) :","if out has an 'isatty ' argument and return value of the function out.isatty is true ,"
"def iterlists ( d , ** kw ) :",return it . define the function iterlists with 2 arguments : d and unpacked dictionary kw .
"answer = "" STR_ """,substitute ' n ' for answer .
return scheme in self . url schemes,"if scheme is countaine in self.url_schemes return boolean True , otherwise return False ."
"function name = ( name or getattr ( func , STR_ , func ) .   name   )","if name is true , substitute it for function_name , if not get '_decorated_function ' attribute from func object , if it exists ,"
def is  library missing ( name ) :,define the function is_library_missing with an argument name .
bmatch = block re . match ( t . contents ),"call the function block_re.match with an argument t.contents , substitute the result for bmatch ."
def ensure echo on ( ) :,define ensure_echo_on function .
return in t ( value ),"convert value to an integer , return it ."
"msg = "" """,msg is an empty string .
"from django . utils . text import normalize newlines , slugify as  slugify",from django.utils.text import normalize_newlines and slugify as _slugify into default name space .
current = context,substitute context for current .
else :,"substitute the result for i-th element of lines . if not ,"
except UnicodeEncodeError :,"if UnicodeEncodeError exception is caught ,"
message =   ( STR_ ),"call a function _ with a string 'Enter a valid value . ' as an argument , substitute the result for message ."
if widgets is not None :,"if widgets is not None ,"
class RenderContext ( BaseContext ) :,derive the class RenderContext from the BaseContext base class .
"autodetector = MigrationAutodetector ( executor . loader . project state ( ) , ProjectState . from apps ( apps ) , )","call the MigrationAutodetector function with arguments , return value of the call to the method executor.loader.project_state ,"
lines = [ ],lines is an empty list .
class ForNode ( Node ) :,derive the class ForNode from Node base class .
pass,do nothing .
"return "" STR_ "" % ( len ( self . digits ) , self . digits )","replace ' % s ' in the string `` < BaseConverter : base % s ( % s ) > '' with length of self.digits and self.digits , respectively , return the string ."
yield line,yield line .
"return QueryDict ( , encoding = self .  encoding ) , MultiValueDict ( )","instantiate QueryDict class with 2 arguments : an empty string and encoding set to self._encoding , instantiate a class MultiValueDict , return them ."
except ValueError :,"if ValueError exception is caught ,"
"self . xml . addQuickElement ( "" None "" )",call the method self.xml.addQuickElement with an argument string 'None ' .
test runner class . add arguments ( parser ),call the method test_runner_class.add_arguments with an argument parser .
time str = date . strftime ( STR_ ),"call the function date.strftime with an argument string ' % Y- % m- % dT % H : % M : % S ' , substitute the result for time_str ."
existing . remove ( name ),remove name from existing .
@ register . filter ( is  safe = False ),"html set to boolean True and truncate set to string ' ... ' , return the result . decorator function register.filter with an argument is_safe set to boolean False ."
except UnicodeError as e :,"if UnicodeError , renamed to e , exception is caught ,"
"return dateformat . time format ( value , get format ( format or STR_ , use l10n = use l10n ) )",call the function dateformat.time_format with 2 arguments : value and result of the function get_format called with 2 arguments :
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` widthratio final argument must be a number '' .
format module path = [ format module path ],format_module_path is a list containing an element format_module_path .
tables . append ( connection . in trospection . table name converter ( model .  meta . db table ) ),"evaluate the method connection.introspection.table_name_converter with model._meta.db_table as argument , append it to tables ."
self .  mark post parse error ( ),call the method self._mark_post_parse_error .
MAXSIZE = in t ( ( NUM_ << NUM_ ) - NUM_ ),"bitwise shift integer 1 to the left by 31 spaces , substitute integer 1 from the result , convert the result to a integer , substitute it for MAXSIZE ."
"field desc = STR_ % ( att name , if STR_ in field type else STR_ , field type , )","field_desc is a string ' % s = % s % s ' , where ' % s ' is replaced with : att_name , an empty string if ' . ' is contained in field_type ,"
pass,do nothing .
from django . conf import settings,from django.conf import settings into default name space .
else :,"if not ,"
using = options . get ( STR_ ),"get the value under the 'database ' key of the options dictionary , substitute the result for database ."
"self . xml . startElement ( "" STR_ "" , { "" STR_ "" : field . name , "" STR_ "" : field . get internal type ( ) } )","call the method self.xml.startElement with 2 arguments : string 'field ' and a dictionary containing 2 entries : field.name for 'name ' ,"
attachment . set payload ( content ),call the method attachment.set_payload with an argument content .
return CommentNode ( ),return an instance of CommentNode class .
self . use l10n = use l10n,substitute use_l10n for self.use_l10n .
except NoReverseMatch :,"current_app as context.current_app , substitute the result for url . if NoReverseMatch exception is caught ,"
return MONTHS ALT [ self . data . month ],return the value under the self.data.month key of the MONTHS_ALT dictionary .
def   iter   ( self ) :,define the method __iter__ with an argument self .
"return self . in put type == STR_ if hasattr ( self , STR_ ) else False","if self.input_type equals string 'hidden ' and self has an attribute 'input_type ' , return boolean True , otherwise return boolean False ."
end index = i,substitute i for end_index .
"truncate text = self . add truncation text ( , truncate )","call the method self.add_truncation_text with 2 arguments : an empty string and truncate , substitute it for truncate_text ."
class JsLexer ( Lexer ) :,derive the class JsLexer from the Lexer base class .
"super ( BaseInlineFormSet , self ) .   init   ( data , files , prefix = prefix , queryset = qs , ** kwargs )","call the method __init__ from the base class of the class BaseInlineFormSet , with 5 arguments : data , files , prefix set to prefix ,"
"if is in stance ( slots , str ) :","if slots is an instance of str ,"
"def urlquote ( url , safe = / ) :",substitute the result for ASCTIME_DATE . define the function urlquote with 2 arguments : url and safe set to '/ ' .
options = { },where ' % r ' is replaced with first element of bits . options is an empty dictionary .
plan = executor . migration plan ( executor . loader . graph . leaf nodes ( ) ),"call the method executor.migration_plan wiht return value of te method executor.loader.graph.leaf_nodes as argument , substitute it for plan ."
if g [ NUM_ ] == STR_ :,"if first element of g equals a string ' '' ' ,"
"return self . handle merge ( loader , conflicts )","call the method self.handle_merge with 2 arguments : loader and conflicts , return the result ."
"message , code , params = message . message , message . code , message . params","substitute message.message , message.code , message.params for message , code and params , respectively ."
num = NUM_,num is an integer 0 .
def  clean fields ( self ) :,define the method _clean_fields with an argument self .
except NotImplementedError :,"if NotImplementedError exception is caught ,"
self . attrs = attrs or { },"if attrs is not None substitute it for self.attrs , or if not self.attrs is an empty dictionary ."
"def   init   ( self , message , code = None , params = None ) :","define the method __init__ with 4 arguments : self , message , code set to None and params set to None ."
return result,return result .
pluralmatch = plural re . match ( t . contents ),"call the function plural_re.match with an argument t.contents , substitute the result for pluralmatch ."
"def   init   ( self , setting , nodelist ) :","define the method __init__ with 3 arguments : self , setting and nodelist ."
"def render node ( self , node , context ) :","define the method render_node with 3 arguments : self , node and context ."
if data list [ NUM_ ] in self . empty values :,"if second element of data_list is contained in self.empty_values ,"
"out . write ( STR_ % ( message context , join tokens ( singular , trimmed ) , join tokens ( plural , trimmed ) ) )","substitute ' % r ' in string ' npgettext ( % r , % r , % r , count ) ' with message_context , result of the function join_tokens ,"
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % ( i , subject ) )","raise an TemplateSyntaxError exception with an argument string `` Searching for value . Unexpected end of string in column % d : % s '' ,"
"handler . startElement ( "" STR_ "" , { } )",call the method handler.startElement with 2 arguments : string 'author ' and an empty dictionary .
if len ( fixture files in dir ) > NUM_ :,"and result of the function humanize called with an argument fixture_dir . if length of fixture_files_in_dir is greater than 1 ,"
if kwargs :,"if kwargs is true ,"
space = line [ : max width + NUM_ ] . rfind ( ) + NUM_,"get fist max_width incremented by 1 elements from line , find index of the first occurrenece of whitespace from the right side ,"
"builtins = { True : True , False : False , None : None }","builtins is an dictionary with 3 initial entries : boolean True for 'True ' , boolean False for 'False ' and None for 'None ' ."
else :,"if not ,"
url =,url is an empty string .
self . validate ( display num errors = True ),call the method self.validate with an argument display_num_errors set to boolean True .
"lineno , offset = self . getpos ( )",evaluate the self.getpos ( ) and assign the result to the lineno and offset respectfully .
return,"return an empty string ,"
"csrf token = context . get ( STR_ , None )","context.autoescape for 'autoescape ' , context.autoescape for 'current_app ' , context.use_l10n for 'use_l10n ' , and context.use_tz for 'use_tz ' , substitute the result for new_context . call the function context.get with 2 argument 'csrf_token ' and None , substitute the result for csrf_token ."
"global  mtimes ,  win",use the global variables _mtimes and _win in this function .
@ register . filter ( is  safe = True ),"replace all occurrences of `` ' '' with `` \\ ' '' in the previous result , return the result . decorator function register.filter with an argument is_safe set to boolean True ."
if options [ STR_ ] :,"if value under 'plain ' key of the options dictionary is true ,"
"def safe join ( base , * paths ) :",define the function safe_join with 2 arguments base and unpacked dictionary paths .
raise NotImplementedError ( STR_ ),raise a NotImplementedError with an argument string 'subclasses of Serializer must provide an handle_m2m_field ( ) method ' .
else :,"if not ,"
return data,return data .
if col name ! = new name and field notes :,"if col_name is not equal to new_name and field_notes is true ,"
"def has header ( self , header ) :",define the method has_header with 2 arguments : self and header .
try :,"try ,"
if self . timezone and self . timezone . dst ( self . data ) :,"if self.timezone is true and call to the method self.timezone.dst with an argument self.data , evaluates to true ,"
"class SafeText ( six . text type , SafeData ) :",derive the class SafeText from six.text_type and SafeData base classes .
try :,"try ,"
for in dex in range ( len ( hextets ) ) :,"for every index in range of integers from 0 to length of hextets , not included ,"
locale = to locale ( lang ),"call the function to_locale with an argument lang , substitute the result for locale ."
else :,"if not ,"
with connections [ db ] . cursor ( ) as cursor :,"call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,"
selected html = mark safe ( STR_ ),"call the function mark_safe with an argument string ' selected= '' selected '' ' , substitute the result for selected_html ."
"from django . utils . timesince import timesince , timeuntil",from django.utils.timesince import timesince and timeuntil into default name space .
"def   new   ( cls , fget = None , fset = None , fdel = None , doc = None ) :","define the method __new__ with 5 arguments : cls , fget set to None , fset set to None , fdel set to None and doc set to None ."
from django . utils import six,from django.utils import six into default name space .
continue,skip this loop iteration .
class ChunkIter ( six . Iterator ) :,"`` normal uploaded files . Check for malicious upload activity ; if there is none , report this to the Django developers. '' . derive the class ChunkIter from the six.Iterator base class ."
else :,"if not ,"
if fields and f . name not in fields :,"if fields is true and f.name is not contained in fields ,"
left = t . nud ( self ),"call the method t.nud with an argument self , substitute the result for left ."
for line in msgs . split ( STR_ ) :,"split msgs by newline characters , for every line in result ,"
last = pos + NUM_,"increment pos by one , substitute the result for last ."
RE DATE = re . compile ( r STR_ ),"compile regex from the raw string ' ( \d { 4 } ) - ( \d\d ? ) - ( \d\d ? ) $ ' , substitute it for RE_DATE ."
"msg += "" STR_ "" % domain","append string `` You may need to add % r to ALLOWED_HOSTS . '' to msg , where ' % s ' is replaced with domain ."
app list = OrderedDict ( ),app_list is an instance of a class OrderedDict .
result ^=  bin to long ( u ),"call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands , previous result an result ,"
else :,"if not ,"
"main value pair , params = parse header ( line )","call the function parse_header with an argument line , substitute the result for main_value_pair and params , respectively ."
try :,"try ,"
post = ( pformat ( POST override ) if POST override is not None else pformat ( request . POST ) ),"get is a tuple containing elements generated by the call to the function pformat with an argument POST_override ,"
try :,"try ,"
if num > self .  max entries :,"if num is greater than self._max_entries ,"
options = parser . parse args ( argv [ NUM_ : ] ),"call the method parser.parse_args with argv , without the first 2 elements , substitute the result for options ."
"raise CommandError ( "" STR_ "" % ( name , app or project , message ) )","raise an CommandError with an argument string `` % r is not a valid % s name . Please % s . `` , were ' % r ' is replaced with name ,"
value = ConvertingDict ( value ),"value is an instance of ConvertingDict class , created with an argument value ."
if m :,"if m is true ,"
base56 = BaseConverter ( BASE56 ALPHABET ),"call the BaseConverter function with BASE56_ALPHABET as argument , store the result in base56 ."
"return super ( PythonSerializer , self ) . getvalue ( )","call the getvalue method of the base class of the PythonSerializer class , return the result ."
host = host [ : - NUM_ ] if host . endswith ( STR_ ) else host,"if host ends with ' . ' , remove the last element from host ."
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
from django . core . management . sql import sql destroy indexes,from django.core.management.sql import sql_destroy_indexes into default name space .
cookies = STR_,cookies is a string ' < could not parse > ' .
"for i , char in enumerate ( text ) :","for every i and char in enumerated text ,"
os . remove ( symlink path ),remove symlink_path file .
try :,"try ,"
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'required ' key of the self.error_messages dictionary and code set to 'required ' .
"if options [ "" STR_ "" ] and options [ "" STR_ "" ] and not options [ "" STR_ "" ] :","if value under the 'socket ' key of the options dictionary is false and values under the 'host ' and 'port ' keys of the options dictionary are true ,"
"if is in stance ( d , real datetime ) :","if d is an instance of real_datetime class ,"
old = STR_ + work file,"append work_file to string ' # : ' , substitute it for old ."
def get default prefix ( cls ) :,define the method get_default_prefix with an argument cls .
excluded models = set ( ),excluded_models is an empty set .
try :,"try ,"
def validate unique ( self ) :,define the method validate_unique with an argument self .
return self . data . hour,return self.data.hour .
"obj = super ( klass , cls ) .   new   ( cls )",call the method __new__ with an argument cls from the base class of the klass function .
filemsg =,filemsg is an empty string .
apps = { },apps is an empty dictionary .
" func defaults = "" STR_ """,_func_defaults is a string `` __defaults__ '' .
"return format html ( "" "" )","call the function format_html with an argument empty string , return the result ."
logger . removeHandler ( handler ),call the method logger.removeHandler with an argument handler .
message = list ( error ) [ NUM_ ],"convert elements of error into a list , substitute the first element for message ."
RUN RELOADER = True,RUN_RELOADER is boolean True .
s = subject [ p : i ],"take subject elements from p-th to i-th index , substitute it for s ."
"response fixes = [ http . fix location header , http . conditional content removal , ]",response_fixes is a list with http.fix_location_header and http.conditional_content_removal as elements .
class Command ( AppCommand ) :,derive the class Command from the AppCommand base class .
self . mod = old,substitute old for self.mod .
return self,return self .
self .  closable objects = [ ],self._closable_objects is an empty list .
self . objects = [ ],self.objects is an empty list .
else :,"if not ,"
"super ( EmailBackend , self ) .   init   ( * args , ** kwargs )","call the __init__ method from the base class of the EmailBackend class , with arguments : unpacked list args and unpacked dictionary kwargs ."
"sys . stderr . write ( "" STR_ "" % ( subcommand , self . prog name ) )","call the method sys.stderr.write with an argument string `` Unknown command : % r\nType ' % s help ' for usage.\n '' ,"
"base64 = BaseConverter ( BASE64 ALPHABET , sign = STR_ )","call the BaseConverter function with BASE64_ALPHABET and sign set to ' $ ' as arguments , store the result in base64 ."
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
def top ( self ) :,define the method top with an argument self .
stats [ MISSES ] += NUM_,increment stats dictionary value under the MISSES key by integer 1 .
val . encode ( STR_ ),call the method val.encode with argument string 'ascii ' .
def check 1 7 compatibility ( ** kwargs ) :,define the function check_1_7_compatibility with argument kwargs dictionary .
"if len ( bits ) >= NUM_  and bits [ - NUM_ ] == "" from "" :","if length of bits is greater or equal to integer 4 and second last element of bits equals sting 'from ' ,"
result = avoid wrapping ( name % count ),"use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function , store the result in result ."
max value = self . max expr . resolve ( context ),"call the method self.max_expr.resolve with an argument context , substitute the result for max_value ."
"choices = [ ( i , i ) for i in self . years ]","for every i in self.years append tuple containing i and i elements into a list , substitute the resulting string for choices ."
except VariableDoesNotExist :,"if VariableDoesNotExist exception is caught ,"
self . context = context,substitute context for self.context .
import decimal,import module decimal .
comma separated int list re = re . compile ( STR_ ),"and ip_address_validator_map converted to a list , respectively . call the re.compile function with an argument raw string '^ [ \d , ] + $ ' , substitute the result for comma_separated_int_list_re ."
if not self . DIGIT PATTERN . match ( idx ) :,"match rest string with self.DIGIT_PATTERN regex , if it evaluates to false ,"
"location = kwargs . pop ( STR_ , )","remove 'LOCATION ' key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists ."
continue,"skip this loop iteration ,"
"s = s . replace ( STR_ , STR_ )",replace every occurrence of '\t ' in s with '\\t ' .
if self . is  bound :,"if self.is_bound is true ,"
pieces = [ ],pieces is an empty list .
if STR_ in context :,"if string 'forloop ' is contained in context ,"
return result,return result .
if categories :,"called with 2 arguments : s and string_only as boolean True . if categories is true ,"
value = ConvertingTuple ( value ),"value is an instance of ConvertingTuple class , created with an argument value ."
return path,return path .
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'uri ' and value under the 'author_link ' key of the item dictionary .
"return reduce ( operator . add , dict ( self ) . values ( ) )","call the operator.add on the values of the self object converted into a dictionary , until it is reduced to a single value , return it ."
if kwds :,"if kwds is true ,"
for program in programs :,"for every program in programs ,"
class DjangoSafeDumper ( SafeDumper ) :,derive the class DjangoSafeDumper from the SafeDumper base class .
return self,return self .
return default,return default .
validate ipv4 address ( value ),call the function validate_ipv4_address with an argument value .
for member in members :,"for every member in members ,"
"self . write ( s , encoding )",call the method self.write with 2 arguments : s and encoding .
attrs [ STR_ ] = smart text ( obj pk ),substitute the return value of the smart_text function with an argument obj_pk for the value under the 'pk ' key of the attrs dictionary .
self . to field name = to field name,substitute to_field_name for self.to_field_name
is  usable = True,is_usable is boolean True .
"emit pre migrate signal ( create models , self . verbosity , self . in teractive , connection . alias )","call the emit_pre_migrate_signal with create_models , self.verbosity , self.interactive . connection.alias as arguments ."
cookie value = self . COOKIES [ key ],"substitute value under the key key of the self.COOKIES dictionary , substitute it for cookie_value ."
want unicode = False,want_unicode is boolean False .
return self,return self .
"return ( ( not url info . netloc or url info . netloc == host ) and ( not url info . scheme or url info . scheme in [ STR_ , STR_ ] ) )","if url_info.netloc is false or url_info.netloc equals host , and if url_info.scheme is false or url_info.scheme equals ,"
return filelist,"self.cache_suffix converted to a string , appended to the character '* ' , call os.path.join with self._dir and fname as arguments , filelist is a list containing all the previous results . return filelist ."
from django . forms . utils import *,"`` Use django.forms.utils instead . `` , RemovedInDjango19Warning and stacklevel set to an integer 2. from django.forms.utils import everything into default name space ."
"addr = STR_ . join ( [ localpart , domain ] )","join localpart and domain in a string separated by ' @ ' character , substitute it for addr ."
"for i , v in enumerate ( value ) :","for every i and v in enumerated iterable value ,"
"def error ( self , message ) :",define the method error with arguments self and message .
"value = token kwargs ( remaining bits , parser , support legacy = False )","call the function token_kwargs with 3 arguments : remaining_bits , parser , support_legacy set to boolean False , substitute the result for value ."
class MultipleHiddenInput ( HiddenInput ) :,derive the class MultipleHiddenInput from the HiddenInput base class .
 serializers = serializers,substitute serializers for _serializers .
def streaming content ( self ) :,define the method serialize_headers with an argument self .
def   bool   ( self ) :,define the method __bool__ with an argument self .
six . reraise ( * exc info ),call the function six.reraise with unpacked list exc_info as an argument .
else :,"if not ,"
from django . conf import settings,from django.conf import settings into default name space .
return result,"and memo , and result of the function copy.deepcopy called with 2 arguments : value and memo . return result ."
try :,"self.add_prefix called with an argument name , substitute the result for value . try ,"
return template . render ( context . new ( values ) ),"call the method context.new with an argument values , use it as an argument for the call to the method template.render , return the result ."
with context instance . push ( dictionary ) :,"call the method context_instance.push with an argument dictionary , with the result perform ,"
"et , ev , tb = sys . exc info ( )","call the sys.exc_info function , assign the result to et , ev and tb , respectively ."
now = datetime . now ( ),"call the function datetime.now , substitute the result to now ."
expires = typecast timestamp ( str ( expires ) ),"and expires is not an instance of datetime . convert expires to a string , use it as argument for the call to the function typecast_timestamp , substitute the result for expires ."
if STR_ not in ip str and ip str . count ( STR_ ) ! = NUM_ :,"if ' : : ' is not contained in ip_str and number of occurrences of ' : ' in ip_str is not equal to integer 7 ,"
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'contradiction ' key of the self.error_messages dictionary and code set to 'contradiction ' .
rollback = self .  rollback,substitute self._rollback for rollback .
decimal digits = STR_,decimal_digits is a string '0123456789 ' .
return in ner,return inner .
pass,do nothing .
bits = token . contents . split ( ),"call the method token.split_contents , substitute the result for bits ."
retval = self . tokens [ self . pos ],substitute element at self.pos index of self.tokens for retval .
if self .  wrapped is empty :,"if self._wrapped is empty ,"
"def dst ( self , dt ) :",define the method utcoffset with 2 arguments : self and dt .
def   repr   ( self ) :,define the method __repr__ with an argument self .
"def parse endtag ( self , i ) :",define the method parse_endtag with self class instance and i as the arguments .
self . buffer = b,substitute empty bytes string for self.buffer .
context . update ( unpacked vars ),call the method context.update with an argument unpacked_vars .
"except ( TypeError , ValueError , UnicodeDecodeError ) :","if TypeError , ValueError or UnicodeDecodeError exceptions are caught ,"
chunks = [ ],chunks is an empty list .
if self .  done :,"if self._done is true ,"
else :,"if not ,"
return any ( ignore ( pattern ) for pattern in ignore patterns ),"called with arguments : filename and pattern . call the function ignore with an argument pattern , for every pattern in ignore_patterns ,"
return value,return value .
return mark for escaping ( value ),"call the function mark_for_escaping with an argument value , return the result ."
tagfind = re . compile ( STR_ ),compile a regular expression pattern string ' ( [ a-zA-Z ] [ -.a-zA-Z0-9 : _ ] * ) ( ? : \s|/ ( ? ! > ) ) * ' into a regular expression object and assign it to tagfind .
new args . append ( args [ : ] + i args ),"append i_args to args , append new_args with the result ."
else :,"if not ,"
from django . utils . encoding import python 2 unicode compatible,from django.utils.encoding import python_2_unicode_compatible into default name space .
if not len ( self . backout ) :,"if length of self.backout is greater than zero ,"
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` next-to-last argument to 'regroup ' tag must be 'as ' '' .
xreadlines = property ( lambda self : self . file . xreadlines ),"define lambda function that returns self.file.xreadlines field , use it as an argument for property function , put the result in xreadlines ."
"def  has changed ( self , in itial , data ) :","define the method _has_changed with 3 arguments : self , initial and data ."
def address string ( self ) :,define the function address_string with an argument self .
if errors is None :,"if errors is None ,"
"msgs , errors , status = popen wrapper ( args )","call the function popen_wrapper with argument args , assign the result to msgs , errors and status ."
yield obj,"yield obj , as an return value of the generator ."
return self .  create attachments ( msg ),"call the method self._create_attachments with argument msg , return the result ."
output transaction = True,output_transaction is boolean True .
try :,"try ,"
if not cls :,"if cls is false ,"
for field in self . fields . values ( ) :,"call the method self.fields.values , for every field in result ,"
"options [ STR_ ] = get random string ( NUM_ , chars )","call the function get_random_string with 2 arguments : integer 50 and chars , substitute it for value under the 'secret_key ' of the options dictionary ."
import pickle,import pickle .
"except ( ValueError , TypeError ) :","if TypeError or ValueError exceptions are caught ,"
cache = caches [ cache alias ],substitute value under the cache_alias key of the caches dictionary for cache .
"for dirpath , dirnames , locale filenames in os . walk ( basedir ) :","for every dirpath , dirnames and locale_filenames in directory tree starting at the basedir directory ."
"super ( URLValidator , self ) .   call   ( value )","call the __call__ method from the base class of the class URLValidator , with an argument value ."
import re,import module re .
"def clean ( self , value ) :",define the method clean with arguments self and value .
result = self . buffer + self .  read limited ( size - len ( self . buffer ) ),"call the method self.read_limited with length of self.buffer subtracted from size as argument , add result to self.buffer , store it in result ."
raise ValueError ( STR_ % level ),raise an ValueError exception with an argument string 'Unknown level : % r ' formated with level .
if min length is not None :,"if min_length is not None ,"
requires system checks = False,requires_system_checks is boolean False .
"escapejs = allow lazy ( escapejs , six . text type )","use the result as an argument for the call to the mark_safe function , return the result . call the function allow_lazy with 2 arguments : escapejs , six.text_type , substitute the result for escapejs ."
raise AttributeError ( attr ),raise an AttributeError with an argument attr .
pass,do nothing .
"CONTEXT SEPARATOR = "" STR_ """,CONTEXT_SEPARATOR is a string `` \x04 '' .
"msgs , errors , status = popen wrapper ( args )","call the function popen_wrapper with an argument args , assign the result to msgs , errors and status ."
else :,"if not ,"
"regex compiled = re . compile ( STR_ % language code , re . UNICODE )","call the function re.compile with 2 arguments , string '^ % s/ ' , where ' % s ' is replaced with language_code and re.UNICODE , substitute the result for regex_compiled ."
id  = self . attrs [ STR_ ],"get the value under the 'id ' key of the attrs dictionary , substitute the return value field of the self object for id_ ."
try :,"try ,"
self . verbosity = options . get ( STR_ ),"get the value from the options dictionary under the key 'verbosity ' , substitute it for self.verbosity ."
"def   init   ( self , argv = None ) :",define the method __init__ with arguments : self class instance and argv set to None .
else :,"if not ,"
if self . feed [ STR_ ] is not None :,"if value under the 'author_link ' key of the self.feed dictionary is not None ,"
def   str   ( self ) :,define the method __str__ with an argument self .
if pieces [ - NUM_ ] :,"if last element of pieces is true ,"
try :,"try ,"
return STR_,return a string 'Raw content ' .
state [ STR_ ] = str ( state [ STR_ ] ),"get the value under the 'cookies ' key of the state dictionary ,"
"def get language from request ( request , check path = False ) :",define the function get_language_from_request with 2 arguments : request and check_path set to boolean False .
self .   name = name,substitute name for self.__name .
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` Invalid arguments provided to assignment_tag '' .
"return data . get ( name , None )","return value under the name key of the data dictionary , if it doesnt exists , return None ."
binary type = str,substitute str for binary_type .
if cleaned data is not None :,"if cleaned_data is not None ,"
self . nodelist = nodelist,substitute nodelist for self.nodelist .
context extras = { },context_extras is an empty dictionary .
if doublecolon start == - NUM_ :,"if doublecolon_start equals integer -1 ,"
try :,"try ,"
return d [ key ],return value under the key key of d dictionary .
cull num = num // self .  cull frequency,"divide num by self._cull_frequency , floor the result and substitute it for cull_num ."
value = ConvertingList ( value ),"value is an instance of ConvertingList class , created with an argument value ."
def getvalue ( self ) :,"of the obj object , append the results in a list , substitute it for value under the field.name key of the self._current dictionary . define the method getvalue with an argument self ."
return self [ key ],return value under key key of self dictionary
pass,do nothing .
value = force text ( value ),"call the function force_text with an argument value , substitute the result for value ."
except TemplateDoesNotExist :,"source and previous result . if TemplateDoesNotExist exception is caught ,"
def csrf ( request ) :,define the function csrf with an argument request .
except AttributeError :,"if AttributeError exception is caught ,"
for ext in pathext :,"for ext in pathext ,"
i += NUM_,increment i by integer 1 .
value = in t ( str ( value ) ),"convert value into an string , convert the result into an integer and substitute it for value ."
return tuple ( app template dirs ),"convert app_template_dirs to a tuple , return it ."
"self . add fields ( form , None )","called with string '__prefix__ ' as an argument and empty_permitted as boolean True , substitute the result for form . call the method self.add_fields with arguments form and None ."
"def as bytes ( self , unixfrom = False ) :",define the method as_bytes with arguments self and unixfrom set to boolean False .
if not self . can import settings :,"if self.can_import_settings is false ,"
if scheme not in self . schemes :,"if scheme is not contained in self.schemes ,"
NamedTemporaryFile = tempfile . NamedTemporaryFile,substitute tempfile.NamedTemporaryFile for NamedTemporaryFile .
return True,return boolean True .
"def value from datadict ( self , data , files , name ) :","use it as an argument for the call to the mark_safe function , return the result . define the method value_from_datadict with 4 arguments : self , data , files and name ."
"self . labels = getattr ( options , STR_ , None )","if not self.localized_fields is None . get 'labels ' attribute from the options object , if it exists substitute it for self.labels , if not self.labels is None ."
str hidden = . join ( hidden fields ),"join hidden_fields elements into a string , without separation , substitute the result for str_hidden ."
if self . verbosity >= NUM_ :,if self.verbosity is greater or equals to integer 2 .
class Module six moves urllib ( types . ModuleType ) :,"assign it to value under the string `` .moves.urllib_robotparser '' appended to __name__ key of the sys.modules dictionary , and to value under the string `` .moves.urllib.robotparser '' appended to __name__ key of the sys.modules dictionary . derive class Module_six_moves_urllib from the types.ModuleType base class ."
"if is in stance ( pattern , RegexURLResolver ) :","if pattern is an instance of RegexURLResolver class ,"
self . toks [ groupid ] = tok,substitute tok for value under the groupid key of the self.toks dictionary .
if self . required :,"required set to required , widget set to widget , label set to label , initial st to initial , help_text set to help_text , unpacked list args , unpacked dictionary kwargs . if self.required is true ,"
"raise AttributeError ( "" STR_ "" % self .   class   .   name   )","raise an AttributeError exception with an argument string : `` ' % s ' object has no attribute 'ordered_forms ' '' ,"
  import   ( name ),call the function __import__ with an argument name .
"return time format ( value , STR_ , use l10n = use l10n )","call the function time_format with 3 arguments : value , string 'TIME_FORMAT ' and use_l10n as use_l10n , return the result ."
except Exception :,"if Exception exception is caught ,"
@ property,"add to a list result of the method uploadhandler.load_handler called with arguments handler and self , substitute resulting list for self._upload_handlers . property decorator ,"
from django . conf import settings,from django.conf import settings into default name space .
guid attrs = { },guid_attrs is an empty dictionary .
self .  unget history = [ num bytes ] + self .  unget history [ : NUM_ ],"append first 49 elements of self._unget_history to list containing num_bytes , substitute the result for self._unget_history ."
elif t . token type == TOKEN VAR :,"formated with t.contents , filemsg and t.lineno . otherwise if t.token_type equals TOKEN_VAR ,"
handler . name = name,substitute name for handler.name .
try :,"try ,"
"ch , escaped = next ( pattern iter )","get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively ."
if os . path . is dir ( app dir ) :,"if app_dir is a directory ,"
def render css ( self ) :,"string ' < script type= '' text/javascript '' src= '' { 0 } '' > < /script > ' and absolute file path of the path , for every path is self._js . define the method render_css with an argument self ."
def dict ( self ) :,define the method dict with an argument self .
"return self .  stream . readline ( * args , ** kwargs )","call the method self._stream.readline with 2 arguments : unpacked list args , unpacked dictionary kwargs ."
if settings . DEBUG :,"if settings.DEBUG is true ,"
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with an argument sting 'subclasses of LazyObject must provide a _setup ( ) method ' .
if six . PY3 :,"if six.PY3 is true ,"
if not self . close called :,"if self.close_called is False ,"
data = field stream . read ( ),"call the method field_stream.read , substitute the result for data ."
return obj,return obj .
warnings = [ e for e in all issues if checks . WARNING <= e . level < checks . ERROR and not e . is  silenced ( ) ],"and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false . append e to warnings list for every e in all_issues , if checks.WARNING is lesser than or equal to e.level ,"
class override ( object ) :,derive the class override from the object base class .
return new class,return new_class .
if obj pk is not None :,"if obj_pk is not None ,"
"final attrs = self . build attrs ( attrs , name = name )","call the method self.build_attrs with 2 arguments : attrs and name set to name , substitute the result for final_attrs ."
lib = import library ( taglib module ),"call the function import_library with an argument taglib_module , substitute the result for lib ."
"if ch in "" STR_ "" :","if ch is contained in string `` iLmsu # '' ,"
except TemplateDoesNotExist :,"if TemplateDoesNotExist exception is caught ,"
if flags is not None :,"if flags is not None ,"
return STR_,return string 'StopUpload : Halt current upload . ' .
else :,"if not ,"
min = in t ( m . group ( STR_ ) ),"call the method m.group with an argument string 'min ' , convert the result into a string , substitute it for min ."
def  clean form ( self ) :,define the method _clean_form with an argument self .
print ( message ),print message to the standard output .
kw = match . groupdict ( ),"call the method match.groupdict , substitute the result for kw ."
"allowed schemes = [ STR_ , STR_ , STR_ ]","allowed_schemes is an list containing 3 elements : strings 'http ' , 'https ' and 'ftp ' ."
raise BadSignature ( STR_ % self . sep ),"raise an BadSignature exception with an argument string 'No `` % s '' found in value ' , where ' % s ' is replaced by self.sep ."
from django . conf import settings,from django.conf import settings into default name space .
"def get callable ( lookup view , can fail = False ) :",define the function get_callable with arguments lookup_view and can_fail set to boolean False .
"out . write ( STR_ % ( join tokens ( singular , trimmed ) , join tokens ( plural , trimmed ) ) )","substitute ' % r ' in string ' ngettext ( % r , % r , count ) ' with result of the function join_tokens , called with 2 arguments : singular ,"
"for uclass , unique check in all unique checks :","for every uclass , unique_check in all_unique_checks ,"
"raise TemplateDoesNotExist ( "" STR_ "" )",raise an TemplateDoesNotExist exception with an argument string `` No template names provided '' .
model = self . obj,substitute self.obj for model .
def has bom ( fn ) :,define the function has_bom with fn as argument .
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
elif closing tag :,"otherwise if closing_tag is true ,"
args = [ ],where ' % s ' is replaced with name . args is an empty list .
"default error messages = { STR_ :   ( STR_ ) , STR_ :   ( STR_ STR_ ) , STR_ :   ( STR_ ) }","default_error_messages is an dictionary with 3 entries : return value of the function _ called with an argument ,"
msg = self . style . HTTP NOT MODIFIED ( msg ),"call the self.style.HTTP_NOT_MODIFIED with an argument msg , substitute it for msg ."
"def handle app config ( self , app config , ** options ) :","and help set to a string 'Nominates a database to print the SQL for . Defaults to the `` default '' database. ' . define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options ."
name = s . split ( STR_ ),"split s into parts by ' . ' , substitute the result for name ."
error text = ERRORS [ e . errno ],"get the value under the e.errno key of the ERRORS dictionary , substitute it for error_text ."
domain whitelist = [ STR_ ],domain_whitelist is a list containing string 'localhost ' .
elif msg :,"otherwise if msg is true ,"
"for field , error list in self . error dict . items ( ) :","for every field , error_list in self.error_dict.items method return value ,"
self . remaining -= len ( result ),decrement self.remaining by length of result .
for name in sorted ( commands dict [ app ] ) :,"for every name in sorted value under the app key of the commands_dict dictionary ,"
from email . utils import formatdate,from email.utils import formatdate into default name space .
break,break from the loop execution
return nodes,return nodes .
class RegexURLPattern ( LocaleRegexProvider ) :,derive the class RegexURLPattern with LocaleRegexProvider as base class .
items =  iteritems,substitute _iteritems for items .
from django . utils . dates import MONTHS,from django.utils.dates import MONTHS into default name space .
sys . exit ( exit code ),call the function sys.exit with argument exit_code .
 format cache = { },_format_cache is an empty dictionary .
try :,"with all occurrences of ' % s ' replaced with app_name and model._meta.object_name , respectively . try ,"
"return path . join ( django .   path   [ NUM_ ] , STR_ , subdir )","join first element of django.__path__ , string 'conf ' and subdir into a valid file path , return it ."
from UserList import UserList,from UserList import UserList into default namespace .
def close ( self ) :,define the method close with self class instance as the argument .
connection = connections [ database ],substitute value under the database key of the connections dictionary for connection .
except Exception :,"if Exception exception is caught ,"
"if  samefile ( old file name , new file name ) :","if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True ,"
return os . path . exists ( self . path ( name ) ),"call the self.path function with argument name , use the result as the argument for the call to the os.path.exists function , return the result ."
value = STR_ % tuple ( value ),"substitute ' % s ' in string ' % s % s ' with the elements of value converted into a tuple , substitute the result for value ."
for f in filters :,"for every f in filters ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"if is in stance ( elt , ( Choice , NonCapture ) ) :","if elt is an instance of Choice or NonCapture classes ,"
if self .  delegate bytes and six . PY2 :,"if self._delegate_bytes and six.PY2 are both true ,"
else :,"if not ,"
"def in cr version ( self , key , delta = NUM_ , version = None ) :","call the function warnings.warn with previous string and CacheKeyWarning as arguments . define the method incr_version with 4 arguments , self , key , delta defaulting to integer 1 and version defaulting to None ."
"super ( EntitiesForbidden , self ) .   init   ( )",call the method __init__ from the base class of the EntitiesForbidden class .
output = [ ],output is an empty list .
"from django . utils . dates import MONTHS , MONTHS 3 , MONTHS ALT , MONTHS AP , WEEKDAYS , WEEKDAYS ABBR","from django.utils.dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS and WEEKDAYS_ABBR into default name space ."
if filename and not os . path . exists ( filename ) :,"if filename is true and filename path doesnt exist ,"
"super ( BaseInlineFormSet , self ) . add fields ( form , in dex )","call the method add_fields from the base class of the class BaseInlineFormSet , with 2 arguments : form and index ."
if default is None :,"if default is None ,"
if key prefix is None :,"if key_prefix is None ,"
if len ( args ) < NUM_ :,"if length of args is smaller than integer 2 ,"
"def get json data ( self , escape html = False ) :",define the method get_json_data with 2 arguments self and escape_html set to boolean False .
pass,do nothing .
return attrs,return attrs .
archive . extract ( to path ),call the method archive.extract with an argument to_path .
project name = settings . SETTINGS MODULE . split ( STR_ ) [ NUM_ ],"split settings.SETTINGS_MODULE by ' . ' character , substitute the first element of the result for project_name ."
if found :,"if found is true ,"
if six . PY3 :,"if six.PY3 is true ,"
"pickled = pickle . dumps ( value , pickle . HIGHEST PROTOCOL )",call the pickle.dumps function with value and pickle.HIGHEST_PROTOCOL as arguments .
return list ( zip ( * flatten result ( result ) ) ),"call the function flatten_result with an argument result , unpack the resulting list and zip it in the list of tuples , return the result ."
"ext list . extend ( ext . replace ( , ) . split ( STR_ ) )","delete all the whitespaces from ext , split it by ' , ' character , extend ext_list with the result ."
try :,"try ,"
break,break loop execution .
if consume next :,"if consume_next is true ,"
return,return nothing .
yield choice,yield choice .
"def update ( self , dict  ) :",define the method update with 2 arguments : self and dict_ .
def   init   ( self ) :,define the method __init__ with an argument self .
fk = fks to parent [ NUM_ ],substitute first element of fks_to_parent for fk .
def  cull ( self ) :,define the method _cull with argument self .
"def   getitem   ( self , i ) :",define the method __getitem__ with an argument self .
result . parent = self,substitute self for result.parent .
from django . db import models,from django.db import models into default name space .
"if is in stance ( elt , Group ) :","if elt is an instance of Group class ,"
"cache key =  generate cache header key ( key prefix , request )","call the function _generate_cache_header_key with key_prefix and request as arguments , substitute the result for cache_key ."
  T = r STR_,__T is a raw string ' ( ? P < hour > \d { 2 } ) : ( ? P < min > \d { 2 } ) : ( ? P < sec > \d { 2 } ) ' .
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
"def floatformat ( text , arg = - NUM_ ) :",define the function floatformat with 2 arguments text and arg set to integer -1 .
except AttributeError :,"if AttributeError exception is caught ,"
if level is not None :,"if level is not None ,"
"result . append ( self . create token ( self . template string [ upto : start ] , ( upto , start ) , False ) )","call the method self.create_token with 3 arguments : self.template_string list elements from upto index to start index ,"
"msg = SafeMIMEText ( self . body , self . content subtype , encoding )","msg is a instance of a SafeMIMEText class created with arguments : self.body , self.content_subtype and encoding ."
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
if self . data . minute == NUM_ :,"if self.data.minute equals integer 0 ,"
value = data . get ( name ),"get the name key of the data dictionary , substitute it for value ."
field notes . append ( STR_ ),append a string 'This field type is a guess . ' to field_notes .
"def templatize ( src , or igin = None ) :",define the function templatize with 2 arguments : src and origin set to None .
except SkipFile :,"if SkipFile exception is caught ,"
def debug ( request ) :,define the function debug with an argument request .
for level in zip ( * [ m . ancestry for m in merge migrations ] ) :,"for m in merge_migrations append m.ancestry to a list , zip the resulting list into tuples of pairs , for every level in result ,"
if cache timeout < NUM_ :,"if cache_timeout is lesser than integer 0 ,"
value = smart text ( value ) . strip ( ),"call the function smart_text with an argument value , strip the result of whitespaces from both ends and substitute it for value ."
def read ( self ) :,define the method read with an argument self .
"self . delete ( key , version = version )",call the self.delete method with key and version set to version as arguments .
value = formats . sanitize separators ( value ),"call the method formats.sanitize_separators with an argument value , substitute the result for value ."
"filter re = re . compile ( filter raw string , re . UNICODE | re . VERBOSE )","( ? P < filter_name > \w+ ) ( ? : % ( arg_sep ) s ( ? : ( ? P < constant_arg > % ( constant ) s ) | ( ? P < var_arg > [ % ( var_chars ) s ] +| % ( num ) s ) ) ) ? ) '' , where 'constant ' is replaced with constant_string , 'num ' with raw string ' [ -+\ . ] ? \d [ \d\.e ] * ' , 'var_chars ' with string `` \w\ . `` , 'filter_sep ' with result of the function re.escape called with an argument FILTER_SEPARATOR , anbd 'arg_sep ' with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR . call the function re.compile with 2 arguments : filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE ,"
found = False,found is boolean False .
"from django . db import connections , DEFAULT DB ALIAS",from django.db import connections and DEFAULT_DB_ALIAS into default name space .
cursor . execute ( STR_ % table ),"call the method cursor.execute with string `` DELETE FROM % s '' as argument , substitute the ' % s ' with table ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"return super ( NullBooleanSelect , self ) . render ( name , value , attrs , choices )","call the method render from the base class of the class NullBooleanSelect , with 4 arguments : name , value , attrs and choices ,"
if imatch . group ( NUM_ ) :,"call the method imatch.group with an argument integer 1 , if it evaluates to true ,"
self . file . write ( raw data ),call the method self.file.write with argument raw_data .
substitutions [ STR_ ] = self . template with clear % substitutions,"attrs as a dictionary with an entry : checkbox_id for 'id ' , substitute the result for value under the 'clear ' key of the substitutions dictionary . format self.template_with_clear with substitutions , substitute the result for value under the 'clear_template ' key of ,"
def   repr   ( self ) :,define the method __repr__ with an argument self .
created models = set ( ),created_models is a set .
if not rest :,"if rest is not False , None is considered False ,"
"return "" STR_ "" % ( self .   class   .   name   , super ( MultiValueDict , self ) .   repr   ( ) )","return a string `` < % s : % s > '' formated with self.__class__.__name__ ,"
"return STR_ % calendar . monthrange ( self . data . year , self . data . month ) [ NUM_ ]","call the method calendar.monthrange with 2 arguments : self.data.year and self.data.month ,"
"value = ungettext ( "" STR_ "" , "" STR_ "" , bytes ) % { STR_ : bytes }","call the function ugettext with 3 arguments , string `` % ( size ) d byte '' , string `` % ( size ) d bytes '' and bytes ,"
else :,"if not ,"
if first :,"if first is true ,"
def iterbytes ( buf ) :,define the function iterbytes with an argument buf .
else :,"if not ,"
"patch cache control ( response , max age = cache timeout )","and substitute the return value for value under the key 'Expires ' of dictionary response . call the function patch_cache_control , with response and max_age set to cache_timeout as arguments ."
except Model . DoesNotExist :,"an unpacked list natural_key as argument , substitute the pk filed of the resulting object for obj.pk . if Model.DoesNotExist exception is caught ,"
if key in dict  :,"if key is contained in dict_ ,"
except ImportError :,"if ImportError exception is caught ,"
fields . sort ( key = lambda x : x [ NUM_ ] . creation counter ),"if obj is an instance of Field , append to a list a tuple with 2 elements : field_name , and poped value under the field_name key of the attrs dictionary , substitute the resulting list for fields . sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x ."
from django . utils . module loading import import string,from django.utils.module_loading import import_string into default name space .
for path in self . locale paths :,"for every path in self.locale_paths ,"
if data [ last : last + NUM_ ] == b STR_ :,element of data at the index last equals to carriage return bytes character .
"from django . utils . encoding import force str , force text",from django.utils.encoding import force_str and force_text into default name space .
import tarfile,import module tarfile .
prefix = d [ STR_ ],"substitute value under the 'prefix ' key of dictionary d , substitute it for prefix ."
def in t to base36 ( i ) :,define the function int_to_base36 with an argument i .
return EscapeBytes ( s ),"return an instance of EscapeBytes , created with an argument s ."
return STR_ % self . data . second,return a string ' % 02d ' formated with self.data.second .
self . unclosed block tag ( [ endtag ] ),call the method self.unclosed_block_tag with an argument list with an element endtag .
"def filter ( self , record ) :",define the method filter with 2 arguments : self and record .
"formfield = formfield callback ( f , ** kwargs )","call the method formfield_callback with 2 arguments : f and unpacked dictionary kwargs , substitute the result for formfield ."
message context = message context . strip ( STR_ ),"strip message_context of ' '' ' characters from both ends , substitute the result for message_context ."
field name = disposition [ STR_ ] . strip ( ),"get the value under the 'name ' key of the disposition dictionary , strip it of whitespaces , substitute the result for field_name ."
MAXSIZE = sys . maxsize,substitute sys.maxsize for MAXSIZE .
"if is in stance ( data , bytes ) :",if data is an instance of bytes .
"self . base fields [ MAX NUM FORM COUNT ] = IntegerField ( required = False , widget = HiddenInput )","created with 2 arguments : required as boolean False and widget set to HiddenInput . value under the MAX_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class ,"
"django po = os . path . join ( django dir , STR_ , STR_ , locale , STR_ , STR_ % domain )","join into a file path : django_dir , 'conf ' , 'locale ' , locale , 'LC_MESSAGES ' and string '.po ' appended to domain , substitute the result for django_po ."
if parsed . scheme and parsed . scheme not in self . allowed schemes :,"substitute the result for parsed . if parsed.scheme is true and parsed.scheme is not contained in self.allowed_schemes ,"
"from django . utils . translation import ugettext lazy , ugettext as   , pgettext","from django.utils.translation import ugettext_lazy , ugettext as _ and pgettext into default name space ."
field value = getInnerText ( node ) . strip ( ),"call the function getInnerText with an argument node , call the strip method on the result , substitute the result for field_value ."
if self . verbosity > NUM_ :,"if self.verbosity is greater than integer 0 ,"
return response,return response
try :,"and absolute value of p , substitute the result for exp . try ,"
self . level = level,substitute level for self.level .
"def   getitem   ( self , key ) :",define the method __getitem__ with 2 arguments : self and key .
"kw . extend ( [ d . hour , d . minute , d . second , d . microsecond , d . tzinfo ] )","extend list kw with a list with 5 elements : d.hour , d.minute , d.second , d.microsecond and d.tzinfo ."
self . func = func,substitute func for self.func .
sys . exit ( NUM_ ),exit program with code integer 0 .
try :,"try ,"
s = MLStripper ( ),s is an instance of MLStripper class .
def new datetime ( d ) :,define the function new_datetime with an argument d .
class FilterNode ( Node ) :,derive the class FilterNode from Node base class .
elif t . token type == TOKEN TEXT :,if t.token_type == TOKEN_TEXT :
"parser . add argument ( STR_ , default = DEFAULT DB ALIAS , help = STR_ )","dest set to string 'load_initial_data ' , default set to boolean True , and help as a string 'Tells Django not to load any initial data after database synchronization . ' call the method parser.add_argument with 3 arguments : string ' -- database ' , default set to DEFAULT_DB_ALIAS ,"
if not prefix :,"if prefix is false ,"
close = True,close is boolean True .
kwargs [ STR_ ] = widgets [ f . name ],substitute value under the f.name key of the widgets dictionary for value under the 'widget ' key of kwargs dictionary .
"except ( ValueError , TypeError , ValidationError ) :","if ValueError , TypeError or ValidationError exception is caught ,"
class ComboField ( Field ) :,derive the class ComboField from the base class Field class .
def get default prefix ( cls ) :,define the method get_default_prefix with an argument cls .
value = self . to python ( value ),"call the method self.to_python with an argument value , substitute it for value ."
"Model =  get model ( d [ "" STR_ "" ] )","call the function _get_model with an argument value under the 'model ' key of the d dictionary , substitute the result for Model ."
"form = super ( BaseInlineFormSet , self ) .  construct form ( i , ** kwargs )","call the method _construct_form from the base class of the class BaseInlineFormSet , with 2 arguments : i ,"
update watch ( ),call the method update_watch .
TOKEN TEXT = NUM_,TOKEN_TEXT is integer 0
"return self .  html output ( normal row = STR_ , error row = STR_ , row ender = STR_ , help text html = STR_ , errors on separate row = True )","return the result of the method self._html_output , called with 5 arguments : normal_row to a string ,"
elif token string . startswith ( BLOCK TAG START ) :,"and elements of token_string from second to second last element wiht the whitespaces striped from the both sides . otherwise if token_string starts with BLOCK_TAG_START ,"
"def  new gnu trans ( self , localedir , use null fallback = True ) :","define the method _new_gnu_trans with 3 arguments : self , localedir and use_null_fallback set to boolean True ."
@ stringfilter,"decorator stringfilter ,"
"unifunc = results [ "" STR_ "" ]",substitute value under the `` unifunc '' key of the results dictionary for unifunc .
def prepare js for gettext ( js ) :,define the function prepare_js_for_gettext with an argument js .
if opts . managed :,"if opts.managed is true ,"
leave locale alone = True,leave_locale_alone is boolean True .
"def autoescape ( parser , token ) :",define the function autoescape with 2 arguments : parser and token .
return self . parent instance,and code set to a string 'invalid_choice ' . return self.parent_instance .
if mimetype is None :,"if mimetype is None ,"
if new name . endswith ( STR_ ) :,"if new_name ends with a string ' _ ' ,"
"return end , next",return end ans next .
"if hasattr ( model , STR_ ) :","if model has an 'natural_key ' attribute ,"
locales . append ( locale . split ( STR_ ) [ NUM_ ] ),"split locale by ' _ ' , append the first element of the result to locales ."
if fk . unique :,"if fk.unique is boolean true ,"
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % token . contents )","raise an TemplateSyntaxError exception with an argument string `` 'for ' statements should have at least four words : % s '' ,"
self . in verse match = in verse match,substitute inverse_match for self.inverse_match .
pos = m . end ( NUM_ ),"call the method m.end with an argument integer 0 , substitute the result for pos ."
for plan node in graph . forwards plan ( node ) :,for every plan_node in return value of the graph.forwards_plan method called with node as argument .
"MONTHS 3 REV = { STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ }","result of the call to the function _ with an argument string 'feb ' for 2 , result of the call to the function _ with an argument string 'mar ' for 3 , result of the call to the function _ with an argument string 'apr ' for 4 , result of the call to the function _ with an argument string 'may ' for 5 , result of the call to the function _ with an argument string 'jun ' for 6 , result of the call to the function _ with an argument string 'jul ' for 7 , result of the call to the function _ with an argument string 'aug ' for 8 , result of the call to the function _ with an argument string 'sep ' for 9 , result of the call to the function _ with an argument string 'oct ' for 10 , result of the call to the function _ with an argument string 'nov ' for 11 , result of the call to the function _ with an argument string 'dec ' for 12 . MONTHS_3_REV is an dictionary with 12 entries : 1 for 'jan ' , 2 for 'feb ' , 3 for 'mar ' , 4 for 'apr ' , 5 for 'may ' , 6 for 'jun ' ,"
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'title ' and value under the 'title ' key of the item dictionary .
" func code = "" STR_ """,_func_code is a string `` func_code '' .
import datetime,import module datetime .
"def get valid name ( self , name ) :",define the method det_valid_name with arguments self and name .
else :,"if not ,"
class Command ( BaseCommand ) :,derive class Command from the BaseCommand base class .
"obj = "" STR_ """,obj is a string `` ? `` .
"return force text ( name . replace ( STR_ /  ) )
","replace all the strings '\\ ' with '/ ' in the string name , use it as an argument for the call to the force_text function , return the result ."
return mark safe ( output ),call the function mark_safe with an argument output .
for name in bits [ NUM_ : - NUM_ ] :,"for every name in bits from the start index 1 to the end index negative 2 ,"
new value = [ ],new_value is an empty list .
daemon kwargs [ STR_ ] = options [ STR_ ],substitute the value under the 'errlog ' key of options dictionary for value under the 'err_log ' key of daemon_kwargs dictionary .
verbosity = options . get ( STR_ ),"get the value under the key 'verbosity ' of options dictionary , substitute it for verbosity ."
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
to python = self .  get to python ( pk field ),"call the method self._get_to_python with an argument pk_field , substitute the result for to_python ."
else :,"if not ,"
"self . attrs [ STR_ ] += "" STR_ "" % self . in dex","convert self.index into a string and append it to ' _ ' string , substitute it for value under the 'id ' key of self.attrs dictionary ."
"except ( ValueError , TypeError ) :","if TypeError or ValueError exceptions are caught ,"
for dict  in self . dicts :,"for every dict_ in self.dicts ,"
"block re = re . compile ( r "" "" "" STR_ "" [ ^ "" STR_ "" ) | ( ? : STR_ ] * ? )))?(?:\s+|$)"""""" )
","call the function re.compile with an argument raw string `` ^\s*blocktrans ( \s+.*context\s+ ( ( ? : '' [ ^ '' ] * ? '' ) | ( ? : ' [ ^ ' ] * ? ' ) ) ) ? ( ? : \s+| $ ) '' ,"
def catalog ( ) :,define the function catalog .
check for language . cache clear ( ),call the method check_for_language.cache_clear .
"if is in stance ( format module path , six . string types ) :","if format_module_path is an instance of six.string_types ,"
ip address = literal match . group ( NUM_ ),"call the method literal_match.group with an integer 1 , substitute the result for ip_address ."
style = no style ( ),substitute return value of function no_style for style .
return datetime . utcnow ( ) . replace ( tzinfo = utc ),"call the method datetime.utcnow , on the result call the method replace with an argument tzinfo set to utc , return the result ."
"app label , migration name = options [ STR_ ] , options [ STR_ ]","assign values under the 'app_label ' and 'migration_name ' keys of the options dictionary to the app_label and migration_name , respectively ."
return key [ NUM_ ],return first element of key .
for app config in reversed ( list ( apps . get app configs ( ) ) ) :,"for app_config in reversed list of apps.get_app_configs ( ) elements ,"
else :,"if not ,"
directory created [ app label ] = True,value under the all_label key of the directory_created dictionary is boolean True .
"def handle field ( self , obj , field ) :","define the method handle_field with argument self , obj and field ."
from django . utils import six,from django.utils import six into default name space .
if response is None :,"if response is None ,"
"def npgettext lazy ( context , singular , plural , number = None ) :","and number set to number , return the result . define the function npgettext_lazy with 4 arguments : context , singular , plural and number set to None ."
return value . replace ( tzinfo = timezone ),"call the method value.replace with an argument tzinfo as timezone , return the result ."
from . base import CommandError,from .base import CommandError into default name space .
"return super ( BaseModelFormSet , self ) .  construct form ( i , ** kwargs )","call the method _construct_form from the base class of the class BaseModelFormSet , with 2 arguments : i and unpacked dictionary kwargs ."
"def   init   ( self , takes context , args , kwargs , target var ) :","define the function __init__ with 5 arguments : self , takes_context , args , kwargs and target_var ."
"  all   = ( STR_ , STR_ , STR_ , STR_ , STR_ )","__all__ is a tuple containing strings : 'LOCK_EX ' , 'LOCK_SH ' , 'LOCK_NB ' , 'lock ' and 'unlock ' ."
class RegexValidator ( object ) :,derive the class RegexValidator form the object base class .
for d in self . dicts :,"for every d in self.dicts ,"
def gettext noop ( message ) :,define the function locale with an argument locale .
except http cookies . CookieError :,if http_cookies.CookieError exception is raised .
"from django . utils import dateformat , numberformat , datetime safe","from django.utils import dateformat , numberformat and datetime_safe into default name space ."
@ register . tag,"register.tag decorator ,"
return { },return an empty dictionary .
def  get count ( self ) :,define the method _get_count with an argument self .
if event . path . endswith ( STR_ ) :,"if event.path ends with string '.mo ' ,"
m2m data [ field . name ] = [ m2m convert ( pk ) for pk in field value ],"return value of the method field.rel.to._meta.pk.to_python called with an argument v. call the m2m_convert function with pk as argument , for every pk in field_value , substitute the value under the field.name key of the m2m_data dictionary ."
return strip tags ( value ),"call the function strip_tags with an argument value , return the result ."
if as  ! = as :,"if as_ is not equal to string 'as ' ,"
"resolved args , resolved kwargs = self . get resolved arguments ( context )","call the method self.get_resolved_arguments with an argument context , substitute the result for resolved_args and resolved_kwargs ."
else :,"if not ,"
except ImportError :,"if ImportError exception is caught ,"
"return force text ( time . tzname [ is  dst ] , DEFAULT LOCALE ENCODING )","call the function force_text with 2 arguments : value under the is_dst key of the time.tzname and DEFAULT_LOCALE_ENCODING ,"
class Command ( BaseCommand ) :,derive the class Command from the BaseCommand base class .
else :,"convert the result into a string and substitute it for value . if not ,"
t = self . waiting readers,substitute self.waiting_readers for t .
"raise IOError ( "" STR_ "" % directory )","raise an IOError exception with argument string `` % s exists and is not a directory . `` , where ' % s ' is replaced by directory ."
compile func .   doc   = func .   doc  ,substitute func.__doc__ for compile_func.__doc__ .
@ register . tag,"register.tag decorator ,"
def gettext ( message ) :,define the function gettext_noop with an argument message .
class Parser ( object ) :,derive the class Parser form the base class object .
"def exists ( self , name ) :",define the method exists with arguments self and name .
def  iteritems ( self ) :,define the method _iteritems with an argument self .
self . position -= len ( bytes ),decrement self.position by length of bytes .
if not roots :,"if roots is false ,"
args = ( ),args is a empty tuple .
"def register serializer ( format , serializer module , serializers = None ) :","define the function register_serializer with 3 arguments : format , serializer_module and serializers set to None ."
self . old language = get language ( ),"call the function get_language , substitute the result for self.old_language ."
if self not in state frame :,"if self is not contained in state_frame ,"
 html parser . HTMLParser .   init   ( self ),call the initialization method _html_parser.HTMLParser.__init__ ( self ) for the base class .
"def  generate cache key ( request , method , headerlist , key prefix ) :","define function _generate_cache_key , with request , method , headerlist and key_prefix as arguments ."
self . LibraryValueNotFoundException = value not found exception,substitute value_not_found_exception for self.LibraryValueNotFoundException .
except StandardError as e :,"under the 'handlers ' key of self.config dictionary , substitute the result for value under 'target ' key of config dictioanry . if StandardError , renamed to e , exception is caught ,"
def namespace dict ( self ) :,define the method namespace_dict with an argument self .
" drive re = re . compile ( STR_ , re . I )","call the function re.compile with 2 arguments : string '^ ( [ a-z ] ) : ' and re.I , substitute the result for _drive_re ."
"return getattr ( in stance , name ) ( )","get name attribute from the instance object , call it and return the result ."
return cls,where ' % s ' is replaced with filename . return cls .
"assert is in stance ( level , in t ) , "" STR_ """,if level is not an integer raise an error with message string `` The first argument should be level . `` .
if self not in context . render context :,"if self is not contained in context.render_context ,"
self .  regex dict [ language code ] = compiled regex,where ' % s ' is replace by regex and return value of the function six.text_type with an argument e. substitute the compiled_regex for value under the language_code key of the self._regex_dict dictionary .
timeout = self . default timeout,substitute self.default_timeout for timeout .
return,return an empty string .
return in itial ! = data,"if initial is not equal to data , return boolean True , if it is return boolean False ."
break,"break from the loop execution ,"
try :,"try ,"
@ property,"property decorator ,"
"token = "" STR_ ""","and element of tokens at i incremented by 1 index equals a string `` in '' , token is a string `` not in '' ."
if upto ! = len ( token ) :,"if upto is not equal to length of token ,"
"raise ValueError ( "" STR_ "" % key )","raise an exception of class ValueError , with string `` Key ' % s ' not found '' as argument , where ' % s ' is substituted for key ."
taglib = bits [ - NUM_ ],substitute last element of bits for taglib .
return in t ( cc [ STR_ ] ),"convert to integer the value of dictionary cc under the key 'max-age ' , and return it"
class RequireDebugFalse ( logging . Filter ) :,derive the class RequireDebugFalse from logging.Filter base class .
"from django . core . management . utils import ( handle extensions , find command , popen wrapper )","from django.core.management.utils import handle_extensions , find_command and popen_wrapper into default name space ."
"for app name , namespace list in pattern . app dict . items ( ) :","for every app_name and namespace_list in pattern.app_dict.items method return value ,"
raise FieldError ( message ),raise an FieldError exception with an argument message .
try :,"try ,"
"super ( BaseMemcachedCache , self ) .   init   ( params )",call the initialization method with argument params for the base class of the BaseMemcachedCache class .
pk value = None,pk_value is None .
"warnings . warn ( "" STR_ "" "" STR_ "" , RemovedInDjango20Warning , stacklevel = NUM_ )",call the function warnings.warn with 3 arguments :
"if is in stance ( cache , BaseDatabaseCache ) :","if cache is an instance of BaseDatabaseCache ,"
func .   doc   = doc,substitute doc for func.__doc__ .
var node = self . create variable node ( filter expression ),"call the method self.create_variable_node with an argument filter_expression , substitute the result for var_node ."
"archive . extract ( filename , tempdir )",call the method archive.extract with arguments : filename and tempdir .
if bytes read > rollback :,"if bytes_read is greater than rollback ,"
"raise TemplateSyntaxError ( "" STR_ "" % bits [ NUM_ ] )","raise an TemplateSyntaxError exception with an argument string `` % r takes two arguments '' ,"
return endpos,return endpos .
if ( locale is None and not exclude and not process all ) or self . domain is None :,"evaluate the boolean expression : locale is None and exclude is false and process_all is false ,"
encoding = settings . DEFAULT CHARSET,substitute settings.DEFAULT_CHARSET for encoding .
except UnicodeError :,"if UnicodeError exception is caught ,"
self . id = Tok . num,substitute Tok.num for self.id .
self . bad cookies = set ( ),self.bad_cookies is an empty set .
or ig = self . parent instance . pk,substitute self.parent_instance.pk for orig .
comment notes = [ ],comment_notes is an empty list .
mail . send ( fail silently = fail silently ),call the mail.send method with fail_silently=fail_silently as argument .
raise NotImplementedError ( STR_ ),raise an NotImplementedError with an argument string 'subclasses of Widget must provide a render ( ) method ' .
"new key = self . key func ( key , self . key prefix , version )","call the method self.key_function with key , self.key_prefix and version as arguments , substitute the result for new_key ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = "" STR_ "" )","and help set to string 'Raise on exception ' . call the method parser.add_option with 5 arguments : string ' -- no-color ' , action is string 'store_true ' , dest is string 'no_color ' ,"
elif not os . path . exists ( self . file path ) :,"otherwise if self.file_path file path doesnt exists ,"
if color settings :,"if color_setting is True ,"
"if is in stance ( elt , six . string types ) :","if elt is an instance of six.string_types class ,"
def last ( value ) :,define the function last with an argument value .
shown . add ( plan node ),add plan_node to the shown set .
sys . exit ( NUM_ ),call the function sys.exit with argument integer 3 .
"encode = curry (  proxy method , method = six . text type . encode )","call the function curry with 2 arguments : _proxy_method and method set to six.text_type.encode , substitute the result for encode ."
if not self . required :,"if self.required is false ,"
for base in bases [ : : - NUM_ ] :,"for every base in reversed order of bases ,"
if related :,"if related is true ,"
return latest date or datetime . datetime . now ( ),"if latest_date is true , return it , if not , call the method datetime.datetime.now and return the result ."
elif prefix ! = common prefix :,"otherwise if prefix is not equal to common_prefix ,"
endblock = parser . next token ( ),"call the method parser.next_token , substitute the result for endblock ."
return parser .  namedCycleNodes [ name ],"get the index name , of the parser._namedCycleNodes , return the result ."
tmpdir = tempfile . mkdtemp ( ),"call the function tempfile.mkdtemp , substitute the result for tmpdir ."
newlines = property ( lambda self : self . file . newlines ),"define lambda function that returns self.file.newlines field , use it as an argument for property function , put the result in newlines ."
"self . set ( key , value , version = version + delta )","call the method self.set with key , value , version incremented by delta , as arguments ."
sys . exit ( NUM_ ),close the process with an argument 0 .
" func globals = "" STR_ """,_func_globals is a string `` func_globals '' .
"context re = re . compile ( r "" "" "" STR_ "" [ ^ "" STR_ "" ) | ( ? : STR_ ] * ? ))\s*"""""" )
","call the function re.compile with an argument raw string `` ^\s+.*context\s+ ( ( ? : '' [ ^ '' ] * ? '' ) | ( ? : ' [ ^ ' ] * ? ' ) ) \s* '' , substitute the result for context_re ."
self .  css = { },self._css is an empty dictionary .
new second item . extend ( item ),extend new_second_item with item .
return,return nothing .
kwargs = match . groupdict ( ),"call the method match.groupdict , substitute the result for kwargs ."
extracted = self .  archive . extractfile ( member ),"call the method self._archive.extractfile with an argument member , substitute the result for extracted ."
if not buf :,"if buf is false ,"
NOCOLOR PALETTE = STR_,opts and unpacked dictionary kwargs . NOCOLOR_PALETTE is a string 'nocolor ' .
"in ner result , in ner args = [ ] , [ ]",inner_result and inner_args are empty lists .
if log in child loggers :,"if log is contained in child_loggers ,"
"def fget ( in stance , in stance type = None , name = fget .   name   ) :","define the function fget with 3 arguments : instance , instance_type set to None and name set to fget.__name__ ."
return self .   class   ( self ),"call the method self.__class__ with an argument self , return the result ."
import os,import module os .
return loader . get template ( template ),"call the method loader.get_template with an argument template , return the result ."
else :,"if not ,"
if message context [ NUM_ ] == STR_ :,"if first element of message_context equals to character ' '' ' ,"
import locale,import module locale .
security logger = logging . getLogger ( STR_ % e .   class   .   name   ),"substitute ' % s ' in 'django.security. % s ' with the name of the type of the class object e , use it as the argument for the call to the ,"
return default,return default .
from django . utils . formats import localize,from django.utils.formats import localize into default name space .
"return formats . date format ( value , arg )","call the method formats.time_format with 2 arguments : value and arg , return the result ."
"def  handle m2m field node ( self , node , field ) :","with field_value as an argument , return the result . define the method _handle_m2m_field_node with arguments self , node and field ."
def is  checked ( self ) :,substitute set of the results for self.value . define the method is_checked with an argument self .
end text pos = pos,substitute pos for end_text_pos .
class BaseArchive ( object ) :,derive the class BaseArchive from the object base class .
elif name in lib . filters :,"otherwise if name is contained in lib.filters ,"
class Origin ( object ) :,derive the class Origin form the base class object .
cookiedict = { },cookiedict is an empty dictionary .
if errors :,"if errors is true ,"
if len ( hextet ) > NUM_ :,"if length of hextet is greater than integer 1 ,"
"def show migration list ( self , connection , app names = None ) :","define show_migration_list with self class instance , connection and app_names set to None , as arguments ."
end = len ( text ),substitute length of text for end .
raise ValidationError ( errors ),raise an ValidationError with an argument errors .
truncate len -= NUM_,decrement truncate_len by integer 1 .
self . objects . append ( self . get dump object ( obj ) ),"call the self.get_dum_object method with an argument obj , use the result as an argument for the self.objects.append method ."
"for root , dirs , files in os . walk ( template dir ) :","for every root , dirs and files in subdirectory tree starting from the base dir template_dir ,"
"return str ( name ) , val",return name converted to a string and val .
"raise ValueError ( STR_ STR_ % ( formatter , e ) )",raise an ValueError exception with an argument string 'Unable to set formatter % r : % s ' formated with formatter and e .
regex = self .  regex,substitute self._regex for regex .
db = router . db for write ( self . cache model class ),"call the method router.db_for_write with argument self.cache_model_class , substitute the result for db ."
if self . asvar :,"if self.asvar is true ,"
else :,"if not ,"
return self . size,return self.size .
memo [ id ( self ) ] = self,"get the id of the self object , use it as a key to obtain the value from the memo dictionary , substitute self with it ."
"self . stdout . write ( self . style . MIGRATE SUCCESS ( "" STR_ "" ) )",wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string `` FAKED '' as a argument .
"return self . add truncation text ( . join ( words ) , truncate )","call the method self.add_truncation_text with 2 arguments : elements of words joined in a string , separated with whitespaces ,"
error messages = opts . error messages [ NON FIELD ERRORS ],substitute value under the NON_FIELD_ERRORS key of opts.error_messages dictionary for error_messages .
value = b . join ( self . make bytes ( chunk ) for chunk in value ),"call the self.make_bytes method with an argument chunk , for every chunk in value join the result to a bytes string ,"
if len ( args ) > NUM_ :,"if length of args is greater than integer 1 ,"
"def   init   ( self , * args , ** kwargs ) :","define the __init__ method with 3 arguments : self , unpacked list args and unpacked dictionary **kwargs ."
class CommandParser ( ArgumentParser ) :,derive the CommandParser class from the ArgumentParser base class .
os . chdir ( our home dir ),call the method os.chdir with an argument our_home_dir .
def parts ( ) :,define the function parts .
"def linebreaks ( value , autoescape = False ) :","separated with result of the function conditional_escape with an argument sep , for every args in args_generator , use the result as an argument for the call to the function mark_safe , return the result . define the function linebreaks with 2 arguments : value and autoescape set to boolean False ."
self .  errors = [ ],self._errors is an empty list .
"result . append ( Group ( ( ( "" STR_ "" % param ) , param ) ) )","instantiate a class Group with 2 arguments : string `` % % ( % s ) s '' formated with param , and param , append it to result ."
table names = connection . in trospection . table names ( cursor ),"call the method connection.introspection.table_names with an argument cursor , substitute the result for table_names ."
values = [ parser . compile filter ( arg ) for arg in args [ NUM_ : - NUM_ ] ],"call the function parser.compile_filter with an argument arg for every arg in args from the index 1 to the index -2 ,"
import sys,import module sys .
client . behaviors = self .  options,substitute self._options for client.behaviors .
  hash   = new method proxy ( hash ),"call the function new_method_proxy with an argument hash , substitute the result for __hash__ ."
else :,"if not ,"
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
models = set ( ),models is an empty set .
"constant arg , var arg = match . group ( "" STR_ "" , "" STR_ "" )","call the method match.group with 2 arguments : strings `` constant_arg '' and `` var_arg '' , substitute the result for constant_arg ,"
elif disable existing :,"otherwise if disable_existing is true ,"
@ property,"property decorator ,"
"for field , errors in self . items ( ) :","call the method self.items , for every field and errors in the result ."
if level :,"if level is true ,"
"for i item , i args in zip ( in ner result , in ner args ) :","zip elements of inner_result and inner_args into a list of tuples , for every i_item and i_args in the result ,"
pop context = False,pop_context is boolean False .
with context . push ( ** values ) :,"for every key and val in return value of the function six.iteritems called with an arguments self.extra_context . call the method context.push with an argument unpacked dictionary values , with the result as an argument ,"
"formatter = config . pop ( STR_ , None )","remove config dictionary element under 'formatter ' key , if it exists substitute it for formatter , if not , formatter is None ."
from django . utils . translation import templatize,from django.utils.translation import templatize into default namespace .
"def represent decimal ( self , data ) :",define the method represent_decimal with arguments self and data .
self . context data = context,substitute context for self.context_data .
new second item = [ ],new_second_item is an empty list .
"def add arguments ( self , parser ) :",`` path of at least one fixture in the command line . '' define the method add_arguments with 2 arguments : self and parser .
"def get ( self , header , alternate = None ) :","define the method get with 3 arguments : self , header and alternate set to None ."
else :,"if not ,"
"subject = STR_ % ( record . levelname , record . getMessage ( ) )","subject is an string ' % s : % s ' formated with record.levelname and result of the method record.getMessage , respectively ."
if self . username and self . password :,"if self.username and self.password are true ,"
"self . key prefix = params . get ( STR_ , )","call the params.get method with string 'KEY_PREFIX ' and an empty string as arguments , substitute the result for self._key_prefix ."
" urllib parse moved attributes = [ MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , ]","_urllib_parse_moved_attributes is a list with 16 elemetns , all of them are the results of the call to the function MovedAttribute with different 3 string arguments ."
output = self . filter expression . resolve ( context ),"call the method self.filter_expression.resolve with an argument context , substitute the result for output ."
self . in dent ( NUM_ ),call the method self.indent with argument integer 2 .
state = self . state,substitute self.state for state .
yield,yield nothing .
if cmatch :,"if cmatch is true ,"
"return ,",return an empty string and an empty string .
cc = cc delim re . split ( response [ STR_ ] ),"find the value of response under the key 'Cache-Control ' , use it as a delimiter to split string ss_delim_re ,"
if self . feed [ STR_ ] is not None :,"value under the 'feed_url ' key of the self.feed dictionary for 'href ' . if value under the 'language ' key of the self.feed dictionary is not None ,"
"raise self . source error ( source , msg )","and elements of parse_until joined into a string , separated by string ' , ' . raise an self.source_error exception with 2 arguments : source and msg ."
import copy,import module copy .
except ValidationError :,"use the result as an argument for the call to the field.to_python method , substitute the result for initial_value . if ValidationError exception is caught ,"
result = NUM_,result is an integer 0 .
changed = True,changed is boolean True .
"for app label , migration names in conflicts . items ( ) :","boolean True for 'ask_merge ' . for every app_label and migration_names in result of the method conflicts.items ,"
continue,skip this loop iteration .
"return "" STR_ "" % os . sep . join ( [ self . dirpath , self . file ] )","join self.dirpath and self.file in a string , substitute with it ' % s ' in string `` < TranslatableFile : % s > '' , return the result ."
import re,import module re .
digits = [ six . text type ( digit ) for digit in reversed ( digits ) ],"call the method as_tuple on the result , substitute the result for sign , digits and exponent , respectively . append result of method six.text_type called with an argument digit to an list , for every digit in reversed order of digits ,"
if not encoding :,if encoding is false .
for    in iterator :,"for every __ in iterator ,"
"name str = "" STR_ "" . join ( "" STR_ "" % ( "" STR_ "" . join ( names ) , app ) for app , names in conflicts . items ( ) )","for every app and names in key , value tuple pairs of conflicts dictionary join names into a string separated by commas ,"
qs = queryset . filter ( ** { self . fk . name : self . in stance } ),"call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name , substitute the result for qs ."
self . verbatim = STR_ % block content,"append block_content to a string 'end ' , substitute the result for self.verbatim ."
return self .  fqdn,return self._fqdn .
if comment lineno cache is not None :,"if comment_lineno_cache is not None ,"
"data = ( form . cleaned data [ field ] , ) + date data","create a tuple out of elements under the key field of the form.cleaned_data dictionary , add elements of date_data to it ,"
if self . verbosity > NUM_ :,"if self.verbosity is greater than integer 0 ,"
self . asvar = asvar,substitute asvar for self.asvar .
first = second = None,first and second are None .
"or iginal path = os . path . join ( tmpdir , STR_ )","join tmpdir and sting 'original ' into a file path name , substitute it for original_path ."
os . makedirs ( filename ),create directories from the elements in filename .
parent pat = pattern . regex . pattern,substitute pattern.regex.pattern for parent_pat .
is  usable = True,is_usable is boolean True .
if options :,"if options is true ,"
return value,return value .
"warnings . warn ( "" STR_ "" , RemovedInDjango19Warning )","call the method warnings.warn with 2 arguments : string `` FastCGI support has been deprecated and will be removed in Django 1.9 . `` ,"
"return name . replace ( STR_ , ) . capitalize ( )","replace all the occurrences of character ' _ ' in name with a whitespace , capitalize the first letter and return the result ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
tupl = d . as tuple ( ),"call the method d.as_tuple , substitute the result for tupl ."
parser .  namedCycleNodes [ name ] = node,substituet node for value under the name key of the parser._namedCycleNodes dictionary .
def A ( self ) :,define the method A with an argument self .
"nodelist = parser . parse ( ( elif , else , STR_ ) )","call the method parser.parse with an argument tuple with 3 elements : strings 'elif ' , 'else ' and 'endif ' , substitute the result for nodelist ."
class BaseTemporalField ( Field ) :,derive the class BaseTemporalField from the base class Field class .
for model in model list :,"for every model in model_list ,"
if param in unhandled params :,"if param is contained in unhandled_params ,"
"help = "" STR_ """,help is a string `` Checks the entire Django project for potential problems . `` .
"if is in stance ( content , EmailMessage ) :","if content is an instance of a EmailMessage class ,"
weight += NUM_,increment weight by integer 2 .
"value = ungettext ( "" STR_ "" , "" STR_ "" , NUM_ ) % { STR_ : NUM_ }","call the function ungettext with 3 arguments : string `` % ( size ) d byte '' , string `` % ( size ) d bytes '' and 0 , ' % ( size ) d ' is replaced with 0 ,"
year += NUM_,increment year by integer 1900 .
return force text ( iri to uri ( value ) ),"call the function iri_to_uri with an argument value , use the result as an argument for the call to the force_text function ,"
if options . get ( STR_ ) is not None :,"if value under the 'liveserver ' key of the options dictionary is not None ,"
class RawPostDataException ( Exception ) :,derive the class RawPostDataException from the base class Exception .
self . DSTOFFSET = self . STDOFFSET,substitute self.STDOFFSET for self.DSTOFFSET .
if tag in self . CDATA CONTENT ELEMENTS :,"if tag is contained in self.CDATA_CONTENT_ELEMENTS ,"
bits = token . split contents ( ),"call the method token.split_contents , substitute the result for bits ."
"data [ field . attname ] = self .  handle fk field node ( field node , field )","call the method self._handle_fk_field_node with field_node and field as arguments , substitute the result for the value under the"
else :,"if not ,"
from django . utils . datastructures import MultiValueDict,from django.utils.datastructures import MultiValueDict into default name space .
"obj pk = getattr ( obj , field . rel . field name )","with unpacked list field_value as an argument , substitute the result for obj . get the field.rel.field_name from the obj , substitute it for obj_pk ."
"def allow lazy ( func , * resultclasses ) :",and unpacked dictionary kwargs . define the function allow_lazy with 2 arguments : func and unpacked list resultclasses .
templatetags modules = [ ],where ' % s ' is replaced with taglib_module . templatetags_modules is an empty list .
return [ ],return an empty list .
in teractive = options . get ( STR_ ),substitute value under the 'interactive ' key of the options dictionary for interactive .
self . lineno += token string . count ( STR_ ),"call the method token_string.count with an argument '\n ' , append the result to self.lineno ."
i = existing . in dex ( name ),"get the index of first occurrence of name in existing , substitute it for i ."
import glob,import module glob .
bits = token . split contents ( ),"call the method token.split_contents , substitute the result ."
if CONTEXT SEPARATOR in result :,"if CONTEXT_SEPARATOR is contained in result ,"
"def  update errors ( self , errors ) :",define the method _update_errors with 2 arguments : self and errors .
try :,"try ,"
return result,return result .
class DjangoUnicodeDecodeError ( UnicodeDecodeError ) :,derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError .
def clear ( self ) :,"substitute the ' % s ' with table and list containing first element of cursor.fetchone method , respectively . define the method clear with argument self ."
yield obj,"yield obj as generator return value ,"
else :,"if not ,"
ch = None,ch is None .
cmp fmt = parts [ - NUM_ ],substitute the last element of parts for cmp_fmt .
"sys . stderr . write ( "" STR_ "" % ( e . errno , e . strerror ) )","call the method sys.stderr.write with an argument string `` fork # 2 failed : ( % d ) % s\n '' , formated with e.errno and e.strerror ."
continue,skip this loop iteration .
if value and STR_ in value :,"if value is true and character ' : ' is contained in value ,"
status code = NUM_,status_code is an integer 405 .
except ImportError :,"if ImportError exception is caught ,"
class MultipleObjectsReturned ( Exception ) :,derive the class MultipleObjectsReturned from the Exception base class .
def  get post ( self ) :,def _get_post method with self class instance as the argument .
plist =  parse header params ( b STR_ + line ),"append line to bytes string ' ; ' , use it as an argument for the call to the function _parse_header_params , substitute the result for plist ."
self [ : ] = tup,substitute tup for elements of self .
self . text = text,substitute text for self.text .
try :,"try ,"
"jan1 weekday = self . data . replace ( month = NUM_ , day = NUM_ ) . weekday ( ) + NUM_","call the method self.data.replace with 2 arguments : month as integer 1 and day as integer 1 , on the result call the method ,"
else :,"otherwise , value under the 'decimal_places ' key of the field_params is integer 5. if not"
pass,do nothing .
"return (  lazy proxy unpickle , ( func , self .   args , self .   kw ) + resultclasses )","return a tuple wit 2 elements : _lazy_proxy_unpickle and tuple with 3 elements : func , self.__args , self.__kw and resultclasses ."
"def   init   ( self , text ) :",define the method __init__ with 2 arguments : self and text .
pass,do nothing .
"return FilterNode ( filter expr , nodelist )","return a class instance FilterNode , called with an arguments filter_expr and nodelist ."
return,return nothing .
"git log = subprocess . Popen ( STR_ , stdout = subprocess . PIPE , stderr = subprocess . PIPE , shell = True , cwd = repo dir , universal newlines = True )","call the subprocess.Popen function with , 'git log -- pretty=format : % ct -- quiet -1 HEAD ' , stdout set to subprocess.PIPE ,"
match = kwarg re . match ( bits [ NUM_ ] ),"call the method kwarg_re.match with an argument first element of bits , substitute the result for match ."
cached loaders = [ ],cached_loaders is an empty list .
"data = data . encode ( fp . encoding , errors )","call the method data.encode with 2 arguments : fp.encoding and errors , substitute the result for data ."
self . deactivate = deactivate,substitute deactivate for self.deactivate .
if settings . DEBUG :,"if settings.DEBUG is true ,"
"if is in stance ( value , six . string types ) and value ! = ALL FIELDS :","if value is an instance of six.string_types and value is not equal to ALL_FIELDS ,"
"if not hasattr ( package , STR_ ) :","if package doesnt have an 'rindex ' attribute ,"
qs = f . value from object ( in stance ),"call the method f.value_from_object with an argument instance , substitute the result for qs ."
def check 1 6 compatibility ( ** kwargs ) :,define the function check_1_6_compatibility with argument kwargs dictionary .
except AttributeError :,"if AttributeError exception is caught ,"
"with open ( filepath , STR_ ) as fp :","open the file named filepath in read mode , with file descriptor renamed to fp perform ,"
"self . dry run = options . get ( STR_ , False )","get the value under the 'dry_run ' key of the options dictionary , if the key exists substitute it for self.dry_run ,"
@ lru cache . lru cache ( maxsize = None ),"method lru_cache.lru_cache with an argument maxsize set to None , as a decorator ,"
try :,"try ,"
from django . db . utils import DatabaseError,from django.db.utils import DatabaseError into default name space .
value = self . decompress ( value ),"call the method self.decompress with an argument value , substitute the result for value ."
context . autoescape = self . setting,substitute self.setting for context.autoescape .
"kwargs . setdefault ( STR_ , STR_ )","if 'content_type ' key doesnt exist in kwargs , set its value to 'application/json ' ."
return None,return None .
from django . core . management . base import AppCommand,from django.core.management.base import AppCommand into default name space .
"raise AttributeError ( "" STR_ "" "" STR_ "" % self .   class   .   name   )","raise an AttributeError with an argument string `` This % s instance has no ` content ` attribute . `` Use ` streaming_content ` instead . `` ,"
"return ugettext ( "" STR_ "" "" STR_ "" ) % { "" STR_ "" : get text list ( unique check , six . text type (   ( "" and "" ) ) ) , }","call the function ugettext with an argument string `` Please correct the duplicate data for % ( field ) s , which must be unique . `` ,"
for template dir in template dirs :,"for every template_dir in template_dirs ,"
"from django . forms . widgets import Media , MediaDefiningClass , TextInput , Textarea","from django.forms.widgets import Media , MediaDefiningClass , TextInput and Textarea into default name space ."
self . url = iri to uri ( url ),"call the function iri_to_uri with an argument url , substitute the result for self.url ."
except ValueError :,"if ValueError exception is caught ,"
error = self . data [ i ],substitute i-th element of self.data for error .
cls .   bytes   = cls .   bytes cast,substitute cls.__bytes_cast for cls.__bytes__ .
class HiddenInput ( Input ) :,return the result . derive the class HiddenInput from the Input base class .
class RequireDebugTrue ( logging . Filter ) :,derive the class RequireDebugTrue from logging.Filter base class .
self . cyclevars = cyclevars,substitute cyclevars for self.cyclevars .
if value is not result :,"if value is not contained in result ,"
result . append ( ch ),append ch to result .
class TemplateLiteral ( Literal ) :,derive the class TemplateLiteral from Literal base class .
"handler = SimplerXMLGenerator ( outfile , encoding )","handler is an instance of SimplerXMLGenerator class , created with 2 arguments : outfile and encoding ."
"def   init   ( self , * args , ** kwargs ) :","define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
"help = "" STR_ """,help is a string `` Prints the DROP TABLE SQL statements for the given app name ( s ) . `` .
value = self . val expr . resolve ( context ),"call the method self.val_expr.resolve with an argument context , substitute the result for value ."
self . timeout = timeout,substitute timeout for self.timeout .
"def get ( self , key , default = None , version = None ) :","define the method get with 4 arguments : self , key , default set to None and version set to None ."
return bool ( ret ),"convert ret to a boolean , return it ."
"def   call   ( self , f ) :",define the method __call__ with 2 arguments : self and f .
return value,return value .
except NotImplementedError :,"if NotImplementedError exception ,"
for model in not  installed models :,"for every model in not_installed_models ,"
class Storage ( object ) :,derive the class Storage from the object base class .
"LUHN ODD LOOKUP = ( NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ )","LUHN_ODD_LOOKUP is a tuple with 10 elements : integers 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 and 9 ."
deactivate = deactivate all = lambda : None,deactivate and deactivate_all are lambda functions returning None .
if number == NUM_ :,"if number equals integer 1 ,"
 cached filenames = [ ],_cached_filenames is an empty list .
"def save instance ( form , in stance , fields = None , fail message = STR_ , commit = True , exclude = None , construct = True ) :","define the function save_instance with 7 arguments : form , instance , fields set to None , fail_message as string 'saved ' ,"
for attr in self . rendering attrs :,"for every attr in self.rendering_attrs ,"
self .  pk field = pk = self . model .  meta . pk,assign self.model._meta.pk to self._pk_field and pk .
if self . m2m data and save m2m :,"if self.m2m.data and save_m2m are true ,"
final output . extend ( output ),call the method final_output.extend with an argument output .
except IOError as e :,"if IOError , substituted to e , exception is caught ,"
"if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :","if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,"
if model in created models :,"if model is contained in created_models ,"
return  make decorator,return _make_decorator .
if alter sql :,"and pending_references append sql to the string ' -- ' , put the results in a list , extend alter_sql with the result . if alter_sql ,"
doublecolon start = - NUM_,doublecolon_start is integer -1 .
def build potfiles ( self ) :,define the method build_potfiles with an argument self .
values = [ ],values is an empty list .
raise ContentNotRenderedError ( STR_ STR_ ),raise an ContentNotRenderedError exception with an string 'The response content must be rendered before it can be iterated over . ' .
import sys,import module sys .
os . unlink ( work file ),call the function os.unlink with an argument work_file .
filename = os . path . basename ( path ),"call the function os.path.basename with an arguments path , substitute the result for filename ."
global templatetags modules,use global variable templatetags_modules .
"self . reason phrase = REASON PHRASES . get ( self . status code , STR_ )","get the value under the self.status_code key of the REASON_PHRASES dictionary , if it exists substitute it for the self.reason_phrase ,"
"@ register ( Tags . models , Tags . signals )",decorator register with Tags.models and Tags.signals as arguments .
try :,"try ,"
import time,import module time .
if not os . path . is dir ( migrations directory ) :,"if migrations_directory is not a directory ,"
bits = bits [ NUM_ : ],remove first two elements from bits .
if file obj :,"if file_obj is true ,"
if options . get ( STR_ ) :,"get the value under the 'no_wrap ' key of the options dictionary , if it is true ,"
ext = ext [ : NUM_ ],substitute the first 255 elements of ext for ext .
for app label in bad app labels :,"for every app_label in bad_app_labels ,"
"kw = [ d . year , d . month , d . day ]","kw is a list with 3 elements : d.year , d.month and d.day ."
def   str   ( self ) :,define the method __str__ with an argument self .
"raise InvalidCacheBackendError ( "" STR_ "" % ( backend , e ) )","aise and exception InvalidCacheBackendError with string `` Could not find backend ' % s ' : % s '' as argument , replace ' % s ' with backend and e , respectively ."
"def handle ( self , ** options ) :",and help set to string 'Nominates a database to synchronize . Defaults to the `` default '' database. ' . define the method handle with 2 arguments : self and unpacked dictionary options .
 mtimes = { },_mtimes is an empty dictionary .
"def file complete ( self , file size ) :",define the method file_complete with arguments : self and file_size .
self . validate key ( key ),call the method self.validate_key with argument key .
"def handle ( self , * app labels , ** options ) :","dest set to string 'list_tags ' and help set to string 'List available tags. ' . define method handle with arguments self , unapcked list app_labels and unpacked dictionary options ."
return result,return result .
"attachment = SafeMIMEText ( content , subtype , encoding )","attachment is an instance of a class SafeMIMEText , created with arguments : content , subtype and encoding ."
"output . extend ( connection . creation . sql destroy indexes for model ( model , style ) )","and include_auto_created set to boolean True , call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style , extend the output with the result ."
"work file = os . path . join ( self . dirpath , thefile )","join self.dirpath , thefile into a file path , substitute it for work_file ."
"super ( Command , self ) . add arguments ( parser )",call the add_arguments method from the base class of the class Command with parser as an argument .
connection class = smtplib . SMTP SSL if self . use ssl else smtplib . SMTP,"substitute smtplib.SMTP_SSL for connection_class if self.use_ssl is true , if not substitute smtplib.SMTP for connection_class ."
"if is in stance ( f , ManyToManyField ) :","if f is an instance of ManyToManyField ,"
filelist = new filenames,substitute new_filenames for filelist .
"def  save ( self , name , content ) :","define the method _save with arguments self , name and content ."
tables = connection . in trospection . table names ( cursor ),"call the connection.introspection.table_names with cursor as argument , store the result in tables ."
class Command ( BaseCommand ) :,derive the class Command from the BaseCommand base class .
response .  closable objects . append ( request ),"as the arguments , substitute the result for response . append the request to the end of the protected class member response._closable_objects ."
def data ( self ) :,define the method data with an argument self .
locale dir = None,locale_dir is None .
def a ( self ) :,define the method a with an argument self .
if  file is not None :,"if _file is not None ,"
tried . append ( [ pattern ] ),"sub_match.url_name , self.app_name if it exists or if not sub_match.app_name and sub_match.namespaces list appended to self.name . append pattern to tried list ."
cursor . execute ( sql ),call the method cursor.execute with an argument sql .
self . children . extend ( data . children ),extend self.children list with data.children .
backend = params . pop ( STR_ ),remove 'BACKEND ' key from params dictionary and put it into backend .
"def add root elements ( self , handler ) :",define the method add_root_elements with 2 arguments : self and handler .
namespaces = { },namespaces is an empty dictionary .
import socket,import module socket .
else :,"if not ,"
return self .   to language,return self.__to_language .
"fields = ( DateField ( in put formats = in put date formats , error messages = { STR_ : errors [ STR_ ] } , localize = localize ) , TimeField ( in put formats = in put time formats , error messages = { STR_ : errors [ STR_ ] } , localize = localize ) , )","fields is an tuple containing instances of the class DateField , created with 3 arguments : input_formats set to input_date_formats ,"
zfile . close ( ),close zfile stream .
"def   init   ( self , file ) :",define the method __init__ with 2 arguments self and file .
"raise ValueError ( "" STR_ "" % ( protocol , list ( ip address validator map ) ) )","raise a ValueError exception with an argument `` The protocol ' % s ' is unknown . Supported : % s '' , replace ' % s ' with protocol ,"
ns pattern =,ns_pattern is an empty string .
chunk += over chunk,increment chunk by over_chunk .
"from django . template . base import ( ContextPopException , InvalidTemplateLibrary , TemplateDoesNotExist , TemplateEncodingError , TemplateSyntaxError , VariableDoesNotExist )","FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END , SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR , TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR , VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re and tag_re . from django.template.base import ContextPopException , InvalidTemplateLibrary , TemplateDoesNotExist , TemplateEncodingError ,"
return True,return boolean True .
if use natural keys :,"if use_natural_keys is true ,"
"raise IOError ( "" STR_ "" % new file name )","raise an IOError exception with string `` Destination file % s exists and allow_overwrite is False '' as argument , where ' % s ' is replaced by new_file_name ."
return templatetags modules,return templatetags_modules .
from django . core . cache import caches,from django.core.cache import caches to the default name space .
return compile function,return compile_function .
if not in dent :,"if indent is false ,"
"locations . extend ( ( dirpath , f ) for f in filenames if f . endswith ( STR_ ) )","extend locations with tuple containing dirpath and f , for every f in filenames , only if it ends with string '.po ' ."
"if hasattr ( formfield , STR_ ) :","if formfield has an attribute 'queryset ' ,"
"def   init   ( self , func , name = None ) :","define the method __init__ with 3 arguments : self , func and name set to None ."
parent = self . parent name . resolve ( context ),call the method self.parent_name.resolve with an argument context .
if six . PY2 :,"if six.PY2 is true ,"
"self . stdout . write ( "" STR_ "" % title )","substitute ' % s ' with title in the string `` [ X ] % s '' , write it to the standard output ."
if iri is None :,"if iri is not initialized ,"
if os . path . basename ( candidate ) in targets :,"use it as an argument for the call to the glob.iglob , for every candidate in result , call the method os.path.basename with an argument candidate , is result is contained in targets ,"
else :,"if not ,"
self . verbatim = False,self.verbatim is boolean False .
else :,"if not ,"
"f . write ( pickle . dumps ( expiry , - NUM_ ) )","call the function pickle.dumps with expiry and integer -1 as arguments , use the result as the argument for the call to f.write function ."
from pprint import pformat,from pprint import pformat .
"def get handler ( self , * args , ** options ) :","dest set to string 'use_reloader ' , default set to boolean True and help is a string 'Tells Django to NOT use the auto-reloader. ' . def get_handler with 3 arguments : self , unpacked list args and unpacked dictionary options ."
"if is in stance ( s , bytes ) :","if s is an instance of object bytes ,"
import warnings,import module warnings .
def clean ( self ) :,define the method clean with an argument self .
"return "" STR_ "" % or d ( match . group ( NUM_ ) )","get the unicode representation of result of the method match.group called with an integer 1 , format with in a string `` \\u % 04x '' ,"
"from django . utils . encoding import force bytes , force text , iri to uri","from django.utils.encoding import force_bytes , force_text and iri_to_uri into default name space ."
"def   init   ( self , dict  = None , autoescape = True , current app = None , use l10n = None , use tz = None ) :","define the method __init__ with 6 arguments : self , dict_ set to None , autoescape set to True , current_app set to None ,"
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal than integer 1 ,"
def find template loader ( loader ) :,define the function find_template_loader with an argument loader .
if not hextets [ in dex ] :,"substitute the result for value under the index key of the hextets dictionary . get the value under the index key of the hextets dictionary , if it is false ,"
return kwargs,return kwargs .
"return is in stance ( other , EmailValidator ) and ( self . domain whitelist == other . domain whitelist ) and ( self . message == other . message ) and ( self . code == other . code )","if other is instance of EmailValidator and , self.domain_whitelist equals to other.domain_whitelist ,"
"ignore = lambda pattern : fnmatch . fnmatchcase ( filename , pattern )","ignore is a lambda function with pattern as an argument , return value is the return value of the function fnmatch.fnmatchcase ,"
"result . setlist ( copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )","call the method result.setlist with 2 arguments : return value of the function copy.deepcopy called with 2 arguments : key and memo ,"
try :,"substitute the result for result . try ,"
"pickled = pickle . dumps ( new value , pickle . HIGHEST PROTOCOL )","call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments , substitute the result for pickled ."
"if getattr ( func , STR_ , False ) :","if 'expects_localtime ' attribute of func object exists and is true ,"
compiled parent = self . get parent ( context ),"call the method self.get_parent with an argument context , substitute the result for compiled_parent ."
cls .   str   = cls .   text cast,substitute cls.__text_cast for cls.__str__ .
from django . forms . extras . widgets import SelectDateWidget,from django.forms.extras.widgets import SelectDateWidget into default name space .
result = [ ],result is an empty list .
key = STR_ . join ( urlquote ( var ) for var in vary on ),"call the function urlquote with argument var for every var in vary_on , join the results into a string separated by ' : ' , substitute it for key ."
pass,do nothing .
"module path , class name = dotted path . rsplit ( STR_ , NUM_ )","split dotted_path into two parts from the right at the ' . ' character , assign the result to module_path and class_name , respectively ."
"def number format ( value , decimal pos = None , use l10n = None , force grouping = False ) :","format , if its true , otherwise string 'TIME_FORMAT ' and use_l10n as use_l10n , return the result . define the function number_format with 4 arguments : value , decimal_pos set to None , use_l10n set to None ,"
"default error messages = { STR_ :   ( STR_ ) , }","default_error_messages is an dictionary with an initial entry : result of the function _ called with an argument string ,"
"def time ( value , arg = None ) :",define the function time with 2 arguments value and arg set to None .
"raise ValueError ( "" STR_ "" % key )","raise an ValueError exception with string `` Key ' % s ' not found '' as argument , substitute ' % s ' for key ."
return [ ],return an empty list .
def more ( self ) :,define the method more with an argument self .
"def   init   ( self , name , nodelist , parent = None ) :","define the method __init__ with 4 arguments : self , name , nodelist , parent set to None ."
def close ( self ) :,define the method close with an argument self .
self . options = options,substitute options for self.options .
limit choices to = limit choices to ( ),"call the function limit_choices_to , substitute the result for limit_choices_to ."
from django . utils . timezone import is  aware,from django.utils.timezone import is_aware into default name space .
if commit :,"if commit is true ,"
use null fallback = True,substitute it for localedir . use_null_fallback is boolean True .
match = kwarg re . match ( bit ),"call the method kwarg_re.match with an argument bit , substitute it for match ."
kwargs [ name ] = parser . compile filter ( value ),"call the method parser.compile_filter with an argument value , substitute the result for value under the name key of kwargs dictionary ."
"html gunk re = re . compile ( r STR_ , re . IGNORECASE )",call the function re.compile with 2 arguments :
choice = self . choices [ idx ],substitute idx-th element of self.choices for choice .
current version = sys . version info,substitute version_info from module sys for surrent_version .
bits = token . split contents ( ) [ NUM_ : ],"call the method token.split_contents , substitute results without the first element for bits ."
if self . L ( ) and self . data . month > NUM_ :,"if call to the method self.L evaluates to true , and result of the call to the method self.data.month is greater than integer 2 ,"
try :,"try ,"
def get path info ( environ ) :,define the get_path_info function with environ as the argument .
filter = get exception reporter filter ( request ),"of the request.META dictionary is contained in settings.INTERNAL_IPS , otherwise use string 'EXTERNAL ' , and result of the method record.getMessage . call the function get_exception_reporter_filter with an argument request , substitute the result for filter ."
"return self . tag ( name , func )","call the method self.tag with 2 arguments name and func , return the result ."
if len ( name ) > NUM_ :,"if length of name is greater than integer 255 ,"
del cc [ STR_ ],delete dictionary item 'private ' from cc .
"link = [ last , root , key , result ]","link is a list with 4 elements : last , root , key and result ."
from collections import OrderedDict,from collections import OrderedDict into default name space .
@ register . tag,"register.tag decorator ,"
else :,"if not ,"
"fixture = open method ( fixture file , mode )","call the function open_method with arguments : fixture_file and mode , substitute the result for fixture ."
"return ( ( not pk . editable ) or ( pk . auto created or is in stance ( pk , AutoField ) ) or ( pk . rel and pk . rel . parent link and pk is not editable ( pk . rel . to .  meta . pk ) ) )","if pk.editable is true , or pk.auto_created is true or pk is an instance of AutoField class , or if pk.rel is true ,"
"params , varargs , varkw , defaults = getargspec ( func )","call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults ."
domain = domain . encode ( STR_ ) . decode ( STR_ ),call the decode function with argument string 'ascii ' on the return value of the method domain.encode with argument string 'idna ' substitute the result for domain .
"return ustring re . sub ( fix , s )","call the method ustring_re.sub with 2 arguments : fix and s , return the result ."
return caches [ DEFAULT CACHE ALIAS ] ! = other,"if value under the DEFAULT_CACHE_ALIAS key of caches dictionary is not equal to other , return boolean True , otherwise return False ."
def parse http date ( date ) :,define the function parse_http_date with an argument date .
try :,"try ,"
"for item , args in zip ( result , result args ) :","zip elements of result and result_args into a list of tuples , for every item and args in the result ,"
"def javascript quote ( s , quote double quotes = False ) :",define the function javascript_quote with 2 arguments : s and quote_double_quotes set to boolean False .
self . field = field,substitute field for self.field .
return otherwise,return otherwise .
start = NUM_,start is an integer 0 .
link prev [ NEXT ] = link next,substitute link_next for value under the NEXT key of the link_prev dictionary .
if  file is None :,"if _file is None ,"
"return ( self .   newobj   , ( self .   class   , ) , self .   getstate   ( ) )","return a tuple with 3 elements : self.__newobj__ , tuple with an element self.__class__ and result of the method self.__getstate__ ."
class Library ( object ) :,derive the class Library form the base class object .
substitutions [ STR_ ] = conditional escape ( checkbox name ),"call the function conditional_escape with an argument checkbox_name ,"
"def   init   ( self , out , style func = None , ending = STR_ ) :","define the method __init__ with 4 arguments : self , out , style , func set to None and endings set to newline character ."
def root attributes ( self ) :,define the method root_attributes with an argument self .
"self . template cache [ key ] = ( template , or igin )","substitute a tuple with 2 elements : template and origin , for self.find_template_cache dictionary value under the key key ."
raise AttributeError ( attr ),raise an AttributeError with an argument attr .
"domain regex = re . compile ( r STR_ , re . IGNORECASE )","`` |^ '' ( [ \001-\010\013\014\016-\037 ! # -\ [ \ ] -\177 ] |\\ [ \001-\011\013\014\016-\177 ] ) * '' $ ) '' and re.IGNORECASE , substitute the result for user_regex . call the re.compile function with 2 arguments : raw string ' ( ? : [ A-Z0-9 ] ( ? : [ A-Z0-9- ] { 0,247 } [ A-Z0-9 ] ) ? \. ) + ( ? : [ A-Z ] { 2,6 } | [ A-Z0-9- ] { 2 , } ( ? < ! - ) ) $ ' ,"
"obj list = self . target . resolve ( context , True )","call the method self.target.resolve with 2 arguments : context and boolean True , substitute it for obj_list ."
if os . name == STR_ :,"if module os field name equals to string 'nt ' ,"
os . remove ( fname ),call the function os.remove with argument fname .
from gzip import GzipFile,from gzip import GzipFile into default name space .
from django . apps import apps,from django.apps import apps into default name space .
try :,"try ,"
re escaped = re . compile ( r STR_ ),"compile regex from a string '\\ ( . ) ' , substitute it for re_escaped ."
for pattern in allowed hosts :,for every pattern in allowed_hosts :
"value = bytes to text ( value , self . encoding )","call the method bytes_to_text with 2 arguments : value and self.encoding , substitute the result for value ."
if labels is not None :,"if labels is not None ,"
return output,return output .
"from django . utils .  os import safe join , abspathu",from django.utils._os import safe_join and abspathu into default name space .
import time,import module time .
"msg = "" STR_ "" % dotted path",msg is a string `` % s does n't look like a module path '' formated with dotted_path .
new environ = os . environ . copy ( ),"call the method os.environ.copy , substitute the result for new_environ ."
r = r [ : NUM_ ] + r [ NUM_ : ],remove 3 elements from r starting at the index 23 .
"def bound data ( self , data , in itial ) :","define the method bound_data with arguments self , data and initial ."
if code is not None :,if code is not None
"super ( ChoiceField , self ) .   init   ( required = required , widget = widget , label = label , in itial = in itial , help text = help text , * args , ** kwargs )","label set to None , initial set to None , help_text set to an empty string , unpacked list args and unpacked dictionary kwargs . call the __init__ method of the base class of the class ChoiceField , called with 7 arguments : required set to required ,"
from django . utils . functional import lazy,from django.utils.functional import lazy into default name space .
"raise RawPostDataException ( "" STR_ "" )",raise an RawPostDataException exception with an argument string `` You can not access body after reading from request 's data stream '' .
"def  has changed ( self , in itial , data ) :","define the method _has_changed with arguments self , data and initial ."
result += STR_ + ipv4 address,append ' : ' and ipv4_address to result .
"top dir = path . join ( os . getcwd ( ) , name )","join the current working directory and name into a file path , substitute it for top_dir ."
"self .  current [ field . name ] = [ m2m value ( related ) for related in getattr ( obj , field . name ) . iterator ( ) ]","return value of the value._get_pk_val method and strings_only set to boolean True . call the function m2m_value with the argument related , for every related in itterator object generated from the attribute field.name ,"
base = sup cls . media,substitute sup_cls.media for base .
"fd , tmp path = tempfile . mkstemp ( dir = self .  dir )","call the method tempfile.mkstemp with dir set to self._dir , substitute result for fd and tmp_path , respectively ."
"root , = nonlocal root",substitute nonlocal_root for tuple root .
return in itial forms,return initial_forms .
django . setup ( ),call the method django.setup .
self .  fname = None,self._fname is None .
"def run from argv ( self , argv ) :",define the method run_from_argv with arguments self and argv .
encoding = self . encoding or settings . DEFAULT CHARSET,"if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET for encoding ."
"def add ( self , item ) :","if iterable is true , otherwise use an empty list as an argument . define the method add with 2 arguments : self and item ."
"def configure custom ( self , config ) :",define the method configure_custom with 2 arguments : self and config .
url fields = split url ( urlunsplit ( url fields ) ),"call the function urlunsplit with an argument url_fields , use the result as an argument for the call to the function split_url ,"
try :,"where ' % r ' are replaced by val and name , respectively . try ,"
pass,do nothing .
class ChoiceFieldRenderer ( object ) :,derive the class ChoiceFieldRenderer from the object base class .
"answer = six . moves . in put ( "" STR_ "" )","call the method six.moves.input with an argument string `` Do you wish to proceed ? [ yN ] `` , substitute the result for answer ."
"if ( NUM_ , NUM_ ) < sys . version info < ( NUM_ , NUM_ , NUM_ ) :","if integers 3 and 2 in a tuple are smaller than the sys.version_info and sys.version_info is smaller than integers 3,4 and 4 in a tuple , respectively ,"
form .  errors [ NON FIELD ERRORS ] = self . error class ( [ self . get form error ( ) ] ),"call the method self.error_class with an argument list with one element , return value of the method self.get_form_error ,"
"super ( InlineForeignKeyField , self ) .   init   ( * args , ** kwargs )","call the method __init__ from the base class of the class InlineForeignKeyField , with 2 arguments unpacked list args ,"
self .  cull ( ),call the method self._cull .
"def to python ( self , value ) :",define the method to_python with arguments self and value .
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
"if filename . endswith ( ( STR_ , STR_ , STR_ ) ) :","if filename ends with '.pyo ' , '.pyc ' or '.py.class ' ,"
"call command ( STR_ , addrport = options [ STR_ ] , shutdown message = shutdown message , use reloader = False , use ipv6 = options [ STR_ ] , use threading = use threading )","call the function call_command with 6 arguments , string 'runserver ' , addrport as the value under the 'addrport ' key of options dictionary ,"
def get language ( ) :,define the function get_language .
trans real .  default = None,trans_real._default is None .
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % bits [ NUM_ ] )","raise an TemplateSyntaxError exception with an argument string `` % r expected at least one variable assignment '' ,"
if settings . USE I18N or settings . USE L10N :,"if eather one of settings.USE_I18N or settings.USE_L10N is True ,"
in comment = False,incomment is boolean False .
"self . stdout . write ( "" STR_ "" % display url )","replace ' % s ' in string `` Downloading % s\n '' , with display_url , write it to self.stdout stream ."
"parser . add option ( STR_ , help = STR_ )","dest set to string 'verbosity ' , default set to string ' 1 ' , type set to string 'choice ' , choices is a list containing elements : ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , and help as a string 'Verbosity level ; 0=minimal output , 1=normal output , 2=verbose output , 3=very verbose output ' . call the method parser.add_option with 2 arguments : string ' -- settings ' and help as a string 'The Python path to a settings module , e.g . `` myproject.settings.main '' . If this isn\'t provided , the DJANGO_SETTINGS_MODULE environment variable will be used . ' ."
self . writer leaves ( ),call the method self.writer_leaves .
return bytes ( value . encode ( self .  charset ) ),"call the method value.encode with an argument self._charset , use the result as an argument for the call to the bytes function ,"
"def find template ( self , name , dirs = None ) :","define the method find_template with 3 arguments : self , name , dirs set to None ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ )","default set to True , help containing string 'Tells Django to NOT prompt the user for input of any kind . ' as arguments . call the method parser.add_argument with string ' -- no-initial-data ' , action containing string 'store_false ' ,"
import json,import module json .
if takes context :,"if takes_context is true ,"
try :,"try ,"
if os . path . is abs ( fixture name ) :,"if fixture_name is an absolute file path ,"
id  = STR_ % name,"substitute ' % s ' in string 'id_ % s ' with name , return it ."
value = datetime safe . new datetime ( value ),"call the method datetime_safe.new_datetime with an argument value , substitute the result for value ."
"def get backend timeout ( self , timeout = DEFAULT TIMEOUT ) :","define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments ,"
else :,"if not ,"
def   hash   ( self ) :,define the method __hash__ with an argument self .
else :,"if not ,"
else :,"if not ,"
from django . utils . translation import ugettext as  ,from django.utils.translation import ugettext as _ into default name space .
if status :,"if status is True ,"
return language [ : p ] . lower ( ) + STR_ + language [ p + NUM_ : ] . upper ( ),"covert to lowercase language element at ( p+1 ) -th index , append it to the previous result , covert to lowercase language elements from ( p+2 ) -th index to the end , append it to the previous result , return it . convert fist p elements of language to lowercase , append ' _ ' to it ,"
import hmac,import module hmac .
def   bool   ( self ) :,define the method __bool__ with argument self .
else :,"if not ,"
return & . join ( output ),"called with arguments v and self.encoding , extend the output with the result . join elements of the output into a string , separated with ' & ' , return the result ."
"six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc info ( ) [ NUM_ ] )","call the six.reraise function with 3 arguments : DeserializationError , DeserializationError called with an argument e ,"
self . file = file name,substitute file_name for self.file_name .
raise,raise an exception .
logging .  releaseLock ( ),call the method logging._releaseLock .
sign =,return the result . sign is an empty string .
self . status code = status,substitute status for self.status_code .
state frame [ self ] = compare to,substitute compare_to for value under the state_frame dictionary under the self key .
templatetags modules =  templatetags modules,substitute _templatetags_modules for templatetags_modules .
from django . core . mail . backends . base import BaseEmailBackend,from django.core.mail.backends.base import BaseEmailBackend into default name space .
else :,"if not ,"
value = field . rel . to .  meta . get field ( field . rel . field name ) . to python ( field value ),"all the method field.rel.to._meta.get_field with field.rel.field_name as argument , call the to_python method on the result with ,"
from django . utils . safestring import mark safe,from django.utils.safestring import mark_safe into default name space .
self . source = source,substitute source for self.source .
"for medium , paths in data . items ( ) :","call the method data.items , for every medium and paths in the result ."
while x > NUM_ :,"while x is greater than zero ,"
self . vals = [ ],self.vals is an empty list .
try :,"try ,"
if self . has header ( STR_ ) :,"call the method self.has_header with string 'Content-Encoding ' as an argument , if it evaluates to true ,"
"values = { name : var . resolve ( context ) for name , var in six . iteritems ( self . extra context ) }","values is an dictionary with entries : return value of the method var.resolve with an argument context for name ,"
if in dent :,"if indent is true ,"
if ch :,"if ch is true ,"
handler . file . close ( ),call the method handler.file.close .
if has old option and has new option :,"'in favor of `` requires_system_checks '' . ' and RemovedInDjango19Warning . if has_old_option and has_new_option are both true ,"
class ContentFile ( File ) :,derive the class ContentFile from File base class .
utf8 charset = Charset . Charset ( STR_ ),"call the function Charset.Charset with argument string 'utf-8 ' , substitute the result for utf8_charset ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ )","dest as a string 'no_optimize ' , default set to boolean False and help as a string 'Do not try to optimize the squashed operations. ' . call the method parser.add_argument with 5 arguments : string ' -- noinput ' , action set to string 'store_false ' ,"
return False,return boolean False .
finder = hook ( entry ),"call the function hook with an argument entry , substitute the result for finder ."
from django . utils . safestring import mark safe,from django.utils.safestring import mark_safe into default name space .
"field notes . append ( "" STR_ "" )",append string `` Field renamed because it started with ' _ ' . '' to field_notes .
num args = NUM_,num_args is an integer 0 .
content = message from string ( content ),"call the message_from_string function with an argument content , substitute the result for content ."
return r STR_,return an raw string '\ '' ' .
"sys . stdout , sys . stderr = so , se",substitute so and se for sys.stdout and sys.stderr .
self .  cull frequency = NUM_,self._cull_frequency is integer 3 .
if not options . get ( STR_ ) :,"get the value under the 'addrport ' key of the options dictionary , if it is false ,"
"def handle ( self , * app labels , ** options ) :","dest as a string 'interactive ' , default set to boolean True , and help as a string 'Tells Django to NOT prompt the user for input of any kind. ' . define the method handle with 3 arguments : self , unpacked list app_labels and unpacked dictionary options ."
"def   init   ( self , attrs = None ) :",define the method __init__ with 2 arguments : self and attrs set to None .
subject = self . format subject ( subject ),"call the function self.format_subject with an argument subject , substitute the result for subject ."
"self . stdout . write ( self . style . MIGRATE HEADING ( "" STR_ "" ) )","call the method self.style.MIGRATE_HEADING with an argument string `` Will squash the following migrations : '' ,"
in ner text = [ ],inner_text is an empty list .
self . backout . append ( self . pointer ),append self.pointer to self.backout .
return j,return j .
else :,"if not ,"
c = config . pop ( STR_ ),"remove config dictionary element under ' ( ) ' key , substitute it for c ."
"connection = connections [ options . get ( STR_ , DEFAULT DB ALIAS ) ]","get the value under the 'database ' key of the options dictionary , if it doesnt exists use the DEFAULT_DB_ALIAS to address an element"
def close ( self ) :,define the method close with argument self .
def now ( ) :,define the function now .
os . chdir ( our home dir ),call the method os.chdir with an argument our_home_dir .
nodelist empty = None,nodelist_empty is None .
"for i , widget in enumerate ( self . widgets ) :","for every i and widget in enumerated iterable self.widgets ,"
if out log :,"if out_log is true ,"
else :,"if not ,"
return result,and return value of the function copy.deepcopy called with 2 arguments : value and memo . return result .
prefix = settings . STATIC URL,substitute settings.STATIC_URL for prefix .
handler = logging . StreamHandler ( ),"call the method logging.StreamHandler , substitute the result for handler ."
"except ( ValueError , TypeError , ValidationError ) :","if ValueError , TypeError or ValidationError exception is caught ,"
f . close ( ),call close method on a file stream .
else :,"if not ,"
return bytes ( s ),"evaluate the function bytes with the argument s , and return the result ."
return,return nothing .
"return  trans . templatize ( src , or igin )","call the function _trans.templatize with 2 arguments : src and origin , return the result ."
"self . stdout . write ( self . style . MIGRATE LABEL ( "" STR_ "" % migration . name ) )","substitute ' % s ' in a string `` Branch % s '' with migration.name ,"
WORD PATTERN = re . compile ( r STR_ ),"compile a regex from raw string '^\s* ( \w+ ) \s* ' , substitute it for WORD_PATTERN ."
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","call the method parser.add_argument with 5 arguments : string ' -- database ' , action set to string 'store ' , dest as a string 'database ' ,"
class Info ( CheckMessage ) :,derive the class Info from base class CheckMessage .
"  version   = "" STR_ """,__version__ is a string `` 0.1 '' .
 supported = OrderedDict ( settings . LANGUAGES ),"_supported is an instance of OrderedDict class , created with an argument settings.LANGUAGES ."
 DJANGO DEPRECATED LOCALES =  BROWSERS DEPRECATED LOCALES,substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES .
"self . stdout . write ( self . style . MIGRATE HEADING ( "" STR_ "" ) )","call the self.style.MIGRATE_HEADING method with string `` Running migrations : '' as an argument , use the result as an argument for the call to the self.stdout.write method ."
continue,"skip this loop iteration ,"
def   iter   ( self ) :,define the method __iter__ with an argument self .
"def handle ( self , * labels , ** options ) :","define the method handle with 3 arguments : self , unpacked list labels and unpacked dictionary options ."
def split contents ( self ) :,define the method split_contents with an argument self .
stats [ MISSES ] += NUM_,for value under the key key of the cache dictionary . increment stats dictionary value under the MISSES key by integer 1 .
force str = force text,substitute force_text for force_str .
self . command stack = [ ],self.command_stack is an empty list .
remaining -= len ( emitting ),decrement remaining by length of emitting .
i = p . find ( b = ),"call the method p.find with bytes string '= ' as an argument , substitute the result for i ."
def loaders ( self ) :,define the method loaders with an argument self .
"self . stdout . write ( "" STR_ "" )",write string `` Flush cancelled.\n '' to self.stdout stream .
"year days = [ None , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ , NUM_ ]","year_days is a list with 13 elements : None , integer 0 , integer 31 , integer 59 , integer 90 , integer 120 , integer 151 , integer 181 ,"
"with io . open ( or ig file , encoding = settings . FILE CHARSET ) as fp :","call the function io.open with orig_file and encoding set to settings.FILE_CHARSET , with the result renamed to fp ,"
kwargs [ STR_ ] = True,value under 'localize ' key of kwargs dictionary is boolean True .
if prefix is None :,"if prefix is None ,"
"def blankout ( src , char ) :",define the function blankout with 2 arguments : src and char .
TYPE = FILE,substitute FILE for TYPE .
self .  app dict [ language code ] = apps,substitute apps for the value under language_code key of the self._app_dict dictionary .
"return sorted ( value , key = Variable ( arg ) . resolve )","sort value with key set to filed resolve of instance of a class Variable , created with an argument arg , return the result ."
self . stdout . ending = None,self.stdout.ending is None .
else :,"if not ,"
if not lib :,"if lib is false ,"
signals . request started . send ( sender = self .   class   ),call the signals.request_started.send method with sender set to self.__class__ as argument .
"wm . add watch ( path , mask )",call the method wm.add_watch with path and mask as arguments .
i = i % j,i is the reminder of the division of i by j .
if exit code ! = NUM_ :,if exit_code is not equal to integer 3 .
app = app . rpartition ( STR_ ) [ - NUM_ ],"call the method app.rpartition with an argument ' . ' , substitute last element of the result for app ."
from django . utils . encoding import smart text,from django.utils.encoding import smart_text into default name space .
raise,raise an exception .
hextets = ip str . split ( STR_ ),"split ip_str into parts by ' : ' , substitute the result for hextets ."
if app config . models module is None :,"if app_config.models_module is None ,"
self .  max entries = NUM_,self._max_entries is integer 300 .
"response = middleware method ( request , response )","call the function middleware_method with the request and response as the arguments , assign the result to response ."
self . message = message,substitute message for self.message .
"statements = sql indexes ( app config , self . style , connection )","call the function sql_indexes with app_config , self.style and connection as arguments , store the result in statements ."
"value = re . sub ( STR_ , , value ) . strip ( ) . lower ( )","and string 'ignore ' , call the method decode on the result with an argument string 'ascii ' , substitute the result for value . call the method re.sub with 3 arguments : string ' [ ^\w\s- ] ' , empty string and value , strip the result of whitespaces from both ends ,"
return True,return boolean True .
if timeout is not None :,"if timeout is not None ,"
"key = bytes to text ( key , self . encoding )","call the method bytes_to_text with 2 arguments : key and self.encoding , substitute the result for key ."
"def as hidden ( self , attrs = None , ** kwargs ) :","define the method as_hidden with 3 arguments : self , attrs set to None and unpacked dictionary kwargs ."
def ugettext ( message ) :,define the function ugettext with an argument message .
if kw [ STR_ ] :,"if value under the 'microsecond ' key of the kw dictionary is true ,"
def no style ( ) :,"define function no_style , without input arguments ."
if field value in self . empty values :,"if field_value is cotained in self.empty_values ,"
nofollow attr = STR_ if nofollow else,"if nofollow is true nofollow_attr is a string ' rel= '' nofollow '' ' , otherwise nofollow_attr is an empty string ."
"script url = get bytes from wsgi ( environ , STR_ , )","call the get_bytes_from_wsgi function with environ , string 'SCRIPT_URL ' and empty strings as arguments , substitute the result for script_url ."
"return "" "" . join ( in ner text )",join inner_text elements into a string .
return field in self . errors,"if field is contained in self.errors return boolean True , if not , return boolean False ."
content = template . render ( context ),"call the method template.render with an argument context , substitute the result for content ."
"def add fields ( self , form , in dex ) :","define the method add_fields with 3 arguments : self , form and index ."
kwarg format = match and match . group ( NUM_ ),"if match is true and call to the method match.group with an argument integer 1 evaluates to true , kwarg_format is boolean True ,"
fg = colors . pop ( ),"remove the first element from colors , substitute it for fg ."
"self . file path = getattr ( settings , STR_ , None )","get 'EMAIL_FILE_PATH ' from the settings , if it exists , substitute it for self.file_path , if not substitute None for self.file_path ."
def   repr   ( self ) :,define the method __repr__ with an argument self .
from django . utils . six . moves import reduce,from django.utils.six.moves import reduce into default name space .
if  cookie encodes correctly and  cookie allows colon in names :,"if _cookie_encodes_correctly and _cookie_allows_colon_in_names are boolean True ,"
chars = allow lazy ( chars ),"call the function allow_lazy with an argument chars , substitute the result for chars ."
if not matches :,"if matches is false ,"
if STR_ in self . attrs :,"if string 'id ' is contained in self.attrs ,"
except :,"if exception is caught ,"
else :,"if not ,"
loop dict [ STR_ ] = len values - i - NUM_,"subtract i from len_values , decrement the result by integer 1 , substitute it for value under the 'revcounter ' key of the loop_dict dictionary ."
"results = ( [ ] , [ ] )","results is a tuple with 2 elements , 2 empty lists ."
from django . utils . module loading import import string,from django.utils.module_loading import import_string into default name space .
"  all   = ( STR_ , STR_ , STR_ )","__all__ is an tuple with 3 elements : strings 'MultiPartParser ' , 'MultiPartParserError ' and 'InputStreamExhausted ' ."
"rel to = "" STR_ "" if relations [ i ] [ NUM_ ] == table name else table2model ( relations [ i ] [ NUM_ ] )","if second element of the i-th row of relations equals table_name , rel_to is string 'self ' ,"
resolved path = [ ],resolved_path is an empty list .
return data,return data .
return self . number * self . paginator . per page,"multiply self.number and self.paginator.per_page , return the result ."
"from django . utils . encoding import smart text , force str , force text","from django.utils.encoding import smart_text , force_str and force_text into default name space ."
self .  delete ( fname ),call the self._delete method with argument fname .
"self . stderr . write ( "" STR_ "" % ( app name , model .  meta . object name , e ) )","call the self.stderr.write method with string `` Failed to install custom SQL for % s. % s model : % s\n '' as argument ,"
"self . addr ,  ipv4 ,  ipv6 ,  fqdn , self . port = m . groups ( )","where ' % s ' is replaced with value under the 'addrport ' key of the options dictionary . call the method m.groups , assign the result to self.addr , _ipv4 , _ipv6 , _fqdn and self.port , respectively ."
@ stringfilter,"decorator stringfilter ,"
self . warning = warning,substitute warning for self.warning .
stats [ HITS ] += NUM_,increment stats dictionary value under the HITS key by integer 1 .
if sent :,"if sent is true ,"
week number = NUM_,"with an argument self.data.year decremented by 1 , evaluates to true , week_number is integer 53 ."
"template = get template from string ( template , or igin , template name )","call the function get_template_from_string with 3 arguments : template , origin and template_name , substitute the result for template ."
def U ( self ) :,"format string ' % 02d ' with the second element of the result , return it . define the method U with an argument self ."
"if is in stance ( stream or string , six . string types ) :","if stream_or_string is an instance of the six.string_types ,"
break,breaks from the smallest enclosing loop .
time str = time str . decode ( STR_ ),"call the method time_str.decode with an argument string 'utf-8 ' , substitute the result for time_str ."
"def handle field ( self , obj , field ) :","define the method handle_field with arguments self , obj and field ."
"if hasattr ( mw instance , STR_ ) :",if mw_instance has an attribute named 'process_response ' .
def   repr   ( self ) :,define private method __repr__ with argument self .
if source [ NUM_ ] is None :,"if second element of source is None ,"
"self . coerce = kwargs . pop ( STR_ , lambda val : val )","if 'coerce ' key of the kwargs dictionary exists remove it and substitute its value for self.coerce ,"
self . vals = [ ],self.vals is an empty list .
yield subwidget,"for every subwidget in the result , yield subwidget , as the result of the generator ."
"return super ( TimestampSigner , self ) . sign ( value )","call the sign method from the base class of the TimestampSigner class with an argument value , return the result"
if  win :,"if _win is true ,"
if force text ( value ) ! = force text ( or ig ) :,"if return values of the function force_text called two times with 1 argument , with value , and with orig , are equal ,"
else :,"if not ,"
"val = getattr ( module , format type )","get format_type attribute of module object , substitute the result for val ."
self . cookies [ key ] [ STR_ ] = True,"get the value under the key key of the self.cookies dictionary , substitute boolean True for 'secure ' key of the returned dictionary ."
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to integer 2 ,"
yield line,yield one element of line iterable .
"def add ( value , arg ) :",define the function add with 2 arguments value and arg .
"return STR_ % ( usage , self . help )","join usage and self.help into a string , separated by 2 new line characters , return it ."
VARIABLE TAG START = STR_,VARIABLE_TAG_START is a string ' { { ' .
self . seek ( NUM_ ),position the file pointer at the beginning of self file .
try :,"try ,"
return self . file,return self.file .
if plan :,"if plan is true ,"
"def   getitem   ( self , key ) :",if it doesnt exists return otherwise . define the method __getitem__ with 2 arguments : self and key .
"encode = lambda k , v : urlencode ( { k : v } )","encode is an lambda function with 2 arguments k and v , return value is the result of the function urlencode , called with an argument :"
self . keyOrder . remove ( result [ NUM_ ] ),remove first element of result from self.keyOrder dictionary .
"  all   = ( STR_ , STR_ )",__all__ is a tuple containing 2 initial elements : strigs 'WSGIServer ' and 'WSGIRequestHandler ' .
from math import ceil,from math import ceil into default name space .
"return STR_ % ( text , truncate )","append truncate to text , return the result ."
if tag . lower ( ) ! = self . cdata tag :,"convert tag to lowercase if it is not equal to self.cdata_tag ,"
from importlib import find loader as importlib find,from importlib import find_loader as importlib_find .
def   repr   ( self ) :,define the method __repr__ with an argument self .
for tag in open tags :,"for every tag in open_tags ,"
"def eval ( self , context ) :",define the method evalu with 2 arguments self and context .
from django . db import connection,from django.db import connection into default name space .
mem args = args [ : num args ],mem_args is a list containing of first num_args elements of args list .
  bytes   = serialize headers,substitute serialize_headers for __bytes__ .
"raise CommandError ( "" STR_ "" % ( "" STR_ "" . join ( in valid apps ) ) )","raise a CommandError exception , with string `` No migrations present for : % s '' as argument , substitute ' % s ' in previous string with ,"
import ssl,import module ssl .
continue,skip this loop iteration .
"name = os . path . join ( dir name , "" STR_ "" % ( file root , next ( count ) , file ext ) )","substitute ' % s ' in string `` % s_ % s % s '' with : file_root , next ( count ) and file_ext , join the dir_name and previous string into a valid file path , substitute it for name ."
"help = "" STR_ ""","help is a string `` Runs a Python interactive interpreter . Tries to use IPython or bpython , if one of them is available . `` ."
if in itial is not None :,"if initial is not None ,"
" assertRegex = "" STR_ """,_assertRegex is a strnig `` assertRegexpMatches '' .
@ classmethod,"decorator classmethod ,"
pass,do nothing .
import sys,import module sys .
"super ( ComboField , self ) . clean ( value )",call the method clean with an argument value from the base class of the class ComboField .
self . encoding = encoding,substitute encoding for self.encoding .
def tags available ( self ) :,define the method tags_available with argument self .
return self . position,return self.position .
"return TEMPLATE FRAGMENT KEY TEMPLATE % ( fragment name , args . hexdigest ( ) )","substitute ' % s ' in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args.hexdigest ( ) , respectively , return the result ."
write ( sep ),call the function write with an argument sep .
def  get size ( self ) :,define the method _get_size with argument self .
"def   init   ( self , data = None ) :",define the method __init__ with 2 arguments : self and data set to None .
units = len ( tupl [ NUM_ ] ) - tupl [ NUM_ ],"subtract third element of tupl from length of second element of tupl , substitute the result for units ."
"return mark safe ( linebreaks ( value , autoescape ) )","call the function linebreaks with 2 arguments value and autoescape , use the result as an argument for the call to the mark_safe ,"
"accept = request . META . get ( STR_ , )","get the value under the 'HTTP_ACCEPT_LANGUAGE ' key of the request.META dictionary , if it exists substitute it for accept ,"
if STR_ in val or STR_ in val :,"if characters '\n ' or '\r ' are contained in val ,"
self . children = children [ : ] if children else [ ],"if children is true , copy children list to self.children , otherwise self.children is an empty list ."
"def validate ( self , value ) :",define the method validate with arguments self and value .
"def strptime ( self , value , format ) :","define the method strptime with arguments self , value and format ."
def compress string ( s ) :,define the function compress_string with an argument s .
comment lineno cache = t . lineno,substitute t.lineno for comment_lineno_cache .
context extras [ STR_ ] = settings . LANGUAGES,substitute settings.LANGUAGES for the value under the 'LANGUAGES ' key of the context_extras dictionary .
"def   init   ( self , environ ) :",define the initialization method __init__ with self class instance and environ as arguments .
smart str = smart bytes,substitute smart_bytes for smart_str .
secret = force bytes ( secret ),"call the function force_bytes with an argument secret , substitute the result for secret ."
from django . http import Http404,from django.http import Http404 into default name space .
"def handle ( self , * fixture labels , ** options ) :","default set to boolean False and help set to string 'Tells Django to use an IPv6 address. ' . define the method handle with self class instance , list of arguments fixture_labels and dictionary options as arguments ."
"def set ( self , key , value , timeout = DEFAULT TIMEOUT , version = None ) :","use the result as the argument for the function call to the pickle.loads , return the result . define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None ."
pieces = accept language re . split ( lang string . lower ( ) ),"convert lang_string to lowercase , split by the result string accept_language_re , substitute the result for pieces ."
git changeset = get git changeset ( ),"call the function get_git_changeset , store the result in git_changeset ."
in itial = self . widget . decompress ( in itial ),"call the method self.widget.decompress with an argument initial , substitute the result for initial ."
text = force text ( text ),"call the function force_text with an argument text , substitute the result for text ."
cache . clear ( ),call the method cache.clear .
"except ( ValueError , TypeError ) :","if ValueError or TypeError exceptions are caught ,"
if value in self . empty values :,"if value in self.empty_values ,"
"def   get   ( self , in stance , type = None ) :","define the method __get__ with 3 arguments : self , instance and name type to None ."
"return STR_ % ( self . prefix , field name ) if self . prefix else field name","substitute ' % s ' in string ' % s- % s ' with self.prefix and field_name and return it , if self.prefix is true , if not return field_name ."
"def eval ( self , context ) :",define the method eval with 2 arguments : self and context .
else :,"if not ,"
pass,do nothing .
errors = [ ],errors is an empty list .
return self .   name,return self.__name .
import fnmatch,import module fnmatch .
"in t part , dec part = str number ,",substitute str_number and an empty string for int_part and dec_part .
"def to python ( self , value ) :","cache_choices , required , widget , label , initial , help_text , unpacked list args and unpacked dictionary kwargs . define the method to_python with 2 arguments : self and value ."
"message context = message context . strip ( "" STR_ "" )","strip message_context of `` ' '' characters from both ends , substitute the result for message_context ."
"fname = self .  key to file ( key , version )","call the function self._key_to_file with key and version as arguments , substitute it for fname ."
except KeyError :,"if KeyError exception is caught ,"
for elt in source :,"for every elt in source ,"
"obj = base . build instance ( Model , data , db )","call the method base.build_instance with arguments Model , data and db , substitute the result for obj ."
"def   init   ( self , stream , boundary ) :","define the method __init__ with arguments self , stream and boundary ."
DefaultFeed = Rss201rev2Feed,substitute Rss201rev2Feed for DefaultFeed .
return path,return path .
"parser . add argument ( STR_ , STR_ , dest = STR_ , action = STR_ , default = [ ] , help = STR_ )","default as an empty list and help as an string 'Locale ( s ) to process ( e.g . de_AT ) . Default is to process all . Can be used multiple times. ' . call the method parser.add_argument with string ' -- exclude ' , string '-x ' , dest set to string 'exclude ' , action set to string 'append ' ,"
raise,raise an exception .
"value = ugettext ( "" STR_ "" ) % filesize number format ( bytes / GB )","call the function ugettext with an argument string `` % s GB '' , substitute ' % s ' with the result of the call to the function ,"
"  all   = ( STR_ , STR_ , STR_ , STR_ )","import_library and libraries . __all__ is a tuple containing 4 strings : 'Template ' , 'Context ' , 'RequestContext ' and 'compile_string ' ."
def close ( self ) :,define the method close with an argument self .
else :,"smart_text function , return the result . if not ,"
paths = [ force text ( p ) for p in paths ],"paths is a list containing results of the function force_text called with an argument p , for every p in paths ."
def clear ( self ) :,define the method clear with argument self .
 expire info = { },__expire_info is an empty dictionary .
if offset is not None :,"if offset is not None ,"
if field . rel . to .  meta . pk . rel :,"if field.rel.to._meta.pk.rel is true ,"
"compiled regex = re . compile ( regex , re . UNICODE )","call the function re.compile with arguments regex and re.UNICODE , substitute the result for compiled_regex ."
"self . stdout . write ( self . style . MIGRATE HEADING ( "" STR_ "" ) )","call the method self.style.MIGRATE_HEADING with an argument string `` Optimizing ... '' , write it to self.stdout ."
for f in sorted ( os . listdir ( self . path ) ) :,"for f in sorted list of the files in the self.path directory ,"
try :,"try ,"
def smart split ( text ) :,"and re.VERBOSE , substitute the result for smart_split_re . define the function smart_split with an argument text ."
"def to python ( self , value ) :",define the method to_python with arguments self and value .
return value if six . PY2 else value . encode ( ISO 8859 1 ) . decode ( UTF 8 ),"default string value , substitute it for value . return value if six.PY2 is true , if not return value.encode ( ISO_8859_1 ) .decode ( UTF_8 ) ."
"with io . open ( os . path . join ( self . dirpath , thefile ) , "" STR_ "" , encoding = STR_ ) as fp :","call the function io.open with 3 arguments : self.dirpath and thefile joined into a file path , string ' w ' ,"
"raise self . error ( token , "" STR_ "" % command )","where ' % s ' is replaced with command and result of the function get_text_list called with an argument list , with p converted into a string and surrounded with single quotes for every p in parse_until . call the method self.error with 2 arguments : token and string `` Invalid block tag : ' % s ' '' , where ' % s ' is replaced with command ,"
"content type = "" STR_ "" % ( settings . DEFAULT CONTENT TYPE , self .  charset )","replace ' % s ' in string `` % s ; charset= % s '' with settings.DEFAULT_CONTENT_TYPE and self._charset , substitute it for content_type ."
if months :,"if months is true ,"
except LookupError :,"if LookupError exception is caught ,"
self .  caches . caches [ alias ] = cache,substitute cache for value under the alias key of self._caches.caches dictionary .
raise,raise an exception .
output = self . nodelist . render ( context ),"call the method self.nodelist.render with an argument context , substitute the result output ."
keys =  iterkeys,substitute _iterkeys for keys .
for app config in apps . get app configs ( ) :,"for every app_config in return value of the method apps.get_app_configs ,"
filters [ name ] = self . configure filter ( filters [ name ] ),"call the method self.configure_filter with an argument value under name key of filters dictionary ,"
try :,"try ,"
"resolver = urlresolvers . RegexURLResolver ( r STR_ , urlconf )","call the method urlresolvers.RegexURLResolver with raw literal string '^/ ' and urlconf as the arguments , substitute the result for resolver ."
"DjangoSafeDumper . add representer ( decimal . Decimal , DjangoSafeDumper . represent decimal )",call the method DjangoSafeDumper.add_representer with arguments decimal.Decimal and DjangoSafeDumper.represent_decimal .
def serialize headers ( self ) :,define the method serialize_headers with an argument self .
"kwarg re = re . compile ( r "" STR_ "" )","call the function re.compile with an argument raw string `` ( ? : ( \w+ ) = ) ? ( .+ ) '' , substitute the result for kwarg_re ."
if value in self . empty values :,"if value is contained in self.empty_values ,"
from django . core . mail . backends . console import EmailBackend as ConsoleEmailBackend,from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space .
self . keep pot = options . get ( STR_ ),"get the value under the 'keep_pot ' key of the options dictionary , substitute it for self.keep_pot ."
try :,"try ,"
"self . old timezone = getattr (  active , STR_ , None )",get 'value ' attribute of the _active object
"def  add doc ( func , doc ) :",define the function _add_doc with 2 arguments : func and doc .
"def widget attrs ( self , widget ) :",define the method widget_attrs with arguments self and widget .
def model installed ( model ) :,"and app_config.label is contained in app_labels , create a tuple containing app_config.label and return value of the method router.get_migratable_models called with app_config , connection.alias and include_auto_created set to True , append the tuple to the list all_models . define the method model_installed with model as an argument ."
@ stringfilter,"decorator stringfilter ,"
self . serialization formats = serializers . get public serializer formats ( ),"call the method serializers.get_public_serializer_formats , substitute the result for self.serialization_formats ."
"def decode ( self , s ) :",define the decode method with self class instance and s as arguments .
widget = self . field . widget,substitute self.field.widget for widget .
"executor . migrate ( targets , plan , fake = options . get ( "" STR_ "" , False ) )","call the executor.migrate method with , targets , plan and fake set to the value under the 'fake ' key of options dictionary ,"
"warnings . warn ( "" STR_ "" , RemovedInDjango19Warning )","call the function warnings.warn with 2 arguments string `` IPAddressField has been deprecated . Use GenericIPAddressField instead . `` ,"
"command = load command class ( app name , name )","call the function load_command_class with arguments : app_name and name , substitute the result for command ."
count2 = ( since - ( seconds * count ) ) // seconds2,"multiply seconds by count , subtract it from since , divide the result by seconds2 , store the floored result in count2 ."
except StopIteration :,"if StopIteration exception ,"
is  compressed = False,is_compressed is boolean False .
remove = complain,substitute complain for remove .
else :,"if not ,"
else :,"if not ,"
unescape string literal = allow lazy ( unescape string literal ),"replace every occurrence of raw string '\\ ' in the result with string '\\ ' , return the result . call the function allow_lazy with an argument unescape_string_literal , substitute the result for unescape_string_literal ."
"return getattr (  default , translation function ) ( singular , plural , number )","get translation_function attribute of the _default object , call the result with 3 arguments : singular , plural and number , return the result ."
"raise TemplateSyntaxError ( "" STR_ "" % bits [ NUM_ ] )","raise an TemplateSyntaxError exception with an argument string `` ' % s ' tag takes only one argument '' ,"
max num = DEFAULT MAX NUM,"substitute DEFAULT_MAX_NUM for max_num ,"
def flatatt ( attrs ) :,define the function flatatt with an argument attrs .
if not expires :,"if expires is false ,"
"kw [ STR_ ] = kw [ STR_ ] . ljust ( NUM_ , STR_ )","left justify value under the 'microsecond ' key of the kw dictionary , in the field of width 6 , fill the rest with ' 0 ' ,"
sys . exit ( bool ( failures ) ),exit the program with failures converted to boolean as a message .
def cache info ( ) :,define the function cache_info .
for h in handlers :,"for every h in handlers ,"
messages = { },messages is an empty dictionary .
"DEFAULT PORT = "" STR_ ""","`` '' '' ( ? P < ipv6 > \ [ [ a-fA-F0-9 : ] +\ ] ) | ( ? P < fqdn > [ a-zA-Z0-9- ] + ( ? : \ . [ a-zA-Z0-9- ] + ) * ) ) : ) ? ( ? P < port > \d+ ) $ '' '' '' , re.X DEFAULT_PORT is a string `` 8000 '' ."
FILES = property (  get files ),_get_files is getter function for FILES attribute of this class .
elif self . required :,"otherwise if self.required is true ,"
from django . utils import six,from django.utils import six into default name space .
"targets = [ ( app label , None ) ]","targets is a list containing tuple with two elements , app_label and None ."
"return force str ( super ( BaseMemcachedCache , self ) . make key ( key , version ) )","call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache , use it as an argument for the call to the function force_str , return the result ."
"if is in stance ( sep , unicode ) :","if sep is an instance of unicode ,"
"from django . core . exceptions import MiddlewareNotUsed , PermissionDenied , SuspiciousOperation","from django.core.exceptions import MiddlewareNotUsed , PermissionDenied and SuspiciousOperation into default name space ."
if settings . USE X FORWARDED HOST and ( STR_ in self . META ) :,if settings.USE_X_FORWARDED_HOST is true and 'HTTP_X_FORWARDED_HOST ' is contained in self.META .
changed = False,changed is boolean False .
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % function name )","raise an TemplateSyntaxError exception with an argument string , `` ' % s ' tag takes at least 2 arguments and the second last argument"
if row [ NUM_ ] is None or row [ NUM_ ] is None :,"if fifth and sixth elements of row are None ,"
if field type == STR_ :,"if field_type equals a string 'DecimalField ' ,"
"super set ( key , value )",call the function super_set with 2 arguments : key and value .
version = self . version,substitute self.version for version .
pass,do nothing .
self . name = name,substitute name for self.name .
del self .  cache [ key ],delete the value under key key of self._cache dictionary .
dlen = len ( defaults or [ ] ),substitute the length of defaults for dlen .
from django . utils import datetime safe,from django.utils import datetime_safe into default name space .
DateTimeAwareJSONEncoder = DjangoJSONEncoder,substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder .
iterator = iter ( stream or iterable ),iterator is iterator created out of stream_or_iterable .
"os . chmod ( full path , self . file permissions mode )",call the function os.chmod with arguments full_path and self.file_permissions_mode .
val . append ( is o input ),append iso_input to val .
if row data and None not in row data :,"returns the result of the call the method d._get_pk_val , if not return d , put all the generator items into a tuple row_data . if row_data is true and None is not contained in row_data ,"
"msg [ STR_ ] = self . extra headers . get ( STR_ , STR_ . join ( self . to ) )","call the method self.extra_headers.get with arguments : string 'To ' and joined string from self.to elements separated by ' , ' ,"
host = self . META [ STR_ ],"substitute the value under the 'HTTP_HOST ' key of the self.META dictionary , substitute it for host ."
return ( os . path . normcase ( os . path . abspath ( src ) ) == os . path . normcase ( os . path . abspath ( dst ) ) ),"if file path of src and dst files are the same , return boolean True , otherwise return boolean False ."
class Parser ( object ) :,derive the class Parser from the base class object .
"def make origin ( display name , loader , name , dirs ) :","define the function make_origin with 4 arguments : display_name , loader , name and dirs ."
"def   init   ( self , stream or string , ** options ) :","define the method __init__ , with 3 arguments : self , stream_or_string and unpacked dictionary options ."
ret ip . append ( ( STR_ * ( NUM_ - len ( hextet ) ) + hextet ) . lower ( ) ),"subtract length of hextet from 4 , create a string with previous result number of character ' 0 ' , append hextet to it ,"
if keys :,"if keys is true ,"
"with transaction . atomic ( using = connection . alias , savepoint = connection . features . can rollback ddl ) :","with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can_rollback_ddl , as arguments ."
"for i , line in enumerate ( table output ) :","for every i and line in enumerated iterable table_output ,"
opts = self .  meta,substitute self._meta for opts .
def get urlconf ( default = None ) :,define the function get_urlconf with an argument default set to None .
if e . errno == errno . EEXIST :,"if e.errno equals errno.EEXIST ,"
"def  read limited ( self , size = None ) :",define the method _read_limited with self class instance and size set to None as arguments .
"def cache key ( self , template name , template dirs ) :","define the method cache_key with 3 arguments : self , template_name and template_dirs ."
return self . path == other . path,"if self.path equals other.path , return boolean True , if not return boolean False ."
"from django . template . smartif import IfParser , Literal","validTemplateLibrary , BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END , SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END , VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re and render_value_in_context . from django.template.smartif import IfParser and Literal into default name space ."
def   str   ( self ) :,"define the private method __str__ , with self instance of this class as the only argument ."
cache [ mem args ] = result,substitute result for value under the mem_args key of the cache dictionary .
"if is in stance ( value , six . string types ) :","if value is an instance of six.string_types class ,"
if language code not in self .  regex dict :,"if language_code is not contained in self._regex_dict ,"
output transaction = True,substitute True for output_transaction .
def get commands ( ) :,define the function get_commands .
if fields is not None and f . name not in fields :,"if fields is not None and f.name is not contained in fields ,"
"compare = lambda self , a , b : a < b","compare is a lambda function with arguments self , a and b , return value is boolean true if a is lesser than b , otherwise is false ."
resolved args = [ context ] + resolved args,"append resolved_args to a list containing context element , substitute it for resolved_args ."
self . tokens = mapped tokens,substitute mapped_tokens for self.tokens .
"field output = [ qn ( f . name ) , f . db type ( connection = connection ) ]","field_output is an list containing 2 elements : return value of the function qn called with an argument f.name ,"
if in itial == False :,"if initial equals a string 'False ' ,"
return self . level >= ERROR,"return boolean True if self.level is greater than or equals to ERROR , otherwise return boolean False ."
value = normalize newlines ( value ),"call the function normalize_newlines with an argument value , substitute the result for value ."
loader = MigrationLoader ( connection ),loader is instance of MigrationLoader initialized with connection as an argument .
self .  encoding = value,substitute value for self._encoding .
sign = - if offset < NUM_  else +,"if offset is smaller than integer 0 , sign is '- ' , otherwise sign is '+ ' ."
field notes . append ( STR_ ),append string `` Field renamed because it was a Python reserved word . '' to field_notes .
"self . setFeature ( handler . feature external ges , False )",call the method self.setFeature with 2 arguments : handler.feature_external_ges and boolean False .
self . not ation name = not ation name,substitute notation_name for self.notation_name .
class EmailBackend ( BaseEmailBackend ) :,derive the class EmailBackend from the BaseEmailBackend base class .
"output . extend ( [ encode ( k , force bytes ( v , self . encoding ) ) for v in list  ] )","for every v in list_ append to a list result of the function encode , called with arguments : k and result of the function force_bytes ,"
"error msg += "" STR_ "" % self . parent name . token","append string `` Got this from the ' % s ' variable . '' to error_msg , where ' % s is replaced with self.parent_name.token ."
return,return an empty string .
"def handle noargs ( self , ** options ) :",define the method handle_noargs with 2 arguments : self and unpacked dictionary options .
if fields and f . name not in fields :,"if fields is true and f.name is not contained in fields ,"
consume next = True,consume_next is boolean True .
return qs,return qs .
" get val = lazy (  get val , six . text type )","call the function lazy with arguments _get_val and six.text_type , substitute the result for _get_val ."
BytesIO = io . BytesIO,substitute io.BytesIO for BytesIO .
"super ( TextInput , self ) .   init   ( attrs )","substitute self.input_type for self.input_type . call the method __init__ from the base class of the class TextInput , called with an argument attrs ."
return STR_ . join ( paras ),"format the string ' < p > % s < /p > ' with the result , for every p in paras , substitute list of results for paras . join elements of paras into a string separated with '\n\n ' , return the result ."
if in  tag and not self . verbatim :,"if in_tag and is not contained in self.verbatim ,"
else :,"if not ,"
pass,do nothing .
"self . help texts = getattr ( options , STR_ , None )","get 'help_texts ' attribute from the options object , if it exists substitute it for self.help_texts , if not self.help_texts is None ."
TOKEN VAR = NUM_,TOKEN_VAR is integer 1
def  get model ( model identifier ) :,define the function _get_model with an argument model_identifier .
@ property,"property decorator ,"
return repr ( self . dicts ),return printable representation of self.dicts .
daemon kwargs [ STR_ ] = options [ STR_ ],substitute the value under the 'outlog ' key of options dictionary for value under the 'out_log ' key of daemon_kwargs dictionary .
except StandardError as e :,"use the result as an argument for the call to the method filterer.addFilter . if StandardError , renamed to e , exception is caught ,"
binary type = bytes,substitute bytes for binary_type .
"warnings . warn ( "" STR_ "" , RemovedInDjango19Warning )",call the function warnings.warn with 2 arguments : string `` `` use_natural_keys `` is deprecated ; use `` use_natural_foreign_keys `` instead . '' and RemovedInDjango19Warning .
"field value = self . cleaned data . get ( field , None )","get the value under the field key of the self.cleaned_data dictionary , if it exists substitute it for field_value ,"
for candidate in ( ( d not in models or d in model list ) for d in deps ) :,"for every d in deps , if d is not contained in models and d is contained in model_list add boolean True to a tuple ,"
self . content = content,substitute content for self.content .
elif char in STR_ :,"otherwis if char is contained in string 'Yy ' ,"
if ignore and field name not in model fields :,"if ignore is true and field_name is not contained in model_fields ,"
arg = STR_ + arg,"append arg to ' , ' , substitute the result for arg ."
self . dicts . append ( value ),append value to self.dicts list .
if fdel is not None :,"if fdel is not None ,"
def   copy   ( self ) :,define the method __copy__ with an argument self .
"raise ValueError ( "" STR_ "" "" STR_ "" % ( opts . object name , fail message ) )","raise an ValueError with an argument string `` The % s could not be % s because the data did n't validate . `` ,"
return msg count,return msg_count .
"from functools import wraps , update wrapper , WRAPPER ASSIGNMENTS","from functools import wraps , update_wrapper and WRAPPER_ASSIGNMENTS into default name space ."
  delslice   = complain,substitute complain for __delslice__ .
try :,"try ,"
return self . render ( ),"call the method self.render , return the result ."
d = get deserializer ( format ),"call the get_deserializer function with an argument format , substitute the result for d ."
try :,"try ,"
mw class = import string ( middleware path ),"evaluate the function import_string with middleware_path as argument , substitute the result for my_class ."
def parse etags ( etag str ) :,define the function parse_etags with an argument etag_str .
def changed data ( self ) :,define the method changed_data with an argument self .
confirm = in put ( STR_ ),query a string 'Please enter either `` yes '' or `` no '' : ' and store the result in confirm .
data = self . read ( chunk size ),"call the self.read method with argument chunk_size , substitute the result for data ."
trans bit = [ bit ],trans_bit is a list with an element bit .
"skipped . append ( ( model , deps ) )","append a tuple containing 2 elemetns : model and deps , to skipped ."
"warnings . warn ( "" STR_ "" , RemovedInDjango19Warning )","call the function warnings.warn with an argument string `` `` -- natural `` is deprecated ; use `` -- natural-foreign `` instead . `` ,"
if callable ( self . limit choices to ) :,"if self.limit_choices_to object is callable ,"
elif = in part :,"otherwise if '= ' is contained in part ,"
"for lookup , arg in args :","for every lookup and arg in args ,"
def E ( self ) :,define the method E with an argument self .
if safe and arg ! = STR_ :,"if safe is true and arg is not equal to string ' ; ' ,"
"def  has expired ( self , key ) :",define the method _has_expired with self and key as arguments .
except KeyError :,"if KeyError exception is caught ,"
"self . stdout . write ( app name , self . style . MIGRATE LABEL )",call self.stdout.write method with app_name and self.style.MIGRATE_LABEL as arguments .
 default = None,_default is None .
"cursor . execute ( "" STR_ "" "" STR_ "" % table , [ key , b64encoded , exp ] )","call the method cursor.execute with string `` INSERT INTO % s ( cache_key , value , expires ) VALUES ( % % s , % % s , % % s ) '' ,"
encoded = STR_ + encoded + STR_,put the double qoutes around encoded .
if version [ NUM_ ] == STR_ and version [ NUM_ ] == NUM_ :,"if fourth element of version equals to string 'alpha ' and fight element of version equals to integer 0 ,"
context [ STR_ ] = block,substitute block for value under the 'block ' key of context dictionary .
"def modified time ( self , name ) :","use the result as an argument for the call to the function datetime.fromtimestamp , return the result . define the method modified_time with arguments self and name ."
self . buffer += chunk,increment self.buffer by chunk .
if app config . label in loader . migrated apps :,"if app_config.label is contained in loader.migrated_apps ,"
if cache is None :,"if cache is None ,"
"from django . utils . encoding import smart text , is  protected type",from django.utils.encoding import smart_text and is_protected_type into default name space .
"return six . text type ( s ) . encode ( encoding , errors )","return six.text_type ( s ) .encode ( encoding , errors ) ."
@ property,"property decorator ,"
if self . required and not value :,"if self.required is true and value is false ,"
"raise ValueError ( STR_ STR_ % ( name , e ) )",raise an ValueError exception with an argument string 'Unable to configure formatter % r : % s ' formated with name and e .
return value,code set to a string 'invalid_choice ' . return value .
if self . fail silently :,"if self.fail_silently is boolean True ,"
self . object name = STR_,self.object_name is a string 'CacheEntry ' .
in itial prefixed name = self . add initial prefix ( name ),"call the method self.add_initial_prefix with an argument name , substitute the result for initial_prefixed_name ."
iterkeys =  iterkeys,substitute _iterkeys for iterkeys .
"return { "" STR_ "" : self . ns }",return a dictionary with an entry : self.ns for `` xmlns '' .
translation .  catalog = { },translation._catalog is an empty dictionary .
return header query . lower ( ) in existing headers,"check if lowercase header_query exists is existing_headers , return the boolean result ."
return,return nothing .
if settings . DEBUG :,"'status code ' with integer value of 400 and 'request ' with value request , respectively use the previous to call the function security_logger.error . if settings.DEBUG is True ,"
try :,"try ,"
"def assertRaisesRegex ( self , * args , ** kwargs ) :","and unpacked dictionary kwargs , return the result . define the function assertRaisesRegex with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
if autoescape and not safe input :,"if autoescape is true and safe_input is false ,"
"fks to parent = [ f for f in opts . fields if is in stance ( f , ForeignKey ) and ( f . rel . to == parent model or f . rel . to in parent model .  meta . get parent list ( ) ) ]","fks_to_parent is a list containing f for every f in opts.fields , only if f is an instance of ForeignKey ,"
"return [ first item ] , True","return list with an element first_item , and boolean True ."
"if is in stance ( self . var , Variable ) :","if self.var is an instance of Variable class ,"
if self . attachments :,"if self.attachments is true ,"
media = Media ( ),media is an instance of Media class .
def strip tags ( value ) :,define the function strip_tags with an argument value .
"T = [ F ( x ) for x in range ( NUM_ , l ) ]","call the function F with an argument x , for every x in sequence of integers from 1 to l , not included ,"
"value = bytes to text ( value , self . encoding )","call the method bytes_to_text with 2 arguments : key and self.encoding , substitute the result for value ."
"return setattr ( caches [ DEFAULT CACHE ALIAS ] , name , value )","set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value , return it ."
from xml . sax . saxutils import XMLGenerator,from xml.sax.saxutils import XMLGenerator into default name space .
if len ( key ) > MEMCACHE MAX KEY LENGTH :,"if length of key is greater than MEMCACHE_MAX_KEY_LENGTH ,"
kwargs = { },kwargs is an empty dictionary .
return True,return boolean True .
class SerializationError ( Exception ) :,derive the class SerializationError from the Exception base class .
"setattr ( filter func , attr , value )",set filter_func objec attr attribute to value .
if not self . form . is  bound :,"if self.form.is_bound is false ,"
connection params = { STR_ : DNS NAME . get fqdn ( ) },connection_params is a dictionary with 1 initial entry : return value of the function DNS_NAME.get_fqdn for 'local_hostname ' .
if use l10n or ( use l10n is None and settings . USE L10N ) :,"if use_l10n is true , or if use_l10n is None and settings.USE_L10N is true ,"
@ classmethod,"classmethod decorator ,"
outer . update ( password . translate ( hmac . trans 5C ) ),"call the method password.translate with an argument hmac.trans_5C , update outer dictionary with the result ."
except ValueError :,"if ValueError exception is caught ,"
"raise AttributeError ( "" STR_ "" )",raise an AttributeError exception with an argument string `` You can not set content to a 304 ( Not Modified ) response '' .
from django . conf import settings,from django.conf import settings into default name space .
"def timesince ( d , now = None , reversed = False ) :","define the function timesince with d , now defaulting to None , reversed defaulting to False as arguments ."
return False,return boolean False .
if attrs is not None :,"if attrs is not None ,"
in ner html = STR_,inner_html is a string ' < li > { choice_value } { sub_widgets } < /li > ' .
view name = callback .   name  ,"get the name of the callback , substitute it for view_name ."
def   init   ( self ) :,define initialization method __init__ with self instance of the class as an argument .
"if is in stance ( item . get ( STR_ ) , bool ) :","if value object the 'unique_id_is_permalink ' key of the item dictionary is an instance of bool type ,"
"if "" = "" in x :","if character '= ' is contained in x ,"
"def  curried ( * moreargs , ** morekwargs ) :",define the function _curried with 2 arguments : unpacked list moreargs and unpacked dictionary morekwargs .
"if self . use natural foreign keys and hasattr ( field . rel . to , STR_ ) :",if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key ' attribute .
"def pgettext ( context , message ) :",return the result . define the function pgettext with 2 arguments : context and message .
"PATTERN = "" "" "" STR_ "" "" """,PATTERN is a string `` classdef < 'class ' any+ ' : 'suite < any*funcdef < 'def ' unifunc='__unicode__'parameters < ' ( ' NAME ' ) ' > any+ > any* > > '' .
try :,"try ,"
else :,"if not ,"
pass,"do nothing ,"
"if is in stance ( filename , MIMEBase ) :","if filename is an instance of MIMEBase ,"
if keyword . is keyword ( new name ) :,"call the method keyword.iskeyword with an argument new_name , if it evaluates to true ,"
if STR_ in truncate :,"if string ' % ( truncated_text ) s ' is contained in truncate ,"
if not self . data :,"if self.data is false ,"
"val = self .  cache . in cr ( key , delta )","call the method self._cache.incr with key and delta as arguments , substitute the result for val ."
if not field . show hidden initial :,"if field.show_hidden_initial is false ,"
"hex format string = "" STR_ "" % ( hlen * NUM_ )",hex_format_string is a string `` % % 0 % ix '' formated with hlen multiplied with integer 2 .
if or igin :,"if origin is true ,"
for line in sequence sql :,"for every line in sequence_sql ,"
else :,"if not ,"
if iterator is None :,"if iterator is None ,"
forms = . join ( form . as ul ( ) for form in self ),"for every form in self call the form.as_ul method , join the results in a string , separated by an empty string ."
"return copy . deepcopy ( self .  wrapped , memo )","call the method copy.deepcopy with 2 arguments : self._wrapped and memo , return the result ."
if len ( language [ p + NUM_ : ] ) > NUM_ :,"slice language from ( p+1 ) -th index to the end , calculate the length of the obtained segment , if it is greater than integer 2 ,"
if self . feed [ STR_ ] is not None :,"called with an argument result of the method self.latest_post_date . if value under the 'ttl ' key of the self.feed dictionary is not None ,"
"  author   = "" STR_ """,__author__ is a string `` Benjamin Peterson < benjamin @ python.org > '' .
"self . error ( "" STR_ "" % ( rawdata [ i : j ] , ) )","slice the rawdata from i-th to the j-th element , replace with it ' % r ' in the string `` bad end tag : % r '' , use it to call the method self.error ."
return dict ( self ),"convert object self to a dictionary , return it ."
self .  reverse dict [ language code ] = lookups,and pattern.default_args . substitute lookups for the value under language_code key of the self._reverse_dict dictionary .
return pickle . loads ( pickled ),"evaluate pickle.loads with argument pickled , return the result ."
if not response . has header ( STR_ ) :,"if the result to the method call response.has_header , with string 'Cache-Control ' as an argument is boolean False ,"
if connection . settings dict [ STR_ ] == STR_ :,"if value under the 'ENGINE ' key of the connection.settings_dict dictionary equals a string 'django.db.backends.dummy ' ,"
for form in self . saved forms :,"for every form in self.saved_forms ,"
"raise EntitiesForbidden ( name , None , base , sysid , pubid , not ation name )","raise an EntitiesForbidden exception with arguments name , None , base , sysid , pubid and notation_name ."
value = [ ],value is an empty list .
"def set many ( self , data , timeout = DEFAULT TIMEOUT , version = None ) :","define the method set_many with 4 arguments : self , data , timeout set to DEFAULT_TIMEOUT and version set to None ."
"def   init   ( self , streaming content = ( ) , * args , ** kwargs ) :","define the method __init__ with 4 arguments : self , result of the function streaming_content= ( ) , unpacked list args ,"
if message context :,"if message_context is true ,"
class CommentNode ( Node ) :,derive the class CommentNode from Node base class .
model list = [ ],model_list is an empty list .
except re . error as e :,"if re.error , renamed to e , is caught ,"
from django . utils import six,from django.utils import six into default name space .
def flush ( self ) :,define the method flush with an argument self .
return False,"return boolean False ,"
"WRAPPING PUNCTUATION = [ ( STR_ , STR_ ) , ( < , > ) , ( STR_ , STR_ ) , ( STR_ , STR_ ) , ( STR_ , STR_ ) , ( STR_ , STR_ ) ]","WRAPPING_PUNCTUATION is a list with 6 elements : tuple with 2 elements : ' ( ' and ' ) ' , tuple with 2 elements : ' < ' and ' > ' ,"
"self . stdout . write ( "" STR_ "" )",write string `` you can delete them . '' to self.stdout .
self . validators . append ( validators . MinValueValidator ( min value ) ),"call the method validators.MinValueValidator with min_value converted into an integer , append the result to list self.validators ."
if self .  wrapped is empty :,"if self._wrapped is empty ,"
@ register . tag ( STR_ ),"decorator method register.tag with an argument 'include ' ,"
if self . verbosity > NUM_ :,"if self.verbosity is greater than integer 0 ,"
self . var = var obj,substitute var_obj for self.var .
"def create parser ( self , prog name , subcommand ) :","define the method create_parser with 3 arguments : self , prog_name and subcommand ."
"return in t ( binascii . hexlify ( x ) , NUM_ )","call the function binascii.hexlify with an argument x , convert the result to base 16 integer , return the result ."
"def check ( self , app configs = None , tags = None , display num errors = False ) :","define the method check with 4 arguments : self , app_configs set to None , tags set to None , display_num_errors set to boolean False ."
func = TemplateLoader,"function-based loader . `` , where ' % s ' is replaced with loader . substitute TemplateLoader for func ."
in put format = get format ( STR_ ) [ NUM_ ],"call the function get_format with an argument string 'DATE_INPUT_FORMATS ' , substitute the first element of the result for input_format ."
contents = conditional escape ( contents ),"call the function conditional_escape with an argument contents , substitute the result for contents ."
else :,"if not ,"
"if getattr ( func , STR_ , False ) :","if 'needs_autoescape ' attribute of func object exists and is true ,"
"from django . utils . translation import ugettext , ungettext lazy",from django.utils.translation import ugettext and ungettext_lazy into default name space .
hextets [ best doublecolon start : best doublecolon end ] = [ ],replace hextets list from the best_doublecolon_start index to best_doublecolon_end index with an empty string .
if len ( bits ) :,"if length of bits is not zero ,"
"super ( InMemoryUploadedFile , self ) .   init   ( file , name , content type , size , charset , content type extra )","call the method __init__ from the base class of the InMemoryUploadedFile base class , with 6 arguments : file , name , content_type ,"
"sys . modules [   name   + "" STR_ "" ] = sys . modules [   name   + "" STR_ "" ] = Module six moves urllib parse (   name   + "" STR_ "" )","call the method Module_six_moves_urllib_request with an argument : string `` .moves.urllib_parse '' appended to __name__ ,"
except OSError as e :,"if OSError , renamed to e , exception is caught ,"
pass,do nothing .
"def date format ( value , format = None , use l10n = None ) :","define the function date_format with 3 arguments : value , format set to None and use_l10n set to None ."
"def handle ( self , * args , ** options ) :","define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options ."
"if self . options . get ( "" STR_ "" ) :","if value under the 'indent ' key of the self.options dictionary is true ,"
"self . connection = connection class ( self . host , self . port , ** connection params )","self.connection is a instance of a class contained in connection_class , instantiated with arguments : self.host , self.port ,"
"if kwargs [ STR_ ] in ( STR_ , STR_ ) :","if value under the 'setting ' key of the kwargs dictionary is equal to string 'LANGUAGES ' or strnig 'LANGUAGE_CODE ' ,"
"super ( MultipleHiddenInput , self ) .   init   ( attrs )","call the method __init__ from the base class of the class MultipleHiddenInput , called with an argument attrs ."
def   enter   ( self ) :,define the method __enter__ with an argument self .
continue,skip this loop iteration .
try :,"try ,"
class ClearableFileInput ( FileInput ) :,derive the class ClearableFileInput from the FileInput base class .
break,break from the loop execution .
thefile = self . file,substitute self.file for thefile .
return value . strftime ( format ),"get_format called with an argument string 'TIME_INPUT_FORMATS ' , substitute the result for format . call the method value.strftime with an argument format , return the result ."
"g = one percent re . sub ( STR_ , g )","call the method one_percent_re.sub with 2 arguments : string ' % % ' and g , substitute the result for ."
return ModelChoiceIterator ( self ),"return an instance of ModelChoiceIterator class , created with an argument self ."
def super ( self ) :,define the method super with an argument self .
def   repr   ( self ) :,define private method __repr__ with argument self .
from django . core . management . commands . check import Command as CheckCommand,from django.core.management.commands.check import Command as CheckCommand into default name space .
def  is shorthand ip ( ip str ) :,define the function _is_shorthand_ip with an argument ip_str .
"def resolve ( self , path ) :",define the method resolve with arguments self and path .
def   len   ( self ) :,define the method __len__ with an argument self .
return value . rjust ( in t ( arg ) ),"call the method value.rjust with an argument , arg converted into a integer , return the result ."
handle m2m ( relobj ),call the function handle_m2m with an argument relobj .
else :,"if not ,"
raise,raise an exception .
self . first = parser . expression ( bp ),"call the method parser.expression with an argument bp , substitute the result for self.first ."
"def   delitem   ( self , key ) :",define the method __delitem__ with 2 arguments : self and key .
"self . var1 , self . var2 = var1 , var2","substitute var1 and var2 for self.var1 and self.var2 , respectively ."
" urllib response moved attributes = [ MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , ]","_urllib_response_moved_attributes is a list with 4 elements : result of the function MovedAttribute , called with 3 arguments :"
else :,"if not ,"
extra attrs = self . widget attrs ( widget ),"call the method self.widget_attrs with an argument widget , substitute the result for extra_attrs ."
size = self . file . tell ( ),"get the position of the file self.file pointer , substitute it for size ."
from django . utils . module loading import import string,from django.utils.module_loading import import_string into default name space .
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
other = other .   cast ( ),"call the method other.__cast , substitute the result for other ."
return decorating function,return decorating_function .
for operation in migration . merged operations :,"use it as an argument for the call to the method self.style.MIGRATE_HEADING , write the result to self.stdout . for every operation in migration.merged_operations ,"
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )","raise an ValidationError with 3 arguments : value under the 'required ' key of the self.error_messages dictionary ,"
self . waiting writers = NUM_,self.waiting_writers is an integer 0 .
"if is in stance ( query , MultiValueDict ) :","if query is an instance of MultiValueDict class ,"
self . keyOrder . remove ( key ),remove key element from self.keyOrder dictionary .
"raise MultiPartParserError ( "" STR_ "" % content length )","raise an MultiPartParserError with an argument string `` Invalid content length : % r '' , where ' % r ' is replaced with content_length ."
return type ( self ) .   bool   ( self ),"get the type of self object , call the __bool__ method on the result with an argument self , return the result ."
if name . startswith ( STR_ ) :,"if name starts with an string ' . ' ,"
except OSError :,"if exception OSError occurred ,"
from django . conf import settings,from django.conf import settings into default name space .
for handler in handlers :,"for every handler in handlers ,"
import module ( project name ),call the function import_module with an argument project_name .
else :,"if not ,"
"fname = "" STR_ "" % ( timestamp , abs ( id ( self ) ) )","fname is a string `` % s- % s.log '' , with ' % s ' replaced by timestamp and absolute value of the return value of the function id with argument self , respectively ."
zbuf = BytesIO ( ),zbuf is an instance of BytesIO class .
if boundary :,"or boolean False if not , substitute the result for boundary . if boundary is true ,"
except KeyError :,"if NameError exception is caught ,"
connection . client . runshell ( ),call the method connection.client.runshell .
"targets = [ ( app label , migration . name ) ]","with ' % s ' substituted for migration_name and app_label , respectively , as arguments . targets is a list containing tuple with two elements , app_label and migration.name ."
"def conditional content removal ( request , response ) :",define the function conditional_content_removal with request and response as the arguments .
TOTAL FORM COUNT = STR_,TOTAL_FORM_COUNT is a string 'TOTAL_FORMS ' .
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
"DJANGO COLORS = os . environ . get ( STR_ , )","get the value under the key 'DJANGO_COLORS ' of os.environ dictionary , if key doesnt exists return empty string , assign the result to DJANGO_COLORS ."
"cc [ k . replace ( STR_ , - ) ] = v","replace all occurrences of symbol ' _ ' in string k with symbol '- ' , use new string as key to find a value in dictionary cc ,"
"mimetype ,   = mimetypes . guess type ( filename )","call the mimetypes.guess_type with an argument filename , assign the result to the mimetype and _ , respectively ."
"self . stdout . write ( "" STR_ "" % ( fixture name , humanize ( fixture dir ) ) )","call the method self.stdout.write with an argument string `` No fixture ' % s ' in % s . `` , where ' % s ' is replaced with fixture_name ,"
last [ NEXT ] = root [ PREV ] = link,substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary .
"getattr ( combined , STR_ + name ) ( getattr ( other , STR_ + name , None ) )","name appended to string ' _ ' , as the name of the attribute to get from self object , or if the previous doesnt exist , None . append name to 'add_ ' use it as the name of the attribute to get from combined object , call the result with an argument :"
import os,import module os .
"def parse file upload ( self , META , post data ) :","define the method parse_file_upload with 3 arguments : self , META and post_data ."
"project name , target = options . pop ( STR_ ) , options . pop ( STR_ )","remove the elements from the 'name ' and 'dictionary ' keys of the options dictionary , substitute them for project_name and target , respectively ."
else :,"if not ,"
def sanitize separators ( value ) :,define the function sanitize_separators with an argument value .
d = data . get ( self . day field % name ),"format self.day_field string with name , use it as the key for the data dictionary , substitute the result for d ."
return STR_,return string ' 1 ' .
"def handle app config ( self , app config , ** options ) :","and help set to a string 'Nominates a database to print the SQL for . Defaults to the `` default '' database. ' . define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options ."
self .  cached loaders = [ ],self._cached_loaders is an empty list .
"value = ugettext ( "" STR_ "" ) % filesize number format ( bytes / PB )","call the function ugettext with an argument string `` % s PB '' , substitute ' % s ' with the result of the call to the function ,"
digest = hashlib . sha256,substitute hashlib.sha256 for digest .
"f . write ( zlib . compress ( pickle . dumps ( value ) , - NUM_ ) )","call the function pickle.dumps with argument value , use the result and integer -1 as arguments for the call to the function zlib.compress , use the result as an argument for the call to the f.write method ."
"raise NotImplementedError ( "" STR_ "" )",raise an NotImplementedError exception with argument string `` This backend does n't support absolute paths . `` .
errors = [ ],errors is an empty list .
in put type = STR_,input_type is a string 'number ' .
"print ( "" STR_ "" % app config . label )","replace ' % s ' in string `` Running pre-migrate handlers for application % s '' with app_config.label , print it to the standard output ."
trimmed = STR_ in t . split contents ( ),"if string 'trimmed ' is contained in result of the method t.split_contents , trimmed is boolean True , otherwise is boolean False ."
try :,"try ,"
class TranslatableFile ( object ) :,derive the class TranslatableFile from the object class .
remaining = self .  remaining if size is None else size,"if size is None substitute self._remaining for remaining , if not , substitute size for remaining ."
"zfile = GzipFile ( mode = STR_ , compresslevel = NUM_ , fileobj = zbuf )","zfile is an instance of GzipFile class , created with 3 arguments : mode set to string 'wb ' , compresslevel set to integer 6 ,"
pass,do nothing .
if not only initial :,"if only_initial is false ,"
return attrs,return attrs .
"from django . db import connections , DEFAULT DB ALIAS",from django.db import connections and DEFAULT_DB_ALIAS into default namespace .
urlconf repr = STR_ % self . urlconf name [ NUM_ ] .   class   .   name  ,"replace ' % s ' in string ' < % s list > ' with __class__.__name__ field of first element of self.urlconf_name , substitute it for urlconf_repr ."
"deps = getattr ( model . natural key , STR_ , [ ] )","get 'dependencies ' attribute of the model.natural_key , substitute it for deps , if the attribute doesnt exist , deps in an empty list ."
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with an argument string 'subclasses of LabelCommand must provide a handle_label ( ) method ' .
class  OFFSET ( Structure ) :,derive the class _OFFSET from the Structure base class .
from importlib import import module,from importlib import import_module into default name space .
from django . utils . safestring import mark safe,from django.utils.safestring import mark_safe into default name space .
return six . unichr ( c ),"call the method six.unichr with an argument c , return the result ."
"elif not is in stance ( content , Message ) :","otherwise if content is not an instance of Message class ,"
pass,do nothing .
except KeyError :,"if KeyError exception is caught ,"
self . content length = content length,substitute content_length for self.content_length .
if os . path . exists ( fname ) :,"if fname file path exists ,"
else :,"if not ,"
if config [ STR_ ] ! = NUM_ :,"if config dictionary value under 'version ' key is not equal to integer 1 ,"
from django . utils . html import escape,from django.utils.html import escape into default name space .
if len ( bits ) ! = NUM_ :,"if length of bits is not equal to integer 2 ,"
in teractive = options . get ( STR_ ),"get the value under the key 'interactive ' of options dictionary , substitute it for interactive ."
from django . forms . forms import *,from django.forms.forms import everything into default name space .
if block context is None :,"if block_context is None ,"
if digest is None :,"if digest is None ,"
"not ifier = pyinotify . Notifier ( wm , EventHandler ( ) )","call the method pyinotify.Notifier with wm and EventHandler ( ) as arguments , assign the result to notifier ."
"duplicate = super ( Context , self ) .   copy   ( )","call the the method __copy__ from the base class of the class Context , substitute the result for duplicate ."
self . pos += NUM_,increment self.pos by integer 1 .
potfiles . append ( potfile ),append potfile to potfiles .
"self . stdout . write ( "" STR_ "" % ( app name , model .  meta . object name ) )","call the self.stderr.write method with string `` No custom SQL for % s. % s model\n '' as argument ,"
"return copy . deepcopy ( self .  wrapped , memo )","call the method copy.deepcopy with 2 arguments : self._wrapped and memo , return the result ."
if domain :,"if domain is true ,"
for f in dirs :,"for every f in files ,"
self . limit choices to = limit choices to,substitute limit_choices_to for self.limit_choices_to .
import keyword,import module keyword .
try :,"try ,"
"subclass = type ( "" STR_ "" , ( Migration , ) , { "" STR_ "" : [ ( app label , migration . name ) for migration in merge migrations ] , } )","subclass is a instance of a class named Migration , derived from the base class Migration , with 1 field :"
value = self .  empty value,substitute self._empty_value for value .
singular . append ( STR_ % t . contents ),"append string ' % % ( % s ) s ' to singular , where ' % s ' is replaced with t.contents ."
"return { "" STR_ "" : self .  version , "" STR_ "" : "" STR_ "" }",return a dictionary with 2 elements : self._version for `` version '' and `` http : //www.w3.org/2005/Atom '' for `` xmlns : atom '' .
"raise ValueError ( "" STR_ "" % ( model .  meta . app label , model .  meta . object name , fk name ) )","raise an ValueError with an argument string `` ' % s. % s ' has no field named ' % s ' . `` , where ' % s ' is replaced with ,"
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
if not content type . startswith ( STR_ ) :,"return the value under the 'CONTENT_TYPE ' of the META dictionary , if it doesnt exist return an empty string , substitute the result for content_type . if content_type doesnt start with string 'multipart/ ' ,"
if upload :,"with 3 arguments : data , files and return value of the function self.clear_checkbox_name called with an argument name , evaluates to true , if upload is true ,"
else :,"if not ,"
"return super ( ModelMultipleChoiceField , self ) . prepare value ( value )","for every v in value , return the list of results . call the method prepare_value the base class of the class ModelMultipleChoiceField , with an argument value , return the result ."
model = app config . get model ( model label ),"call the method app_config.get_model with an argument model_label , substitute the result for model ."
"if hasattr ( base , STR_ ) :","if base has an 'declared_fields ' attribute ,"
value = in t ( value ),convert value to an integer .
else :,"if not ,"
"path = os . environ . get ( STR_ , ) . split ( os . pathsep )","call the function os.environ.get with 2 arguments : string 'PATH ' and an empty string , split the result at the os.pathsep , substitute the result for path ."
self .  deleted form indexes . append ( i ),call the method self._deleted_form_indexes.append with an argument i .
c . append ( tok ),append tok to c .
self . digits = digits,substitute digits for self.digits .
"return "" STR_ "" + "" "" . join ( out ) + "" STR_ ""","convert x into a string and append it to a list , substitute the resulting list for out . join elements of out into a string , separated with whitespaces , append ' ) ' to it , append the result to ' ( ' , return it ."
MB = NUM_ << NUM_,"move integer 1 left for 20 bits , substitute the result for MB ."
num += NUM_,increment num by one .
"return self .  base set ( STR_ , key , value , timeout )","call the method self._base_set with string 'add ' , key , value and timeout as arguments , return the result ."
if serializers is None and not  serializers :,"if serializers is None and _serializers is false ,"
"setattr ( style , role , termcolors . make style ( ** format ) )",sets the role attribute of the style object to the value of the call to the termcolors.make_style function with dictionary format as an argument .
"language code re = re . compile ( r STR_ , re . IGNORECASE )","and re.VERBOSE , substitute the result for accept_language_re . call the function re.compile with 2 arguments : raw string '^ [ a-z ] { 1,8 } ( ? : - [ a-z0-9 ] { 1,8 } ) * $ ' and re.IGNORECASE ,"
def is  rendered ( self ) :,define the method is_rendered with an argument self .
"if is in stance ( field , FileField ) :","if field is an instance of FileField ,"
 locs  = frame . f locals,substitute if _locs_ is None for _locs_ .
if only new :,"if only_new is true ,"
self . conditions nodelists = conditions nodelists,substitute conditions_nodelists for self.conditions_nodelists .
if cword == NUM_ :,"if cword equlals a integer 1 ,"
for p in path :,"for every p in path ,"
lexer = JsLexer ( ),lexer is an instance of JsLexer class .
if m :,"if m is true ,"
sys . stdout . write ( django . get version ( ) + STR_ ),"call the method django.get_version append new line to it , write it to sys.stdout ."
"default error messages = { STR_ :   ( STR_ ) , STR_ :   ( STR_ ) , }","default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string ,"
try :,"try ,"
class HttpResponseForbidden ( HttpResponse ) :,derive the class HttpResponseForbidden from the HttpResponse base class .
self . takes context = takes context,substitute takes_context for self.takes_context .
"def add fields ( self , form , in dex ) :","if not return boolean False . define the method add_fields with 3 arguments : self , form and index ."
def   bool   ( self ) :,define the method __bool__ with an argument self .
errors . append ( self . get date error message ( date check ) ),"call the method self.get_date_error_message with an argument date_check , append the result to errors ."
if response :,"if response is True ,"
"self . validate name ( name , app or project )",call the method self.validate_name with 2 arguments name and app_or_project .
"super ( Command , self ) . add arguments ( parser )","call the method add_arguments from the base class of the class Command , with an argument parser ."
except ImportError :,"if ImportError exception is caught ,"
self . sep = force str ( sep ),"call the function force_str with an argument sep , substitute the result for self.sep ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","and help set to a string 'Optional table names . Otherwise , settings.CACHES is used to find cache tables . ' . call the method parser.add_argument with 5 arguments : string ' -- database ' , action set to string 'store ' , dest as a string 'database ' ,"
for label in app labels :,"for every label in app_labels ,"
if kwargs is None :,"if kwargs is None ,"
 urlconfs = local ( ),"call the function local , substitute the result _urlconf ."
"def stringformat ( value , arg ) :",define the function stringformat with 2 arguments value and arg .
 load serializers ( ),call the function _load_serializers .
"if ( context . autoescape and not is in stance ( output , SafeData ) ) or is in stance ( output , EscapeData ) :","if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class ,"
"warnings . warn ( "" STR_ "" "" STR_ "" , RemovedInDjango19Warning , stacklevel = NUM_ )",call the function warnings.warn with 3 arguments :
"all models . extend ( router . get migratable models ( app config , database , in clude auto created = True ) )","call the method router.get_migratable_models with arguments app_config , database and include_auto_created set to boolean True ,"
"elif is in stance ( template , six . string types ) :","otherwise is template is six.string_types instance ,"
targets = executor . loader . graph . leaf nodes ( ),call the method executor.loader.graph.leaf_nodes and substitute its result for targets .
elif value is False :,"otherwise if value is boolean False ,"
elif piece :,"append the result to pieces . otherwise if piece is true ,"
"raise ValidationError ( self . message , code = self . code )",raise a ValidationError exception with arguments self.message and code set to self.code .
except ValueError :,"if ValueError exception is caught ,"
class DateInput ( DateTimeBaseInput ) :,"then the first element of the result of the function formats.get_format called with an argument self.format_key , return the result . derive the class DateInput from the DateTimeBaseInput base class ."
"def   init   ( self , attrs = None ) :",define the method __init__ with 2 arguments : self and attrs set to None .
self .  populated = True,self._populated is boolean True .
"def as widget ( self , widget = None , attrs = None , only initial = False ) :","if not evaluate the method self.form.error_class and return the result . define the method as_widget with 4 arguments : self , widget set to None , attrs set to None , only_initial set to boolean False ."
return force text ( list  [ NUM_ ] ),"call the function force_text with first element of list_ as an argument , return the result ."
import os,import module os .
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal than integer 1 ,"
"self . xml . endElement ( "" STR_ "" )",call the method self.xml.endElement with an argument string 'natural '
"def  isdst ( self , dt ) :",define the method _isdst with 2 arguments : self and dt .
import warnings,import module warnings .
except TypeError :,"if TypeError exception is caught ,"
flat . update ( d ),update flat dictionary with d .
else :,"if not ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
new context .  reset dicts ( values ),call the method new_context._reset_dicts values .
@ property,"property decorator ,"
else :,"if not ,"
value = None,value is None .
self . no obsolete = options . get ( STR_ ),"get the value under the 'no_obsolete ' key of the options dictionary , substitute it for self.no_obsolete ."
"def validate ( self , value ) :",define the method validate with arguments self and value .
"def url ( self , name ) :",define the method url with arguments self and name .
make key =  make key,substitute _make_key for make_key .
try :,"try ,"
"def pop ( self , idx = - NUM_ ) :",define the method pop with 2 arguments : self and idx set to negative integer 1 .
class BaseModelFormSet ( BaseFormSet ) :,and form_class_attrs . derive the class BaseModelFormSet from the BaseFormSet base class .
return form . save ( commit = commit ),"call the method form.save with an argument commit as commit , return the result ."
try :,"try ,"
except LookupError :,"if LookupError exception is caught ,"
errors = [ ],errors is an empty list .
"def   init   ( self , * args , ** kwargs ) :","define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
for key in self . keyOrder :,"for every key in self.keyOrder ,"
obj . attrs = self . attrs . copy ( ),"call the method self.attrs.copy , substitute the result for obj.attrs ."
"elif is in stance ( value , datetime . datetime ) :","otherwise if value is an instance of datetime.datetime ,"
@ property,"property decorator , to be called by property built-in function ."
"raise ValueError ( "" STR_ "" )",raise an ValueError exception with an argument string `` dictionary does n't specify a version '' .
try :,"try ,"
def   iter   ( self ) :,define the method __iter__ with an argument self .
def   str   ( self ) :,define the method __str__ with argument self .
week number = None,week_number is None .
from django . conf import settings,from django.conf import settings into default name space .
"def   init   ( self , attrs = None ) :",define the method __init__ with 2 arguments : self and attrs set to None .
else :,"if not ,"
from django . utils import six,from django.utils import six into default name space .
return,return nothing .
from itertools import chain,from itertools import chain into default name space .
"for possibility , pattern , defaults in possibilities :","substitute the fitst element of the result for prefix_norm and prefix_args , respectively . for every possibility , pattern and defaults in possibilities ,"
def ipython ( self ) :,define the method ipython with an argument self .
self . args = args,substitute args for self.args .
def   len   ( self ) :,define the method __len__ with an argument self .
from django . apps import apps,from django.apps import apps into default name space .
return self . create var ( token ),"call the function self.create_var with an argument token , return the result ."
"return "" STR_ """,return an string `` < IfEqualNode > '' .
"doomed = [ k for ( i , k ) in enumerate ( self .  cache ) if i % self .  cull frequency == NUM_ ]","for every i and k in enumerated values of self._cache , if i is divisible by self._cull_frequency , append k to doomed list ."
"parser = self . create parser ( prog name , subcommand )",call the method self.create_parser with arguments prog_name and subcommand .
date value = datetime safe . new date ( date value ),"call the method datetime_safe.new_date with an argument date_value , substitute the result for date_value ."
"msgid = STR_ % ( utcdate , pid , randint , idstring , idhost )","msgid is a string ' < % s. % s. % s % s @ % s > ' , replace ' % s ' with utcdate , pid , randint , idstring and idhost , respectively ."
"return ResolverMatch ( self . callback , args , kwargs , self . name )","return an instance of a ResolverMatch class , crated with arguments self.callback , args , kwargs and self.name ."
from django . utils . translation import get language,from django.utils.translation import get_language to the default name space .
"def ifchanged ( parser , token ) :",define the function ifchanged with 2 arguments : parser and token .
"or igin = make origin ( display name , self . load template source , template name , template dirs )","call the function make_origin with 4 arguments : display_name , self.load_template_source , template_name and template_dirs ,"
if not app labels :,"if app_labels is false ,"
def render ( self ) :,define the method render with an argument self .
"return remove tags ( value , tags )","call the function remove_tags with 2 arguments value and tags , return the result ."
i += NUM_,increment i by integer 1 .
"return lazy number ( ungettext , six . text type , singular = singular , plural = plural , number = number )","call the function lazy_number with 5 arguments : ungettext , six.text_type , singular set to singular , plural set to plural ,"
"raise TypeError ( "" STR_ "" % len ( args ) )","raise an TypeError with an argument string `` update expected at most 1 arguments , got % d '' formated with length of args ."
class Module six moves urllib error (  LazyModule ) :,"assign the result to the value under the string `` .moves.urllib_parse '' appended to __name__ key of the sys.modules dictionary , and to the value under the string `` .moves.urllib.parse '' appended to __name__ key of the sys.modules dictionary . derive class Module_six_moves_urllib_error from the _LazyModule base class ."
plural . append ( STR_ % t . contents ),"append string ' % % ( % s ) s ' to plural , where ' % s ' is replaced with t.contents ."
"from datetime import timedelta , tzinfo",from datetime import timedelta and tzinfo into default name space .
except VariableDoesNotExist :,"if VariableDoesNotExist exception is not caught ,"
self . method = None,self.method is None .
"def add arguments ( self , parser ) :",define method add_arguments with self class instance and parser as arguments .
"def validate ( self , value ) :",define the method validate with arguments self and value .
"output = [ format html ( STR_ , flatatt ( final attrs ) ) ]","output is a list containing an element : result of the function format_html called with 2 arguments : string ' < select { 0 } > ' ,"
for post callback in self .  post render callbacks :,"for every post_callback in self._post_render_callbacks ,"
if response is None :,"if response is None ,"
from django . utils import six,from django.utils import six into default name space .
if min value is not None :,"if min_value is not None ,"
"def bound data ( self , data , in itial ) :","define the method bound_data with arguments self , data and initial ."
"defaults = { STR_ : data , STR_ : files , STR_ : auto id , STR_ : prefix }","if not self.initial_extra is None . defaults is a dictionary with 4 entries : data for 'data ' , files for 'files ' , auto_id for 'auto_id ' and prefix for 'prefix ' ."
if value is None :,"if value is None ,"
def start index ( self ) :,define the method start_index with an argument self .
if self . field . show hidden initial :,"if self.field.show_hidden_initial is true ,"
i = NUM_,i is integer 365 .
if newretval is not None :,"if newretval is not None ,"
candidate = str ( candidate ),convert candidate to a string .
"data [ f . name ] = list ( qs . values list ( STR_ , flat = True ) )","call the method qs.values_list with 2 arguments : string 'pk ' and flat set to boolean True , put the results in a list ,"
message =   ( STR_ ),"call the function _ with an argument string 'Ensure this value is less than or equal to % ( limit_value ) s. ' , substitute the result for message ."
else :,"if not ,"
"def   init   ( self , file ) :",define the method __init__ with 2 arguments self and file .
"response headers . append ( ( str ( STR_ ) , str ( c . output ( header = ) ) ) )","convert 'Set-Cookie ' to a string and convert the return value of method c.output ( header= '' ) call to a string ,"
 locs  =  globs ,substitute _globs_ with an argument _locs_ .
pid = NUM_,pid is integer 1 .
"def render ( self , name , value , attrs = None ) :","define the method render with 4 arguments : self , name , value and attrs set to None ."
"return or iginal urlencode ( [ ( force str ( k ) , [ force str ( i ) for i in v ] if is in stance ( v , ( list , tuple ) ) else force str ( v ) ) for k , v in query ] , doseq )","call the function original_urlencode with 2 arguments : list with 2 elements : result of the function force_str with an argument k ,"
self . cleaned data = cleaned data,substitute cleaned_data for self.cleaned_data .
return self . data . day,return self.data.day .
register to = kwargs . get ( STR_ ),"get value under the 'register_to ' key of the kwargs dictionary , substitute it for register_to ."
"formatted subject = subject . replace ( STR_ , STR_ ) . replace ( STR_ , STR_ )","replace every occurrence of '\n ' in subject with '\\n ' and replace every occurrence of '\r ' in subject with '\\r ' ,"
else :,"if not ,"
def next token ( self ) :,define the method next_token with an argument self .
if not email messages :,"if email_messages is false ,"
"cache key += STR_ % tz name . encode ( STR_ , STR_ ) . decode ( STR_ ) . replace ( , STR_ )","replace the result for tz_name . call the method tz_name.encode with the arguments 'ascii ' and 'ignore ' , call the method decode on the result with 'ascii ' as argument ,"
import collections,import module collections .
from django . utils .  os import safe join,from django.utils._os import safe_join into default name space .
if comment notes :,"if comment_notes is true ,"
self . writer enters ( ),call the method self.writer_enters .
class TranslatorCommentWarning ( SyntaxWarning ) :,derive the class TranslatorCommentWarning from the SyntaxWarning base class .
import time,import module time .
return self,return self .
else :,"if not ,"
if cursor :,"if cursor is true ,"
if STR_ in ip str :,"if string ' : : : ' is contained in ip_str ,"
model = apps . get model ( exclude ),"call the method apps.get_model with exclude as an argument , substitute it for model ."
"def wrapper ( * args , ** kwds ) :",define the function wrapper with 2 arguments : unpacked list args and unpacked dictionary kwds .
qn = connection . ops . quote name,substitute connection.ops.quote_name for qn .
utility = ManagementUtility ( argv ),"utility is a instance of ManagementUtility class , created with an argument argv ."
"source , display name = self . load template source ( template name , template dirs )","call the method self.load_template_source with arguments template_name and template_dirs , assign the result to source and display_name ."
self . obj = obj,substitute obj for self.obj .
self . connection = None,self.connection is None .
"def strftime ( self , fmt ) :",define the method strftime with 2 arguments : self and fmt .
"logger . warning ( STR_ , exc info = sys . exc info ( ) , extra = { STR_ : NUM_ , } )","call the logger.warning method with string 'Bad Request ( UnicodeDecodeError ) ' , exec_info set to sys.exec_info ( ) and dictionary extra"
"  all   = ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , )","__all__ is a tuple containing strings : 'ModelForm ' , 'BaseModelForm ' , 'model_to_dict ' , 'fields_for_model ' , 'save_instance ' ,"
"in t2byte = operator . methodcaller ( "" STR_ "" , NUM_ , "" STR_ "" )","call the method operator.methodcaller with 3 arguments : string 'to_bytes ' , integer 1 and string 'big ' , substitute the result for int2byte ."
else :,"if not ,"
if ( form . cleaned data and form . cleaned data [ field ] is not None and form . cleaned data [ unique for ] is not None ) :,"if form.cleaned_data is true and value under the field key of form.cleaned_data dictionary is not None ,"
"self . file = open ( self . name , mode or self . mode )","open the file self.name in mode or self.mode mode , whichever exists , assign the file handler to self.file ."
if six . PY2 :,"if six.PY2 is true ,"
for taglib in bits [ NUM_ : ] :,"for every taglib in bits without the first element ,"
saved locale = None,saved_locale is None .
if top errors :,"for 'errors ' , return value of the function force_text with an argument label for 'label ' , return value of the function six.text_type , with an argument bf , for 'field ' , help_text for help_text , html_class_attr for 'html_class_attr ' and bf.html_name for 'field_name ' . if top_errors is true ,"
self . state = first,"and result of bitwise OR performed on 2 operands : re.MULTILINE and re.VERBOSE , substitute the result for value under the state key of the self.regexes dictionary . substitute first for self.state ."
assert content is not None,if content is not None raise an error .
else :,"if not ,"
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
var name = bits [ NUM_ ],substitute sixth element of bits for var_name .
return truncate % { STR_ : text },"format truncate with a dictionary with an element : text for 'truncated_text ' , return the result ."
if not locale dir :,"if locale_dir is false ,"
return,return an empty string .
"parser . add argument ( STR_ , STR_ , action = STR_ , dest = STR_ , default = [ ] , metavar = STR_ , help = STR_ STR_ )","dest as a string 'symlinks ' , default as boolean False and help as a string 'Follows symlinks to directories when examining ' 'source code and templates for translation strings. ' . call the method parser.add_argument with 7 arguments : string ' -- ignore ' , string '-i ' , action as a string 'append ' ,"
from django . middleware . csrf import get token,from django.middleware.csrf import get_token into default name space .
if os . path . is dir ( template dir ) :,"if template_dir is directory ,"
import os,import module os .
return . join ( random . choice ( allowed chars ) for i in range ( length ) ),"and settings.SECRET_KEY , call on it method encode with an argument string 'utf-8 ' , use the result as an argument for the call to the method hashlib.sha256 , call the method digest on the result , use the result as an argument for the call to the function random.seed . call the function random.choice with an argument allowed_chars , for every i in range of integers from 0 to lengths ,"
"warnings . warn ( "" STR_ "" "" STR_ "" , RemovedInDjango20Warning )",call the function warnings.warn with 2 arguments : string `` NoArgsCommand class is deprecated and will be removed in Django 2.0. ``
if self . decimal places is not None and decimals > self . decimal places :,code set to string 'max_digits ' and params set to a dictionary with an entry : self.max_digits for 'max ' . if self.decimal_places is not None and decimals is grater than self.decimal_places :
self .  max entries = in t ( max entries ),"convert max_entries into a string , substitute it for self._max_entries ."
except CommandError :,"if CommandError exception is caught ,"
raise KeyError ( STR_ STR_ STR_ % number ),"raise an KeyError with an argument string 'Your dictionary lacks key \ ' % s\ ' . Please provide it , because it is required to '"
self .  non form errors = self . error class ( ),"call the method self.error_class , substitute the result for self._non_form_errors ."
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % ( tag , list ( TemplateTagNode . mapping ) ) )","raise an TemplateSyntaxError exception with an argument string `` Invalid templatetag argument : ' % s ' . Must be one of : % s '' ,"
import os,import module os .
return True,return boolean True .
class Command ( AppCommand ) :,derive the class Command from the AppCommand base class .
"timeout = params . get ( STR_ , params . get ( STR_ , NUM_ ) )","call the params.get method with string 'TIMEOUT ' and integer 300 as arguments , use the string 'timeout ' and previous result as the arguments for the call to the params.get method , substitute the result for timeout ."
"def   init   ( self , regex , max length = None , min length = None , error message = None , * args , ** kwargs ) :","define the method __init__ with 7 arguments : self , regex , max_length set to None , min_length set to None , error_message set to None ,"
value = tuple ( value ),"convery value into a tuple , substitute it for value ."
"self . filter expr , self . nodelist = filter expr , nodelist","substitute filter_expr and nodelist for self.filter_expr and self.nodelist , respectively ."
"return super ( QueryDict , self ) . setdefault ( key , default )","call the method setlistdefault from the base class of the class QueryDict , with arguments key and default_list , return the result ."
operations = [ ],operations is an empty list .
class SubWidget ( object ) :,derive the class SubWidget from the object base class .
def parse accept lang header ( lang string ) :,define the function parse_accept_lang_header with an argument lang_string .
return self .  caches . caches [ alias ],return value under the alias key of self._caches.caches dictionary .
raise,"raise an exception ,"
self . data = obj,substitute obj for self.data .
"params = { STR_ : self . limit value , STR_ : cleaned }",params is a dictionary with 2 initial entries : self.limit_value for 'limit_value ' and cleaned for 'show_value ' .
ext list = [ ],"ext_list is an empty list ,"
return attachment,return attachment .
pass,do nothing .
def validate unique ( self ) :,define the method validate_unique with an argument self .
return STR_,return string 'form ' .
from django . test . signals import setting changed,from django.test.signals import setting_changed into default name space .
def message dict ( self ) :,define the method message_dict with an argument self .
else :,"substitute the result for i-th element of words . if not ,"
"from django . forms . widgets import Widget , Select",from django.forms.widgets import Widget and Select into default name space .
return [ ],return an empty list .
hidden widget = field . hidden widget ( ),"call the method field.hidden_widget , substitute the result for field.hidden_widget ."
return None,return None .
finally :,"finally perform ,"
"from django . core . exceptions import ( ImproperlyConfigured , ValidationError , NON FIELD ERRORS , FieldError )","django.core.exceptions import ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS and FieldError into default namespace ."
return force text ( gettext ( message ) ),"call the function gettext with an argument message , use the result as an argument for the call to the force_text function , return the result ."
except Resolver404 :,"if Resolver404 exception is caught ,"
"self . add fields ( form , i )",call the method self.add_fields with arguments form and i ) .
now = now . decode ( STR_ ),"call the method now.decode with an argument string 'utf-8 ' , substitute the result for now ."
self . argv = argv or sys . argv [ : ],"if argv is true , substitue it for self.argv , if not substitute sys.argv for self.argv ."
raise NotImplementedError ( STR_ ),raise an NotImplementedError with an argument string 'subclasses of NoArgsCommand must provide a handle_noargs ( ) method ' .
name = sign + hhmm,"sum sign and hhmm , substitute the result for name ."
return in t ( value ) % in t ( arg ) == NUM_,"convert value and arg to integers , if value is divisible by arg , return True , otherwise return boolean False ."
import re,import module re .
return text,return text .
"def add ( self , key , value , timeout = DEFAULT TIMEOUT , version = None ) :","define the method add with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None ."
"name = property (  get name ,  set name )",name is a property object with _get_name as a getter method and _set_name as a setter method .
"def   init   ( self , dict  = None ) :",define the method __init__ with 2 arguments : self and dict_ set to None .
if i >= self . in itial form count ( ) and i >= self . min num :,"if i is greater than , or equal to the result of the call to the method self.initial_form_count ,"
"def handle ( self , * tablenames , ** options ) :","default set to DEFAULT_DB_ALIAS and help set to a string : 'Nominates a database onto which the cache tables will be installed . Defaults to the `` default '' database . ' define the method handle with arguments self , unpacked list tablenames and unpacked dictionary options ."
decompress = True,decompress is boolean True .
return value,return value .
return json . dumps ( self . get json data ( escape html ) ),"call the method self.get_json_data with an argument escape_html ,"
self .  callback strs . update ( pattern .  callback strs ),call the method self._callback_strs.update with an argument pattern._callback_strs .
from django . core . management . color import no style,from django.core.management.color import no_style into default name space .
pass,do nothing .
else :,"if not ,"
self . domain = options . get ( STR_ ),"get the value under the 'domain ' key of the options dictionary , substitute it for self.domain ."
if len ( app labels ) == NUM_ :,"if length of app_labels equals integer 0 ,"
return list ( error ) [ NUM_ ],return first element of the list containing elements of error .
if version is None :,"if version is None ,"
for loader in template source loaders :,"for every loader in template_source_loaders ,"
base path = os . path . splitext ( po path ) [ NUM_ ],"call os.path.splitext function with po_path as argument , substitute the first element of the result for base_path ."
signals . request finished . send ( sender = self .  handler class ),call the method signals.request_finished.send with an argument sender set to self._handler_class .
"def delete ( self , name ) :",define the method delete with arguments self and name .
"def  samefile ( src , dst ) :",define the function _samefile with arguments src and dst .
for app config in apps . get app configs ( ) :,"call the function apps.get_app_configs , for every app_config in result ,"
if qs .  result cache is not None :,"if qs._result_cache is not None ,"
"from django . db import connections , transaction",from django.db import connections and transaction into default name space .
"label for = format html ( STR_ , self . id for label )","call the function format_html with 2 arguments : string ' for= '' { 0 } '' ' and self.id_for_label , substitute the result for label_for ."
break,skip this loop iteration .
except KeyError :,"if KeyError exception is caught ,"
if block name in parser .   loaded blocks :,"if block_name is contained in parser.__loaded_blocks ,"
return escape ( value ),"call the function escape with an argument value , return the result ."
try :,"try ,"
if in plural :,"if inplural is true ,"
"raise ImportError ( "" STR_ "" % lookup view )","raise an ImportError exception with an argument string `` Could not import ' % s ' . The path must be fully qualified . `` ,"
factory = klass,substitute the result for value under 'address ' key of config dictionary . substitute klass for factory .
TOKEN BLOCK = NUM_,TOKEN_BLOCK is integer 2
with connections [ db ] . cursor ( ) as cursor :,"call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,"
"def   getitem   ( self , name ) :",define the method __getitem__ with arguments self and name .
def  iteritems ( self ) :,define the method _iteritems with an argument self .
weight += NUM_,increment weight by integer 2 .
def parse http date safe ( date ) :,`` % r is not a valid date '' formated with date and third element of the result of the function sys.exc_info . define the function parse_http_date_safe an argument date .
return size,return size .
settingsfile = upath ( sys . modules [ settings .   module   ] .   file   ),"get the value under the settings.__module__ key of the sys.modules dictionary ,"
for ch in in put iter :,"for every ch in input_iter ,"
def end serialization ( self ) :,define the method end_serialization with an argument self .
"html = starttag re . sub ( , html )","call the function starttag_re.sub with 2 arguments : an empty string and html , substitute the result for html ."
data [ f . name ] = [ item . pk for item in qs ],"for every item in qu append item.pk to a list , substitute resulting list for value under f.name key of the data dictionary ."
with lock :,"with lock ,"
try :,"try ,"
"def   init   ( self , table , params ) :","define the initialization method __init__ with self , table and params as arguments ."
from django . conf import settings,from django.conf import settings into default name space .
handler = logging .  handlers [ name ],substitute value under name key of logging._handlers dictionary for handler .
self .  empty = False,self._empty is boolean False .
for k in doomed :,"for every k in doomed ,"
return self . nodelist . render ( context ),"call the method self.nodelist.render with an argument context , return the result ."
"def   init   ( self , context , * args , ** kwargs ) :","define the method __init__ with 4 arguments : self , context , unpacked list args and unpacked dictionary kwargs ."
for sub stream in boundarystream :,"for every sub_stream in boundarystream ,"
"return sql create ( app config , style , connection ) + sql custom ( app config , style , connection ) + sql indexes ( app config , style , connection )","use the app_config , style and connection as arguments for the call to the sql_create , sql_custom and sql_indexes functions , append the results respectively , return the result ."
raise NotImplementedError ( STR_ ),"raise an exception of class NotImplementedError , with string 'subclasses of BaseCache must provide a set ( ) method ' as argument ."
in put type = None,input_type is None .
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to integer 1 ,"
"def format output ( self , rendered widgets ) :","files and string created with concatenation of : name , string ' _ ' and i converted into a string , return the results in a list . define the method format_output with 2 arguments : self and rendered_widgets ."
"value = environ . get ( str ( key ) , str ( default ) )","convert key and default to strings , get the value under the key string key of the environ dictionary , if it does not exists use the ,"
context . dicts . append ( self ),append self to context.dicts .
def display ( self ) :,define the method display with an argument self .
self .  request middleware = self .  view middleware = self .  template response middleware = self .  response middleware = self .  exception middleware = None,"set class fields _request_middleware , _view_middleware , _template_response_middleware , _response_middleware and _exception_middleware to None ."
if unpack ipv4 :,"if unpack_ipv4 is true ,"
def to language ( locale ) :,define the function to_language with an argument locale .
return retval,where ' % s ' is replaced with result of the method self.current_token.display . return retval .
"if is in stance ( s , ( six . text type , Promise ) ) :","if s is an instance of six.text_type or Promise ,"
except ImportError :,"if ImportError exception is caught ,"
if not template name list :,"if template_name_list is false ,"
if not self . port . is digit ( ) :,"call the method self.port.isdigit , if it evaluates to false ,"
continue,"dictionary keys converted into sets , skip this loop iteration ,"
try :,try
"def as textarea ( self , attrs = None , ** kwargs ) :","define the method as_textarea with 3 arguments : self , attrs set to None and unpacked dictionary kwargs ."
field = f . name,substitute f.name for field .
s = s [ : site ] + syear + s [ site + NUM_ : ],"concatenate first site elements of s , syear and elements of s from the site incremented by integer 4 index , substitute the result for s ."
app configs = [ apps . get app config ( app label ) for app label in app labels ],"call the method apps.get_app_config with an argument app_lable , for every app_label in app_labels , append the results to app_configs list ."
tok = STR_,"tok is a string ' '' REGEX '' ' ,"
"raise DTDForbidden ( name , sysid , pubid )","raise an DTDForbidden exception with arguments name , sysid and pubid ."
return None,return None .
return False,return boolean False .
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
"help = ( "" STR_ "" "" STR_ "" "" STR_ "" "" STR_ "" "" STR_ "" )",help is a string `` Runs over the entire source tree of the current directory and ``
if url . startswith ( STR_ ) :,"if url starts with '/// ' ,"
"cache key = ( format type , lang )",cache_key is a tuple with 2 argumetns : format_type and lang .
"unescape entities = allow lazy ( unescape entities , six . text type )","call the function allow_lazy with 2 arguments : unescape_entities and six.text_type , substitute the result for unescape_entities ."
"return metaclass ( STR_ , None , { } )","return an instance of metaclass class , created with 3 arguments : string 'temporary_class ' , None and an empty dictionary ."
new value = value + delta,new_value is a sum of value and delta .
from django . conf import settings,from django.conf import settings into default name space .
except TypeError :,"if TypeError exception is caught ,"
"output . extend ( connection . creation . sql indexes for model ( model , style ) )","and include_auto_created set to boolean True , call the method connection.creation.sql_indexes_for_model with arguments model and style , extend output with the result ."
if count == NUM_ :,if count is equal to integer 0 .
translation .  info = { },translation._info is an empty dictionary .
strip tags = allow lazy ( strip tags ),"call the function allow_lazy with an argument strip_tags , substitute the result for strip_tags ."
"pickled = pickle . dumps ( value , pickle . HIGHEST PROTOCOL )","call the method pickle.dumps with value and pickle.HIGHEST_PROTOCOL as arguments , substitute it for pickled ."
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
return from current timezone ( value ),"call the function __current_timezone with an argument value , return the result ."
iterkeys =  iterkeys,substitute _iterkeys for iterkeys .
"self . in itial extra = kwargs . pop ( STR_ , None )","remove entry under 'initial ' key of the kwargs dictionary , substitute it for self.initial_extra if it exists ,"
"raise CommandError ( "" STR_ "" )",raise an CommandError exception with an argument string `` You can only use -- pks option with one model '' .
return default,return default .
validate ipv4 address ( hextet ),call the function validate_ipv4_address with an argument hextet .
"if is in stance ( unicode value , six . text type ) :","if unicode_value is an instance of six.text_type ,"
else :,"if not ,"
"value = template localtime ( value , use tz = context . use tz )","call the method template_localtime with 2 arguments : value and use_tz=context.use_tz , substitute the result for value ."
def as data ( self ) :,define the method as_text with an argument self .
class InvalidTemplateLibrary ( Exception ) :,"p and errors set to string 'replace ' , for p in self.params . derive the class InvalidTemplateLibrary form the base class Exception ."
else :,"if not ,"
with context . push ( ** values ) :,"call the method context.push with unpacked dictionary values as an argument , with the result perform ,"
leave locale alone = False,leave_locale_alone is boolean False .
return Variable ( path ) . resolve ( context ),"string `` resolve_variable ( ) is deprecated . Use django.template . Variable ( path ) .resolve ( context ) instead '' , RemovedInDjango20Warning , and stacklevel set to integer 2. call the method resolve with an argument context , from the instance of Variable class , created with an argument path ."
full path = self . path ( name ),substitute result of the self.path function with argument name for full_path .
continue,skip this loop iteration .
return statements,return statements .
"wsgi opts = { STR_ : in t ( options [ "" STR_ "" ] ) , STR_ : in t ( options [ "" STR_ "" ] ) , STR_ : in t ( options [ "" STR_ "" ] ) , }","wsgi_opts is a dictionary with 4 initial entries : value under the key 'maxspare ' of options dictionary converted to an integer ,"
"except ( OSError , TypeError ) :",if OSError or TypeError errors occurred .
"except ( LookupError , ImportError ) as e :","if LookupError or ImportError , renamed to e , exceptions are caught ,"
import os,import module os .
"return "" STR_ "" % self .   language","return a string `` < DjangoTranslation lang : % s > '' , where ' % s ' is replaced with self.__language ."
"with io . open ( potfile , STR_ , encoding = STR_ ) as fp :","call the function io.open with 3 arguments : potfile , string ' r ' and encoding set to string 'utf-8 ' as arguments ,"
lang = get language ( ),"call the function get_language , substitute the result for lang ."
comment . append ( t . contents ),append t.contents to comment .
"propagate = config . get ( STR_ , None )","get value under the 'propagate ' key of the config dictioanry , if it exists substitute it for propagate , if not propagate is None ."
from django . conf import settings,from django.conf import settings into default namespace .
klass = app name,substitute app_name for klass .
"self . name , self . nodelist , self . parent = name , nodelist , parent","substitute name , nodelist and parent for self.name , self.nodelist and self.parent ."
try :,"try ,"
"app dir = os . path . join ( app config . path , STR_ )","join app_config.path and string 'fixtures ' into a valid file path , substitute it for app_dir ."
known models . append ( table2model ( table name ) ),"table2model with an argument table_name . call the function table2model with an argument table_name , append the result to known_models ."
if self . forms :,"if self.forms is true ,"
from   future   import unicode literals,from module __future__ import unicode_literals to default name space .
elif timeout == NUM_ :,"else if timeout equals to integer 0 ,"
for renamed method in cls . renamed methods :,"for every renamed_method in cls.renamed_methods ,"
"output . append ( format html ( self . in ner html , choice value = force text ( w ) , sub widgets = ) )","choice and i , substitute the result for w. call the function format_html with 3 arguments : self.inner_html , choice_value set to result of the function force_text ,"
@ register . filter ( is  safe = True ),"and truncate set to string ' ... ' , return the result . decorator function register.filter with an argument is_safe set to boolean True ."
"def   init   ( self , in itlist = None , error class = None ) :","define the method __init__ with 3 arguments : self , initlist set to None and error_class set to None ."
def unlock ( f ) :,define the function unlock with argument f .
"def new ( self , values = None ) :",define the method new with 2 arguments : self and values set to None .
if is  templatized :,"if is_templatized is true ,"
self . mode = file . mode,substitute file.mode for self.mode .
else :,"if not ,"
except UnicodeDecodeError :,"if UnicodeDecodeError exception is caught ,"
"output , errors , status = popen wrapper ( args )","return value of the npath function with string '.mo ' appended to the base_path as argument , and return value of the npath function with string '.po ' appended to the base_path as argument , substitute it for args . call the popen_wrapper with args as the argument , assign the result to the output , errors and status , respectively ."
"def   deepcopy   ( self , memo = None ) :",for every k and v in result of method the self.lists . define the method __deepcopy__ with 2 arguments : self and memo set to None .
tzinfo = timezone . get current timezone ( ) if settings . USE TZ else None,"if settings.USE_TZ is true substitute result of the function timezone.get_current_timezone for tzinfo , if not tzinfo is None ."
"return path ,",return path an an empty string .
if constant arg :,"and var_arg , respectively . if constant_arg is true ,"
try :,"try ,"
nodelist false = NodeList ( ),nodelist_false is an instance of NodeList class .
"if contains ( result [ - NUM_ ] , Group ) :","if call to the function contains with 2 arguments : last element of result and Group , evaluates to true ,"
"sequence sql = connection . ops . sequence reset sql ( no style ( ) , self . models )","call the method connection.ops.sequence_reset_sql with 2 arguments : return value of the no_style and self.models ,"
output . append ( app output ),append app_output to output .
handlers = self .  upload handlers,substitute self._upload_handlers for handlers .
return default,return default .
raise,raise an exception .
offset = NUM_ * in t ( tzinfo [ NUM_ : NUM_ ] ) + offset mins,"substitute the result for offset_mins , otherwise offset_mins is integer 0. convert elements of tzinfo from indexes 1 to 3 to an integer , multiply it by integer 60 and increment it by offset_mins ,"
return MONTHS AP [ self . data . month ],return the value under the self.data.month key of the MONTHS_AP dictionary .
"return filename , display url",return filename and display_url .
def language ( self ) :,define the method language with an argument self .
"output . extend ( connection . creation . sql destroy model ( model , references to delete , style ) )","call the method connection.creation.sql_destroy_model with arguments : model , references_to_delete and style , extend with the result the list output ."
"import module ( STR_ , app config . name )",call the function import_module with 2 arguments : string .management and app_config.name .
return value,return value .
def code changed ( ) :,define the function code_changed .
"if not hasattr ( self , STR_ ) :","if self does not have 'bad_cookies ' attribute ,"
self .  stream = stream,substitute stream for self._stream .
"if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :","if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,"
if not os . path . exists ( directory ) :,"if call to the function os.path.exists with argument directory evaluates to boolean False ,"
link target attribute re = re . compile ( r STR_ ),"call the function re.compile with raw string ' ( < a [ ^ > ] * ? ) target= [ ^\s > ] + ' , substitute the result for link_target_attribute_re ."
else :,"if not ,"
"loggers = config . get ( STR_ , EMPTY DICT )","get config dictionary element under 'loggers ' key , if it exists substitute it for loggers , if not , loggers is EMPTY_DICT ."
elt = [ elt ],elt is an list with an element elt .
"raise Exception ( "" STR_ "" % self .   class   .   name   )","raise an Exception exception with an argument string `` This % s instance is not writable '' ,"
yield line,yield line .
"handler . addQuickElement ( "" STR_ "" , cat )",call the method handler.addQuickElement with 2 arguments : string 'category ' and cat .
return,"return an empty string ,"
self .  archive = tarfile . open ( file ),"call the method tarfile.open with an argument file , substitute the result for self._archive ."
self . stdout . write ( statement ),call method self.stdout.write with statement as an argument .
from django . http import HttpResponse,from django.http import HttpResponse into default name space .
for bit in bits :,"for every bit in bits ,"
"s = s . replace ( STR_ , STR_ )",replace every occurrence of '\n ' in s with '\\n ' .
return func,return func .
try :,"try ,"
params = [ ],"params is an empty list ,"
return normpath ( path ),"call the function normpath with an argument path , return the result ."
output = next ( self .  producer ),"get the next element of the self._producer iterable , substitute it for output ."
"def  render ( self , context ) :",define the method _render with 2 arguments self and context .
in trans = False,intrans is boolean False .
from django . utils . xmlutils import SimplerXMLGenerator,from django.utils.xmlutils import SimplerXMLGenerator into default name space .
dirs = [ ],dirs is an empty dictionary .
def r ( self ) :,define the method r with an argument self .
if item [ STR_ ] is not None :,"if value under the 'author_email ' key of the item dictionary is not None ,"
"def led ( self , left , parser ) :","where ' % s ' is replaced with self.id . define the method led with 3 arguments : self , left and parser ."
"return mark safe ( format string . format ( * args safe , ** kwargs safe ) )","with value result of the conditional_escape function called with an argument v for key k. call the method format_string.format with 2 arguments : unpacked list args_safe and unpacked dictionary kwargs_safe ,"
return self,return self .
"def  html output ( self , normal row , error row , row ender , help text html , errors on separate row ) :","define the method _html_output with 6 arguments : self , normal_row , error_row , row_ender , help_text_html and errors_on_separate_row ."
from django . utils . daemonize import become daemon,from django.utils.daemonize import become_daemon into default name space .
if text == and len ( opts ) == NUM_  and opts [ NUM_ ] == STR_ :,"if text is an empty string and length of opts equals integer 1 and first element of opts equals string 'reset ' ,"
dirname = os . path . dirname ( filename ),"get the directory name of filename , substitute it for dirname ."
class Deserializer ( base . Deserializer ) :,field.rel.__class__.__name__ for 'rel ' and return value of the function smart_text with an argument field.rel.to._meta for 'to ' . derive the class Deserializer from the base.Deserializer base class .
"def   init   ( self , tagtype ) :","VARIABLE_TAG_START for 'openvariable ' , VARIABLE_TAG_END for 'closevariable ' , SINGLE_BRACE_START for 'openbrace ' , SINGLE_BRACE_END 'closebrace ' , COMMENT_TAG_START 'opencomment ' and COMMENT_TAG_END for 'closecomment ' . define the method __init__ with 2 arguments : self and tagtype ."
for hook in sys . path hooks :,"for every hook in sys.path_hooks ,"
return s . get data ( ),"call the method s.get_data , return the result ."
else :,"if not ,"
if id  :,"if not , substitute self.auto_id for id_ . if id_ is true ,"
"super ( PasswordInput , self ) .   init   ( attrs )","call the method __init__ from the base class of the class PasswordInput , called with an argument attrs ."
help = STR_ + CheckCommand . help,"concatenate CheckCommand.help to string 'Deprecated . Use `` check '' command instead . ' , substitute it for help ."
"self . nodelist true , self . nodelist false = nodelist true , nodelist false","substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false , respectively ."
def   dir   ( self ) :,define the method __dir__ with an argument self .
"fixture dirs = [ os . path . join ( dir  , os . path . dirname ( fixture name ) ) for dir  in fixture dirs ]","join dir_ and return value of the function os.path.dirname called with an argument fixture_name into a valid file path ,"
if y and m and d :,"if y and m and d are all true ,"
import cgi,import module cgi .
if self .  leftover :,"if self._leftover is true ,"
value . configurator = self,substitute self for value.configurator .
def   init   ( self ) :,define the method __init__ with an argument self .
"contents = format html ( STR_ , contents , label suffix )","called with an argument string ' : ? . ! ' . call the method format_html with 3 arguments : string ' { 0 } { 1 } ' , contents and label_suffix , substitute the result for contents ."
fields = list ( six . iteritems ( base . base fields ) ) + fields,"call the method six.iteritems with an argument base.base_fields , convert it to a list and append fields to it , substitute the result for fields ."
import os,import module os .
"update wrapper (  wrapper , dummy )",call the function update_wrapper with 2 arguments : _wrapper and dummy .
" assertRaisesRegex = "" STR_ """,_assertRaisesRegex is a strnig `` assertRaisesRegexp '' .
for base in reversed ( new class .   mro   ) :,"for every base in new_class.__mro__ in reversed order ,"
add to builtins ( STR_ ),call the function add_to_builtins with an argument string 'django.template.loader_tags ' .
if chunk is None :,"if chunk is None ,"
return rv,return rv .
if in dex sql :,"if index_sql is not empty ,"
result . key = key,substitute key for result.key .
try :,"try ,"
self . data = data or { },"if data is true , substitute it for self.data , if not self.data is an empty dictionary ."
return fixture files,return fixture_files .
"date keys = ( STR_ , STR_ )",date_keys is a tuple with 2 arguments : strings 'updateddate ' and 'pubdate ' .
"return super ( QueryDict , self ) . pop ( key , * args )","call the method pop from the base class of the class QueryDict , with arguments key and unpacked list args , return the result ."
choice input class = CheckboxChoiceInput,substitute CheckboxChoiceInput for choice_input_class .
except Exception :,if Exception exception is caught .
class Module six moves urllib response (  LazyModule ) :,"assign the result to the value under the string `` .moves.urllib_request '' appended to __name__ key of the sys.modules dictionary , and to the value under the string `` .moves.urllib.request '' appended to __name__ key of the sys.modules dictionary . derive class Module_six_moves_urllib_response from the _LazyModule base class ."
def  parse header ( line ) :,define the method _parse_header with an argument line .
except IOError :,"previous result and filepath . if IOError exception is caught ,"
"paras = re . split ( STR_ , value )","call the method re.split with 2 arguments : string '\n { 2 , } ' and value , substitute the result for paras ."
"m2m data [ field . name ] = self .  handle m2m field node ( field node , field )","call the method self._handle_m2m_field_node with an argument field_node and field , substitute the result for value under the field.name key of m2m_data dictionary ."
valid = False,valid is boolean False .
"for i in range ( NUM_ , len ( pieces ) - NUM_ , NUM_ ) :","for every i in range of integers from integer 0 to the length of pieces decremented by one , with step of integer 3 ,"
else :,"if not ,"
else :,"if not ,"
if ignore failures :,"if ignore_failures is true ,"
used name = the path . split ( / ) [ - NUM_ ],"filename and e. split the_path at the '/ ' character , substitute last element of the result for used_name ."
"return "" """,return an empty string .
class Command ( AppCommand ) :,derive the class Command from the AppCommand base class .
self . deprecation warning = deprecation warning,substitute deprecation_warning for self.deprecation_warning .
except AttributeError :,"if AttributeError exception is caught ,"
"@ register . filter ( "" STR_ "" , is  safe = True )",decorator function register.filter with 2 arguments string `` slice '' and is_safe set to boolean True .
fext = f + ext,"add ext to f , substitute the result for fext ."
parser . add library ( lib ),call the method parser.add_library with an argument lib .
try :,"try ,"
if help texts is not None :,"if help_texts is not None ,"
def escape quotes ( m ) :,define the function escape_quotes with an argument m .
if remaining bits :,"where ' % r ' is replaced with first element of bits . if remaining_bits is true ,"
try :,"try ,"
return NUM_,return integer 0 .
field value = getInnerText ( node ) . strip ( ),"call the function getInnerText with an argument node , call the strip method on the result , substitute the result for field_value ."
from django . forms . utils import ErrorList,from django.forms.utils import ErrorList into default name space .
old method = base .   dict   . get ( old method name ),"get the value under the old_method_name key of the base.__dict__ dictionary , substitute it for old_method ."
value = Decimal ( value ),value is an instance of a class Decimal created with value as an argument .
self . nodelist = nodelist,substitute nodelist for self.nodelist .
if token string . startswith ( VARIABLE TAG START ) :,"if token_string starts with VARIABLE_TAG_START ,"
def writer enters ( self ) :,define the method writer_enters with an argument self .
if not os . path . is file ( pythonrc ) :,"if pythonrc is not a file ,"
except UnicodeDecodeError :,"if UnicodeDecodeError exception is caught ,"
handler config = handlers [ name ],substitute value under name key of handlers dictionary for handler_config .
import cgi,import module cgi .
return,return from the function
else :,"if not ,"
params = kwargs,substitute kwargs for params .
class WindowsError ( Exception ) :,derive class WindowsError from Exception base class .
@ stringfilter,"decorator stringfilter ,"
if git changeset :,"if git_changeset is true ,"
"super ( ExternalReferenceForbidden , self ) .   init   ( )",call the method __init__ from the base class of the ExternalReferenceForbidden class .
"self . stdout . write ( "" STR_ "" )",write the string `` Installing custom SQL ... \n '' to the standard output .
"def do translate ( message , translation function ) :",define the function do_translate with 2 arguments : message and translation_function .
@ property,"property getter decorator ,"
"six . reraise ( ImportError , ImportError ( msg ) , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : ImportError , instance of ImportError class created with an argument msg ,"
if len ( bits ) < NUM_ :,"if length of bits is lesser than integer 2 ,"
format string = bits [ NUM_ ] [ NUM_ : - NUM_ ],substitute second element of bits without the first and last element for format_string .
"in t part , dec part = str number . split ( STR_ )","split str_number by ' . ' , substitute the result for int_part and dec_part , respectively ."
def  post clean ( self ) :,define the method _post_clean with an argument self .
self . content type extra = content type extra,substitute content_type_extra for self.content_type_extra .
value = connections [ db ] . ops . process clob ( row [ NUM_ ] ),"call the method ops.process_clob with second element of row as argument , on the object under the db key of connections dictionary , substitute the result for value ."
if pattern . name is not None :,"and pattern.default_args . if pattern.name is not None ,"
"def deconstructible ( * args , ** kwargs ) :",define the function deconstructible with 2 arguments : unpacked list args and unpacked dictionary kwargs .
return iter ( self .  container ),return self._container converted into a iterable .
return [ form . cleaned data for form in self . forms ],"where ' % s ' is replaced with self.__class__.__name__ . for form in self.forms append form.cleaned_data to a list , return the resulting list ."
"cursor . execute ( "" STR_ "" % table )","call the method cursor.execute with string `` SELECT COUNT ( * ) FROM % s '' as argument , substitute the ' % s ' with table ."
return LANG INFO [ lang code ],"get the value under the lang_code key of the LANG_INFO dictionary , return it ."
from django . core . serializers . json import DjangoJSONEncoder,from django.core.serializers.json import DjangoJSONEncode into default name space .
return FormSet,return FormSet .
self . object = obj,substitute obj for self.object .
  str   = serialize,substitute serialize for __str__ .
for middleware method in self .  view middleware :,"for every middleware_method in self._view_middleware ,"
from django . utils import timezone,from django.utils import timezone into default name space .
result . key = key,substitute key for result.key .
return False,return boolean False .
"setattr (  MovedItems , move . name , move )",set move.name attribute of the _MovedItems to move .
key = key [ len ( self . prefix ) : ],"key is a list with elements of list key from length of self.prefixes index to the end ,"
if not self .  cached loaders :,"if self._cached_loaders is false ,"
def  dec ( func ) :,define the function _dec with an argument func .
subject = self . subject,substitute self.subject for subject .
if p . find ( STR_ ) >= NUM_ :,"find index of the occurrence of string ' : _ ( ' in p , if its greater or equal to integer 0 ,"
self . use tls = settings . EMAIL USE TLS if use tls is None else use tls,"if use_tls is None substitute settings.EMAIL_USE_TLS for self.username , if not substitute use_tls for self.use_tls ."
except IndexError :,"if IndexError exception is caught ,"
"def mail admins ( subject , message , fail silently = False , connection = None , html message = None ) :","define the function mail_admins with subject , message , fails_silently set to boolean False , connection set to None ,"
return result,"return result ,"
if format module path is None :,if format_module_path is None .
new method = base .   dict   . get ( new method name ),"get the value under the new_method_name key of the base.__dict__ dictionary , substitute it for new_method ."
"raise ValueError ( "" STR_ "" )",raise an ValueError exception with an argument string `` Base36 conversion input too large . `` .
ns = current app,substitute current_app for ns .
if self . activated :,"if self.activated is boolean True ,"
self . regex = regex,substitute regex for self.regex .
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'name ' and value under the 'author_name ' key of the item dictionary .
return mark safe ( template % substitutions ),"substitutions dictionary . call the function mark_safe with an argument template , formated with substitutions , return the result ."
field params [ STR_ ] = in t ( row [ NUM_ ] ),"convert fourth element of row to an integer , substitute it for value under the 'max_digits ' key of the field_params ."
from django . utils import six,from django.utils import six into default name space .
else :,"if not ,"
"def   init   ( self , queryset , cache choices = None , required = True , widget = None , label = None , in itial = None , help text = , * args , ** kwargs ) :","string 'Enter a list of values . ' for 'list ' , return value of the function _ called with an argument , string 'Select a valid choice . % ( value ) s is not one of the available choices . ' for 'invalid_choice ' , and return value of the function _ called with an argument string ' '' % ( pk ) s '' is not a valid value for a primary key . ' for 'invalid_pk_value ' . define the method __init__ with 10 arguments : self , queryset , cache_choices set to None , required set to boolean True ,"
"remove tags = allow lazy ( remove tags , six . text type )","call the function allow_lazy with 2 arguments : remove_tags , six.text_type , substitute the result for remove_tags ."
obj .   class   = self .   class  ,substitute self.__class__ for obj.__class__ .
else :,"if not ,"
else :,"filesize_number_format with result of division of bytes by TB as an argument , substitute the result for value . if not ,"
self . run ( ** options ),call the self.run method with unpacked dictionary options as an argument .
def b64 encode ( s ) :,define the function b64_encode with an argument s .
"if tok . startswith ( "" STR_ "" ) :","if tok starts with `` ' '' ,"
return s,return s .
self .  callback str = callback,substitute callback for self._callback_str .
else :,"if not ,"
self . fed . append ( d ),append d to self.fed .
"self . delete ( key , version = version )",call the delete method with key and version set to version as arguments .
"raise InvalidTemplateLibrary ( "" STR_ "" "" STR_ "" , ( name , compile function ) )","raise an InvalidTemplateLibrary exception with an argument string `` Unsupported arguments to Library.tag : ( % r , % r ) '' ,"
charset = content type extra . get ( STR_ ),"get the value under the 'charset ' key of the content_type_extra dictionary , substitute it for charset ."
"raise base . DeserializationError ( "" STR_ "" % ( node . nodeName , attr ) )","raise an base.DeserializationError exception with an argument string `` < % s > node is missing the required ' % s ' attribute '' ,"
def g ( self ) :,define the method g with an argument self .
"post sql fields = [ f for f in opts . local fields if hasattr ( f , STR_ ) ]","for every f in opts.local_fields that has an 'post_create_sql ' attribute , append f to a list , substitute the resulting list for post_sql_fields ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"self . stdout . write ( "" STR_ "" % ( app name , model .  meta . object name ) )","call the self.stderr.write method with string `` Installing index for % s. % s model\n '' as argument ,"
self . style = color style ( ),"call the function color_style , substitute the result for self.style ."
"for receiver ,   ,   in receivers :","for every receiver , _ and _ in receivers ,"
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError with an argument string `` 'autoescape ' tag requires exactly one argument . `` .
"super ( GenericIPAddressField , self ) .   init   ( * args , ** kwargs )",call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class .
"title += "" STR_ "" % len ( graph . nodes [ plan node ] . replaces )","substitute ' % s ' in the string `` ( % s squashed migrations ) '' with length of replaces filed of graph.nodes element at the plan_node index , append the string to the title ."
"self .  response middleware . in sert ( NUM_ , mw instance . process response )",insert mw_instance.process_response at the beginning of self._response_middleware .
break,break the loop execution .
os . remove ( tmp path ),remove file tmp_path .
"created models = self . sync apps ( connection , executor . loader . unmigrated apps )","use the result as an argument for the call to the self.stdout.write . call the self.sync_apps method with connection and executor.loader.unmigrated_apps as arguments , substitute it for created_models ."
if in dex < NUM_ :,"if index is lesser than integer 0 ,"
raise,raise an exception .
handler . startDocument ( ),call the method handler.startDocument .
from io import StringIO,from io import StringIO into default name space .
raise TemplateSyntaxError ( error msg ),raise an TemplateSyntaxError exception with an argument error_msg .
use null fallback = False,use_null_fallback is boolean False .
def in itial form count ( self ) :,queryset set to qs and unpacked dictionary kwargs . define the method initial_form_count with an argument self .
"PREV , NEXT , KEY , RESULT = NUM_ , NUM_ , NUM_ , NUM_","substitute integers 0 , 1 , 2 and 3 for PREV , NEXT , KEY and RESULT , respectivley ."
"return "" STR_ """,return a string `` < WithNode > ''
else :,"where string ' % s ' is replaced by lookup_view and mod_name , respectively . if not ,"
"def words ( self , num , truncate = None , html = False ) :","define the method words with 4 arguments : self , num , truncate set to None , html set to boolean False ."
def   str   ( self ) :,define the method __str__ with argument self .
"connection = connection or get connection ( username = auth user , password = auth password , fail silently = fail silently )","if connection exists dont modify it , if not call get_connection function with username set to auth_user , password set to auth_password , fail_silently set to fail_silently as arguments , assign it to connection ."
def   next   ( self ) :,define the method __next__ with an argument self .
"ignore = options . pop ( STR_ , False )","substitute DEFAULT_DB_ALIAS for db . remove the value under the 'ignorenonexistent ' key from the options dictionary , assign it to the ignore , if the entry doesnt exists ,"
from django . forms import Form,from django.forms import Form into default name space .
self . loaded object count += loaded objects in fixture,increment self.loaded_object_count by loaded_objects_in_fixture .
del frame,delete frame .
import unicodedata,import module unicodedata .
except HTMLParseError :,"if HTMLParseError exception is caught ,"
self . STDOFFSET = timedelta ( seconds = -  time . timezone ),"call the function timedelta with an argument seconds set to negative _time.timezone , substitute the result for self.STDOFFSET ."
get method self = operator . attrgetter (  meth self ),"call the method operator.attrgetter with an argument _meth_self , substitute the result for get_method_self ."
leading = self . has leading dir ( x . name for x in members ),"only if member.name is not equal to string 'pax_global_header ' . call the method self.has_leading_dir with an argument list , with elements x.name for every x in members , substitute the result for leading ."
"return do ifequal ( parser , token , True )","call the function do_ifequal with 3 arguments : parser , token and boolean False , return the result ."
"self . tag ( function name , compile func )",call the method self.tag with 2 arguments : function_name and compile_func .
self . tags [ name ] = compile function,substitute compile_function for self.tags dictionary value under the name key .
app dir = apps . get app config ( model .  meta . app label ) . path,"call the method apps.get_app_config with an argument model._met.app_label , substitute path field of the result for app_dir ."
"simple url re = re . compile ( r STR_ , re . IGNORECASE )","call the function re.compile with 2 arguments : raw string '^https ? : //\ [ ? \w ' and re.IGNORECASE , substitute the result for simple_url_re ."
if item [ STR_ ] is not None :,"if value under the 'description ' key of the item dictionary is not None ,"
"def write po file ( self , potfile , locale ) :","define the method write_po_file with arguments self , potfile and locale ."
"string concat = lazy (  string concat , six . text type )","call the function lazy with 2 arguments : _string_concat and six.text_type , substitute the result for string_concat ."
"def validate ( self , value ) :",define the method validate with arguments self and value .
length = in t ( num ),"convert num to an integer , substitute it for length ."
plural = [ ],plural is an empty list .
row = cursor . fetchone ( ),"substitute the ' % s ' with table and list containing key , respectively . call the cursor.fetchone method , substitute the result for row ."
from django . core . management . color import color style,from django.core.management.color import color_style into default name space .
for f in file field list :,"for every f in file_field_list ,"
msg . attach ( self .  create attachment ( * attachment ) ),"call the method self._create_attachment with an unpacked list attachment as an argument , use the result as an argument for the call to the msg.attach method ."
return False,return boolean False .
lang = None,lang is None .
def B ( self ) :,define the method B with an argument self .
"func = getattr ( func , STR_ , func )","get the '_decorated_function ' attribute from func object , if it exists substitute it for func ."
"def modelform factory ( model , form = ModelForm , fields = None , exclude = None , formfield callback = None , widgets = None , localized fields = None , labels = None , help texts = None , error messages = None ) :","define the function modelform_factory with 10 arguments : model , form set to ModelForm , fields set to None , exclude set to None ,"
self .  assert mutable ( ),call the method self._assert_mutable .
"super ( SortedDict , self ) .   init   ( )",call the method __init__ from the base class of the class SortedDict .
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` back called without some previous parsing '' .
"def setlist ( self , key , list  ) :","define the method setlist with 3 arguments : self , key and list_ ."
while escaped or ch ! = STR_ :,"while escaped is true or ch is not equal to a string ' ] ' ,"
pass,do nothing .
return self .  client,return self._client .
options . update ( kwargs ),call the options.update method with an argument kwargs .
return STR_ . join ( output ),"join elements of output into a string , separated with newlines , return the result ."
EndToken = EndToken ( ),EndToken is an instance of EndToken class .
"return ResolverMatch ( sub match . func , sub match . args , sub match dict , sub match . url name , self . app name or sub match . app name , [ self . namespace ] + sub match . namespaces )","return an instance of a class ResolverMatch created with 6 arguments : sub_match.func , sub_match.args , sub_match_dict ,"
"header , value = settings . SECURE PROXY SSL HEADER","assign the settings.SECURE_PROXY_SSL_HEADER to header and value , respectively ."
"def load template source ( self , template name , template dirs = None ) :","define the method load_template_source with 3 arguments : self , template_name , template_dirs set to None ."
class FileSystemStorage ( Storage ) :,derive the class FileSystemStorage from the Storage base class .
from django . utils import six,from django.utils import six into default name space .
"localedir = os . path . join ( app config . path , STR_ )","join app_config.path and string 'locale ' into a file path , substitute it for localedir ."
"tok = tok . replace ( "" STR_ "" U ""  )
","replace every occurrence of '\\ ' in tok with ' U ' , substitute the result for tok ."
except ValidationError as e :,"if ValidationError , renamed to e , exception is caught ,"
registry = CheckRegistry ( ),"call the function CheckRegistry , substitute the result for registry ."
objects in fixture += NUM_,increment objects_in_fixture by one .
MIN NUM FORM COUNT = STR_,MIN_NUM_FORM_COUNT is a string 'MIN_NUM_FORMS ' .
template source loaders = tuple ( loaders ),"put loaders elements in a tuple , substitute it for template_source_loaders ."
"super ( CheckboxInput , self ) .   init   ( attrs )","call the method __init__ from the base class of the class CheckboxInput , with an argument attrs ."
"def clean ( self , value ) :",define the method clean with 2 arguments self and value .
raise NotImplementedError ( STR_ ),raise an exception NotImplementedError with string 'subclasses of BaseCache must provide a clear ( ) method ' as argument .
writer = MigrationWriter ( new migration ),"substitute the result for new_migration . writer is an instance of a class MigrationWriter , created with an argument new_migration ."
value = None,value is None .
if app config is None :,"if app_config is None ,"
raise ContentNotRenderedError ( STR_ STR_ ),raise an ContentNotRenderedError exception with an sring 'The response content must be rendered before it can be accessed . ' .
"return [ value . date ( ) , value . time ( ) . replace ( microsecond = NUM_ ) ]","return a list containing 2 elements : return value of the value.date method and return value of the replace method ,"
from django . db . migrations . state import ProjectState,from django.db.migrations.state import ProjectState into default name space .
widget = DateTimeInput,substitute DateTimeInput for widget .
"c = in t ( text [ NUM_ : ] , NUM_ )","convert text without first element to hexadecimal integer , substitute it for c ."
from django . conf import settings,from django.conf import settings into default name space .
"def handle ( self , ** options ) :",default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database onto which to open a shell . Defaults to the `` default '' database. ' . define the method handle with arguments self and unpacked dictionary options .
def   next   ( self ) :,define the method __next__ with an argument self .
"@ register . filter ( expects localtime = True , is  safe = False )",decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False .
from django . utils import six,from django.utils import six into default name space .
try :,"try ,"
"output . append ( self . render option ( selected choices , option value , option label ) )","call the method self.render_option with 3 arguments : selected_choices , option_value and option_label , append the result to output ."
if  default is None :,if _default is None
old setting = context . autoescape,substitute context.autoescape for old_setting .
if bits [ in  index ] ! = in :,"if in_index-th element of bits equals to string 'in ' ,"
except NameError :,"if NameError exception is caught ,"
def u ( s ) :,define the function u with an argument s .
except ValueError :,"if ValueError exception is caught ,"
for ext in pathext :,"for every ext in pathext ,"
"def decr ( self , key , delta = NUM_ , version = None ) :","define the method decr with self , key , delta defaulting to integer 1 and version defaulting to None as arguments ."
option = remaining bits . pop ( NUM_ ),"remove first element from remaining_bits , substitute the result for option ."
class DateTimeInput ( DateTimeBaseInput ) :,derive the class DateTimeInput from the DateTimeBaseInput base class .
digit = x % len ( to digits ),"calculate reminder of division of x by length to_digits , substitute it for digit ."
for i in range ( len ( result ) ) :,"for every i in range of integers from 0 to length of result , not included ,"
return bool ( ret ),"convert ret to a boolean , return it ."
to delete . add ( model ),call the method to_delete.add with an argument model .
self . content length = None,self.content_length is None .
if USE INOTIFY :,"if USE_INOTIFY is true ,"
class Iterator ( object ) :,derive the class Iterator from the base class object .
if six . PY3 :,"if six.PY3 is true ,"
"def  key to file ( self , key , version = None ) :","substitute ' % s ' with self._dir converted to a string . define the method key_to_file with self class instance , key and version defaulting to None as arguments ."
in dent = STR_ * tabs,indent contain tabs number of tab character .
second item = new second item,substitute new_second_item with second_item .
@ deconstructible,"decorator deconstructible ,"
except IOError :,"if IOError exception is caught ,"
errors = [ ],errors is an empty list .
"digits = "" STR_ """,digits is a string `` 0123456789abcdefghijklmnopqrstuvwxyz '' .
import rlcompleter,import rlcompleter .
factory = config [ STR_ ],substitute config dictionary value under ' ( ) ' key for factory .
if self .  wrapped is empty :,"if self._wrapped is empty ,"
self .  container = [ ],self._container is an list .
raise StopIteration ( ),raise an StopIteration exception .
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'description ' and value under the 'description ' key of item dictionary .
"raise TemplateSyntaxError ( "" STR_ "" % bits [ NUM_ ] )","raise an TemplateSyntaxError with an argument string `` % r tag takes at least one argument : the name of the template to be included . `` ,"
"statements = sql create ( app config , self . style , connection )","call the function sql_create with 3 arguments : app_config , self.style and connection , substitute the result for statements ."
self . username = settings . EMAIL HOST USER if username is None else username,"if username is None substitute settings.EMAIL_HOST_USER for self.username , if not substitute username for self.username ."
def   str   ( self ) :,define the method __str__ with an argument self .
"if not hasattr ( e , STR_ ) :","if e doesnt have an 'django_template_source ' attribute ,"
return . join ( words ),"and truncate , return the result . return elements of words joined in a string , separated with whitespaces ."
return chunk [ : end ],return first end elements of list chunk .
"msg = "" STR_ "" % ( self . program , errors )","msg is a string `` Execution of % s failed : % s '' , with ' % s ' replaced by self.program and errors ."
for part in singular :,"and trimmed , write the result to out . for every part in singular ,"
return dec,return dec .
def sort dependencies ( app list ) :,define the function sort_dependencies with an argument app_list .
args = ( ),args is an empty tuple .
return result,return result .
if option value is None :,"if option_value is None ,"
return self,return self .
"warnings . warn ( "" STR_ "" "" STR_ "" . format ( num loopvars , len item ) , RemovedInDjango20Warning )",call the function warnings.warn with 2 arguments : string `` Need { 0 } values to unpack in for loop ; got { 1 } . This will raise an
"for ( field name , field value ) in six . iteritems ( d [ "" STR_ "" ] ) :","for every field_name and field_value in return value of the function six.iteritems called with value under the 'fields ' key of dictionary d ,"
if ip str . count ( STR_ ) > NUM_ :,"if count of occurrence of ' : : ' in ip_str is greater than integer 1 ,"
"def handle ( self , * args , ** options ) :","define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options ."
key = force str ( key ),"evaluate the function force_str with key as the argument , substitute it for key ."
upto = start,"tuple with 2 elements : upto and start and boolean False , append the result to result . substitute start for upto ."
"self . stdout . write ( "" STR_ "" % tablename )","replace ' % s ' in string `` Cache table ' % s ' already exists . '' with tablename , write it to the self.stdout stream ."
from email . message import Message,from email.message import Message into default name space .
except IndexError :,"if IndexError exception is caught ,"
if value in self . empty values :,"if value is contained in self.empty_values ,"
"except ( IOError , OSError ) :","if IOError or OSError exceptions occurred ,"
"from django . utils import six , lru cache",from django.utils import six and lru_cache into default name space .
"return super ( QueryDict , self ) . popitem ( )","call the method popitem from the base class of the class QueryDict , return the result ."
"def has key ( self , key ) :",define the method has_key with 2 arguments : self and key .
from optparse import OptionParser,from optparse import OptionParser into default name space .
return False,return boolean False .
self . keyOrder . remove ( k ),remove k element from self.keyOrder dictionary .
"def make key ( self , key , version = None ) :","define the method make_key with self class instance , key and version defaulting to None as arguments ."
from datetime import datetime,from datetime import datetime into default name space .
"getattr ( combined , STR_ + name ) ( getattr ( self , STR_ + name , None ) )","append name to 'add_ ' use it as the name of the attribute to get from combined object , call the result with an argument :"
" fields  = [ ( STR_ , DWORD ) , ( STR_ , DWORD ) ]","_fields_ is a list containing 2 tuples : first tuple contains : string 'Offset ' and DWORD , second contains : string 'OffsetHigh ' and DWORD ."
return baseconv . base62 . encode ( in t ( time . time ( ) ) ),"call the method baseconv.base62.encode with result of the time.time function converted to an integer , as an argument , return the result ."
from django . apps import apps,from django.apps import apps into default name space .
"return self . attrs . get ( STR_ , )","get the value under the 'id ' key of the self.attrs dictionary , return it , if the key doesnt exists return an empty string ."
errors . extend (  check boolean field default value ( ** kwargs ) ),"call the function _check_boolean_field_default_value with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend ."
"attrs = { STR_ : form , STR_ : extra , STR_ : can order , STR_ : can delete , STR_ : min num , STR_ : max num , STR_ : absolute max , STR_ : validate min , STR_ : validate max }","attrs is an dictionary with 9 initial entries : form for 'form ' , extra for 'extra ' , can_order for 'can_order ' ,"
if str ( number ) [ NUM_ ] == sign :,"convert number to string , if first element equals to sign ,"
"os . dup2 ( so . fileno ( ) , sys . stdout . fileno ( ) )",call the method os.dup2 with 2 arguments : result of the method so.fileno and result of the method sys.stdout.fileno .
"def validate ( self , value ) :",define the method validate with 2 arguments : self and value .
try :,"try ,"
self . set charset ( utf8 charset ),call the method self.set_charset with utf8_charset as an argument .
"parser = command . create parser ( , name )","all the method command.create_parser with arguments : empty and name , substitute the result for parser ."
"def handle raw input ( self , in put data , META , content length , boundary , encoding = None ) :","define the method handle_raw_input with arguments : self , input_data , META , content_length , boundary and encoding set to None ."
"def modelformset factory ( model , form = ModelForm , formfield callback = None , formset = BaseModelFormSet , extra = NUM_ , can delete = False , can order = False , max num = None , fields = None , exclude = None , widgets = None , validate max = False , localized fields = None , labels = None , help texts = None , error messages = None , min num = None , validate min = False ) :","define the function modelformset_factory with 18 arguments : model , form set to ModelForm , formfield_callback set to None ,"
for bytes in stream :,"for every bytes in stream ,"
"for app name , model list in manifest . items ( ) :","for every app_name and mode_list in return value of manifest.items method ,"
def  checkLevel ( level ) :,define the function _checkLevel with an argument level .
"name , value = main value pair . split ( STR_ , NUM_ )","split into two parts string main_value_pair at character ' : ' , substitute the parts for name and value , respectively ."
queryset = self . model .  default manager,substitute self.model._default_manager for queryset .
cls = extension map . get ( tail ext ),"substitute the result for base and tail_ext . get the value under the tail_ext key of the extension_map dictionary , substitute it for cls ."
import os,import module os .
factory = c,substitute c for factory .
def get script name ( environ ) :,define get_script_name function with environ as an argument .
"def loaddata ( self , fixture labels ) :",define the method loaddata with 2 arguments self and fixture_labels .
"def base64 hmac ( salt , value , key ) :","define the function b64_hmac with arguments salt , value and key ."
module = importlib . import module ( serializer module ),"call the function importlib.import_module with an argument serializer_module , substitute it for module ."
def cookie date ( epoch seconds = None ) :,"and list with results of the function force_str with an argument i , for every i in v , only if v is a list or a tuple , otherwise second element is result of the function force_str with an argument v , for every k and v in query , and doseq , return the result . define the function cookie_date with an argument epoch_seconds set to None ."
  len   = new method proxy ( len ),"call the function new_method_proxy with an argument len , substitute the result for __len__ ."
except Exception as e :,"if exception of the class Exception , as e , is caught ,"
"result = "" STR_ "" . join ( hextets )","join elements of hextets into a string , separated with ' : ' , substitute it for result ."
if regex is not None :,"inverse_match set to None and flags set to None . if regex is not None ,"
f . close ( ),second element of l for every l in return value of the self._files.lists call the method f.close .
if col name . lower ( ) . find ( STR_ ) >= NUM_ :,"convert col_name to lowercase , on the result call the method find with an argument string '__ ' , if the result is greater of equal to integer 0 ,"
return supported code,return supported_code .
try :,"try ,"
"raise CommandError ( "" STR_ "" % name str )","join it with app into a string , separated with string ' ; ' , substitute it for name_str . substitute ' % s\ in string `` Conflicting migrations detected ( % s ) .\nTo fix them run 'python manage.py makemigrations -- merge ' '' ,"
try :,"try ,"
"except ( TypeError , VariableDoesNotExist ) :","if TypeError or VariableDoesNotExist exceptions are caught ,"
"truncate = pgettext ( STR_ , STR_ )","call the function pgettext with an argument 'String to return when truncating text ' , ' % ( truncated_text ) s ... ' , substitute the result for truncate ."
"if is in stance ( other , Promise ) :","if other is an instance of Promise ,"
try :,"where ' % s ' is replaced with app_label . try ,"
executor = MigrationExecutor ( connections [ DEFAULT DB ALIAS ] ),executor is an instance of the class MigrationExecutor created with an argument : value under the DEFAULT_DB_ALIAS key of the connections dictionary .
return value,"code set to string 'max_whole_digits ' and params set to a dictionary with an entry : difference of the self.max_digits and self.decimal_places , for 'max ' . return value ."
else :,"if not ,"
return None,return None .
new mod = name,substitute name for new_mod .
self . file path = os . path . abspath ( self . file path ),"call the os.path.abspath with argument self.file_path , substitute the result for self.file_path ."
lineno comment map = { },lineno_comment_map is an dictionary .
"compare to = [ var . resolve ( context , True ) for var in self .  varlist ]","compare_to is an list with elements generated by calling the var.resolve method with 2 arguments : context and boolean True ,"
exclude . append ( f . name ),append f.name to exclude .
"super ( Command , self ) .   init   ( )",call the method __init__ form the base class of the Command class .
words [ i ] = escape ( word ),"call the function escape with an argument word , substitute the result for i-th element of words ."
"return getattr ( self , shell ) ( )","get shell attribute of the self object , call it and return the result ."
except AttributeError :,if AttributeError exception is caught .
"def join ( value , arg , autoescape = None ) :","define the function join with 3 arguments : value , arg and autoescape set to None ."
self . parsed = parsed,substitute parsed for self.parsed .
if j == - NUM_ :,"if j equals to integer -1 ,"
"super ( AssignmentNode , self ) .   init   ( takes context , args , kwargs )","call the method __init__ from the base class of the class AssignmentNode , with 3 arguments : takes_context , args and kwargs ."
def get form error ( self ) :,"the % ( lookup ) s in % ( date_field ) s. '' , where ' % ( field_name ) s ' is replaced with third element of data_check , ' % ( date_field ) s ' is replaced with fourth element of date_check and ' % ( lookup ) s ' is replaced with result of the function , six.text_type called with second element of date_check as an argument , return the result . define the method get_form_error with an argument self ."
self . pointer = i,substitute i for self.pointer .
"self .   dict   [ "" STR_ "" ] = value",substitute value under the `` _wrapped '' key of the self.__dict__ dictionary .
self . backout . append ( self . pointer ),append self.pointer to self.backout .
pass,do nothing .
"parser . add argument ( STR_ , help = STR_ )","call the method parser.add_option with 2 arguments : string ' -- pythonpath ' and help set to a string ' A directory to add to the Python path , e.g . `` /home/djangoprojects/myproject '' . '"
return host,return host .
force unicode = force text,substitute force_text for force_unicode .
if reason is not None :,"if reason is not None ,"
return context . render context,return context.render_context .
 localtime = pytz . timezone ( settings . TIME ZONE ),"call the method pytz.timezone with an argument settings.TIME_ZONE , substitute the result for _localtime ."
"super ( SortedDict , self ) .   delitem   ( key )","call the method __delitem__ from the base class of the class SortedDict , with an argument key ."
if param not in params and varkw is None :,"substitute first element of the result for param and value . if param is not in params and varkw is None ,"
value = value . astimezone ( timezone ),"call the method value.astimezone with an argument timezone , substitute the result for value ."
"out . write ( blankout ( part , STR_ ) )","call the method blankout with 2 arguments : part and 'S ' , write the result to out ."
import re,import module re .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
cookiedict [ key ] = c . get ( key ) . value,"get the value filed from the return value of the call to the c.key with the argument key , add the value to the cookiedict under the key key ."
"def   init   ( self , cyclevars , variable name = None , silent = False ) :","define the method __init__ with 4 arguments : self , cyclevars , variable_name set to None and silent set to boolean False ."
else :,"if not ,"
if pathext is None :,"if pathext is None ,"
for sql in in dex sql :,"for every sql in index_sql ,"
"return pgettext lazy ( self . message context , value )","call the function pgettext_lazy with an argument self.message_context and value , return the result ."
str number = six . text type ( number ),"call the function six.text_type with an argument number , substitute the result for str_number ."
if data list [ NUM_ ] in self . empty values :,"if first element of data_list is contained in self.empty_values ,"
"raise TemplateSyntaxError ( "" STR_ "" % filter name )","raise an TemplateSyntaxError with an argument string `` Invalid filter : ' % s ' '' , substitute ' % s ' with filter_name ."
"def   init   ( self , func , args , kwargs , url name = None , app name = None , namespaces = None ) :","define the __init__ method with 7 arguments : self , func , args , kwargs , url_name set to None , app_name set to None and namespaces set to None ."
else :,"if not ,"
"def run ( addr , port , wsgi handler , ipv6 = False , threading = False ) :","define the function run with 5 arguments : addr , port , wsgi_handler , ipv6 set to boolean False and threading set to boolean False ."
if not self . allow empty file and not file size :,"if self.allow_empty_file and file_size are both false ,"
as form = True,where ' % s ' is replaced with last element of args . as_form is boolean True
"return debug . technical 500 response ( request , * exc info )","evaluate debug.technical_500_response with request and list of arguments exec_info , return the result ."
return result,return result .
return True,return boolean True .
in put formats = formats . get format lazy ( STR_ ),"call the method formats.get_format_lazy with an argument string 'DATE_INPUT_FORMATS ' , substitute the result for input_formats ."
return msgid,return msgid .
"locks . lock ( fd , locks . LOCK EX )",call the function locks.lock with fd and locks.LOCK_EX as arguments .
error messages [ STR_ ] = error message,error_messages is an empty dictionary . substitute error_message for value under the 'invalid ' key of the error_messages dictionary .
"self .  template response middleware . in sert ( NUM_ , mw instance . process template response )",insert mw_instance.process_template_response at the beginning of self._template_response_middleware .
lbp = bp,substitute bp for lbp .
if self . domain == STR_ :,"use it as an argument for the call to the function os.path.normpath , substitute the result for django_dir . if self.domain equals a string 'djangojs ' ,"
if not value :,"if value is false ,"
from django . utils . module loading import import string,from django.utils.module_loading import import_string into default name space .
supports microseconds = False,supports_microseconds is boolean False .
from email . mime . multipart import MIMEMultipart,from email.mime.multipart import MIMEMultipart into default name space .
"compare = lambda self , a , b : a > b","compare is a lambda function with arguments self , a and b , return value is boolean true if a is greater than b , otherwise is false ."
elif autoescape :,"otherwise if autoescape is true ,"
return sys . modules [ name ] is not None,"if value under the name key of the sys.modules dictionary is not None , return boolean True , otherwise return boolean False ."
if self . file permissions mode is not None :,"if self.file_permissions_mode is not None ,"
if expires < now :,"if expires is lesser than now ,"
if not chunk size :,"if chunk_size is false ,"
for chunk in field stream :,"for every chunk in field_stream ,"
number equal = len ( [ current number for current number in self .  unget history if current number == num bytes ] ),"append current_number to a list for current_number in self._unget_history , if current_number is equal to num_bytes ,"
return get internal wsgi application ( ),"call the function get_internal_wsgi_application , return the result ."
return self . number > NUM_,"if self.number is greater than integer 1 , return boolean True , otherwise return boolean False ."
context . autoescape = old setting,substitute old_setting for context.autoescape .
in ternal use only = False,internal_use_only is boolean False .
if error . code == code :,"if error.code equals code ,"
def xreadlines ( self ) :,third element of the result of the function sys.exc_info . define the method __init__ with an argument self .
etags = [ e . encode ( STR_ ) . decode ( STR_ ) for e in etags ],"for every e in etags call the method e.encode with an argument string 'ascii ' , call the method decode on the result with an argument ,"
return  curried,"unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping , return the result . return _curried ."
"from ctypes import ( sizeof , c ulong , c void p , c int64 , Structure , Union , POINTER , windll , byref )","from ctypes import sizeof , c_ulong , c_void_p , c_int64 , Structure , Union , POINTER , windll and byref into default name space ."
resource string = None,resource_string is None .
def get default timezone name ( ) :,define the function get_default_timezone_name .
if lang code not in  supported and replacement in  supported :,"if lang_code is not contained in _supported and replacement is contained in _supported ,"
if not email message . recipients ( ) :,"call the email_message.recipients method , if it evaluates to false ,"
from django . utils . six . moves import cPickle as pickle,"from django.utils.six.moves import cPickle as pickle , into default namespace ."
class InterBoundaryIter ( six . Iterator ) :,derive the class InterBoundaryIter from the six.Iterator base class .
if key in dict  :,"if key is contained in dict_ ,"
"value = str ( STR_ ) % ( value , self . sep , self . timestamp ( ) )","convert value , self.sep and return value of the function timestamp , concatenate them , substitute the result for value ."
try :,"try ,"
from django . utils . text import normalize newlines,from django.utils.text import normalize_newlines into default name space .
self . field = field,substitute field for self.field .
"from django . template . context import ( BaseContext , Context , RequestContext , ContextPopException )","from django.template.context import BaseContext , Context , RequestContext and ContextPopException into default namespace ."
self . choice label = force text ( choice [ NUM_ ] ),"call the function force_text with second element of choice as an argument , substitute the result for self.choice_label ."
from django . utils . functional import allow lazy,from django.utils.functional import allow_lazy into default name space .
nodelist = [ ],nodelist is an empty list .
if common ancestor is None :,"if common_ancestor is None ,"
top = self . count,substitute self.count for top .
args . append ( parser . compile filter ( value ) ),"call the method parser.compile_filter with an argument value , append the result to args ."
def   copy   ( self ) :,define the method __copy__ with an argument self .
class DatabaseCache ( BaseDatabaseCache ) :,derive DatabaseCache from the BaseDatabaseCache base class .
if ttl is not None :,"if ttl is not None ,"
self . error ( self . cmd . missing args message ),call the method self.error with an argument self.cmd.missing_args_message .
opts = model .  meta,substitute model._meta for opts .
"super ( ChoiceField , self ) . validate ( value )",call the method validate with an argument value from the base class of the class ChoiceField .
raise,raise an exception .
"parser = subcommand cls . create parser ( , cwords [ NUM_ ] )","call the method subcommand_cls.create_parser with 2 argument an empty string an first element of cwords , substitute it for parser ."
else :,"if not ,"
error messages = self . fields [ field ] . error messages,"get the value under the field key of self.fields dictionary , substitute error_messages field of the result for error_messages ."
import copy,import module copy .
if timeout is None :,"if timeout is None ,"
self . open ( ),call the method self.open ( )
self .  assert mutable ( ),call the method self._assert_mutable .
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % token )","raise an TemplateSyntaxError exception with an argument `` Could not find variable at start of % s . `` , replace ' % s ' with token ."
"result .  choices = copy . deepcopy ( self .  choices , memo )","call the method copy.deepcopy with arguments self._choices and memo , substitute the result for result._choices ."
self . name = name,substitute name for self.name .
yield widget,yield widget .
def  get files ( self ) :,define _get_files method with self class instance as the argument .
return None,return None .
"return self . msg % tuple ( force text ( p , errors = STR_ ) for p in self . params )","return self.msg formatted with a tuple , with elements generated from return value of the function force_text with 2 arguments :"
"return mark safe ( formats . number format ( STR_ % ( in t ( d ) ) , NUM_ ) )","call the method formats.number_format with 2 arguments , d converted to a integer and then to string , and integer 0 ,"
elif version [ NUM_ ] ! = STR_ :,"otherwise if fourth element of version does not equals to 'final ' ,"
values = list ( values ),"convert values into a list , substitute it for value ."
"raise UnrecognizedArchiveFormat ( "" STR_ "" )",raise an UnrecognizedArchiveFormat exception with an argument string `` File object not a recognized archive format . `` .
"super ( FileField , self ) .   init   ( * args , ** kwargs )","substitute it for self.allow_empty_file , if not self.allow_empty_file is boolean False . call the method __init__ from the base class of the FileField class , with 2 arguments : unpacked list args and unpacked dictionary ."
"problem fields = [ field for model in apps . get models ( ** kwargs ) if app configs is None or model .  meta . app config in app configs for field in model .  meta . local fields if is in stance ( field , models . BooleanField ) and not field . has default ( ) ]","append field to problem_fields list for every model in apps.get_models with argument kwargs dictionary , only if app_configs is None ,"
while True :,"endless loop ,"
return mark safe ( . join ( force text ( n ) for n in nodelist ) ),"call the function mark_safe with an arguments : for every n in nodelist results of the function force_text called with an argument n , joined in a string , return the result ."
"def widget attrs ( self , widget ) :",define the method widget_attrs with arguments self and widget .
return obj dict,"self.getlist with an argument k , for every k in self . return obj_dict ."
chunk buffer = BytesIO ( chunk ),"evaluate the function BytesIO with argument chunk , substitute it for chunk_buffer ."
"for k , v in self .  iteritems ( ) :","call the method self._iteritems , for every k and v in the result ,"
"def handle file complete ( self , old field name , counters ) :","define the method handle_file_complete with 3 arguments : self , old_field_name and counters ."
"missing args message = "" STR_ """,missing_args_message is an string `` Enter at least one application label . `` .
if STR_ in config :,"if string ' ( ) ' is contained in config ,"
seen = set ( ),seen is an empty set .
if value is None :,"if value is None ,"
pass,do nothing .
return split,return split .
excluded models . add ( model ),add model to excluded_models set .
"elif value in ( False , False , STR_ ) :","otherwise if value is boolean False , string 'False ' or string ' 0 '"
out = b . join ( parts ( ) ),"join result of the parts function into a bytes string , substitute it for out ."
self . blocks [ name ] . append ( block ),append block to the value under the name key of self.blocks dictionary .
i += NUM_,where ' % d ' is replaced with i and ' % s ' is replaced with subject . increment i by one .
token = parser . next token ( ),"call the method parser.next_token , substitute the result for token ."
while True :,"endless loop ,"
return value,return value .
"self . stdout . write ( "" STR_ "" % locale )","replace ' % s ' in string `` processing locale % s\n '' with locale , write it to self.stdout ."
return value,return value .
filemsg =,filemsg is an empty string .
return self . sign + value,"append value to the self.sign , return the result ."
"self . stdout . write ( self . style . MIGRATE LABEL ( "" STR_ "" ) + ( "" STR_ "" . join ( set ( a for a , n in targets ) ) or "" STR_ "" ) )","for every a and n in targets , put a into a set , join all the set elements into a string separated by string ' , ' ,"
if not  installed models :,"if not_installed_models is true ,"
if self . feed [ STR_ ] is not None :,"if value under the 'author_email ' key of the self.feed dictionary is not None ,"
return plural,return plural .
import base64,import module base64 .
sub = STR_ % git changeset,"convert git_changeset to string , append it to the string '.dev ' , replace it for sub ."
for migration in migrations to squash :,"write it to self.stdout . for every migration in migrations_to_squash ,"
kwargs = { STR_ : True },kwargs is a dictionary with boolean True for 'pk_field ' .
import codecs,import module codecs .
"opfunc .   doc   = getattr ( in t , opname ) .   doc  ","get opname attribute from int object , substitute its field __doc__ for opfunc.__doc__ ."
@ python 2 unicode compatible,"decorator python_2_unicode_compatible ,"
except ImportError :,"if ImportError exception is caught ,"
"def do for ( parser , token ) :",define the function do_for with 2 arguments : parser and token .
else :,"if not ,"
if self . verbosity >= NUM_  and sql :,"use the result as the argument for the call to the sql.extend method . if self.verbosity is greater or equal than integer 1 and sql is true ,"
self . timezone = timezone,substitute timezone for self.timezone .
field = self . fields [ fieldname ],substitute the value under the fieldname key of the self.fields dictionary for field .
return self . getlist ( key ),"call the method self.getlist with an argument key , return the result ."
def get script prefix ( ) :,define the function get_script_prefix .
"super ( DebugParser , self ) . extend nodelist ( nodelist , node , token )","call the method extend_nodelist with 3 arguments : nodelist , node and token , from the base class of the class DebugParser ."
if text [ NUM_ ] == STR_ :,"if first element of text equals ' # ' ,"
if self . message context :,"if self.message_context is true ,"
self . filepath = filepath,substitute filepath for self.filepath .
"def  resolve lookup ( self , context ) :",define the method _resolve_lookup with 2 arguments : self and context .
form . save m2m ( ),call the method form.save_m2m .
kwargs [ STR_ ] = error messages,substitute error_messages for value under the `` error_messages ' key of the kwargs dictionary .
if len ( in itial ) ! = len ( data ) :,"if lengths of initial and data are equal ,"
return avoid wrapping ( ugettext ( STR_ ) ),"call the function ugettext with ' 0 minutes ' as argument , use the result as the argument for the call to the avoid_wrapping function , return the result ."
file obj = handler . file complete ( counters [ i ] ),"call the method handler.file_complete with i-th element of counters as an argument , substitute the result for file_obj ."
"if self . use natural foreign keys and hasattr ( field . rel . to , STR_ ) :","if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key ' ,"
except ValueError :,"if ValueError exception is caught ,"
fixture files in dir = [ ],"where ' % s ' is replaced with result of the function humanize , called with an argument fixture_dir . fixture_files_in_dir is an empty list ."
"buffer types = ( bytearray , memoryview )",buffer_types is a tuple with 2 elements bytearray and memoryview .
else :,"if not ,"
return self . paginator . count,return self.paginator.count .
def is  writable ( path ) :,"of if sample starts with codecs.BOM_UTF16_LE or sample starts with codecs.BOM_UTF16_BE , return the evaluated boolean expression . define the function is_writable with path as argument ,"
self . current token = self . next token ( ),"call the method self.next_token , substitute the result for self.current_token ."
"from django . utils . datastructures import MultiValueDict , ImmutableList",from django.utils.datastructures import MultiValueDict and ImmutableList into default name space .
self . style = color style ( ),"call the color_style method , substitute the result for self.style ."
return,return nothing .
else :,"label set to return value of the function _ called with an string 'Order ' , initial set to index incremented by 1 , and required as boolean False . if not ,"
except TypeError :,"if TypeError exception is caught ,"
if not self .  is rendered :,if self._is_rendered is false .
use threading = connection . features . test db allows multiple connections,substitute connection.features.test_db_allows_multiple_connections for use_threading .
self . new method name = new method name,substitute new_method_name for new_method_name .
"with io . open ( fd , STR_ ) as f :","with return value of the function io.open with fname and string 'rb ' as arguments , named as f ,"
"output , hidden fields = [ ] , [ ]",output and hidden_fields are both empty lists .
visible issue count = NUM_,visible_issue_count is an integer 0 .
iterlists =  iterlists,substitute _iterlists for iterlists .
new context = copy ( self ),"call the function copy with an argument self , substitute the result for new_context ."
ret = b . join ( self . vals ),"join elements of self.vals into a bytes string , substitute the result for ret ."
if t . token type == TOKEN BLOCK :,"if t.token_type equals TOKEN_BLOCK ,"
"def item attributes ( self , item ) :",define the method item_attributes with 2 arguments self and item .
"msg = "" STR_ "" % e","msg is a string `` Could not decode base64 data : % r '' , where ' % r ' is replace with e ."
fixture dirs = self . fixture dirs,substitute self.fixture_dirs for fixture_dirs .
commands = { name : STR_ for name in find commands (   path   [ NUM_ ] ) },"commands is an dictionary containing elements : string 'django.core ' for every name in the function find_commands return value , called with first element of __path__ as an argument ."
"if value in ( None , ) :","if vale is None or an empty string ,"
return,"return nothing ,"
sep = len ( hextet [ NUM_ ] . split ( STR_ ) ) + len ( hextet [ NUM_ ] . split ( STR_ ) ),"split first and second element of hextet into parts by ' : ' , sum their lengths , substitute the result for sep ."
return combined,"name appended to string ' _ ' , as the name of the attribute to get from other object , or if the previous doesnt exist , None . return combined ."
def M ( self ) :,define the method M with an argument self .
class SuspiciousOperation ( Exception ) :,derive the class SuspiciousOperation from the Exception base class .
base url += /,append character '/ ' to the base_url .
param = None,param is None .
d = { },d is an empty dictionary .
def   repr   ( self ) :,for every c in self.children . define the method __repr__ with an argument self .
@ content . setter,"content.setter decorator ,"
def get data ( self ) :,define the method get_data with an argument self .
if STR_ not in header names :,"if 'date ' is not in header_names ,"
if self .  changed data is None :,"if self._changed_data is None ,"
"if getattr ( e , STR_ , False ) :","get the 'silent_variable_failure ' attribute of e object , if it exists and is true ,"
if error message is not None :,"if error_message is not None ,"
"return do translate ( message , STR_ )","call the function do_translate with 2 arguments : message and string 'gettext ' , return the result ."
"model , deps = model dependencies . pop ( )","remove first element from model_dependencies , assign it to model and deps , respectively ."
pass,do nothing .
renderer = RadioFieldRenderer,substitute RadioFieldRenderer for renderer .
"for root , dirs , files in sorted ( os . walk ( self . path ) ) :","for root , dirs and files in sorted list of the directory tree starting from the directory self.path ,"
"usage = STR_ % ( subcommand , self . args )","substitute ' % s ' in the string ' % % prog % s [ options ] % s ' with subcommand and self.args , respectively , substitute it for usage ."
SafeUnicode = SafeText,substitute SafeText for SafeUnicode .
"loopvars = re . split ( r STR_ , . join ( bits [ NUM_ : in  index ] ) )","where ' % s ' is replaced with token.contents . call the method re.split with 2 arguments : raw string ' * , * ' and elements of bits from 1 index to in_index index ,"
"if is in stance ( field value , str ) :","if field_value is an instance of the str type ,"
for app config in apps . get app configs ( ) :,"for ever app_config in return value of the method apps.get_app_configs ,"
else :,"if not ,"
self .  update errors ( e ),call the method self._update_errors with an argument e .
"def decompress ( self , value ) :",define the method decompress with 2 arguments : self and value .
if not ext and content type :,"if ext is false and content_type is true ,"
"from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit",from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space .
"def length is ( value , arg ) :",define the function length_is with 2 arguments value and arg .
"for key , value in list ( attrs . items ( ) ) :","for every key and value in list created out of the elements of the result of the call to the method attrs.items ,"
app template dirs . append ( template dir ),append template_dir to app_template_dirs .
re camel case = re . compile ( r STR_ ),"call the function re.compile with an argument raw string ' ( ( ( ? < = [ a-z ] ) [ A-Z ] ) | ( [ A-Z ] ( ? ! [ A-Z ] | $ ) ) ) ' , substitute the result for re_camel_case ."
"self . execute ( * args , ** cmd options )","call the method self.execute , with 2 arguments : unpacked list args and unpacked dictionary cmd_options ."
"raise CommandError ( "" STR_ "" % ( migration name , app label ) )","raise a exception of ComandError class with string `` More than one migration matches ' % s ' in app ' % s ' . Please be more specific . `` ,"
self . end serialization ( ),call the method self.end_serialization .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"return get supported language variant ( lang code , strict = strict )","call the function get_supported_language_variant with 2 arguments : lang_code and strict set to strict , return the result ."
in dexes = { },indexes is an empty dictionary .
"return re . sub ( "" STR_ "" , lambda m : m . group ( NUM_ ) . lower ( ) , t )","result of the m.group method called with an argument integer 0 converted into lowercase and result of the method value.title , substitute the result for t. call the function re.sub with 3 arguments : string `` \d ( [ A-Z ] ) '' , lambda function with an argument m and return value ,"
"saved instances . append ( self . save existing ( form , obj , commit = commit ) )","call the method self.save_existing with 3 arguments : form , obj and commit as commit , append the result to saved_instances ."
self .  encoding = val,substitute val for self._encoding .
if use reloader :,"if use_reloader is true ,"
if hidden fields :,"if hidden_fields is true ,"
return result,return result .
return self . connection,return self.connection .
class EmptyPage ( InvalidPage ) :,derive the class EmptyPage from the InvalidPage base class .
 caches = { },__caches is an empty dictionary .
self . config . configurator = self,substitute self for self.config.configurator .
i = NUM_,i is integer 0 .
line = STR_ % plural form line,"append newline to plural_form_line , substitute the result for line ."
result = self . buffer + self .  read limited ( ),"add self.buffer and self._read_limited method return value together , store it in result ."
PB = NUM_ << NUM_,"move integer 1 left for 50 bits , substitute the result for PB ."
all date checks = all date checks . union ( set ( date checks ) ),all_date_checks is union of all_date_checks set and date_checks set .
if self . data . minute == NUM_  and self . data . hour == NUM_ :,"if self.data.minute equals integer 0 and self.data.hour equals integer 0 ,"
class ConvertingDict ( dict ) :,derive the class ConvertingDict from dict base class .
self . in stance = in stance,substitute instance for self.instance .
"return super ( BaseInlineFormSet , self ) . get unique error message ( unique check )","call the method get_unique_error_message from the base class of the class BaseInlineFormSet , with an argument unique_check , return the result ."
return value . serializable value ( self . to field name ),"call the method value.serializable_value with an argument self.to_field_name , return the result ."
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % ( token [ upto : ] , token ) )","raise an TemplateSyntaxError exception with an argument string `` Could not parse the remainder : ' % s ' from ' % s ' '' ,"
return result,return result .
"return mark safe ( STR_ . join ( [ six . text type ( self . management form ) , forms ] ) )","join return value of the function six.text_type called with an argument self.management_form and forms into a string ,"
self . object list = object list,substitute object_list for self.object_list .
"return type ( form .   name   + str ( STR_ ) , ( formset , ) , attrs )","can_delete for 'can_delete ' , min_num for 'min_num ' , max_num for 'max_num ' , absolute_max for 'absolute_max ' , validate_min for 'validate_min ' for validate_max for 'validate_max ' . create a class class which name is generated by converting 'FormSet ' into a string and appending it to form.__name__ ,"
"elif item [ "" STR_ "" ] :","otherwise if value under the `` author_name '' key of the item dictionary is true ,"
if not cleaned line :,"if cleaned_line is false ,"
for error in self . errors . as data ( ) [ field ] :,"call the method self.errors.as_data , for every error for value under the filed key of the returned dictionary ,"
func = import string ( path ),"call the function import_string with an argument path , substitute the result for func ."
unhandled params . remove ( param ),call the method unhandled_params.remove with an argument param .
obj = field . rel . to .  default manager . db manager ( db ) . get by natural key ( * field value ),"call the method field.rel.to._default_manager.db_manager with db as argument , call the get_by_natural_key method on the result with ,"
def  generator ( ) :,define the function _generator .
"result . append ( Group ( ( ( "" STR_ "" % name ) , name ) ) )","instantiate a class Group with 2 arguments : string `` % % ( % s ) s '' formated with name , and name , append it to result ."
"kwargs . setdefault ( STR_ , super ( IntegerField , self ) . widget )",if 'widget ' key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value .
expires = row [ NUM_ ],substitute third element of row list for expires .
"msg [ STR_ ] = self . extra headers . get ( STR_ , self . from email )","call the method self.extra_headers.get with string 'From ' and self.from_email as arguments , substitute the result for value under the 'From ' key of msg dictionary ."
if len ( bits ) < NUM_ :,"if length of bits is lesser than integer 2 ,"
if match :,"if match is true ,"
m = m + base [ medium ],"sum m and value under the medium key of the base dictionary , substitute it for m ."
self .  cache . flush all ( ),call the method self._cache_flush_all .
"raise CommandError ( "" STR_ "" % app label )","raise CommandError exception with `` App ' % s ' does not have migrations ( you can not selectively sync unmigrated apps ) '' ,"
"if ( getattr ( meta , STR_ , fields ) is None and getattr ( meta , STR_ , exclude ) is None ) :","if 'fields ' attribute of meta is None , or if it doesnt exists if fields is None and if 'exclude ' attribute of meta is None ,"
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
"def pop ( self , name ) :",define the method self and name .
"obj = Node ( children , connector , negated )","obj is an instance of Node class , created with 3 arguments : children , connector and negated ."
statement . append ( cleaned line ),append cleaned_lien to statement .
"return lazy number ( ngettext , str , singular = singular , plural = plural , number = number )","call the function lazy_number with 5 arguments : ngettext , str , singular set to singular , plural set to plural ,"
self . autocomplete ( ),call the method self.autocomplete .
"result . widget = copy . deepcopy ( self . widget , memo )","call the method copy.deepcopy with arguments self.widget and memo , substitute the result for result.widget ."
hour = in t ( m . group ( STR_ ) ),"call the method m.group with an argument string 'hour ' , convert the result into a string , substitute it for hour ."
try :,"try ,"
if connection . in trospection . table name converter ( model .  meta . db table ) in table names :,if return value of the function connection.introspection.table_name_converter called with an arugment : model._meta.db_table is contained in table_names
for domain in domains :,"for every domain in domains ,"
"def call command ( name , * args , ** options ) :","define the function call_command with 3 arguments : name , unpacked list args and unpacked dictionary options ."
url fields = split url ( value ),"call the function split_url with an argument value , substitute the result for url_fields ."
return value,code set to an string 'invalid_choice ' and dictionary params with an entry : value for 'value ' . return value .
"from django . template . base import ( ALLOWED VARIABLE CHARS , BLOCK TAG END , BLOCK TAG START , COMMENT TAG END , COMMENT TAG START , FILTER ARGUMENT SEPARATOR , FILTER SEPARATOR , SINGLE BRACE END , SINGLE BRACE START , TOKEN BLOCK , TOKEN COMMENT , TOKEN TEXT , TOKEN VAR , TRANSLATOR COMMENT MARK , UNKNOWN SOURCE , VARIABLE ATTRIBUTE SEPARATOR , VARIABLE TAG END , VARIABLE TAG START , filter re , tag re )","from django.template.base import ALLOWED_VARIABLE_CHARS , BLOCK_TAG_END , BLOCK_TAG_START , COMMENT_TAG_END , COMMENT_TAG_START ,"
"def add arguments ( self , parser ) :",define the method add_arguments with 2 arguments self and parser .
return obj pk,"with field_value as an argument , substitute the result for obj_pk . return obj_pk ."
"self . stdout . write ( STR_ % ( filename , dirpath ) )","replace ' % s ' in string 'ignoring file % s in % s\n ' with filename and dirpath , write it to self.stdout ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ , params = { STR_ : choice } , )","raise an ValidationError with 3 arguments : value under the 'invalid_choice ' key of the self.error_messages dictionary ,"
return False,return boolean False .
if accept lang == * :,"if accept_lang equals '* ' ,"
"output . in sert ( NUM_ , error row % force text ( top errors ) )","call the function force_text with an argument top_errors , format error_row with it , insert it at the beginning of output ."
continue,skip this loop iteration .
"raise TypeError ( "" STR_ "" )","unpacked list args and unpacked dictionary kw , return the result . raise an TypeError exception with an argument sting `` Lazy object returned unexpected type . `` ."
break,break the loop execution .
"value = value . replace ( b STR_ \ \ STR_ \ \ "" STR_ ""  )
","replace all the occurrences of '\\\\ ' in string value with '\\ ' and all occurrences of '\\ '' ' for ' '' ' , substitute the result for value ."
file name = self . IE sanitize ( unescape entities ( file name ) ),"substitute the result for file_name . call the function unescape_entities with an argument file_name , use the result as an argument for the call to the self.IE_sanitize ,"
"match =  html parser . endendtag . search ( rawdata , i + NUM_ )","throw an exception with string `` unexpected call to parse_endtag '' as the message . search anywhere in the rawdata string starting from the ( i+1 ) -th element for the _html_parser.endendeag , replace the result for match ."
factor -= NUM_,decrement factor by one .
locale = options . get ( STR_ ),"get the value under the key 'locale ' of the options dictionary , substitute it for locale ."
@ deconstructible,"return value of the call to the function _ with an argument string 'Enter only digits separated by commas . ' and string 'invalid ' . decorator deconstructible ,"
"self . add item elements ( handler , item )",called with an argument item . call the method self.add_item_elements with 2 arguments : handler and item .
connection = connections [ options [ STR_ ] ],"get the value under the key 'database ' of the options dictionary , use it as a index to get an element from connections , substitute it for connection ."
if not chunk [ : - rollback ] :,"slice chunk list to get the last rollback elements , if the new list is not empty ,"
class Context ( BaseContext ) :,derive the class Context from the BaseContext base class .
"self . model = getattr ( options , STR_ , None )","get 'model ' attribute from the options object , if it exists substitute it for self.model , if not self.model is None ."
return self .   name,return self.__name .
finder = sys . path importer cache [ entry ],substitute the value under the entry key of the sys.path_importer_cache dictionary for finder .
  getattr   = new method proxy ( getattr ),"call the function new_method_proxy with an argument getattr , substitute the result for __getattr__ ."
"def nud ( self , parser ) :",define the method nud with 2 arguments : self and parser .
extra classes = set ( extra classes or [ ] ),"if extra_classes is not empty put its elements into a set , substitute it for extra_classes , if not extra_classes is an empty set ."
yield key,yield key .
"error = sys . modules [   name   + "" STR_ "" ]","append string `` .moves.urllib_error '' to __name__ , use it as an key to get the value from the sys.modules dictionary , substitute it for error ."
if self .  options :,"if self._options exists ,"
class ImageFile ( File ) :,derive class ImageFile from the base class File .
app config = apps . get app config ( exclude ),"call the method apps.get_app_config with an argument exclude , substitute the result for app_config ."
return settings . TEMPLATE STRING IF INVALID % self . var,"format settings.TEMPLATE_STRING_IF_INVALID with self.var , return the result ."
if len ( parts ) > NUM_ :,if length of parts is greater than integer 1 .
"def   mod   ( self , rhs ) :",define the method __mod__ with 2 arguments : self and rhs .
break,break the loop execution .
finally :,"finally ,"
"return "" """,return an empty string .
"return ( RAW , { } , stream )","return tuple containing 3 elements : RAW , an empty dictionary and stream ."
"def eval ( self , context ) :",define the method eval with 2 arguments : self and context .
self . variable name = variable name,substitute variable_name for self.variable_name .
"except ( ValueError , OverflowError , InvalidOperation ) :","if ValueError , OverflowError or InvalidOperation exceptions are caught ,"
activate ( self . language ),call the function activate with an argument self.language .
"strerror = force text ( e . strerror , DEFAULT LOCALE ENCODING , strings only = True )","call the force_text function with 3 arguments : e.strerror , DEFAULT_LOCALE_ENCODING and strings_only set to boolean True ."
"app name , target = options . pop ( STR_ ) , options . pop ( STR_ )","remove values under the keys 'name ' and 'directory ' of the options dictionary and substitute it for app_name and target , respectively ."
pass,do nothing .
def getvalue ( self ) :,define the method getvalue with an argument self .
if self . count == NUM_  and not self . allow empty first page :,"if self.count equals a integer 0 and self.allow_empty_first_page is false ,"
else :,"if not ,"
from django . forms . formsets import *,from django.forms.formsets import everything into default name space .
self . activated = True,self.activated is boolean True .
if self . asvar is None :,"if self.asvar is None ,"
"lexer = lexer class ( template string , or igin )","call the method lexer_class with an arguments template_string and origin , substitute the result for lexer ."
if bits [ NUM_ ] ! = and :,"if first element of bits is not equal to string 'and ' ,"
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute it for key ."
stamp =  time . mktime ( tt ),"ingeter 0 and integer 0. call the method _time.mktime with an argument tt , substitute the result for stamp ."
if dec part :,"append the resulting string to dec_part , substitute it for dec_part . if dec_part is true ,"
view = viewname,substitute viewname for view .
def   str   ( self ) :,define the method __str__ with argument self .
"def unclosed block tag ( self , parse until ) :",define the method unclosed_block_tag with 2 arguments : self and parse_until .
from django . utils import six,from django.utils import six into default name space .
if processors is None :,"if processors is None ,"
words [ i ] = mark safe ( word ),"call the function mark_safe with an argument word , substitute the result for i-th element of words ."
"result = user function ( * args , ** kwds )","call the function user_function with 2 arguments : unpacked list args and unpacked dictionary kwds , substitute the result for result ."
"def   init   ( self , attrs = None , date format = None , time format = None ) :","define the method __init__ with 4 arguments : self , attrs set to None , date_format set to None and time_format set to None ."
if node . hasAttribute ( STR_ ) :,"call the method node.hasAttribute with string 'pk ' as an argument , if it evaluates to true ,"
"def unsign ( self , signed value ) :",define the method unsign with arguments self and signed_value .
if new name in used column names :,"if new_name is contained in used_column_names ,"
cache suffix = STR_,cache_suffix is a string '.djcache ' .
self .  cache . delete ( key ),call the method self._cache.delete with argument key .
cached loaders . append ( find template loader ( loader ) ),"call the function find_template_loader with an argument loader , append the result to cached_loaders ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ , params = { STR_ : value } , )","raise an ValidationError with 3 arguments : value under the 'invalid_choice ' key of the self.error_messages dictionary ,"
bad app labels . add ( app label ),"call the method bad_app_labels with an argument app_label ,"
"while i < len ( subject ) and subject [ i ] in ( , STR_ ) :",while i is lesser than length of subject and i-th element of subject is an empty space or tab character .
try :,"try ,"
chunk = base64 . b64decode ( chunk ),"call the method base64.b64decode with an argument chunk , substitute the result for chunk ."
dec part = decimal sep + dec part,"add decimal_sep and dec_part , substitute the result for dec_part ."
try :,"try ,"
for attr in self . child nodelists :,"for every attr in self.child_nodelists ,"
"def   call   ( self , environ , start response ) :","define private method __call__ with self class instance , environ and start_response as the arguments ."
else :,"and result of the function force_bytes called with an argument val2 , return the result . if not ,"
"def   init   ( self , obj , * args ) :","define the private method __init__ , with self instance of this class , obj and list of arbitrary length *args as arguments ."
"self . stdout . write ( self . style . NOTICE ( "" STR_ "" ) )",call the method self.style.NOTICE with an argument :
from django . utils . six . moves . urllib . request import urlretrieve,from django.utils.six.moves.urllib.request import urlretrieve into default name space .
from django . utils import six,from django.utils import six into default name space .
"def   deepcopy   ( self , memo ) :",define the method __deepcopy__ with arguments self and memo .
return self . name,return self.name .
return,return nothing .
"def IE sanitize ( self , filename ) :",define the method IE_sanitize with arguments self and filename .
from django . core . handlers . wsgi import WSGIHandler,from django.core.handlers.wsgi import WSGIHandler into default name space .
DARK PALETTE = STR_,DARK_PALETTE is a string 'dark ' .
pos inf = NUM_ * NUM_,"multiply 10 to the power of 200 , with itself , substitute the result for pos_inf ."
"i = next space index ( subject , i )","call the function next_space_index with 2 arguments : subject and i , substitute the result for i ."
else :,"if not ,"
self . validate unique ( ),call the method self.validate_unique .
"error msg = "" STR_ "" % tried","err_msg is a string `` Tried % s '' , where ' % s ' is replaced with tried ."
"self . xml . addQuickElement ( "" STR_ "" , attrs = { STR_ : smart text ( value .  get pk val ( ) ) } )",call the self.xml.addQuickElement method with 2 arguments : string 'object ' and attr dictionary containing 1 entry :
def   repr   ( self ) :,define the method __repr__ with an argument self .
daemonize = True,daemonize is boolean True .
return False,return boolean False .
from collections import defaultdict,from collections import defaultdict into default name space .
class MIMEMixin ( ) :,derive the class MIMEMixin .
"if not getattr ( f , STR_ , False ) :","get 'editable ' attribute from object f , if it doesnt exists or its true ,"
import itertools,import module itertools .
return  trans . to locale ( language ),"call the function _trans.to_locale with an argument language , return the result ."
sentinal = bit [ NUM_ ] + STR_,"append ' ) ' to third element of bit , substitute it for sentinal ."
return self .   bytes cast ( ),"call the method self.__bytes_cast , return the result ."
"elif is in stance ( message , list ) :",otherwise if message is an instance of the list type .
quote = s [ NUM_ ],substitute first element of s for quote .
def messages ( self ) :,define the messages with an argument self .
"return self .  truncate html ( length , truncate , text , truncate len , False )","call the function self._truncate_html with 5 arguments : length , truncate , text , truncate_len and boolean False , return the result ."
prec = abs ( p ) + units + NUM_,"sum absolute p with units an integer 1 , substitute the result for prec ."
return ( ret == NUM_ ),"if ret equals to integer 0 , return boolean True , otherwise return boolean False ."
if STR_ in addr :,"if character ' @ ' is contained in addr ,"
"super ( BaseModelFormSet , self ) .   init   ( ** defaults )","call the method __init__ from the base class of the class BaseModelFormSet , with an argument unpacked dictionary defaults ."
from django . core . exceptions import ValidationError,from django.core.exceptions import ValidationError into default name space .
return final output,return final_output .
"raise ValidationError ( ungettext ( "" STR_ "" , "" STR_ "" , self . min num ) % self . min num , code = STR_ )","is smaller than self.min_num , raise an ValidationError with 2 arguments : return value of the function ungettext with 3 arguments :"
from django . utils . datastructures import MultiValueDict,from django.utils.datastructures import MultiValueDict into default name space .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
tag = match . group ( NUM_ ) . strip ( ),"find the first subgroup of the matched string from the match object , strip the whitespaces from the begging and end , replace it for tag ."
from django . utils import six,from django.utils import six into default name space .
del bits [ : NUM_ ],delete first element of bits .
try :,"try ,"
raise CommandError ( message ),raise an CommandError exception with an argument message .
class ZipArchive ( BaseArchive ) :,derive the class ZipArchive from the BaseArchive base class .
import django,import module django .
 active . value = pytz . timezone ( timezone ),"call the method pytz.timezone with an argument timezone , substitute the result for _active.value ."
self . in stance = opts . model ( ),"call the method opts.model , substitute the result for self.instance ."
return s . getvalue ( ),"call the method s.getvalue , return the result ."
sio = BytesIO ( self . buffer ),"call the function BytesIO with self.buffer as argument , store the result is sio ."
"raise NoReverseMatch ( "" STR_ "" % key )","raise an NoReverseMatch exception with an argument string `` % s is not a registered namespace '' , with ' % s ' replaced with key ."
continue,skip this loop iteration .
"def to python ( self , value ) :",define the method to_python with arguments self and value .
now = timezone . now ( ),"call the timezone.now function , substitute the result for now ."
"return self . mapping . get ( self . tagtype , )","call the method self.mapping.get with 2 arguments : self.tagtype and an empty list , return the result ."
app . start ( ),call the method app.start .
from django . utils . deprecation import RemovedInNextVersionWarning,from django.utils.deprecation import RemovedInNextVersionWarning into default name space .
try :,"try ,"
if m is not None and n is not None :,"if m and n are not None ,"
raise MultiPartParserError ( STR_ % content type ),"raise an MultiPartParserError with an argument string 'Invalid Content-Type : % s ' , where ' % s ' is replaced with content_type ."
media = property (  get media ),"media is a property object of the current class , with _get_media as getter function ."
def  iterkeys ( self ) :,define the method _iterkeys with an argument self .
return Context ( context ),"return an instance of Context class , created with an argument context ."
"filelist = [ os . path . join ( self .  dir , fname ) for fname in glob . glob1 ( self .  dir , STR_ % self . cache suffix ) ]","for every fname in return value of the glob.glob1 function called with 2 arguments : self._dir and ,"
"for key , value list in other dict . lists ( ) :","call the method other_dict.lists , for every key and value_list in result ,"
list length = len ( list  ),substitute length of list_ for list_length .
"return super ( FileField , self ) . clean ( data )","call the method clean with an argument data from the base class of the class FileField , return the result ."
"kwarg = token kwargs ( [ bit ] , parser )",call the function
self . META [ STR_ ] = script name,assign script_name to the value under the 'SCRIP_NAME ' key of the self.META dictionary .
"boolean attrs . append ( ( attr , ) )",append tuple containing element attr to boolean_attrs .
filter func = parser . find filter ( filter name ),"call the method parser.find_filter with an argument filter_name , substitute the result for filter_func ."
"super ( NullBooleanSelect , self ) .   init   ( attrs , choices )","called with an argument string 'Unknown ' , tuple with 2 elements : string ' 2 ' and return value of the function ugettext_lazy , called with an argument string 'Yes ' and tuple with 2 elements : string ' 3 ' and return value of the function ugettext_lazy , called with an argument string 'No ' . call the method __init__ from the base class of the class NullBooleanSelect , with arguments attrs and choices ."
"def filter function ( self , func , ** flags ) :","where ' % r ' is replaced with name and filter_func , respectively . define the method filter_function with 3 arguments : self , func and unpacked dictionary flags ."
def to language ( self ) :,define the method to_language with an argument self .
"if is in stance ( field , models . TimeField ) and getattr ( obj , field . name ) is not None :","if field is an instance of models.TimeField and filed.name attribute of obj is not None ,"
exc value .   cause   = exc,substitute the result for exc_value . substitute exc for exc_value.__cause__ .
from django . utils . six . moves . urllib . parse import urljoin,from django.utils.six.moves.urllib.parse import urljoin into default name space .
import datetime,import module datetime .
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'title ' and value under the 'title ' key of the self.feed dictionary .
"return mark safe ( func ( * args , ** kwargs ) )","call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs ,"
app models = app config . get models ( in clude auto created = True ),"`` because you have n't properly specified the ENGINE setting for the database.\n see : https : //docs.djangoproject.com/en/dev/ref/settings/ # databases '' . call the method app_config.get_models with an argument include_auto_created set to boolean True , substitute it for app_models ."
"raise CommandError ( "" STR_ "" % ( self . file , errors ) )","raise an CommandError exception with an argument string `` errors happened while running xgettext on % s\n % s '' ,"
"def   init   ( self , content = b , * args , ** kwargs ) :","define the method __init__ with 4 arguments : self , content set to an empty list , unpacked list args and unpacked dictionary kwargs ."
"self .  headers [ header . lower ( ) ] = ( header , value )",substitute the result for value . substitute tuple containing 2 elements : header and value for the value under the header converted to lowercase key of the self._headers dictionary .
"def css classes ( self , extra classes = None ) :",define the method css_classes with 2 arguments : self and extra_classes set to None .
if sys . platform . startswith ( STR_ ) :,"if sys.platform starts with a string 'java ' ,"
if fp is None :,"if fp is None ,"
return self . s,return self.s .
try :,"try ,"
"self . stdout . write ( "" STR_ "" % ( self . loaded object count , self . fixture object count , self . fixture count ) )","call the method self.stdout.write with an argument string `` Installed % d object ( s ) ( of % d ) from % d fixture ( s ) '' ,"
stream . unget ( chunk ),call the method stream.unget with an argument chunk .
for p in plist :,"for every p in plist ,"
if args and kwargs :,"if args and kwargs are both true ,"
"result = handler . handle raw input ( self .  input data , self .  meta , self .  content length , self .  boundary , encoding )","call the method handler.handle_raw_input with 5 arguments : self._input_data , self._meta , self._content_length , self._boundary ,"
self . connection = None,self.connection is None .
import re,import re module .
"from django . core . cache . backends . base import BaseCache , DEFAULT TIMEOUT",from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space .
template = self . resolve template ( self . template name ),"call the method self.resolve_template with an argument self.template_name , substitute the result for template ."
else :,"if not ,"
"def  check middleware classes ( app configs = None , ** kwargs ) :",define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments .
result = ugettext ( msg with ctxt ),"call the function ugettext with an argument msg_with_ctxt , substitute the result for result ."
self .  validate unique = True,self._validate_unique is boolean True .
"help = "" STR_ """,help is an string `` Introspects the database tables in the given database and outputs a Django model module . `` .
self . literal = in t ( self . literal ),"convert self.literal into an integer , substitute it for self.literal ."
"result . append ( Group ( ( ( "" STR_ "" % param ) , None ) ) )","instantiate a class Group with 2 arguments : string `` % % ( % s ) s '' formated with param , and None , append it to result ."
for item in values :,"for every item in values ,"
return [ ],return an empty list .
class RemovedInDjango20Warning ( PendingDeprecationWarning ) :,derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class .
else :,"if not ,"
if connection . ops . start transaction sql ( ) :,"from the connections list , substitute it for connection . call the method connection.ops.start_transaction_sql , if it evaluates to true ,"
"t = select template ( template name , dirs )","call the function select_template with 2 arguments : template_name , dirs , substitute the result for t ."
root = [ ],root is an empty list .
if self . directory permissions mode is not None :,"if self.directory_permissions_mode is not None ,"
try :,"try ,"
if last bit :,"if last_bit is true ,"
if version is None :,"if version is None ,"
"def unget ( self , bytes ) :",define the method unget with arguments self and bytes .
import copy,import module copy .
del self [ key ],delete self entry under the key key .
 format cache [ cache key ] = val,substitute val for the value under the cache_key key of the _format_cache dictionary .
return b STR_ . join ( headers ),"and string 'ascii ' and call the function to_bytes with 2 arguments : value and string 'latin-1 ' , join the previous 2 results into a string , separated by ' : ' , append it to a list , substitute the resulting list for headers . join headers into a string , separated by string '\r\n ' ."
return . join ( pieces ),"join elements of pieces into a string , return it ."
view name = callback .   class   .   name   + STR_,"get the name of the type of the callback , append the string '.__call__ ' to it , substitute it for view_name ."
else :,"if not ,"
def get templatetags modules ( ) :,define the function get_templatetags_modules .
if in dexes [ column name ] [ STR_ ] :,"if value under the 'primary_key ' key of the dictionary contained under the column_name key of the dictionary indexes is true ,"
value = signing . get cookie signer ( salt = key + salt ) . sign ( value ),"call the method signing.get_cookie_signer with an argument salt set to sum of key and salt ,"
"curs . execute ( "" STR_ "" . join ( full statement ) )","join full_statement into a string , separated by newlines , use it as an argument for the call to the method curs.execute ."
if urlconf is None :,"if urlconf is None ,"
return False,return boolean False .
return field . rel . to .  default manager . db manager ( db ) . get by natural key ( * value ) . pk,"call the method field.rel.to._default_manager.db_manager with an argument db on the return value call the method get_by_natural_key ,"
"template dir = os . path . join ( app config . path , STR_ )","join app_config.path and string 'templates ' into file path , substitute it for template_dir ."
klass . prefix = STR_ + find indentation ( node ),"call the method find_indentation with an argument node , append the result to newline , substitute the result for klass.prefix ."
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
if field node . getElementsByTagName ( None ) :,"call the method field_node.getElementsByTagName with an argument string 'None ' , if it evaluates to true ,"
"raise ValueError ( "" STR_ "" % value )",raise an ValueError exception with an argument string `` Unable to convert % r '' formated with value .
def cache clear ( ) :,"value under the MISSES key of the stats dictionary , maxsize and length of cache . define the function cache_clear ."
"def compile filter error ( self , token , e ) :","where ' % s ' is replaced with parse_until elements joined into a string , separated with ' , ' . define the method compile_filter_error with 3 arguments : self , token and e ."
def deleted forms ( self ) :,define the method deleted_forms with an argument self .
end = s . find ( b STR_ ),"call the method s.find with an argument bytes string ' ; ' , substitute the result for end ."
command . stdout . write ( errors ),call the method command.stdout.write with an argument errors .
"def wrap ( text , width ) :",define the function wrap with 2 arguments text and width .
else :,"if not ,"
"raise AppRegistryNotReady ( "" STR_ "" "" STR_ "" "" STR_ "" )",rais an AppRegistryNotReady exception with an argument string `` The translation infrastructure can not be initialized before the ``
form .  meta . fields . append ( self . fk . name ),append self.fk.name to form._meta.fields .
"return self .  cache . decr ( key , - delta )","evaluate the method self._cache.decr with key and negative delta as arguments , return the result ."
if is  compressed :,"if is_compressed is true ,"
import importlib,import module importlib .
connection = connections [ db ],substitute connections element at the index of the value db for connections .
"def rjust ( value , arg ) :",define the function rjust with 2 arguments value and arg .
self . can write . release ( ),call the method self.can_write.release .
"for i , arg in enumerate ( args ) :","for every i and arg in enumerated iterable args ,"
except StopUpload as e :,"if StopUpload , renamed to e , exception is caught ,"
if buffer  is not None :,"if buffer_ is not None ,"
def  get size from underlying file ( self ) :,define the method _get_size_from_underlying_file with argument self .
"raise BadHeaderError ( "" STR_ "" % value )","raise an BadHeaderError exception with an argument string `` Header values ca n't contain newlines ( got % r ) '' , where ' % r ' is replaced with value ."
pass,do nothing .
if value is True :,"if value is boolean True ,"
regex match = language code prefix re . match ( path ),"call the function language_code_prefix_re.match with an argument path , substitute it for regex_match ."
if data :,"if data is true ,"
return self . choice value in self . value,"if self.choice_value is contained in self.value return boolean True , otherwise return boolean False ."
Field . creation counter += NUM_,increment Field.creation_counter by one .
"if self . options . get ( "" STR_ "" ) :","if value under the 'indent ' key of the self.options dictionary is true ,"
models = STR_,models is a string 'models '
seen models = connection . in trospection . in stalled models ( tables ),"call the connection.introspection.table_names with tables as argument , store the result in seen_models ."
collect . extend ( settings . TEMPLATE CONTEXT PROCESSORS ),extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS .
"def   init   ( self , text , subtype , charset ) :","define the __init__ method with arguments : self , text , subtype and charset ."
name = self . split leading dir ( name ) [ NUM_ ],"call the method self.split_leading_dir with an argument name , substitute the first element of result for name ."
"httpd cls = type ( str ( STR_ ) , ( socketserver . ThreadingMixIn , WSGIServer ) , { } )","call the function type with 3 arguments : string 'WSGIServer ' , tuple containing 2 elements : socketserver.ThreadingMixIn and WSGIServer ,"
"self .  current [ field . name ] = str ( getattr ( obj , field . name ) )","get field.name attribute of obj , convert it to a string , substitute it for the value under the filed.name key of self._current dictionary ."
"key = make key ( args , kwds , typed ) if kwds or typed else args","if kwds is true or typed is true , call the function make_key with 3 arguments : args , kwds and typed , substitute the result for key ,"
from django . core . mail . utils import DNS NAME,from django.core.mail.utils import DNS_NAME into default name space .
@ deconstructible,"decorator deconstructible ,"
"def handle ( self , * args , ** options ) :","define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options ."
"cursor . execute ( "" STR_ "" "" STR_ "" % table , [ key , connections [ db ] . ops . value to db datetime ( now ) ] )","call the method cursor.execute with string `` SELECT cache_key FROM % s WHERE cache_key = % % s and expires > % % s '' as argument ,"
self . template string = template string,substitute template_string for self.template_string .
try :,"try ,"
"def add arguments ( self , parser ) :",def method add_arguments with self class instance and parser as the arguments .
hextets += [ ],append an empty string to list hextets .
if params . get ( STR_ ) :,"get the value under the 'filename ' key of the params dictionary , if it is true ,"
data = bool ( data ),convert data into boolean and substitute it for data .
else :,"if not ,"
class SuspiciousMultipartForm ( SuspiciousOperation ) :,derive the class SuspiciousMultipartForm from the SuspiciousOperation base class .
categories = [ ( c ) for c in categories ],"categories is a list containing the results of the function to_unicode , called with an argument c , for every c in categories ."
cache timeout = settings . CACHE MIDDLEWARE SECONDS,substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout .
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
data = data ( ),"call the method data , substitute the result for data ."
args = token . split contents ( ),"call the method token.split_contents , substitute the result for args ."
if server port ! = ( STR_ if self . is  secure ( ) else STR_ ) :,"if return value of the self.is_secure method is true and server_port is not equal to string '443 ' ,"
"self . coerce = kwargs . pop ( STR_ , lambda val : val )","if 'coerce ' key of the kwargs dictionary exists remove it and substitute its value for self.coerce ,"
if params [ NUM_ ] == STR_ :,"if first element of params equals a string 'context ' ,"
"plan = [ ( executor . loader . graph . nodes [ targets [ NUM_ ] ] , options [ STR_ ] ) ]","get executor.loader.graph.nodes list item at the index of the first element of targets list , get the value under the 'backwards ' key of options dictionary , put previous two elements is a tuple , tuple is contained in a plan list ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"def add root elements ( self , handler ) :",define the method add_root_elements with 2 arguments self and handler .
"if not hasattr ( self , STR_ ) :",if self does not has an '_post ' attribute .
return,return nothing .
"if ( is in stance ( data , ( datetime . datetime , datetime . time ) ) and not getattr ( self . field . widget , STR_ , True ) ) :","if data is an instance of datetime.datetime or datetime.time classes , and supports_microseconds field of self.field.widget is false ,"
except KeyboardInterrupt :,"if KeyboardInterrupt exception is caught ,"
except VariableDoesNotExist :,"if VariableDoesNotExist exception is caught ,"
except IndexError :,"if IndexError exception is caugh ,"
def  get num pages ( self ) :,define the method _get_num_pages with an argument self .
del self .  expire info [ key ],delete the value under key key of self._expire_info .
self . sysid = sysid,substitute sysid for self.sysid .
"def readline ( self , size = None ) :",define method readline with self class instance and size set to None .
"except ( ValueError , TypeError ) :","if ValueError or TypeError exceptions are caught ,"
yield STR_,yield string 'year ' as an return value of the generator .
form . save m2m = save m2m,substitute save_m2m for form.save_m2m .
try :,"try ,"
except TypeError :,"if TypeError exception is caught ,"
continue,skip this loop execution .
conflicts = executor . loader . detect conflicts ( ),"call the executor.loader.detect_conflicts , substitute the result fr conflicts ."
def reader ( self ) :,define the method reader with an argument self .
ext = mimetypes . guess extension ( content type ),"call the method mimetypes.guess_extension with an argument content_type , substitute result for ext ."
if sizeof ( c ulong ) ! = sizeof ( c void p ) :,"if size of c_ulong does not equals to size of c_void_p ,"
if lookup == STR_ :,"and value under the unique_for key of form.cleaned_data dictionary is not None , if lookup equals a string 'date ' ,"
return plural suffix,return plural_suffix .
"def has key ( self , key , version = None ) :","substitute the ' % s ' with table and list containing key , respectively . define the method has_key with self class instance , key and version defaulting to None as arguments ."
app = model .  meta . app label,substitute model._meta.app_label for app .
def deactivate all ( ) :,define the function deactivate_all .
else :,"if not ,"
class Command ( AppCommand ) :,derive the class Command from the AppCommand base class .
if register to :,"if register_to is true ,"
return mark safe ( STR_ . join ( output ) ),"join elements of output into a string , separated by newline characters , use it as the argument for the call the function mark_safe ,"
"return field . widget . value from datadict ( self . data , self . files , prefix )","return the result of the method field.widget.value_from_datadict called with 3 arguments : self.data , self.files and prefix ."
from django . apps import apps,from django.apps import apps into default name space .
other dict = args [ NUM_ ],substitute first args for other_dict .
dot re = re . compile ( r STR_ ),"call the function re.compile with an argument raw string '\S ' , substitute it for dot_re ."
@ register . filter ( is  safe = True ),"and html set to boolean True , return the result . decorator function register.filter with an argument is_safe set to boolean True ."
if self .  read started :,"if self._read_started is true ,"
content type = content type . strip ( ),"if not , content_type is an empty string and content_type_extra is an empty dictionary . strip the content_type of the whitespaces , substitute it for content_type ."
global template source loaders,use global variable template_source_loaders .
"def   exit   ( self , exc type , exc value , traceback ) :","define the method __exit__ with 4 arguments self , exc_type , exc_value and traceback ."
"return "" """,return an empty string .
"def write ( self , outfile , encoding ) :","define the method write with 3 arguments : self , outfile and encoding ."
"cursor . execute ( "" STR_ "" % table , [ connections [ db ] . ops . value to db datetime ( now ) ] )","call the method cursor.execute with string `` DELETE FROM % s WHERE expires < % % s '' as argument ,"
"if is in stance ( context , Context ) :","if context is an instance of Context ,"
"def setdefault ( self , key , default = None ) :","define the method setdefault with 3 arguments : self , key and default set to None ."
if key prefix is None :,"if key_prefix is None ,"
if size :,"if size is not empty ,"
"return ( NUM_ , k [ NUM_ ] )",return a tuple with 2 elements : integer 0 and second element of k .
self . msg = msg,substitute msg for self.msg .
daemon kwargs = { },daemon_kwargs is an empty dictionary .
"out . write ( STR_ % ( message context , join tokens ( singular , trimmed ) ) )","substitute ' % r ' in string ' pgettext ( % r , % r ) ' with message_context and result of the function join_tokens ,"
"def add arguments ( self , parser ) :",define the method add_arguments with 2 arguments self and parser .
fixture name = os . path . basename ( fixture name ),"call the method os.path.basename with an argument fixture_name , substitute the result for fixture_name ."
self . buffer = sio . read ( ),"call the sio.read method , substitute the result for self.buffer ."
return in itial,return initial .
"def render options ( self , choices , selected choices ) :","result of the function force_text with an argument option_label , return the result . define the method render_options with 3 arguments : self , choices and selected_choices ."
self . connector = connector or self . default,"if connector is true , substitute it for self.connector , otherwise substitute self.default for self.connector ."
except :,"is exception is caught ,"
"def ngettext ( singular , plural , number ) :","define the function ngettext with 3 arguments : singular , plural and number ."
if not os . path . is dir ( basedir ) :,"substitute it for basedir . if basedir is not a directory ,"
exhaust ( field stream ),call the function exhaust with an argument field_stream .
code = STR_,"string 'Ensure this value has at most % ( limit_value ) d characters ( it has % ( show_value ) d ) . ' and string 'limit_value ' , substitute the result for message . code is a string 'max_length '"
number = self . validate number ( number ),"call the method self.validate_number with an argument number , substitute it for number ."
def o ( self ) :,define the method o with an argument self .
self . stdout . flush ( ),flush the output buffer of the self.stdout object .
for model in model list :,"for model in model_list ,"
return http . parse cookie ( raw cookie ),"evaluate the function http.parse_cookie with raw_cookie as an argument , return the result ."
ERROR = NUM_,ERROR is integer 40 .
if not ( self . data or self . files ) :,"if self.data and self.files are both False ,"
"return  curried func ( * ( args + moreargs ) , ** dict ( kwargs , ** morekwargs ) )","call the function _curried_func with 2 arguments : list moreargs appended to args and unpacked ,"
m = base,substitute base for m .
"super set = super ( SortedDict , self ) .   setitem  ",substitute __setitem__ filed of the base class of the class SortedDict for super_set .
attrs . update ( extra attrs ),update attrs dictionary with extra_attrs entry .
return STR_ % self,"return the string 'ValidationError ( % s ) ' , replace ' % s ' with self ."
words = words [ : length ],substitute first length elements of words for words .
if value is None :,"if value is None ,"
if value in self . empty values :,"if value is contained in self.empty_values ,"
@ register . tag,"register.tag decorator ,"
"return Media ( ** { str ( name ) : getattr ( self , STR_ + name ) } )","return an instance of the class Media , called with an unpacked dictionary with an entry : name appended to string ' _ ' ,"
self . stdout . write ( errors ),write errors to self.stdout .
"return fastcgi help ( "" STR_ "" "" STR_ "" )","call the fastcgi_help function with an argument string `` ERROR : Invalid option for daemonize parameter . `` , return it ."
def   hash   ( self ) :,define the method __hash__ with an argument self .
"if not allow overwrite and os . access ( new file name , os . F OK ) :","if allow_overwrite is boolean False and call to the os.access function with arguments new_file_name and os.F_OK evaluates to boolean True ,"
 active . value = timezone,substitute timezone for _active.value .
"if options . get ( "" STR_ "" , False ) :","get the value under the 'list ' key of options dictionary , if key doesnt exist return False , if the return value is True ,"
return base64 . urlsafe b64encode ( s ) . strip ( b = ),"call the method base64.urlsafe_b64encode with an argument s , on the result call the strip function with '= ' as the argument , return the result ."
def   getinitargs   ( self ) :,define the method __getinitargs__ with an argument self .
base = base [ : - NUM_ ],substitute last four elements of base for base .
"def value from datadict ( self , data , files , name ) :","define the method value_from_datadict with 2 arguments : self , data , files and name ."
"def utcoffset ( self , dt ) :",define the method utcoffset with 2 arguments self and dt .
readinto = property ( lambda self : self . file . readinto ),"define lambda function that returns self.file.readinto field , use it as an argument for property function , put the result in readinto ."
class HttpResponseRedirect ( HttpResponseRedirectBase ) :,derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class .
if not priority :,"if priority is false ,"
"if not hasattr ( self , STR_ ) :","RemovedInDjango19Warning and integer 2 as arguments . if self does not have an '_request ' attribute ,"
pass,do nothing .
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
"super ( TemplateIfParser , self ) .   init   ( * args , ** kwargs )","call the method __init__ from the base class of the class TemplateIfParser , with 2 arguments : unpacked list args and unpacked dictionary ."
temp lib . filters [ name ] = lib . filters [ name ],substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary .
if len ( bits ) >= NUM_  and bits [ - NUM_ ] == as :,"if length of bits is greater or equal to intger 2 and second last element of bits is equal to string 'as ' ,"
content = content . message ( ),"call the method content.message , substitute the result for content ."
if self .  isdst ( dt ) :,"call the nethod self._isdst with an argument dt , if it evaluates to true ,"
else :,"if not ,"
if self . stream is not None :,"if self.stream is not None ,"
if p == NUM_ :,"use the result as an argument for the call to the function mark_safe , return the result . if p equals integer 0 ,"
continue,skip this loop iteration .
for hextet in new ip :,"for every hextet in new_ip ,"
raise,"where ' % ( app_label ) s ' is replaced for obj.object._meta.app_label , ' % ( object_name ) s ' is replaced with obj.object._meta.object_name , ' % ( pk ) s ' is replaced with obj.object.pk and ' % ( error_msg ) s ' is replaced with result of the function force_text with an argument e. raise an exceptions"
if queryset is None :,"if queryset is None ,"
data = { },data is an empty dictionary .
loader = find template loader ( loader name ),"call the function find_template_loader with an argument loader_name , substitute the result for loader ."
class DisallowedHost ( SuspiciousOperation ) :,derive the class DisallowedHost from the SuspiciousOperation base class .
if self . first :,"if self.first is true ,"
"return date format ( value , use l10n = use l10n )","call the function date_format with 2 arguments : value and use_l10n as use_l10n , return the result ."
from django . utils import termcolors,from django.utils import termcolors into default name space .
except IOError as e :,"if IOErro , renamed to e , exception is caught ,"
while model dependencies :,"while model_dependencies is true ,"
return,return an empty string .
except ImportError as e :,"if ImportError , renamed to e , exception is caught ,"
"if six . PY2 and not is in stance ( path , six . text type ) :","if six.PY2 is true and path is not an instance of six.text_type type ,"
except ImportError :,if ImportError exception is caught .
"def   setattr   ( self , name , value ) :","define the method __setattr__ with 3 arguments : self , name and value ."
class name = base .   name  ,substitute base.__name__ for class_name .
except NotImplementedError :,"if NotImplementedError exception is caught ,"
import re,import module re .
if size is None or size > self . remaining :,"if size is None or size is greater than self.remaining ,"
result |= x ^ y,"perform bitwise exclusive OR on 2 operands x and y , perform bitwise OR with 2 operands : previous result and result , substitute the result for result ."
pass,do nothing .
TemplateLoader = import string ( loader ),"call the function import_string with an argument loader , substitute the result for TemplateLoader ."
for node in compiled parent . nodelist :,"for every node in compiled_parent.nodelist ,"
return obj,return obj .
 tc = http cookies . SimpleCookie ( ),"if the tuple result equals to tuple containing character ' ; ' and string ' '' \\073 '' ' , respectively , assign _cookie_encodes_correctly the boolean True value , otherwise assign it False . assign return value of the call to the http_cookies.SimpleCookie function to _tc ."
@ property,"property decorator ,"
except ImportError as e :,"if ImportError , renamed to e , exception is caught ,"
while s [ : NUM_ ] == b STR_ :,"while first element of s is equal to bytes string ' ; ' ,"
continue,"skip this loop iteration ,"
from django . conf import settings,from django.conf import settings into default name space .
"def add arguments ( self , parser ) :",define the method add_arguments with self class instance and parser as the arguments .
"if not hasattr ( func , STR_ ) :","if func doesnt have a attribute '__name__ ' ,"
return False,return boolean False .
"super ( DTDForbidden , self ) .   init   ( )",call the method __init__ from the base class of the DTDForbidden class .
except DatabaseError :,"substitute the ' % s ' with table and 3 elements of a list : b64encoded , exp and key , respectively . if DatabaseError exception is caught ,"
hidden widget = MultipleHiddenInput,substitute MultipleHiddenInput for hidden_widget .
"def delete many ( self , keys , version = None ) :","define the method delete_many with arguments self , keys and version defaulting to None ."
return attrs,return attrs .
for f in post sql fields :,"for every f in post_sql_fields ,"
else :,"if not ,"
in sert = complain,substitute complain for insert .
from pkg resources import resource string,from pkg_resources import resource_string into default name space .
except StandardError as e :,"if StandardError , renamed to e , exception is caught ,"
"self . xml . addQuickElement ( "" None "" )",call the method self.xml.addQuickElement with an argument string 'None ' .
@ stringfilter,"decorator stringfilter ,"
 format modules cache = { },_format_modules_cache is an empty dictionary .
RemovedInNextVersionWarning = RemovedInDjango19Warning,substitute RemovedInDjango19Warning for RemovedInNextVersionWarning .
name = self . html initial name,substitute self.html_initial_name for name .
class Loader ( BaseLoader ) :,derive the class Loader from the BaseLoader base class .
"return format html ( STR_ , flatatt ( final attrs ) , force text ( value ) )","call the function format_html with 3 arguments : string ( ' < textarea { 0 } > \r\n { 1 } < /textarea > ' , return value of the function flatatt ,"
if self . max length is not None :,"if self.max_length is not None ,"
return self . cleaned data,return self.cleaned_data .
common ancestor = None,common_ancestor is None .
"except ( ssl . SSLError , smtplib . SMTPServerDisconnected ) :","if ssl.SSLError or smtplib.SMTPServerDisconnected exception occurred ,"
creation counter = NUM_,creation_counter is an integer 0 .
def dictConfig ( config ) :,define the function dictConfig with an argument config .
from django . conf import settings,from django.conf import settings into default name space .
raise StopFutureHandlers ( ),raise an exception StopFutureHandlers .
"def   init   ( self , digits , sign = - ) :","define the initialization function with self class instance , digits and sign defaulting to '- ' as arguments ."
"def   init   ( self , data = None , files = None , auto id = STR_ , prefix = None , in itial = None , error class = ErrorList , label suffix = None , empty permitted = False ) :","define the method __init__ with 4 arguments : self , data set to None , files set to None , auto_id is an string 'id_ % s ' , prefix is None ,"
"def construct instance ( form , in stance , fields = None , exclude = None ) :","define the function construct_instance with 4 arguments : form , instance , fields set to None and exclude set to None ."
"raise ValueError ( "" STR_ "" )",raise a ValueError exception with an argument `` You can only use ` unpack_ipv4 ` if ` protocol ` is set to 'both ' '' .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"all locales = map ( os . path . basename , locale dirs )","filter out the results for which function os.path.isdir returns false , substitute the result for locale_dirs . map the locale_dirs elements with mapping function os.path.basename , substitute the result for all_locales ."
else :,"if not ,"
"parser . add argument ( STR_ , nargs = STR_ , help = STR_ )","'App label of an application to synchronize the state . ' as arguments . call the method parser.add_argument with string 'migration_name ' , nargs set to charcter ' ? ' , help containing string ,"
self .  delete ( fname ),call self._delete method with argument fname .
class  OFFSET UNION ( Union ) :,derive the class _OFFSET_UNION from the Union base class .
@ HttpResponse . content . setter,"HttpResponse.content.setter property ,"
def clean ( self ) :,define the method clean with an argument self .
name = self . html name,substitute self.html_name for name .
elif args [ NUM_ ] [ NUM_ ] == STR_ :,"otherwise if first element of second row of args equals a string ' 1 ' ,"
def h ( self ) :,define the method h with an argument self .
try :,"try ,"
return in stance,return instance .
ZERO = timedelta ( NUM_ ),"'get_current_timezone ' , 'get_current_timezone_name ' , 'activate ' , 'deactivate ' , 'override ' , 'localtime ' , 'now ' , 'is_aware ' , 'is_naive ' , 'make_aware ' and 'make_naive ' . call the function timedelta with an argument integer 0 , substitute the result for ZERO ."
result . parent = self,substitute self for result.parent .
"return klass ( fail silently = fail silently , ** kwds )","call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments , return the result ."
from django . core . management . sql import sql create,from django.core.management.sql import sql_create into default name space .
"super ( TemporaryUploadedFile , self ) .   init   ( file , name , content type , size , charset , content type extra )","call the method __init__ from the base class of the TemporaryUploadedFile class with arguments : file , name , content_type , size , charset and content_type_extra ."
finally :,"finally perform ,"
try :,"try ,"
"if is in stance ( elt , NonCapture ) :","if elt is an instance of NonCapture class ,"
def clear ( self ) :,define the method clear with argument self .
regex = force text ( self .  regex ),"call the function force_text with arguments self and _regex , substitute the result for regex ."
headerlist . sort ( ),call method sort on the headerlist .
else :,"if not ,"
"migration = loader . get migration ( app label , migration name )","call the method loader.get_migration with arguments app_label and migration_name , substitute the result for migration ."
self . remaining = limit,substitute limit for self.remaining .
"missing args message = "" STR_ """,missing_args_message is a string `` You must provide an application name . `` .
if not field desc . endswith ( STR_ ) :,"if field_desc doesnt end with ' ( ' ,"
return language . lower ( ),convert language to lowercase and return it .
 tc . load ( str ( STR_ ) ),call the _tc.load method with the 'foo : bar=1 ' converted to string as an argument .
else :,"if not ,"
"def get cache ( backend , ** kwargs ) :",define the function get_cache with backend and dictionary pair of elements kwargs as arguments .
import zlib,import module zlib .
return False,return boolean False .
filenames = [ ],filenames is an empty list .
except GeneratorExit :,"if exception GeneratorExit is caught ,"
"  all   = [ STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , ]","DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid , BadHeaderError and forbid_multi_line_headers into default name space . __all__ is a list of strings , 'CachedDnsName ' , 'DNS_NAME ' , 'EmailMessage ' , 'EmailMultiAlternatives ' , 'SafeMIMEText ' ,"
signals . request finished . connect ( close caches ),call the function signals.request_finished.connect with argument close_caches .
else :,"if not ,"
except ValidationError as e :,"if ValidationError , renamed to e , exception is caught ,"
" iteritems = "" STR_ """,_iteritems is a string `` iteritems '' .
if six . PY2 :,"substitute the result for time_str . if six.PY2 is true ,"
while remaining ! = NUM_ :,"while remaining is not equal to integer 0 ,"
values =  itervalues,substitute _itervalues for values .
except VariableDoesNotExist :,"if VariableDoesNotExist exception is caught ,"
else :,"if not ,"
"raise CommandError ( "" STR_ "" )",raise an CommandError exception with an argument string `` Command does n't accept any arguments '' .
"usage . append ( style . NOTICE ( "" STR_ "" % app ) )","call the style.NOTICE method with an argument string `` [ % s ] '' , where ' % s ' is replaced with app , append the result to usage ."
else :,"if not ,"
for formset in formsets :,"for every formset in formsets ,"
daemonize = ( wsgi opts [ STR_ ] is not None ),"if the value under the 'bindAddress ' key of the wsgi_opts dictionary is not None , set daemonize to boolean True , if not , set it to boolean False ."
"app output = self . handle app config ( app config , ** options )","call the self.handle_app_config method with app_config and options as arguments , substitute the result for app_output ."
for character in name :,"for every character in name ,"
cache get = cache . get,substitute cache.get for cache_get .
except ImportError as e :,"if ImportError , renamed to e , exception is caught ,"
"self .  post , self .  files = self . parse file upload ( self . META , data )","call the method self.parse_file_upload with arguments self.META and data , assign the result to self._post and self._files ."
raise ValueError ( STR_ ),raise an ValueError with an argument string 'ModelForm has no model class specified . ' .
return six . text type ( s ) . encode ( encoding ),"evaluate the method six.text_type ( s ) , on the result call the method encode with encoding as an argument , return the result ."
self . stream = stream or string,substitute stream_or_string for self.stream .
"elif cwords [ NUM_ ] in ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ) :","otherwise if first element of cwords is contanied in tuple with 8 entries : 'dumpdata ' , 'sql ' , 'sqlall ' , 'sqlclear ' , 'sqlcustom ' ,"
file . close ( ),close file file .
"self . choices = [ ( "" "" , "" STR_ "" ) ]",self.choices is an list containing an tuple with 2 elements : an empty string and string `` -- -- -- -- - '' .
def mark for escaping ( s ) :,define the function mark_for_escaping with an argument s .
cache = caches [ settings . CACHE MIDDLEWARE ALIAS ],set cache to the value of the dictionary caches under the key settings.CACHE_MIDDLEWARE_ALIAS .
"app label , model label = label . split ( STR_ )","split label by ' . ' , assign the result to app_label and model_label , respectively ."
"while STR_ % ( new name , num ) in used column names :","in string ' % s_ % d ' , replace ' % s ' with new_name and ' % d ' with num , while the result is contained in used_column_names ,"
"if not is in stance ( cookie , http cookies . BaseCookie ) :","if cookie is not an instance of http_cookies.BaseCookie ,"
kw [ STR_ ] = tzinfo,"called with an argument kw , only if v is not None , substitute the result for kw . substitute tzinfo for value under the 'tzinfo ' key of the kw dictionary ."
else :,"'ManagementForm data is missing or has been tampered with ' and code as a string 'missing_management_form ' . if not ,"
off = NUM_ * ( delta // NUM_ + delta // NUM_ ),"floor the division of delta by integer 100 and delta by integer 400 , sum the two results , multiply integer 6 by it , substitute the result for off ."
class Command ( BaseCommand ) :,"for every k and v in return value of the method module.__dict__.items , only if result of the method omittable called with an argument k is false . derive the class Command from the BaseCommand base class ."
self .  start relational field ( field ),call the method self._start_relational_field with an argument field .
from django . core . serializers . python import Deserializer as PythonDeserializer,from django.core.serializers.python import Deserializer as PythonDeserializer into default name space .
start = match . start ( ),"call the method match.start , substitute the result for start ."
candidate subs = text kwargs,substitute text_kwargs for candidate_subs .
except StandardError as e :,"substitute the result for formatters dictionary value under name key . if StandardError , renamed to e , exception is caught ,"
if errors :,"if errors is true ,"
for x in argset :,"for every x in argset ,"
return match . group ( NUM_ ),"call the method match.group with an argument integer 0 , return the result ."
"except ( ValueError , self . queryset . model . DoesNotExist ) :","if ValueError or self.queryset.model.DoesNotExist exception is caught ,"
else :,"if not ,"
class OrderedSet ( object ) :,derive the class OrderedSet from the object base class .
import signal,import module signal .
"return ugettext ( "" STR_ "" ) % { "" STR_ "" : unique check [ NUM_ ] , }","call the function ugettext with an argument string `` Please correct the duplicate data for % ( field ) s. '' ,"
db module = STR_,db_module is a string 'django.db ' .
def  get timezone name ( timezone ) :,define the function _get_timezone_name with an argument timezone .
"six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : DeserializationError , return value of the DeserializationError called with an argument e ,"
"if self . parent name . filters or is in stance ( self . parent name . var , Variable ) :",if self.parent_name.filters is true or self.parent_name.var is an instance of Variable .
secret = settings . SECRET KEY,substitute settings.SECRET_KEY for secret .
"value = signing . get cookie signer ( salt = key + salt ) . unsign ( cookie value , max age = max age )","call the method signing.get_cookie_signer with an argument salt set to sum of key and salt , call the method unsign on the result ,"
"if / in path and ( ( STR_ / STR_ \ \ STR_ \ \  not in path ) :
","if '/ ' is contained in path , and only if '\\ ' is contained in path and index of the first occurrence of '/ ' in path is lesser than ,"
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide a list ( ) method ' .
self . waiting writers += NUM_,"increment self.waiting_writers by integer 1 ,"
if value in self . empty values :,"if value is contained in self.empty_values ,"
NamedTemporaryFile = TemporaryFile,substitute TemporaryFile for NamedTemporaryFile .
for closable in self .  closable objects :,"for every closable in self._closable_objects ,"
elif len ( fks to parent ) == NUM_ :,"fk_name , parent_model._meta.app_label and parent_model._meta.object_name , respectively . otherwise if length of fks_to_parent is zero ,"
form . data [ form . add prefix ( self .  pk field . name ) ] = None,"call the method form.add_prefix with an argument self._pk_field.name ,"
output = self . filter expression . resolve ( context ),"call the method self.filter_expression.resolve with an argument context , substitute the result for output ."
"description = "" STR_ "" % receiver .   name  ",description is a string `` The ' % s ' function '' replaced by value of receiver.__name__ .
"t = getattr (  active , "" STR_ "" , None )","get 'value ' attribute of the _active object , if it exists substitute it for t , if not t is None ."
"ch , escaped = next ( pattern iter )","get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively ."
try :,"try ,"
"callback , callback args , callback kwargs = resolver match","assign the values to the callback , callback_args , callback_kwargs , respectively , from the resolver_match tuple ."
@ register . tag,"register.tag decorator ,"
"msg += STR_ % ( group name , formatted )","substitute ' % s ' in the string '\n % s : \n % s\n ' , with group_name and formatted , substitute the result for msg ."
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute it for key ."
"return do ntranslate ( singular , plural , number , STR_ )","call the function do_ntranslate with 3 arguments : singular , plural , number and string 'ngettext ' , return the result ."
if has bom ( po path ) :,evaluate function has_bom with po_path as argument .
else :,"if not ,"
chunk = self .  read limited ( ),"call the method self._read_limited , store the return value into chunk ."
if to lower :,"if to_lower is true ,"
del attr,substitute attr for the obtained value . delete attr .
return msg,return msg .
return None,return None .
class QueryDict ( MultiValueDict ) :,derive the class QueryDict from the base class MultiValueDict .
"for app label , app migrations in changes . items ( ) :","for every app_label and app_migrations in result of the method changes.items ,"
func = TemplateLoader ( * args ),"func is an instance of TemplateLoader class , created with unpacked list args ."
import re,import module re .
"msgs , errors , status = popen wrapper ( args )","call the function popen_wrapper with an argument args , assign the result to msgs , errors and status , respectively ."
return new class,return new_class .
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
class Paginator ( object ) :,derive the class Paginator from the object base class .
"def render ( self , name , value , attrs = None ) :","define the method render with 4 arguments : self , name , value and attrs set to None ."
return self . tag function,return self.tag_function .
"for is sues , group name in sorted issues :","infos , 'INFOS ' for every issues and group_name in sorted_issues ,"
"if os . path . is dir ( os . path . join ( STR_ , STR_ ) ) :","join 'conf ' and 'locale ' into a file path , if it is a directory ,"
def normalize ( pattern ) :,define the function normalize with an argument pattern .
"for i , choice in enumerate ( self . choices ) :","for every i and choice in enumerated iterable self.choices ,"
class NonCapture ( list ) :,derive the class NonCapture from list base class .
"if "" STR_ "" not in str ( te ) :","if `` 'stream ' '' is not contained in te converted into a string ,"
option list = ( ),options_list is an empty tuple .
@ stringfilter,"decorator stringfilter ,"
class HttpResponseGone ( HttpResponse ) :,derive the class HttpResponseGone from the HttpResponse base class .
"from django . db import connections , DEFAULT DB ALIAS",from django.db import connections and DEFAULT_DB_ALIAS into default name space .
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
if in put formats is not None :,"if input_formats is not None ,"
if primary keys :,"substitute the result for queryset . if primary_keys is true ,"
def  replace entity ( match ) :,define the function _replace_entity with an argument match .
"raise TemplateSyntaxError ( "" STR_ "" % ( taglib , e ) )","raise an TemplateSyntaxError exception with an argument string `` ' % s ' is not a valid tag library : % s '' ,"
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid ' key of the self.error_messages dictionary and code set to 'invalid ' .
"raise ValueError ( "" STR_ "" )",raise an ValueError exception with string `` The file can not be reopened . '' as an argument .
def rfc2822 date ( date ) :,define the function rfc2822_date with an argument date .
except AttributeError :,"if AttributeError exception is caught ,"
return exit code,return exit_code .
class InlineForeignKeyField ( Field ) :,derive the class InlineForeignKeyField from the Field base class .
else :,"if not ,"
name = self .  pk field . name,substitute self._pk_field.name for name .
"self . xml . startElement ( "" STR_ "" , { "" STR_ "" : "" STR_ "" } )","call the method self.xml.startElement with 2 arguments , string `` django-objects '' and a dictionary containing 1 element : `` 1.0 '' for `` version '' ."
from django . utils . encoding import force str,from django.utils.encoding import force_st into default name space .
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
bits = token . split contents ( ) [ NUM_ : ],"call the method token.split_contents , substitute results without the first element for bits ."
from django . conf import settings,from django.conf import settings into default namespace .
if cnt and not cnt % grouping :,"if cnt is true and remained of dividing cnt with grouping is zero ,"
"self . stdout . write ( "" STR_ "" "" STR_ "" % ( app or project , STR_ . join ( extra files ) ) )","where ' % s ' is replaced with app_or_project and extensions joined into a string , separated by a string ' , ' . call the method self.stdout.write , with an argument string `` Rendering % s template files with filenames : % s\n '' ,"
return bool ( in itial ) ! = bool ( data ),"convert initial and data into boolean , if they are not equal return boolean True , if they are return boolean False ."
def  bin to long ( x ) :,define the function _bin_to_long with an argument x .
elif command . verbosity > NUM_ :,"where ' % s ' are replaced by sel.file and errors , respectively . if command.verbosity is greater than integer 0 ,"
else :,"and evaluated boolean expression s_opt.nargs doesnt equal to integer 0 , for every s_opt in parser._actions , only if s_opt.option_strings is true , if not ,"
for name in sorted ( handlers ) :,"sort elements of handlers , for every name in result ,"
if not data :,"if data is false ,"
raise ValidationError ( errors ),raise an ValidationError exception with an argument errors .
from django . utils . encoding import python 2 unicode compatible,from django.utils.encoding import python_2_unicode_compatible into default name space .
"def write ( self , content ) :",define the method write with 2 arguments : self and value .
return False,return is boolean False .
return chunk,return chunk .
"elif field . rel and is in stance ( field . rel , models . ManyToOneRel ) :","otherwise , if field.rel is true and field.rel is an instance of models.ManyToOneRel ,"
"raise ValueError ( STR_ STR_ % ( name , e ) )",raise an ValueError exception with an argument string 'Unable to configure logger % r : % s ' formated with name and e .
"message = message % ( STR_ . join ( missing fields ) , opts . model .   name   )","join missing_fields into a string separated by string ' , ' , use it and opts.model.__name__ to format message , substitute the result for message ."
"def add arguments ( self , parser ) :",'migrations . Unmigrated apps will also have their initial_data fixture reloaded . Does not achieve a `` fresh install '' state . ' define the add_arguments with arguments self and parser .
self . regexes = { },self.regexes is an empty dictionary .
except ImportError as e :,"if ImportError , renamed to e , is caught ,"
class DateTimeBaseInput ( TextInput ) :,"called with an argument final_attrs and return value of the function force_text called with an argument value , return the result . derive the class DateTimeBaseInput from the TextInput base class ."
except TypeError :,"if TypeError exception is caught ,"
"if not model .  meta . proxy and router . allow migrate ( using , model ) :","if model._meta.proxy is false and return value of the function router.allow_migrate called with arguments using and model is true ,"
return,"return an empty string ,"
pass,do nothing
pass,do nothing .
return statements,return statements .
return kwargs,return kwargs .
"for func , unused in filter expr . filters :","for every func and unused in filter_expr.filters ,"
if self . is  reversed :,"if self.is_reversed is true ,"
if ( self . validate min and self . total form count ( ) - len ( self . deleted forms ) < self . min num ) :,"strings `` Please submit % d or fewer forms . `` , `` Please submit % d or fewer forms . '' and self.max_num , where ' % d ' is replaced with self.max_num , and code as a string 'too_many_forms ' . if self.validate_min is true , and length of self.deleted_forms subtracted from the return value of the method self.total_form_count ,"
pass,do nothing .
"def   setitem   ( self , key , value ) :","define the method __setitem__ with 3 arguments : self , key and value ."
self .  urlconf module = self . urlconf name,substitute self.urlconf_name for self.urlconf_module .
Signer = import string ( settings . SIGNING BACKEND ),"call the import_string function with an argument settings.SIGNING_BACKEND , substitute the result for Signer ."
"super ( TypedChoiceField , self ) .   init   ( * args , ** kwargs )","if not , sself.empty_value is an empty string . call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs ,"
"return lazy ( func , * resultclasses ) ( * args , ** kwargs )","call the function lazy with 2 arguments : func and unpacked list resultclasses , call the result with 2 arguments : unpacked list args ,"
if filename not in  error files :,"if filename is not contained in _error_files ,"
for node in self . nodelist loop :,"for every node in self.nodelist_loop ,"
width = property (  get width ),"get property attribute _get_width , and substitute it for width ."
@ deconstructible,"decorator deconstructible ,"
if self .  fname is None :,if self._fname is None :
length = in t ( arg ),substitute arg converted into a integer for length .
class CommandError ( Exception ) :,derive the class CommandError from the base class Exception .
commands dict [ app ] . append ( name ),append name to the value of under the app key of the commands_dict .
"from django . utils . encoding import force text , smart text",from django.utils.encoding import force_text and smart_text into default name space .
"return ExtendsNode ( nodelist , parent name )",where ' % s ' is replaced with first element of bits . return an instance of ExtendsNode with 2 arguments nodelist and parent_name .
class SimplerXMLGenerator ( XMLGenerator ) :,derive the class SimplerXMLGenerator form the XMLGenerator base class .
def validate ipv6 address ( value ) :,return value of the call to the function _ with an argument string 'Enter a valid IPv4 address . ' and string 'invalid ' . define the function validate_ipv6_address with an argument value .
if label suffix and contents and contents [ - NUM_ ] not in   ( STR_ ) :,"otherwise substitute self.form.label_suffix for label_suffix . if label_suffix and contents are both true and last element of contents is not contained in the result of the function _ ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"def path ( self , name ) :",define the method path with arguments self and name .
"for model in router . get migratable models ( app config , connection . alias , in clude auto created = True ) :","for model in return value of the method router.get_migratable_models with arguments app_config , connection.alias ,"
if self . pk field :,"if self.pk_field ,"
self .  regex dict [ language code ] = regex compiled,substitute the regex_compiled for value under the language_code key of the self._regex_dict dictionary .
return field dict,"append to list , a tuple with 2 elements : f and value under the f key of field_dict dictionary , use the resulting list as an argument , for the creation of the instance of OrderedDict class , substitute it for field_dict . return field_dict ."
"RFC1123 DATE = re . compile ( r STR_ % (   D ,   M ,   Y ,   T ) )","call the function re.compile with an argument raw string '^\w { 3 } , % s % s % s % s GMT $ ' formated with __D , __M , __Y and __T ,"
else :,"if not ,"
"def execute ( self , * args , ** options ) :","define the method execute with 3 arguments self , unpacked list args and unpacked dictionary options ."
HTMLParser .   init   ( self ),call the method HTMLParser.__init__ with an argument self .
"if is in stance ( value , six . text type ) :","if value is an instance of six.text_type class ,"
class JsonResponse ( HttpResponse ) :,derive the class JsonResponse from the HttpResponse base class .
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
except ImportError :,"if ImportError exception is caught ,"
DOT PATTERN = re . compile ( r STR_ ),"compile a regex from raw string '^\.\s* ( \w+ ) \s* ' , substitute it for DOT_PATTERN ."
try :,"try ,"
def total form count ( self ) :,define the method total_form_count with an argument self .
seen data . add ( data ),add data to seen_data set .
def dec ( func ) :,define the function dec with an argument func .
settings . configure ( USE I18N = True ),call the method settings.configure with an argument USE_I18N set to boolean True .
silent = False,silent is boolean False .
else :,"if not ,"
self .  expire info . clear ( ),call the method self._expire_info.clear .
bits = token . split contents ( ),"call the method token.split_contents , substitute the result for bits ."
else :,"if not ,"
"def handle data ( self , d ) :",define the method handle_data with 2 arguments self and d .
 load serializers ( ),call the function _load_serializers .
Iterator = object,substitute object for Iterator .
def extra forms ( self ) :,define the method extra_forms with an argument self .
"return mark safe ( STR_ . join ( [ six . text type ( self . management form ) , forms ] ) )","join return value of the function six.text_type called with an argument self.management_form and forms into a string ,"
return value,return value .
"if not is in stance ( node , ExtendsNode ) :","if node is not an instance of ExtendsNode ,"
priority = NUM_,priority is floating point number 1.0 .
if DEFAULT CACHE ALIAS not in settings . CACHES :,"if DEFAULT_CACHE_ALIAS is not contained in settings.CACHES ,"
file  . close ( ),close file_ file descriptor .
return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None,"if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None ,"
return self . DSTDIFF,return self.DSTDIFF .
if format not in  serializers :,"if format is not contained in _serializers ,"
try :,"try ,"
self . stream . close ( ),call the self.stream.close function .
"def   init   ( self , regex ) :",define the method __init__ with arguments self and regex .
"raise SyntaxError ( "" STR_ "" % ( t . contents , filemsg , t . lineno ) )","raise an SyntaxError with an argument string `` Translation blocks must not include other block tags : % s ( % sline % d ) '' ,"
return STR_,return string 'st ' .
checks = self . registered checks,substitute self.registered_checks for checks .
over bytes = len ( chunk ) % NUM_,"calculate length of chunk modulo integer 4 , substitute the result for over_bytes ."
if errors :,"if errors is true ,"
with self .  lock . writer ( ) :,"call the self._lock.writer method , with the result perform the following ,"
"def  has changed ( self , in itial , data ) :","define the method _has_changed with arguments self , initial and data ."
return self .  headers . values ( ),"call the method self._headers.values , return the result ,"
"elif is subclass ( klass , logging . handlers . SysLogHandler ) and STR_ in config :","substitute the result for value under 'mailhost ' key of config dictionary . otherwise if klass is subclass of logging.handlers.SysLogHandler class , and string 'address ' is contained in config ,"
top = bottom + self . per page,"sum bottom and self.per_page , substitute the result for top ."
"super ( WSGIServer , self ) . server bind ( )",call the server_bind method from the base class of the WSGIServer class .
stats [ MISSES ] += NUM_,increment stats dictionary value under the MISSES key by integer 1 .
"location = params . pop ( STR_ , )","remove 'LOCATION ' key from kwargs dictionary and put it into location , or use an empty string if key doesnt exists ."
"def  should delete form ( self , form ) :",define the method _should_delete_form with an argument self .
from django . utils . formats import localize,from django.utils.formats import localize into default name space .
unique id = item [ STR_ ],substitute value under 'unique_id ' key of item dictionary for unique_id .
self .  container = [ value ],self._container is a list containing element value .
self .  meta = META,substitute minimal element of the resulting list for self._chunk_size . substitute META for self._meta .
"proxy = lazy ( lambda ** kwargs : NumberAwareString ( ) , NumberAwareString ) ( ** kwargs )","call the function lazy with 2 arguments : lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString , call the result with an argument unpacked dictionary kwargs , substitute the result for proxy ."
timetuple = dt . timetuple ( ),"substitute the result for year . call the method dt.timetuple , substitute the result for timetuple ."
c = cookie,substitute cookie for c .
break,break from the loop execution .
from django . core . management . base import CommandError,from django.core.management.base import CommandError into default name space .
"self .  expire info =  expire info . setdefault ( name , { } )","call the _expire_info.setdefault method with name and empty dictionary as arguments , substitute the result for self_expire_info ."
def regex ( self ) :,define the method regex with an argument self .
if errors :,"if errors is true ,"
"for ip in ( self .  ipython , self .  ipython pre 100 , self .  ipython pre 011 ) :","for every ip in tuple containing 3 elements : self._ipython , self._ipython_pre_100 and self._ipython_pre_011 ,"
"if hasattr ( response , STR_ ) and callable ( response . render ) :","if object response has an attribute 'render ' and if response.render is callable object ,"
"msgs = self . copy plural forms ( msgs , locale )","call the method self.copy_plural_forms with arguments : msgs and locale , substitute it for msgs ."
template = get template ( template ),"call the method get_template with an argument template , substitute the result for template ."
if self . require all fields :,"if self.require_all_fields is true ,"
else :,"if not ,"
"kwargs = { STR_ : getattr ( form . fields . get ( name ) , STR_ , capfirst ( self . fk . verbose name ) ) }","kwargs is a dictionary with an entry : attribute 'label ' of the object under the name key of the form.fields dictionary for 'label ' ,"
"def clear checkbox id ( self , name ) :",define the method clear_checkbox_id with 2 arguments : self and name .
"def strptime ( self , value , format ) :","define the method strptime with arguments self , value and format ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ )","default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to flush . Defaults to the `` default '' database. ' . call the method parser.add_argument with 5 arguments : string ' -- no-initial-data ' , action set to string 'store_false ' ,"
"elif \\' in path :
","otherwise if '\\ ' is contained in path ,"
"return self . errors . get ( NON FIELD ERRORS , self . error class ( error class = STR_ ) )","return the result of the method self.errors.get called with 2 arguments : NON_FIELD_ERRORS and return value of the method ,"
finally :,"with all occurrences of ' % s ' replaced with app_name and model._meta.object_name and e , respectively . finally perform ,"
if kw [ STR_ ] :,"if value under the 'microsecond ' key of the kw dictionary is true ,"
qs = self . model .  default manager . get queryset ( ),call the method self.model._default_manager.get_queryset with an argument qs .
from django . dispatch import Signal,from django.dispatch import Signal into default name space .
for site in sites1 :,"if site is contained in sites1 ,"
if finder is None :,"if finder is None ,"
"OPERATORS = { or : in fix ( NUM_ , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) , and : in fix ( NUM_ , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) , not : prefix ( NUM_ , lambda context , x : not x . eval ( context ) ) , in : in fix ( NUM_ , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) , STR_ : in fix ( NUM_ , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) , = : in fix ( NUM_ , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) , == : in fix ( NUM_ , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) , != : in fix ( NUM_ , lambda context , x , y : x . eval ( context ) ! = y . eval ( context ) ) , > : in fix ( NUM_ , lambda context , x , y : x . eval ( context ) > y . eval ( context ) ) , >= : in fix ( NUM_ , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) , < : in fix ( NUM_ , lambda context , x , y : x . eval ( context ) < y . eval ( context ) ) , <= : in fix ( NUM_ , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) , }","OPERATORS is an dictionary with 12 initial entries : result of the function inflix called with 2 arguments , integer 6 ,"
except zlib . error as e :,"if zlib.error as e exception is raised ,"
s = subject [ p : i ],"take subject elements from p-th to i-th index , substitute it for s ."
self . default locale path = self . locale paths [ NUM_ ],"put the results into a list , substitute self.locale_paths for it . substitute first element of self.locale_paths for self.default_locale_path ."
return self,return self .
lookups = MultiValueDict ( ),lookups is an instance of the MultiValueDict class .
 file . write ( chunk ),write the chunk to the file _file .
except DecimalException :,"if DecimalException exception is caught ,"
"self .  fname = os . path . join ( self . file path , fname )","join self.file_path and fname into a valid file path , substitute it for self._fname ."
existing = list ( root . manager . loggerDict ),"convert root.manager.loggerDict into a list , substitute it for existing ."
app template dirs = [ ],"if not , call the function sys.getdefaultencoding and substitute the result for fs_encoding . app_template_dirs is an empty list ."
"self . validate name ( project name , "" STR_ "" )",call the method self.validate_name with arguments project_name and string `` project '' .
except ImportError :,"if imoportError exception is caught ,"
"for name , field in self . fields . items ( ) :","call the method self.fields.items , for every name and field in return value ,"
self . xml . characters ( smart text ( key value ) ),"call the function smart_text with argument key_value , use the result as an argument for the call to the self.xml.characters method ."
parser .  namedCycleNodes = { },parser._namedCycleNodes is an empty dictionary .
"raise KeyError ( "" STR_ "" % ( lang code , generic lang code ) )","raise an KeyError with an argument string `` Unknown language code % s and % s . `` , where ' % s ' is replaced with lang_code ,"
e . django template source = source,substitute source for e.django_template_source .
"raise KeyError ( "" STR_ "" % ( name , self .   class   .   name   ) )","raise an KeyError with an argument string `` Key % r not found in ' % s ' '' , substitute ' % s ' with name and self.__class__.__name__ ."
import datetime,import module datetime .
if error messages and f . name in error messages :,"if error_messages is true and f.name is contained in error_messages ,"
self [ STR_ ] = iri to uri ( redirect to ),"and unpacked dictionary kwargs . call the function iri_to_uri with an argument redirect_to , substitute the result for the value under the 'Location ' key of the self dictionary ."
"elif is in stance ( o , datetime . date ) :","otherwise if o is an instance of datetime.date object ,"
pk value = None,pk_value is None .
  all   = [ STR_ ],__all__ is a list containing a string 'file_move_safe ' .
else :,"if not ,"
"if is in stance ( widget , NumberInput ) :","if widget is an instance of the NumberInput ,"
dirs = [ basedir ],dirs is a list containing basedir .
import warnings,import module warnings .
final attrs = self . build attrs ( attrs ),"call the method self.build_attrs with an argument attrs , substitute the result for final_attrs ."
"nodelist = parser . parse ( ( STR_ , ) )","where ' % s ' is replaced with filter_name . call the method parser.parse with an argument tuple with an element string 'endfilter ' , substitute the result for nodelist ."
if app config . models module is None :,"if app_config.models_module is None ,"
self . dicts = [ builtins ],self.dicts is an list with element builtins .
"def setdefault ( self , key , default ) :","define the method setdefault with 3 arguments : self , key and default ."
for module to search in args :,"for every module_to_search in args ,"
"for result , params in possibility :","for every result and params in possibility ,"
if filename . endswith ( extensions ) or filename in extra files :,"if filename ends with extensions or filename is contained in extra_files ,"
"return date ( d . year , d . month , d . day )","call the function data with 3 arguments : d.year , d.month and d.day , return the result ."
class NowNode ( Node ) :,derive the class NowNode from Node base class .
return self .  dimensions cache,return self._dimensions_cache .
"exec ( "" "" "" STR_ "" "" "" )","execute code statement `` '' '' exec _code_ in _globs_ , _locs_ '' '' '' ."
except OSError :,"if OSError exception is caught ,"
if form .  meta . widgets :,"if form._meta.widgets is true ,"
from django . utils . module loading import module has submodule,from django.utils.module_loading import module_has_submodule into default name space .
"raise TypeError ( "" STR_ "" )",raise an TypeError exception with an argument string `` end must be None or a string '' .
singular = [ ],singular is an empty list .
self .  regex dict = { },self._regex_dict is an empty dictionary .
statements = [ ],statements is an empty list .
"return "" STR_ "" % ( self . name , self . nodelist )","return string `` < Block Node : % s . Contents : % r > '' , where ' % s ' is replaced with self.name and ' % r ' with self.nodelist ."
choices = list ( six . iteritems ( self . months ) ),"substitute the result for the value under the 'year ' key of the html dictionary . call the function six.iteritems with an argument self.months , convert the result to a list and substitute it for choices ."
class NullBooleanField ( BooleanField ) :,derive the class NullBooleanField from the base class BooleanField class .
else :,"if not ,"
"return  entity re . sub (  replace entity , text )","call the method _entity_re.sub with 2 arguments : _replace_entity and text , return the result ."
import django . core . checks . model checks,import module django.core.checks.model_checks .
else :,"if not ,"
"return field type , field params , field notes","return field_type , field_params and field_notes ."
if len ( bits ) < NUM_  or bits [ NUM_ ] ! = as :,"if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as ' ,"
try :,"try ,"
if not bytes :,"if bytes is false ,"
if self .  isdst ( dt ) :,"call the method self._isdst with an argument dt , if it evaluates to true ,"
elif args [ NUM_ ] == STR_ :,"otherwise if second element of args equals a string '304 ' ,"
itervalues =  itervalues,substitute _itervalues for itervalues .
"handler . addQuickElement ( STR_ , rfc3339 date ( item [ STR_ ] ) )","call the method handler.addQuickElement with 2 arguments : string 'updated ' and result of the function rfc3339_date ,"
output transaction = True,output_transaction is boolean True .
"def truncatewords html ( value , arg ) :",define the function truncatewords_html with 2 arguments value and arg .
if run syncdb and executor . loader . unmigrated apps :,"append it to the string `` Target specific migration : `` , use it as the argument for the call to the self.style.MIGRATE_LABEL method , call the self.stdout.write method with previous return value as an argument . if run_syncdb and executor.loader.unmigrated_apps is true ,"
"if is in stance ( context , Context ) :",if context is an instance of Context class .
def is  multipart ( self ) :,define the method is_multipart with an argument self .
if self . cc :,"substitute the result for value under the 'To ' key of msg dictionary . if self.cc is true ,"
if len ( self . dicts ) == NUM_ :,"if length of self.dicts is equal to an integer 1 ,"
cursor = None,cursor is None .
self . connection . close ( ),call the method self.connection.close .
self . file path = kwargs . pop ( STR_ ),"pop the value under the 'file_path ' key of kwargs dictionary , substitute it for self.file_path ."
if len ( tablenames ) :,"if length of tablenames is greater than zero ,"
"if not os . access ( filename , os . W OK ) :","if call to the method os.access with arguments : filename and os.W_OK , evaluates to false ,"
except Exception :,"if the Exception exception is caught ,"
self . DSTDIFF = self . DSTOFFSET - self . STDOFFSET,"subtract self.STDOFFSET with self.DSTOFFSET , substitute the result for self.DSTDIFF ."
"def   init   ( self , * args , ** kwargs ) :","define the method __init__ with arguments self , argument list args and dictionary of arguments kwargs ."
factor += NUM_,increment factor by one .
"self . json kwargs . pop ( STR_ , None )",remove the entry under the 'fields ' key of the self.json_kwargs dictionary .
yield buf . read ( ),"read data from buf , yield the result ."
"help = "" STR_ """,help is a string `` Deprecated - use 'migrate ' instead . `` .
import time,import module time .
"def new file ( self , file name , * args , ** kwargs ) :","and unpacked dictionary kwargs . define the method new_file with arguments : self , file_name , unpacked list args and unpacked dictionary kwargs ."
INITIAL FORM COUNT = STR_,INITIAL_FORM_COUNT is a string 'INITIAL_FORMS ' .
transfer encoding = transfer encoding [ NUM_ ] . strip ( ),"strip of the whitespaces first element of transfer_encoding , substitute the result for transfer_encoding ."
"def do filter ( parser , token ) :",define the function do_filter with 2 arguments : parser and token .
"def   init   ( self , * args , ** kwargs ) :","define the __init__ method with arguments : self , unpacked list args and unpacked dictionary kwargs ."
"value = ugettext ( "" STR_ "" ) % filesize number format ( bytes / TB )","call the function ugettext with an argument string `` % s TB '' , substitute ' % s ' with the result of the call to the function ,"
factor = NUM_,factor is integer 0 .
"value = in t ( s , NUM_ )","convert s to integer of base 36 , substitute it for value ."
pass,do nothing .
import warnings,import module warnings .
"compile func = partial ( generic tag compiler , params = params , varargs = varargs , varkw = varkw , defaults = defaults , name = function name , takes context = takes context , node class = InclusionNode )","substitute __name__ field of the result for function_name , in not , substitute func.__name__ for function_name . call the function partial with 8 arguments : generic_tag_compiler , params set to params , varargs set to varargs , varkw set to varkw ,"
elif self . nodelist false :,"otherwise if self.nodelist_false is true ,"
@ property,"or if it is false , but has_old_option is true use self.requires_model_validation , if they are both false use boolean True as an argument . property decorator ,"
msg count = NUM_,msg_count is an integer 0 .
if six . PY3 :,"if six.PY3 is true ,"
elif STR_ not in middle and simple email re . match ( middle ) :,"otherwise if ' : ' is not contained in middle and result of the function simple_email_re.match called with an argument middle ,"
if item [ STR_ ] is not None :,"value under the 'link ' key of item dictionary for 'href ' and `` alternate '' for `` rel '' . if value under the 'pubdate ' key of the item dictionary is not None ,"
if token string . find ( TRANSLATOR COMMENT MARK ) :,"call the method token_string.find with an argument TRANSLATOR_COMMENT_MARK , if it evaluates to true ,"
"return self . in cr ( key , - delta , version = version )","call the self.incr method with key , negative delta and version set to version as arguments ."
"t = Template ( output , name = filepath )","t is an instance of Template class , created with 2 arguments output and name set to filepath ."
"def  helper ( list  , tabs = NUM_ ) :",define the function _helper with 2 arguments list and tabs set to integer 1 .
return exclude,return exclude .
m = self . CONVERT PATTERN . match ( value ),"match value string with regex self.CONVERT_PATTERN , substitute the result for m ."
biggest number = max ( [ x for x in numbers if x is not None ] ),biggest_number is maximum numbers element .
else :,"if not ,"
return,return an empty string .
else :,"if not ,"
self . ending = ending,substitute ending for self.ending .
self . META = environ,substitute environ for self.META .
"from ctypes . wintypes import BOOL , DWORD , HANDLE","from ctypes.wintypes import BOOL , DWORD and HANDLE into default name space ."
"raise CommandError ( "" STR_ "" "" STR_ "" % ( . join ( parts [ : - NUM_ ] ) , parts [ - NUM_ ] ) )","raise an CommandError with an argument string `` Problem installing fixture ' % s ' : % s is not a known serialization format . `` ,"
token name = TOKEN MAPPING [ self . token type ],substitute value under the self.token_type key of the TOKEN_MAPPING dictionary for token_name .
"def delete ( self , key , version = None ) :","define delete method with self class instance , key and version set to None , as arguments ."
else :,"if not ,"
"sql . extend ( connection . creation . sql for pending references ( refto , no style ( ) , pending references ) )","call the connection.creation.sql_for_pending_references method with refto , no_style ( ) and pending_references as arguments ,"
ext list [ i ] = STR_ % ext list [ i ],prepend ' . ' to the i-th element of the ext_list .
self . msguniq options = self . msguniq options [ : ] + [ STR_ ],append list containing string ' -- no-wrap ' to self.msguniq_options .
return translation,return translation .
try :,"try ,"
in plural = True,inplural is boolean True .
st = os . stat ( src ),"call the os.stat function with argument src , substitute the result for st ."
"dfmt = config . get ( STR_ , None )","get config dictionary element under 'datefmt ' key , if it exists substitute it for dfmt , if not , dfmt is None ."
if template is None :,"if template is None ,"
attrs [ STR_ ] = self . min value,substitute self.min_value for the value under the 'min ' key of the attrs dictionary .
if to :,"if to is true ,"
"def bytes to text ( s , encoding ) :","where ' % s ' is replaced with request.__class__.__name__ , path , return value of the function six.text_type called with an argument get , return value of the function six.text_type called with an argument post , return value of the function six.text_type , called with an argument cookies and return value of the function six.text_type called with an argument meta . define the function bytes_to_text with 2 arguments s and encoding ."
except http cookies . CookieError :,"if http_cookies.CookieError exception is caught ,"
try :,"try ,"
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
class GenericIPAddressField ( CharField ) :,derive the class GenericIPAddressField from the base class CharField class .
if six . PY3 :,"if PY3 filed of six is boolean True ,"
"raise ValidationError ( self . message , code = self . code )",raise a ValidationError exception with arguments self.message and code set to self.code .
"def itervalues ( d , ** kw ) :",return it . define the function itervalues with 2 arguments : d and unpacked dictionary kw .
try :,"try ,"
return False,return boolean False .
is  relation = i in relations,"if i is contained in relations , is_relation is boolean True , otherwise is_relation is boolean False ."
from django import http,from django import http into default name space .
"if hasattr ( value , STR_ ) and not is in stance ( value , six . text type ) :","if value has an attribute '__iter__ ' and value is not an instance of six.text_type ,"
return iter ( self . forms ),"convert self.forms into an iterable , return it ."
if self . asvar is None :,"if self.asvar is None ,"
"raise self . error ( None , "" STR_ "" % STR_ . join ( parse until ) )","raise an self.error with 2 arguments : None and string `` Unclosed tags : % s `` ,"
parser . add library ( temp lib ),where ' % s ' is replaced with name and taglib . call the method parser.add_library with an argument temp_lib .
if self . feed [ STR_ ] is not None :,"'alternate ' for 'rel ' and value under the 'link ' key of self.feed dictionary for 'href ' . if value under the 'feed_url ' key of the self.feed dictionary is not None ,"
return cache key,in the resulting string replace all occurrences of ' ' with ' _ ' and append it to the end of cache_key . return cache_key .
return major,return major .
sequence = parser . compile filter ( bits [ in  index + NUM_ ] ),"where ' % s ' is replaced with token.contents . call the method parser.compile_filter with an argument , in_index incremented by one , and used to index parser.compile_filter ,"
yield v,yield v .
try :,"where ' % s ' is replaced with node.nodeName and attr . try ,"
for lib in builtins :,"for every lib in builtins ,"
"args , varargs , varkw , defaults = getargspec ( func )","call the function getargspec with an argument func , substitute the result for args , varargs , varkw and defaults , respectively ."
self . auto id = auto id,substitute auto_id for self.auto_id .
for message in email messages :,for every message in email_messages :
s = s [ end : ],substitute elements of s from the end index to end for s .
translation . activate ( saved locale ),call the method translation.activate with an argument saved_locale .
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
dot = callback . rindex ( STR_ ),"call the method callback.rindex with an argument character ' . ' , substitute the result for dot ."
if neg :,"if neg is true ,"
if self . verbosity > NUM_ :,"if self.verbosity is greater than integer 1 ,"
def  resolve ( self ) :,define the method _resolve with an argument self .
"def   init   ( self , stream , boundary ) :","define the method __init__ with arguments self , stream and boundary ."
"if hasattr ( self , STR_ ) :","if self has an 'error_dict ' attribute ,"
"return mark safe (  urlize ( value , nofollow = True , autoescape = autoescape ) )","call the function _urlize with 3 arguments : value , nofollow set to boolean True , autoescape set to autoescape ,"
return result,return result .
"def reverse ( self , lookup view , * args , ** kwargs ) :","define the method reverse with arguments self , lookup_view , unpacked list args and unpacked dictionary kwargs ."
if not self . timezone :,"if self.timezone is false ,"
"if self . options . get ( STR_ , None ) is not None :","if value under the 'indend ' key of the options dictionary exists and is not None ,"
if self . feed [ STR_ ] is not None :,"called with an argument result of the method self.latest_post_date . if value under the 'author_name ' key of the self.feed dictionary is not None ,"
auto id = self . form . auto id,substitute self.form.auto_id for auto_id .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
cleaned = self . clean ( value ),"call the method self.clean with value as argument , substitute the result for cleaned ."
"if data in ( None , FILE INPUT CONTRADICTION ) :","if data is not None or FILE_INPUT_CONTRADICTION ,"
"def   init   ( self , name , old , new = None ) :","define the method __init__ with 4 arguments : self , name , old and new set to None ."
else :,"if not ,"
for smigration in migrations to squash :,"for every smigration in migrations_to_squash ,"
from IPython . frontend . terminal . ipapp import TerminalIPythonApp,from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace .
return parser . parse ( ),"call the method parser.parse , return the result ."
import django,import module django .
@ classmethod,"classmethod decorator ,"
if value [ NUM_ ] in self . empty values and value [ NUM_ ] in self . empty values :,"if first and second elements of value are contained in self.empty_values ,"
"readline . parse and bind ( "" STR_ "" )",call the method readline.parse_and_bind with an argument string `` tab : complete '' .
self . prepend token ( token ),"call the method self.prepend_token with an argument token ,"
global  supported,use global variable _supported .
else :,"if not ,"
self . locale dir = locale dir,substitute locale_dir for self.locale_dir .
"handler . addQuickElement ( "" STR_ "" , unique id )",call the method handler.addQuickElement with 2 arguments : string 'id ' and unique_id .
"value = { True : STR_ , False : STR_ , STR_ : STR_ , STR_ : STR_ } [ value ]","get the value under value key of a dictionary with 4 entries : ' 2 ' for boolean True , ' 3 ' for boolean False , ' 2 ' for ' 2 ' ,"
"def timeuntil ( d , now = None ) :","define the function timeuntil with 2 arguments , d and now defaulting to none ."
"check for migrations ( app config , connection )","use the result as a key to get the value from the connections dictionary , substitute the result for connection . call the function check_for_migrations with 2 arguments : app_config and connection ."
def tell ( self ) :,define the method tell with an argument self .
def clear script prefix ( ) :,define the function clear_script_prefix .
"parser . add argument ( STR_ , action = STR_ , version = self . get version ( ) )","os.path.basename ( prog_name ) and subcommand , separated by whitespace and description set to self.help , if exists , or None , otherwise . call the method parser.add_option with 3 arguments : string ' -- version ' , action set to string 'version ' ,"
return translated,return translated .
for char in key :,"and MEMCACHE_MAX_KEY_LENGTH , call the function warnings.warn with previous string and CacheKeyWarning as arguments . for every char in key ,"
return response,return response .
"dict .   setitem   ( self , key , M )","call the private dict.__setitem__ method with self class instance , key and M as arguments ."
"wsgi opts = { STR_ : in t ( options [ "" STR_ "" ] ) , STR_ : in t ( options [ "" STR_ "" ] ) , STR_ : in t ( options [ "" STR_ "" ] ) , STR_ : in t ( options [ "" STR_ "" ] ) , }","wsgi_opts is a dictionary with 4 initial entries : value under the key 'maxspare ' of options dictionary converted to an integer ,"
self . use ssl = settings . EMAIL USE SSL if use ssl is None else use ssl,"if use_ssl is None substitute settings.EMAIL_USE_SSL for self.username , if not substitute use_ssl for self.use_ssl ."
self . port = DEFAULT PORT,substitute DEFAULT_PORT for self.port .
in itial = False,initial is boolean False .
return  localtime,return _localtime .
in put type = STR_,input_type is a string 'email ' .
"if not is in stance ( in dex , ( slice , ) + six . in teger types ) :","if index is not an instance of six.integer_types or tuple type ,"
if not self .  css . get ( medium ) or path not in self .  css [ medium ] :,"if call to the method self._css.get with an argument medium evaluates to false ,"
"def   init   ( self , mode = STR_ , bufsize = - NUM_ , suffix = , prefix = , dir = None ) :","define method __init__ with self class instance , mode string ' w+b ' , bufsize set to integer -1 , suffix and prefix set to empty strig ,"
"from django . forms . fields import IntegerField , BooleanField",from django.forms.fields import IntegerField and BooleanField into default name space .
"defaults ,   = parser . parse args ( args = [ ] )","call the method parser.parse_args with an arguments args set to an empty list , assign the result for defaults and _ , respectively ."
yield obj,"with 2 arguments : stream and Loader set to SafeLoader , and unpacked dictionary options , yield one element of the itterable obj ."
"open tags . in sert ( NUM_ , tagname )",insert tagname at the beginning of open_tags .
DEBUG = NUM_,DEBUG is integer 10 .
@ contextlib . contextmanager,"contextlib.contextmanager decorator ,"
"except ( ImportError , AttributeError ) :","if ImportError or AttributeError exception occurred ,"
else :,"if not ,"
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % ( token [ : upto ] , token [ upto : start ] , token [ start : ] ) )","raise an TemplateSyntaxError exception with an argument string `` Could not parse some characters : % s| % s| % s '' ,"
try :,"try ,"
dirname = os . path . dirname ( filename ),"get the directory name of filename , substitute the result for dirname ."
"for subwidget in self . field . widget . subwidgets ( self . html name , self . value ( ) , attrs ) :","call the method self.field.widget.subwidgets with 3 arguments : self.html_name , return value of the method self.value and attrs ,"
"def handle app config ( self , app config , ** options ) :","'Nominates a database to print the SQL for . Defaults to the `` default '' database . ' as the arguments . define method handle_app_config with self class instance , app_config and dictionary options as arguments ."
if key not in default settings :,"if key is not contained in default_settings ,"
def strip entities ( value ) :,define the function strip_entities with an argument value .
import codecs,import module codecs .
self . cleaned data [ name ] = value,substitute value for the value under the name key of the self.cleaned_data dictionary .
pass,do nothig .
"return format ( value , arg )","format value into printable data representation with formating rules arg , return the result ."
"warnings . warn ( STR_ STR_ % ( key , MEMCACHE MAX KEY LENGTH ) , CacheKeyWarning )","substitute ' % s ' in string 'Cache key will cause errors if used with memcached : % s ( longer than % s ) ' with key ,"
"file  ,   ,   = imp . find module ( module name , [ entry ] )","call the method imp.find_module with 2 arguments : module_name and list containing element entry , assign the result to file_ , _ ,"
"scheme , netloc , path , query , fragment = urlsplit ( url )","call the function urlsplit with an argument url , assign the result to scheme , netloc , path , query and fragment , respectively ."
result = self . buffer [ : size ],substitute first size elements of self.buffer for result .
self . json kwargs = self . options . copy ( ),"call the method self.options.copy , substitute the result for self.json_kwargs ."
raise MultiValueDictKeyError ( repr ( key ) ),raise an MultiValueDictKeyError exception with printable representation of key .
month field = STR_,month_field is a string ' % s_month ' .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'required ' key of the self.error_messages dictionary and code set to 'required ' .
meta = ( pformat ( META override ) if META override is not None else pformat ( request . META ) ),"get is a tuple containing elements generated by the call to the function pformat with an argument META_override ,"
field params . update ( new params ),call the method field_params.update with an argument new_params.1
"sign , digits , exponent = d . quantize ( exp , ROUND HALF UP , Context ( prec = prec ) ) . as tuple ( )","call the method d.quantize with 3 arguments : exp , ROUND_HALF_UP and instance of Context class created with prec as prec ,"
return { STR_ : settings . MEDIA URL },return an dictionary containing 1 entry : settings.MEDIA_URL for 'MEDIA_URL ' .
for format in self . in put formats :,"for every format in self.input_formats ,"
return result,return result .
return model list,return model_list .
class NoReverseMatch ( Exception ) :,derive the class NoReverseMatch with Exception as base class .
else :,"model._meta.app_label , model._meta.object_name , parent_model._meta.app_label , parent_model._meta.object_name , respectively . if not ,"
message = message . error list,substitute message.error_list for message .
"if is in stance ( widget , NumberInput ) and STR_ not in widget . attrs :",if widget is an instance of NumberInput and string 'step ' is not contained in widget.attrs .
media = media + w . media,"sum media and w.media , substitute the result for media ."
directory = os . path . dirname ( full path ),"call the function os.path.dirname with argument full_path , substitute the result for directory ."
class DefusedXmlException ( ValueError ) :,derive the class DefusedXmlException from the ValueError base class .
self . address family = socket . AF INET6,substitute socket.AF_INET6 for self.address_family .
data = self .  archive . read ( name ),"call the method self._archive.read with an argument name , substitute the result for data ."
"return do ifequal ( parser , token , False )","call the function do_ifequal with 3 arguments : parser , token and boolean False , return the result ."
try :,"try ,"
class   proxy   ( Promise ) :,derive the class __proxy__ from the Promise base class .
"for k , v in ret . items ( ) :","for every k and v in return value of the ret.items function ,"
"for key , value in six . iteritems ( kwargs ) :","call the function six.iteritems with an argument kwargs , for every key and value in the result ,"
"for i , word in enumerate ( words ) :","for every i and word in enumerated iterable words ,"
"match = tagfind . match ( rawdata , i + NUM_ )","match the rawdata from the position i+1 , with tagfind pattern , assign the result to the match ."
self .  non form errors = self . error class ( e . error list ),"call the method self.error_class with an argument e.error_list , substitute the result for self._non_form_errors ."
for node in nodelist :,"for every node in nodelist ,"
if not supports color ( ) :,"call the function supports_color , if evaluates to False ,"
return b . join ( T ) + F ( l ) [ : r ],"substitute the results in a list for T. join elements of T in a bytes string , append first r elements of result of the call to the function F with an argument l to it ,"
elif common prefix is None :,"otherwise if common_prefix is None ,"
format locations . append ( path + STR_ ),"concatenate path and string '. % s ' , append the result to format_module_path ."
"def render ( self , name , value , attrs = None ) :","define the method render with 4 arguments : self , name , value and attrs set to None ."
"if hasattr (  urlconfs , "" STR_ "" ) :","if _urlconfs has an attribute 'value ' ,"
"parser . add argument ( STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","call the method parser.add_argument with 3 arguments : string ' -- database ' , default set to DEFAULT_DB_ALIAS ,"
migration . branch = migration . ancestry [ ( migration . ancestry . in dex ( common ancestor ) + NUM_ ) : ],"call the method migration.ancestry.index with an argument common_ancestor , increment the result by one ,"
"except ( TypeError , VariableDoesNotExist ) :","if TypeError or VariableDoesNotExist exceptions are caught ,"
import warnings,import module warnings .
self . first = left,substitute left for self.first .
def reloader thread ( ) :,define the function reloader_thread .
for message in email messages :,"for every message in email_messages ,"
"return ( self . field . prepare value ( obj ) , self . field . label from instance ( obj ) )","return a tuple with 2 elements : result of the method self.field.prepare_value called with an argument obj ,"
class SingleZipReader ( zipfile . ZipFile ) :,derive class SingleZipReader for zipfile.ZipFile base class .
from copy import copy,from copy import copy into default name space .
if language in  DJANGO DEPRECATED LOCALES :,"if language is contained in _DJANGO_DEPRECATED_LOCALES ,"
"return self . show migration list ( connection , [ options [ STR_ ] ] if options [ STR_ ] else None )","call the method self.show_migration_list with connection as first argument , as second argument use value under the 'app_label ' key of options dictionary ,"
if ext :,"if ext is true ,"
base name = STR_ % app or project,"where ' % s ' is replaced with app_or_project and extra_files joined into a string , separated by a string ' , ' . append string '_name ' to app_or_project , substitute it for base_name ."
"text = unicodedata . normalize ( STR_ , self .  wrapped )","call the function unicodedata.normalize with 2 arguments : string 'NFC ' and self._wrapped , substitute the result for text ."
try :,"try ,"
result args = [ [ ] ],result_args is a list containing an empty list .
thefile = STR_ % self . file,"convert self.file to string and append string '.py ' to it , substitute the result for thefile ."
for node in graph . leaf nodes ( app name ) :,"for every node in return value of the graph.leaf_nodes method called with the app_name argument ,"
nodes . extend ( nodelist . get nodes by type ( nodetype ) ),"call the method nodelist.get_nodes_by_type with an argument nodetype , extend nodes with the result ."
return,return nothing .
"result . append ( ( lang , priority ) )",append a tuple with 2 entries lang and priority to result .
config [ STR_ ] = factory,substitute factory for value under ' ( ) ' key of config dictionary .
 dec .   name   = STR_ % decorator .   name  ,_dec.__name__ is a string 'method_decorator ( % s ) ' formated with decorator.__name__ .
self . msgattrib options = self . msgattrib options [ : ] + [ STR_ ],append list containing string ' -- no-wrap ' to self.msgattrib_options .
"if name == "" STR_ "" :","if name equals string `` _wrapped '' ,"
value = flags [ attr ],substitute value under the attr key of flags dictionary for value .
"return STR_ % ( self . path , ( STR_ + iri to uri ( self . META . get ( STR_ , ) ) ) if self . META . get ( STR_ , ) else )","if the value under the 'QUERY_STRING ' key of the self.META dictionary is true , call the function iri_to_uri ,"
db = router . db for write ( self . cache model class ),"call the method router.db_for_write with argument self.cache_model_class , substitute the result for db ."
"def  open ( self , name , mode = STR_ ) :","or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is . define the method _open with arguments self , name and mode defaulting to string 'rb ' ."
"format = color settings . get ( role , { } )","assign the value of the dictionary color_settings under the key role to format , if key doesnt exist assign the empty dictionary ."
"attachment = self .  create mime attachment ( content , mimetype )","call the method self._create_mime_attachment with the arguments content and mimetype , substitute the result for attachment ."
"def do if ( parser , token ) :",define the function do_if with 2 arguments : parser and token .
"self . stdout . write ( "" STR_ "" )",write a string `` Resetting sequences\n '' to self.stdout stream .
if output :,"if output is true ,"
return self . forms [ : self . in itial form count ( ) ],"call the self.initial_form_count method , return the sublist of self.forms from the beginning to the previous result as the end index ."
"def ssi ( parser , token ) :",define the function ssi with 2 arguments : parser and token .
context extras [ STR_ ] = connection . queries,substitute connection.queries for value under the 'debug ' key of the context_extras dictionary .
"return self . field . widget . value from datadict ( self . form . data , self . form . files , self . html name )","call the method self.field.widget.value_from_datadict with 3 arguments : self.form.data , self.form.files , self.html_name , return the result ."
data [ field . name ] = field . to python ( field value ),"call the field.to_python method with field_value , substitute the result for field.name key of the data dictionary ."
"def formset factory ( form , formset = BaseFormSet , extra = NUM_ , can order = False , can delete = False , max num = None , validate max = False , min num = None , validate min = False ) :","separated by newline , use it as an argument for the call to the function mark_safe , return the result . define the function formset_factory with 9 arguments : form , formset set to BaseFormSet , extra set to integer 1 ,"
"result = self .   class   ( , mutable = True , encoding = self . encoding )","call the method self.__class__ with 3 arguments : an empty string , mutable is boolean True , encoding is self.encoding , substitute the result for result ."
"self . configure root ( root , True )",call the method self.configure_root with 2 arguments : root and boolean True .
month = MONTHS . in dex ( m . group ( STR_ ) . lower ( ) ) + NUM_,"call the method m.group with an argument string 'mon ' , convert the result to lowercase , use it as an argument for the call to the ,"
args = [ STR_ % arg for arg in args ],args is a list containing arg surrounded by double quotes for every arg in args .
bit = next ( bits ),"call the method next with an argument bits , substitute the result for bit ."
chunks . append ( bytes ),append bytes to chunks .
import zlib,import module zlib .
from django . template . base import TemplateDoesNotExist,from django.template.base import TemplateDoesNotExist into default name space .
class TemplateSyntaxError ( Exception ) :,derive the class TemplateSyntaxError form the base class Exception .
if header end == - NUM_ :,"if header_end equals integer negative 1 ,"
return output [ : : - NUM_ ],return reversed list output .
def escapejs ( value ) :,for integer representation of z converted into a string . define the function escapejs with an argument value .
from django . utils . safestring import mark safe,from django.utils.safestring import mark_safe into default name space .
cls .   dispatch [ resultclass ] = { },value under the resultclass key of the cls.__dispatch dictionary is an empty dictionary .
"token = Token ( TOKEN VAR , token string [ NUM_ : - NUM_ ] . strip ( ) )","token is an instance of Token class , created with 2 arguments : TOKEN_VAR ,"
try :,"try ,"
"if hasattr ( field . rel . to .  default manager , STR_ ) :","if field.rel.to._default_manager has an attribute 'get_by_natural_key ' ,"
"cursor . execute ( "" STR_ "" "" STR_ "" % table , [ cursor . fetchone ( ) [ NUM_ ] ] )","with previous result and list containing cull_num , respectively as arguments . call the method cursor.execute with string `` DELETE FROM % s WHERE cache_key < % % s '' as argument ,"
data [ field . attname ] = field . rel . to .  meta . get field ( field . rel . field name ) . to python ( field value ),"all the method field.rel.to._meta.get_field with field.rel.field_name as argument , call the to_python method on the result with ,"
"self . setting , self . nodelist = setting , nodelist","substitute setting and nodelist for self.setting and self.nodelist , respectively ."
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` 'ssi ' tag takes one argument : the path to the file to be included '' .
"def   init   ( self , offset = None , name = None ) :","define the method __init__ with 3 arguments : self , offset set to None , name set to None ."
if os . path . exists ( sql file ) :,"if file path sql_file exists ,"
data = self . flo . read ( self . chunk size ),"call the method self.flo.read with an argument self.chunk_size , substitute the result for data ."
else :,"if not ,"
"raise RuntimeError ( "" STR_ "" "" STR_ "" "" STR_ "" )",raise an RuntimeError exception with an argument string `` The method to extend accepted command-line arguments by the ``
"handler . endElement ( "" STR_ "" )",call the method handler.endElement with an argument string 'channel ' .
if os . path . exists ( old app dir ) :,"append the result to old_app_dirs . if file path old_app_dir exists ,"
return  trans . gettext noop ( message ),call the method _trans.gettext_noop with an argument message .
import traceback,import module traceback .
def  initialize handlers ( self ) :,define the method _initialize_handlers with an argument self .
class Command ( BaseCommand ) :,derive the class Command from the BaseCommand class .
except Exception as e :,"if exception of class Exception , as e , is caught ,"
"msg = "" STR_ "" % host","msg is a string `` Invalid HTTP_HOST header : % r . `` , replace ' % r ' with host ."
if value is None and attr in declared fields :,"if value is None and attr is contained in declared_fields ,"
self . validate key ( key ),call the method self.validate_key with argument key .
"return cls .   new   ( cls , * args )",call the method cls.__new__ with 2 arguments : cls and unpacked list args .
"errors = getattr ( fp , "" STR_ "" , None )","get 'errors ' attribute from fp object , substitute it for errors if it exists , if not errors is None ."
"self . use natural foreign keys = options . pop ( STR_ , False ) or self . use natural keys","remove the 'use_natural_primary_keys ' key from the options dictionary and substitute it for self.use_natural_foreign_keys ,"
return False,return boolean False .
"def setlistdefault ( self , key , default list = None ) :","define the method setlistdefault with 3 arguments : self , key and default_list set to None ."
self . waiting writers -= NUM_,"decrement self.waiting_writers by integer 1 ,"
return,self._files is an instance of class MultiValueDict . return nothing .
  setslice   = complain,substitute complain for __setslice__ .
def byte2int ( bs ) :,define the function byte2int with an argument bs .
app configs = None,app_configs is not None .
if tried :,"if tried is true ,"
"return formats . time format ( value , arg )","call the method formats.time_format with 2 arguments : value and arg , return the result ."
if not app config . path :,"if app_config.path is true ,"
"def popen wrapper ( args , os err exc type = CommandError ) :",define the function popen_wrapper with 2 arguments : args and os_err_exc_type set to CommandError .
return value,return value .
self .  post = post,substitute post for self._post .
arg = settings . DATE FORMAT,substitute settings.DATE_FORMAT for arg .
"return "" STR_ "" % ( self . id , self . value )","return string `` ( % s % r ) '' , replace ' % s ' with self.if and ' % r ' with self.value ."
self . lineno = None,self.lineno is None .
return list (  serializers ),"convert _serializers into a list , return it ."
if arg . startswith ( option ) :,"if arg starts with options ,"
self . cdata tag = None,set field cdata_tag for this class instance to None .
"msg = ( "" STR_ "" "" STR_ "" )",msg is a string `` The use of the language code ' % s ' is deprecated . Please use the ' % s ' translation instead . `` .
itervalues =  itervalues,substitute _itervalues for itervalues .
return datetime ( * kw ),"call the function datetime with an argument unpacked list kw , return the result ."
tzinfo = kw . pop ( STR_ ),"substitute the result for value under the 'microsecond ' key of the kw dictionary . remove entry under the 'tzinfo ' key of the kw dictionary , substitute it for tzinfo ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid_list ' key of the self.error_messages dictionary and code set to 'invalid_list ' .
"if hasattr ( f , STR_ ) and callable ( f . seek ) :","value under the 'invalid_image ' key of the self.error_messages dictionary and code set to a string 'invalid_image ' , and third element of the return value of the function sys.exc_info . if f has an attribute 'seek ' and if f.seek is an callable object ,"
if dirname and not os . path . exists ( dirname ) :,"if dirname is true and dirname directory doesnt exists ,"
"url = reverse ( project name + STR_ + view name , args = args , kwargs = kwargs , current app = context . current app )","call the function reverse with 4 arguments : concatenated project_name , character ' . ' and view_name , args as args , kwargs as kwargs ,"
num = cursor . fetchone ( ) [ NUM_ ],"fetch next entry for the database that cursor points into , substitute first element of it for num ."
def encoding ( self ) :,define the method encoding with an argument self .
field = field . rel . get related field ( ),"call the method field.rel.get_related_field , substitute the result for field ."
if self . number == self . paginator . num pages :,"if self.number equals to self.paginator.num_pages ,"
Module six moves urllib error .  moved attributes =  urllib error moved attributes,substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes .
from django . utils import six,from django.utils import six into default name space .
output . append ( STR_ . join ( STR_ % e for e in errors ) ),"for every e in errors convert e into a string and append it to a string ' * ' ,"
else :,"if not ,"
if host [ - NUM_ ] == STR_ :,"if last element of host equals character ' ] ' ,"
field type = STR_,field_type is a string 'TextField ' .
self .  producer = [ ],self._producer is an empty list .
"from django . utils . encoding import python 2 unicode compatible , force str",from django.utils.encoding import python_2_unicode_compatible and force_st into default name space .
def   enter   ( self ) :,define the method __enter__ with an argument self .
password += b STR_ * ( in ner . block size - len ( password ) ),"decrement by length of password , create bytes string with previous result number of characters '\x00 ' ,"
"def  coerce ( self , value ) :",from the base class of the class TypedChoiceField . define the method _coerce with arguments self and value .
if value in self . empty values and self . required :,"if value is contained in self.empty_values and self.required is true ,"
self .  populate ( ),call the method self._populate .
pass,do nothing .
"out . write ( blankout ( t . contents , STR_ ) )","call the function blankout with 2 arguments : t.contents and ' B ' , write the result to out ."
parts = viewname . split ( STR_ ),"call the method viewname.split , with an argument ' : ' , substitute the result for parts ."
if value :,"if value is true ,"
import base64,import module base64 .
if options . get ( STR_ ) :,if the key doesnt exists use sys.stdout as an argument . if value under the 'no_color ' key of the options dictionary .
import calendar,import module calendar .
filepath = parser . compile filter ( bits [ NUM_ ] ),"where ' % s ' is replaced with first element of bits . call the method parser.compile_filter with second element of bits as an argument , substitute the result for filepath ."
from django . utils .  os import upath,from django.utils._os import upath into default name space .
self . var = var,substitute var for self.var .
if self . merge and conflicts :,"if self.merge and conflicts are both true ,"
return data . getlist ( name ),"call the method data.getlist with an argument name , return the result ."
"return delattr ( caches [ DEFAULT CACHE ALIAS ] , name )",delete the attribute name from the cache dictionary under the DEFAULT_CACHE_ALIAS key .
"from datetime import datetime , timedelta , tzinfo","from datetime import datetime , timedelta and tzinfo into default name space ."
"return resolved args , resolved kwargs",for every k and v in return value of the method self.kwargs.items . return resolved_args and resolved_kwargs .
"if module has submodule ( app config . module , module to search ) :","if call to the function module_has_submodule with 2 arguments : app_config.module and module_to_search evaluates to true ,"
import warnings,import module warnings .
"self . write po file ( potfile , locale )",call the method self.write_po_file with 2 arguments : potfile and locale .
output = [ ],output is an empty list .
"return FilterExpression ( token , self )","return an instance of FilterExpression class , created with 2 arguments : token and self ."
"def  create attachment ( self , filename , content , mimetype = None ) :","define the method _create_attachment with 4 arguments : self , filename , content and mimetype set to None ."
return,return nothing .
for option in options :,"sort the result and substitute it for options . for every option in options ,"
if sign :,"if sign is true ,"
"def   init   ( self , * dicts ) :",define the method __init__ with 2 arguments : self and unpacked list dicts .
cleaned data = self . clean ( ),"call the method self.clean , substitute the result for cleaned_data ."
for tablename in tablenames :,"for every tablename in tablenames ,"
"thread . start new thread ( main func , args )",call the function thread.start_new_thread with main_func and args as arguments .
if self . verbatim and block content == self . verbatim :,"substitute the result for block_content . if self.verbatim is true and block_content equals self.verbatim ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
if not ( value is True or value is False or value is None or value == ) :,"if value is boolean False or boolean True or value is None or value is an empty string , do not perform the following ,"
if is  aware ( date ) :,"call the function is_aware with an argument date , if it evaluates to true ,"
return self .   offset,return self.__offset .
"def compile filter error ( self , token , e ) :","define the method compile_filter_error with 3 arguments : self , token and e ."
from django . utils import six,from django.utils import six into default name space .
from django . core . management . base import AppCommand,from django.core.management.base import AppCommand into default name space .
if field type == STR_ :,"if field_type equals a string 'BooleanField ( ' ,"
pass,do nothing .
"raise CommandError ( "" STR_ "" "" STR_ "" "" STR_ "" % ( self . leave locale alone , self . can import settings ) )","raise an CommandError exception with an argument string , `` Incompatible values of 'leave_locale_alone ' ``"
for subnode in node :,"for every subnode in node ,"
if o . microsecond :,"if o.microsecond is true ,"
"seconds2 , name2 = chunks [ i + NUM_ ]","get the element of chunks at the ( i+1 ) -the index , assign it to the seconds2 and name2 , respectively ."
"self . xml . ignorableWhitespace ( STR_ + * self . options . get ( STR_ , None ) * level )","get the value under the 'indent ' key of the options dictionary , multiply it with level , create a string containing number of whitespaces equal to the previous result , append it to the string containing newline character , use the result as the argument for the call to the self.xml.ignorableWhitespace method ."
"def send ( self , fail silently = False ) :",define the method send with arguments self and fail_silently set to boolean False .
"def write message ( self , message ) :",define the method write_message with arguments self and message .
cls .   dispatch [ klass ] = { },value under the klass key of the cls.__dispatch dictionary is an empty dictionary .
output =,output is an empty string .
if self . choices :,"if self.choices is true ,"
else :,"if not ,"
if self . localize :,"if self.localize is true ,"
self . field name = field name,substitute field_name for self.field_name .
"app list = OrderedDict ( ( app config , None ) for app config in apps . get app configs ( ) if app config . models module is not None and app config not in excluded apps )","app_list is an instance of OrderedDict class , created with an argument a tuple containing elements : app_config and None ,"
name = match . lastgroup,"for every match in the result , substitute match.lastgroup for name ."
"level = handler config . get ( STR_ , None )","get handler_config dictionary element under 'level ' key , if it exists substitute it for level , if not , level is None ."
"def   init   ( self , max value = None , min value = None , * args , ** kwargs ) :","'Enter a whole number . ' for 'invalid ' . define the method __init__ with 5 arguments : self , max_value set to None , min_value set to None , unpacked list args and unpacked dictionary kwargs ."
elif size < len ( self . buffer ) :,"otherwise if size is less than length of self.buffer ,"
"form . fields [ ORDERING FIELD NAME ] = IntegerField ( label =   ( STR_ ) , in itial = in dex + NUM_ , required = False )","value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class , created with 3 arguments :"
continue,"skip this loop iteration ,"
elif token . token type == NUM_ :,"otherwise if token.token_type equals integer 2 ,"
"def   getattr   ( self , real name ) :",define the method __getattr__ with 2 arguments : self and real_name .
if not callable ( view func ) :,"if view_function is not a callable function ,"
if not host validation re . match ( host ) :,call the method host_validation_re.match with an argument host .
buffer  = line,substitute line for buffer_ .
"return [ ] , [ [ ] ]",return a list containing an empty string and a list containing an empty list .
try :,"try ,"
pass,do nothing .
self . filters = { },self.filters is an empty dictionary .
else :,"if not ,"
return cursor . fetchone ( ) is not None,"substitute the ' % s ' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary , respectively . if exists return next entry from the database that cursor points at ."
"def handle ( self , * args , ** options ) :","default set to False and help set to string'Creates SQL to unapply the migration , rather than to apply it ' as arguments . define the method handle with self class instance , list of arguments args and options dictionary as the arguments ."
package path = package .   path  ,substitute package.__path__ for package_path .
"elif is in stance ( o , datetime . time ) :","otherwise if o is an instance of datetime.time object ,"
else :,"if not ,"
self . fixture object count = NUM_,self.fixture_object_count is integer 0 .
except signing . BadSignature :,"with arguments cookie_value and max_age set to max_age . if signing.BadSignature exception is caught ,"
from django . utils import six,from django.utils import six into default name space .
if django . VERSION [ - NUM_ ] ! = STR_ :,"if second last element of django.VERSION is not equal to a string 'final ' ,"
output = [ ],output is an empty list .
"tag re = ( re . compile ( STR_ % ( re . escape ( BLOCK TAG START ) , re . escape ( BLOCK TAG END ) , re . escape ( VARIABLE TAG START ) , re . escape ( VARIABLE TAG END ) , re . escape ( COMMENT TAG START ) , re . escape ( COMMENT TAG END ) ) ) )","call the function re.compile with an argument string ' ( % s.* ? % s| % s.* ? % s| % s . * ? % s ) ' , substitute all occurrences of ' % s ' with ,"
except PermissionDenied :,"if exception PermissionDenied is caught ,"
"return  generate cache key ( request , method , headerlist , key prefix )","call the function _generate_cache_key with request , method , headerlist , key_prefix as arguments , return the result ."
"so = open ( out log , STR_ , buffering )","open out_log flie in append mode with buffering size of input buffer , substitute the result for so ."
return calendar . timegm ( result . utctimetuple ( ) ),"call the method result.utctimetuple , use the result as an argument for the call to the method calendar.timegm , return the result ."
from django . dispatch import receiver,from django.dispatch import receiver into default name space .
return None,return None .
"def delete ( self , name ) :",define the method delete with arguments self and name .
class Loader ( BaseLoader ) :,derive the class Loader from the BaseLoader base class .
"parser . add argument ( STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","call the method parser.add_argument with 3 arguments : string ' -- database ' , default set to DEFAULT_DB_ALIAS ,"
digits = len ( digittuple ),substitute length of digittuple for digits .
"manifest = OrderedDict ( ( app name , list ( filter ( model installed , model list ) ) ) for app name , model list in all models )","or opts.auto_created is True and return value of converter function with opts.auto_created._meta.db_table is contained in tables , invert the evaluated expression and return it . manifest is OrderDict class instance , created with tuple of two elements , app_name and list of elements of model_list for which model_installed function returned true , for every app_name and model_list in all_modules ."
if terminal char ! = STR_ :,"if terminal_char is not equal to string ' ) ' ,"
except http . Http404 as e :,"if exception http.Http404 as e is caught ,"
"return bound func ( * args , ** kwargs )","unpacked list args2 and unpacked dictionary kwargs2 , return the result . call the function bound_func with 2 arguments : unpacked list args and unpacked dictionary kwargs , return the result ."
@ deconstructible,"decorator deconstructible ,"
template with initial = STR_,template_with_initial is a string ' % ( initial_text ) s : % ( initial ) s % ( clear_template ) s < br / > % ( input_text ) s : % ( input ) s ' .
@ property,"property decorator ,"
questioner = InteractiveMigrationQuestioner ( ),questioner is an instance of a InteractiveMigrationQuestioner class .
meta = STR_,meta is a string ' < could not parse > ' .
try :,"try ,"
"from django . utils . translation import TranslatorCommentWarning , trim whitespace , LANGUAGE SESSION KEY","from django.utils.translation import TranslatorCommentWarning , trim_whitespace and LANGUAGE_SESSION_KEY into default name space ."
exclude = form .  get validation exclusions ( ),"call the method form._get_validation_exclusions , substitute the result for exclude ."
"singular suffix , plural suffix = bits [ : NUM_ ]","substitute first 2 elements of bits for singular_suffix and plural_suffix , respectively ."
if migration . replaces :,"if migration.replaces is true ,"
"self . db = options . pop ( STR_ , DEFAULT DB ALIAS )","substitute the result for self.event_stream . remove the 'using ' key from the options dictionary , substitute the return value for self.db , if the key doesnt exists substitute"
"def   getitem   ( self , key ) :",define the method __getitem__ with 2 arguments : self and key .
return iter ( self . keyOrder ),return iterable self.keyOrder .
"root = config . get ( STR_ , None )","get config dictionary element under 'root ' key , if it exists substitute it for root , if not , root is None ."
import sys,import module sys .
"return list  , False",return list_ and boolean False .
"self . target , self . expression = target , expression","substitute target and expression for self.target and self.expression , respectively ."
scheme = value . split ( STR_ ) [ NUM_ ] . lower ( ),"call the value.split method with ' : // ' as argument , convert first element of the result to lower case , substitute the result for scheme ."
return value,"return value ,"
return self . paginator . validate number ( self . number - NUM_ ),"call the method self.paginator.validate_number with self.number decremented by 1 as argument , return the result ."
import sys,import module sys .
return NUM_,return integer 0 .
if settings . DEBUG :,"if settings.DEBUG is true ,"
except ValueError :,"if ValueError exception is caught ,"
encoding = self . encoding or settings . DEFAULT CHARSET,"if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET for encoding ."
db = router . db for read ( self . cache model class ),"call the method router.db_for_write with argument self.cache_model_class , substitute the result for db ."
self .  client = self .  lib . Client ( self .  servers ),"call the self._lib.Client with argument self._servers , substitute the result for self._client ."
"custom sql = custom sql for model ( model , no style ( ) , connection )","call the method custom_sql_for_model with model , no_style ( ) and connection as arguments , substitute the result for custom_sql ."
for form in valid forms :,"for every form in valid_forms ,"
program options = [ STR_ ],program_options is list containing string ' -- check-format ' .
sql files = [ ],sql_files is an empty list .
if obj . pk is None :,"if obj.pk is None ,"
self . schemes = schemes,substitute schemes for self.schemes .
if fk name :,"if fk_name is true ,"
def get fqdn ( self ) :,define the method get_fqdn with argument self .
tf = TimeFormat ( value ),"tf is an instance of TimeFormat class , created with an argument value ."
if settings . SECURE PROXY SSL HEADER :,"if settings.SECURE_PROXY_SSL_HEADER is true ,"
"relations = connection . in trospection . get relations ( cursor , table name )","call the method connection.introspection.get_relations with 2 arguments cursor , table_name and substitute the result for relations ."
for first select in  parse date fmt ( ) :,for every first_select in return value of the function _parse_date_fmt .
return val,return val .
return,return nothing .
class TokenBase ( object ) :,derive the class TokenBase from the object base class .
yield buffer ,yield one element from the buffer_ iterable .
import datetime,import module datetime .
class SpacelessNode ( Node ) :,"and self.format_string , return the result . derive the class SpacelessNode from Node base class ."
"def valid value ( self , value ) :",code set to an string 'invalid_choice ' and dictionary params with an entry : value for 'value ' . define the method valid_value with arguments self and value .
"result , upto = [ ] , NUM_","result is an empty list , upto is integer 0 ."
import time,import module time .
continue,"skip this loop execution ,"
"return mark safe ( conditional escape ( sep ) . join ( format html ( format string , * tuple ( args ) ) for args in args generator ) )","join results of format_html called with 2 arguments : format_string and tuple with an element args , into a string ,"
"for accept lang , unused in parse accept lang header ( accept ) :","if not accept is an empty string . call the function parse_accept_lang_header with an argument accept , for every accept_lang and unused in the result ,"
raise,raise an exception .
from django . conf import settings,from django.conf import settings into default name space .
"self . common logger config ( root , config , in cremental )","call the method self.common_logger_config with 3 arguments : root , config and incremental ."
class HttpResponseServerError ( HttpResponse ) :,derive the class HttpResponseServerError from the HttpResponse base class .
"if not prefix or not hasattr ( self , STR_ ) :","if prefix is false , and self doesnt have '_callback_str ' attribute ,"
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
if help texts and f . name in help texts :,"if help_texts is true and f.name is contained in help_texts ,"
"if connections [ db ] . features . needs datetime string cast and not is in stance ( expires , datetime ) :","if features.needs_datetime_string_cast field of the object represented stored under the db key of connections dictionary is true ,"
class SerializerDoesNotExist ( KeyError ) :,derive the class SerializerDoesNotExist from the KeyError base class .
self .  archive . close ( ),call the method self._archive.close .
except OSError as e :,"if OSError , renamed to e , is caught ,"
if line . lstrip ( ) . startswith ( TRANSLATOR COMMENT MARK ) :,"call the method line.lstrip , if the result starts with TRANSLATOR_COMMENT_MARK ,"
"raise ValidationError (   ( STR_ ) , code = STR_ , )","raise ValidationError with 2 arguments : return value of the function _ called with an argument string ,"
"sql list = sql flush ( self . style , connection , only django = True , reset sequences = reset sequences , allow cascade = allow cascade )","call the method sql_flush with 5 arguments : self.style , connection , only_django set to boolean True ,"
"with codecs . open ( sql file , STR_ , encoding = settings . FILE CHARSET ) as fp :","call the function codecs.open with 3 arguments : sql_file , string ' r ' and encoding set to settings.FILE_CHARSET , with the result renamed to fp ,"
if six . PY3 :,"if six.PY3 is boolean True ,"
def values ( self ) :,define the method values with an argument self .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'required ' key of the self.error_messages dictionary and code set to 'required ' .
return False,return boolean False .
Encoders . encode base64 ( attachment ),call the method Encoders.encode_base64 with an argument attachment .
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
p pattern = pattern . regex . pattern,substitute pattern.regex.pattern for p_pattern .
out . write ( STR_ ),write string ' # \n ' to out file .
unencoded ampersands re = re . compile ( r STR_ ),"call the function re.compile with raw string ' & ( ? ! ( \w+| # \d+ ) ; ) ' , substitute the result for unencoded_ampersands_re ."
class Promise ( object ) :,derive the class Promise from the object base class .
self . max expr = max expr,substitute max_expr for self.max_expr .
"callback = getattr ( urls , STR_ % view type )","replace ' % s ' in the string 'handler % s ' with view_type , use it as an name of the attribute to get from the urls , substitute it for callback ."
"def  coerce ( self , value ) :",from the base class of the class TypedMultipleChoiceField . define the method _coerce with arguments self and value .
"self . stdout . write ( self . style . MIGRATE LABEL ( "" STR_ "" ) + "" STR_ "" % ( targets [ NUM_ ] [ NUM_ ] , targets [ NUM_ ] [ NUM_ ] ) )","replace ' % s ' in string `` % s , from % s '' with second and first element of the first targets row , respectively ,"
self . bad cookies . add ( key ),add key to the self.bad_cookies set .
class Command ( TemplateCommand ) :,derive class Command from the TemplateCommand base class .
"def resolve ( self , s ) :",define the method resolve with 2 arguments : self and s .
self .  createdir ( ),call the self._createdir method .
return,return nothing .
"resolver = get ns resolver ( ns pattern , resolver )","call the function get_ns_resolver with arguments ns_pattern and resolver , substitute the result for resolver ."
if autoescape :,"if autoescape is true ,"
return value [ - NUM_ ],return last element of value .
try :,"try ,"
def  init translation catalog ( self ) :,define the method _init_translation_catalog with an argument self .
"return "" STR_ """,return a string `` < UTC > '' .
is  usable = resource string is not None,"if resource_string is not None , is_usable is boolean True , otherwise is_usable is boolean False ."
"def curry (  curried func , * args , ** kwargs ) :","define the function curry with 3 arguments : _curried_func , unpacked list args and unpacked dictionary kwargs ."
self . queryset . filter ( ** { key : pk } ),"call the method self.queryset.filter with an argument , unpacked dictionary with an entry : pk for key ."
"reverse lazy = lazy ( reverse , str )","use the result as an argument for the call to the function iri_to_uri , return the result . call the function lazy with arguments reverse and str , substitute the results for reverse_lazy ."
"for opening , closing in WRAPPING PUNCTUATION :","for every opening and closing in WRAPPING_PUNCTUATION ,"
return output,return output .
softspace = property ( lambda self : self . file . softspace ),"define lambda function that returns self.file.softspace field , use it as an argument for property function , put the result in softspace ."
return True,return boolean True .
context [ self . loopvars [ NUM_ ] ] = item,substitute item for value under the first element of self.loopvars key of the context dictionary .
else :,"if not ,"
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
bits = token . split contents ( ) [ NUM_ : ],"call the function token.split_contents , substitute the result without the first element for bits ."
"sys . modules [   name   + "" STR_ "" ] = sys . modules [   name   + "" STR_ "" ] = Module six moves urllib error (   name   + "" STR_ "" )","call the method Module_six_moves_urllib_request with an argument : string `` .moves.urllib.error '' appended to __name__ ,"
"request repr = "" STR_ """,request_repr is a string `` unavailable '' .
"def decr version ( self , key , delta = NUM_ , version = None ) :","define the method decr_version with 4 arguments , self , key , delta defaulting to integer 1 and version defaulting to None ."
self .  reverse dict = { },self._reverse_dict is an empty dictionary .
"absolute http url re = re . compile ( r "" STR_ "" , re . I )","compile the regex `` ^https ? : // '' with an argument re.I , substitute it for absolute_http_url_re ."
"attachment = SafeMIMEMessage ( content , subtype )","attachment is an instance of a class SafeMIMEMessage , created with the arguments content and subtype ."
"end = s . find ( b STR_ , end + NUM_ )","is an even number , call the method s.find with 2 arguments : bytes string ' ; ' and end incremented by one , substitute the result for end ."
"LockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , DWORD , LPOVERLAPPED ]","LockFileEx.argtypes is a list containing 6 elements : HANDLE , DWORD , DWORD , DWORD , DWORD and LPOVERLAPPED ."
"call command ( "" STR_ "" , in teractive = True , database = options [ STR_ ] )","call the function call_command with 3 arguments : string `` createsuperuser '' , interactive is boolean True ,"
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` 'autoescape ' argument should be 'on ' or 'off ' '' .
"response = debug . technical 404 response ( request , e )","call the function debug.technical_404_response with request and e as arguments , assign the result to response ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ )","'Database state will be brought to the state after that migration . ' as arguments . call the method parser.add_argument with string ' -- noinput ' , action containing string 'store_false ' , dest set to string 'interactive ' ,"
format locations = [ ],format_locations is an empty list .
"def  construct form ( self , i , ** kwargs ) :","define the method _construct_form with 3 arguments : self , i and unpacked dictionary kwargs ."
result = [ ],result is a list containing an empty string .
as form = True,as_form is boolean True .
pass,do nothing .
"def tag function ( self , func ) :",substitute ' % r ' with name and compile_function . define the method tag_function with 2 argument : self and func .
"def   init   ( self , fields = ( ) , * args , ** kwargs ) :","define the method __init__ with arguments : self , fields set to an empty tuple , unpacked list args and unpacked dictionary kwargs ."
class URLField ( CharField ) :,derive the class URLField from the base class CharField class .
"def handle ( self , * args , ** options ) :","dest as a string 'keep_pot ' , default as boolean False and help as a string `` Keep .pot file after making messages . Useful when debugging . '' define the method handle with 3 arguments : self , unpacked list args and unpacked dictionary options ."
elif ch ! = STR_ :,"otherwise if ch equals a string ' P ' ,"
"return self .  headers . get ( header . lower ( ) , ( None , alternate ) ) [ NUM_ ]","convert header to lowercase , use it to as a key to get the value of the self._headers dictionary ,"
else :,"if not ,"
pflen = len ( prefixed ),substitute length of prefixed for pflen .
return value . tzinfo is None or value . tzinfo . utcoffset ( value ) is None,"if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None ,"
new file . write ( content ),write content to new_file file .
content = f . read ( ),"read the whole file f , substitute the result for content ."
elif total forms > self . max num >= NUM_ :,"otherwise if total_forms is grater than self.max_num is grater or equal to integer 0 ,"
"for obj in PythonDeserializer ( objects , ** options ) :","for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options ,"
import base64,import module base64 .
if mime encode :,"if mime_encode is true ,"
import gzip,import module gzip .
"changes = autodetector . arrange for graph ( changes , loader . graph )","for every app in app_labels . call the method autodetector.arrange_for_graph with 2 arguments : changes , loader.graph , substitute the result for changes ."
self . match re = re . compile ( self . match ),"compile self.match regular expression , substitute it for self.match_re ."
"elif is in stance ( value , datetime . time ) :","otherwise if value is an instance of datetime.time ,"
return wrapper,return wrapper .
return { },return an empty dictionary .
name = self . timezone . tzname ( self . data ) if self . timezone else None,"if self.timezone is true , call the method self.timezone.tzname with an argument self.data , substitute the result for name ,"
"self . error messages = getattr ( options , STR_ , None )","get 'error_messages ' attribute from the options object , if it exists substitute it for self.error_messages ,"
"check for migrations ( app config , connection )","call the function check_for_migrations with an arguments app_config , connection ."
from django . core . management . base import BaseCommand,from django.core.management.base import BaseCommand into default name space .
for app config in apps . get app configs ( ) :,"call the method apps.get_app_configs , for app_config in the result ,"
name = STR_ . join ( parts ),"join elements of parts into a string , separated with ' . ' , substitute it for name ."
p = i,substitute i for p .
import os,import module os .
"def  i18n cache key suffix ( request , cache key ) :","define function _i18n_cache_key_suffix , with request and cache_key as arguments ."
"def normalize col name ( self , col name , used column names , is  relation ) :","define the method normalize_col_name with 4 arguments : self , col_name , used_column_names and is_relation ."
sublist =,sublist is an empty string .
return self . empty form . media,return self.empty_form.media .
from django . utils import six,from django.utils import six into default name space .
thefile = STR_ % self . file,"convert self.file to a string and append '.c ' string to it , substitute the result for thefile ."
"def dummy ( * args , ** kwargs ) :",define the function dummy with 2 arguments : unpacked list args and unpacked dictionary kwargs .
for bit in bits :,"for every bit in bits ,"
"result . append ( self . create token ( last bit , ( upto , upto + len ( last bit ) ) , False ) )","call the method self.create_token with 3 arguments : last_bit , tuple with 2 elements : upto and sum of upto and length of last_bit ,"
class PasswordInput ( TextInput ) :,derive the class PasswordInput from the TextInput base class .
return mark safe ( STR_ . join ( output ) ),"join elements of output into a string , separated with newline character ,"
"sql files . append ( os . path . join ( app dir , "" STR_ "" % ( opts . model name , backend name ) ) )","join into a file path : app_dir and string % s. % s.sql , where ' % s ' is replaced by opts.model_name and backend_name , respectively ,"
data = self .  prepare data ( data ),"call the method self._prepare_data with an argument data , substitute the result for data ."
if STR_ not in opts :,"if string 'noreset ' is not contained in opts ,"
"def   init   ( self , nodelist true , nodelist false , * varlist ) :","define the method __init__ with 4 arguments : self , nodelist_true , nodelist_false and unpacked list varlist ."
sublist item = None,sublist_item is None .
"form . fields [ ORDERING FIELD NAME ] = IntegerField ( label =   ( STR_ ) , required = False )","value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class , created with 2 arguments :"
"def save new ( self , form , commit = True ) :","define the method save_new with 3 arguments : self , form and commit set to boolean True ."
self . full clean ( ),call the method self.full_clean .
reloader = python reloader,substitute python_reloader for reloader .
class Module six moves urllib request (  LazyModule ) :,"assign the result to the value under the string `` .moves.urllib_error '' appended to __name__ key of the sys.modules dictionary , and to the value under the string `` .moves.urllib.error '' appended to __name__ key of the sys.modules dictionary . derive class Module_six_moves_urllib_request from the _LazyModule base class ."
"self . stdout . write ( self . style . MIGRATE SUCCESS ( "" STR_ "" ) )",wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string `` FAKED '' as a argument .
"if hasattr ( self . file , STR_ ) :","if self.file has an attribute 'name ' ,"
else :,"if not ,"
sample = f . read ( NUM_ ),read 4 bytes from file f and store it in sample .
from django . core . management . base import BaseCommand,from django.core.management.base import BaseCommand into default name space .
"parser . add argument ( STR_ , default = STR_ , dest = STR_ , help = STR_ )","nargs set to '* ' and help is a string 'Restricts dumped data to the specified app_label or app_label.ModelName. ' . call the method parser.add_argument with 4 arguments : string ' -- format ' , default set to string 'json ' ,"
"url = reverse ( view name , args = args , kwargs = kwargs , current app = context . current app )","call the function reverse with 4 arguments : view_name , args as args , kwargs as kwargs and current_app as context.current_app ,"
"raise TemplateSyntaxError ( "" STR_ "" % name )","raise an TemplateSyntaxError exception with an argument string `` Named cycle ' % s ' does not exist '' , where ' % s ' is replaced with name ."
label = bf . label tag ( label ) or,"call the function bf.label_tag with an argument label , if the result is true substitute it for label , otherwise label is an empty string ."
msg [ STR_ ] = make msgid ( ),"call the make_msgid function , substitute it for value under the 'Message-ID ' key of msg dictionary ."
class TagHelperNode ( Node ) :,derive the class TagHelperNode form the base class Node .
else :,"if not ,"
return retval,return retval .
result . key = key,substitute key for result.key .
locale dir = path,"called with an argument path , substitute path for locale_dir ."
"Model = self .  get model from node ( node , "" STR_ "" )",call the method self._get_model_from_node with arguments node and string 'model ' .
widget . is  required = self . required,substitute self.required for widget.is_required .
tag = bits [ NUM_ ],substitute second element of bits for tag .
else :,"if not ,"
if self . callback ( record ) :,"call the method self.callback with an argument record , if the result evaluates to true ,"
"elif not is in stance ( value , ConvertingTuple ) and is in stance ( value , tuple ) :","otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type ,"
return in itial,return initial .
return True,return boolean True .
"if hasattr ( value , STR_ ) :","if value has an attribute 'close ' ,"
replaces . extend ( migration . replaces ),"extend replaces list with migration.replaces ,"
import sys,import module sys .
"def  create message ( self , msg ) :",define the method _create_message with arguments self and msg .
@ property,"property decorator ,"
self . timezone = obj . tzinfo,substitute obj.tzinfo for self.timezone .
if kwarg :,"if kwarg is true ,"
try :,"try ,"
try :,"try ,"
"return ( resource , STR_ % ( app config . name , pkg name ) )","return a tuple with 2 elements : resource and string 'egg : % s : % s ' , where ' % s ' is replaced with app_config.name and pkg_name , respective ."
ser fmt = parts [ - NUM_ ],substitute the last element of parts for ser_fmt .
"if not is in stance ( self . file path , six . string types ) :","if self.file_path is not an instance of six.string_types ,"
"def   init   ( self , * args , ** kwargs ) :","define the __init__ method with 3 arguments : self , unpacked list args and unpacked dictionary **kwargs ."
import sys,import module sys .
from django . utils . encoding import smart text,from django.utils.encoding import smart_text into default name space .
try :,"try ,"
return settings . TEMPLATE STRING IF INVALID,return settings.TEMPLATE_STRING_IF_INVALID .
"fp . write ( "" STR_ "" % os . getpid ( ) )","call the method fp.write with an argument string ' % d\n '' , with ' % d ' replaced by os.getpid function return value ."
return out,return out .
if self . timezone is None :,"if self.timezone is None ,"
"def   init   ( self , attrs = None ) :",define the method __init__ with arguments self and attrs set to None .
def values ( self ) :,define the method values with an argument self .
optimizer = MigrationOptimizer ( ),optimizer is an instance of MigrationOptimizer class .
chunk size = self . DEFAULT CHUNK SIZE,substitute self.DEFAULT_CHUNK_SIZE for chunk_size .
output transaction = True,output_transaction is boolean True .
re formatchars = re . compile ( r STR_ ),"compile regex from a string ' ( ? < ! \\ ) ( [ aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ ] ) ' , substitute it for re_formatchars ."
sep = space,substitute space for sep .
"def value from datadict ( self , data , files , name ) :","define the method value_from_datadict with 4 arguments : self , data , files and name ."
self .  wrapped = empty,substitute empty for self._wrapped .
except base . DeserializationError :,"if base.DeserializationError exception is caught ,"
if six . PY3 :,"if six.PY3 is true ,"
"FILE = "" STR_ """,FILE is a file '' .
args = args [ : - NUM_ ],"substitute args , without the last element for args ."
" PROTECTED TYPES = six . in teger types + ( type ( None ) , float , Decimal , datetime . datetime , datetime . date , datetime . time )","_PROTECTED_TYPES is a tuple containing next elements , six.integer_types , type of None , type of float , Decimal , detetime.datetime ,"
return mark safe ( self . render ( self . context ) ),"under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None , call the method self.render with an argument self.context , use it as an argument for the call to the mark_safe function , return the result ."
return script name . decode ( UTF 8 ),return scrip_name.decode method result called with UTF_8 as argument .
non capturing groups . append ( len ( result ) ),append length of result to non_capturing_groups .
os . remove ( path to remove ),"remove file path_to_remove ,"
"handler . addQuickElement ( "" STR_ "" , None , { "" STR_ "" : "" STR_ "" , "" STR_ "" : self . feed [ STR_ ] } )","call the method handler.addQuickElement with 3 arguments : string 'atom : link ' , None and dictionary with 2 entries : 'self ' for 'rel ' ,"
"def remove ( self , item ) :",define the method remove with 2 arguments : self and item .
self . children . append ( data ),append data to self.children .
in dex = data . find ( self .  boundary ),"call the method data.find with an argument self._boundary , substitute the result for index ."
"if hasattr ( middleware , STR_ ) :","if middleware has an attribute 'process_request ' ,"
def get cookie signer ( salt = STR_ ) :,"use the result as an argument for the call to the b64_encode function , return the result . define the function get_cookie_signer with an argument salt set to string 'django.core.signing.get_cookie_signer ' ."
if can fail :,"if can_fail is true ,"
return value,return value .
if extra attrs :,"if extra_attrs is true ,"
for arg in argv [ NUM_ : ] :,"for arg in argv list without the first two elements ,"
"raise CommandError ( "" STR_ "" % ( migration name , app label ) )","raise an CommandError with an argument string `` More than one migration matches ' % s ' in app ' % s ' . Please be more specific . `` ,"
def activate ( language ) :,"plural set to plural and number set to number , return the result . define the function activate with an argument language ."
"guessed path = path . join ( tempdir , guessed filename )","join tempdir and guessed_filename into a file path , substitute it for guessed_path ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
WSGIServer = module . WSGIServer,substitute module.WSGIServer for WSGIServer .
def u ( self ) :,define the method u with an argument self .
"if self . use natural foreign keys and hasattr ( field . rel . to , STR_ ) :","if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key ' attribute ,"
if self . ignore and field name not in model fields :,"if self.ignore is true and field_name is not contained in model_fields ,"
def new method proxy ( func ) :,define the function new_method_proxy with an argument func .
"from django . forms . fields import Field , ChoiceField",from django.forms.fields import Field and ChoiceField into default name space .
self . keyOrder . append ( key ),append key to self.keyOrder dictionary .
line = line [ space : ],remove all the elements from space index of line .
"self . ignore = options . pop ( STR_ , False )","DEFAULT_DB_ALIAS for self.db . remove the 'ignorenonexistent ' key from the options dictionary , substitute the return value for self.db ,"
needs multipart form = False,needs_multipart_form is boolean False .
"self .  dimensions cache = get image dimensions ( self , close = close )","evaluate the method get_image_dimensions with self class instance and close set to close as the arguments , substitute the result for self._dimensions_cache ."
if years :,"if years is true ,"
memo [ id ( self ) ] = result,"get the identity of the self object , use it as a key to get the value of the memo dictionary , substitute result for it ."
"style func = [ f for f in ( style func , self . style func , lambda x : x ) if f is not None ] [ NUM_ ]","if f is not None append it to a list for every f in tuple containing 3 elements : style_func , self.style_func ,"
"raise CommandError ( "" STR_ "" % name str )","in `` % s in % s '' substitute ' % s ' with names string and app , respective , join all the previous pairs into a string separated by ' ; ' , substitute it for name_str . raise CommandError exception , with `` Conflicting migrations detected ( % s ) .\nTo fix them run 'python manage.py makemigrations -- merge ' '' ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
else :,"if not ,"
return,return an empty string .
"print  = getattr ( moves . builtins , "" STR_ "" , None )","get attribute 'print ' from the moves.builtins object , if it exists substitute it for print_ , if not print_ is None ."
"new operations = optimizer . optimize ( operations , migration . app label )","call the method optimizer.optimize with 2 arguments operations and migration.app_label , substitute the result for new_operations ."
break,"break the loop execution ,"
return,return an empty string .
file = data . temporary file path ( ),substitute the result of the function data.temporary_file_path for file .
elif bytes < MB :,"replace ' % ( size ) d with bytes , substitute the result for value . otherwise if bytes is smaller than MB ,"
"self . add error ( None , e )",call the method self.add_error with 2 arguments None and e .
import copy,import module copy .
elif bytes < PB :,"filesize_number_format with result of division of bytes by GB as an argument , substitute the result for value . otherwise if bytes is smaller than PB ,"
try :,"try ,"
open tags = [ ],open_tags is an empty list .
else :,"if not ,"
return force text ( error ),"call the function force_text with an argument error , return the result ."
value = field . to python ( getInnerText ( field node ) . strip ( ) ),"call the function getInnerText with argument field_node , on the result call the method strip , use the result as an argument for the"
"attrs = { "" STR_ "" : smart text ( obj .  meta ) }",attrs is a dictionary containing 1 entry : return value of the smart_text function with argument obj._meta for 'model ' .
"def walk to end ( ch , in put iter ) :",define the function walk_to_end with 2 arguments ch and input_iter .
"def wrapper ( * args , ** kwargs ) :","define the function wrapper with list args , and dictionary pair of values kwargs as arguments ."
"pending references . setdefault ( refto , [ ] ) . extend ( refs )","call the method extend with refs as argument , on the result call the pending_references.setdefault method with refto and empty list as arguments ."
def has other pages ( self ) :,define the method has_other_pages with an argument self .
lang code = get language from path ( request . path info ),"call the function get_language_from_path with an argument request.path_info , substitute it for lang_code ."
result = self . configure custom ( config ),"call the method self.configure_custom with an argument config , substitute the result for result ."
val = None,val is None .
"def slice filter ( value , arg ) :",define the function slice_filter with 2 arguments value and arg .
try :,"try ,"
args =,args is an empty string .
raise ValueError,raise an ValueError exception .
self .  archive . extract ( to path ),call the method self._archive.extract with an argument to_path .
"self . stdout . write ( self . style . MIGRATE HEADING ( "" STR_ "" % app label ) )","substitute ' % s ' in a string `` Merging % s '' with app_label ,"
"return STR_ % ( rfcdate [ : NUM_ ] , rfcdate [ NUM_ : NUM_ ] , rfcdate [ NUM_ : NUM_ ] )","return a string ' % s- % s- % s GMT ' , formated with : first 7 elements of rfcdate , elements of rfcdate from 8-th to the 11-th index ,"
try :,"try ,"
help = ( STR_ STR_ STR_ ),"help is a tuple containing a string : 'Removes ALL DATA from the database , including data added during '"
"def handle ( self , ** options ) :",default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to introspect . Defaults to using the `` default '' database. ' . define the method handle with 2 arguments : self and unpacked dictionary options .
try :,"try ,"
"def dictsort ( value , arg ) :",define the function dictsort with 2 arguments value and arg .
return apps . get model ( model identifier ),call the method apps.get_model with an argument model_identifier .
def   repr   ( self ) :,define the method __repr__ with an argument self .
slug re = re . compile ( r STR_ ),"call the re.compile function with an argument raw string '^ [ -a-zA-Z0-9_ ] + $ ' , substitute the result for slug_re ."
"loader , args = loader [ NUM_ ] , loader [ NUM_ : ]",substitute first element of loader for loader and loader without the first element for args .
class MiddlewareNotUsed ( Exception ) :,derive the class MiddlewareNotUsed from the Exception base class .
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'description ' and value under the 'description ' key of the self.feed dictionary .
else :,"if not ,"
mod = import module ( taglib module ),"call the function import_module with an argument taglib_module , substitute the result for mod ."
"apps . get model ( STR_ , STR_ )",call the method apps.get_model with 2 arguments : string 'auth ' and string 'Permission ' .
"dot = package . rindex ( STR_ , NUM_ , dot )","call the method package.rindex with 3 arguments : string ' . ' , integer 0 and dot , substitute the result for dot ."
"response = callback ( request , ** param dict )","call the callback function with request and dictionary argument param_dict as the arguments , substitute it for response ."
self . write items ( handler ),call the method self.write_items with an argument handler .
"return force str ( "" STR_ "" % self . s [ : NUM_ ] , STR_ , errors = STR_ )","call the function force_str with 3 arguments : string `` < Text Node : ' % s ' > '' , with ' % s ' replaced with first 25 elements of self.s string ,"
number value = rhs [ number ],substitute value under the number key of the rhs dictionary for number_value .
self . validate key ( key ),call the method self.validate_key with argument key .
"missing args message = ( "" STR_ "" "" STR_ "" )",missing_args_message is a tuple containing a string `` No database fixture specified . Please provide the ``
import pickle,import pickle .
"def handle app config ( self , app config , ** options ) :","define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options ."
class DateFormat ( TimeFormat ) :,derive the class DateFormat from the base class TimeFormat .
self .  tzname = self . tzname ( dt ),"call the method self.tzname with an argument dt , substitute the result for self._tzname ."
form .  meta . fields = list ( form .  meta . fields ),form._meta.fields is a list created out of form._meta.fields elements .
from django . utils import six,from django.utils import six into default name space .
"s . serialize ( queryset , ** options )",call the s.serialize method with arguments queryset and unpacked dictionary options .
"return format html ( STR_ , self . error class , format html join ( , STR_ , ( ( force text ( e ) , ) for e in self ) ) )","call the function format_html with 3 arguments : string ' < ul class= '' { 0 } '' > { 1 } < /ul > ' , self.error_class and return value of the function ,"
"if is in stance ( data , bytes ) :","if data is an instance of bytes ,"
"def label tag ( self , contents = None , attrs = None , label suffix = None ) :","define the method label_tag with 4 arguments : self , contents set to None , attrs set to None and label_suffix set to None ."
"walk to end ( ch , pattern iter )",call the function walk_to_end with 2 arguments : ch and pattern_iter .
if app config . models module is None :,"if app_config.models_module is None ,"
"def   exit   ( self , exc type , exc value , tb ) :","define the method __exit__ with self , exc_type , exc_value and tb as arguments ."
with self .  lock :,"call the method self._lock , with the result ,"
"file list = self . find files ( "" STR_ "" )","call the method self.find_files with an argument string ' . ' , substitute the result for file_list ."
p = language . find ( - ),"find first index of occurrence of character '- ' in language , substitute it for p ."
"url = STR_ % ( local , domain )",url is a string 'mailto : % s @ % s ' formated with local and domain .
except TypeError :,"if TypeError exception is caught ,"
extra params = OrderedDict ( ),extra_params is an instance of the class OrderedDict .
try :,try
return  import module ( self . mod ),"call the function _import_module with an argument self.mod , return the result ."
"return strftime ( self , fmt )","call the function strftime with 2 arguments : self and fmt , return the result ."
return line,return line .
self .  archive . close ( ),call the method self._archive.close .
if name is None and filter func is None :,"if name is None and filter_func is None ,"
from django . core . mail . backends . base import BaseEmailBackend,from django.core.mail.backends.base import BaseEmailBackend into default name space .
if value is None :,"if value is None ,"
return FirstOfNode ( [ parser . compile filter ( bit ) for bit in bits ] ),"return an instance of FirstOfNode class , created with an argument , result of the method parser.compile_filter called with bit ,"
"class types = type ,",substitute type for class_types .
"n = getattr ( lookup view , STR_ , None )","get the attribute '__name__ ' from the getattr , if it exists substitute it for m , if not , m is None ."
"def enter command ( self , command , token ) :","define the method enter_command with 3 arguments : self , command and token ."
code list . append ( background [ v ] ),append value under the key v of background dictionary to code_list .
def end serialization ( self ) :,define the method end_serialization with an argument self .
if construct :,"if construct is true ,"
"def sign ( self , value ) :",define the method sign with arguments self and value .
if sep is None :,"if sep is None ,"
"urlize = allow lazy ( urlize , six . text type )","call the function allow_lazy with 2 arguments : urlize , six.text_type , substitute the result for urlize ."
else :,"if not ,"
class NoArgsCommand ( BaseCommand ) :,derive the NoArgsCommand class from the BaseCommand base class .
@ property,"return boolean True , otherwise return boolean False . property decorator ."
"self . attachments . append ( ( filename , content , mimetype ) )","append a tuple containing 3 elements : filename , content , mimetype to self.attachments list ."
output transaction = True,output_transaction is boolean True .
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
try :,"try ,"
@ stringfilter,"decorator stringfilter ,"
"if not directory created . get ( app label , False ) :","get the value under the app_label key of the directory_created dictionary , if exists and it is false ,"
return dirs,"use the result as an argument for the call to the upath function , for every d in dirs , append the results into a list , substitute the resulting list for dirs . return dirs ."
pickled = self .  cache [ key ],substitute value under the key key of self._cache dictionary for pickled .
"warnings . warn ( "" STR_ "" , RemovedInDjango19Warning , stacklevel = NUM_ , )","call the function warnings.warn with 3 arguments : string `` get_declared_fields is deprecated and will be removed in Django 1.9 . `` ,"
"max entries = params . get ( STR_ , options . get ( STR_ , NUM_ ) )","call the options.get method with string 'MAX_ENTRIES ' and integer 300 as arguments , use the string 'max_entries ' and previous result as the arguments for the call to the params.get method , substitute the result for max_entries ."
encoding = self . encoding or settings . DEFAULT CHARSET,"if self.encoding exists substitute it for encoding , if not substitute settings.DEFAULT_CHARSET for encoding ."
doublecolon len = NUM_,doublecolon_len is an integer 0 .
out . write ( STR_ % cmatch . group ( NUM_ ) ),"call the method cmatch.group with an argument integer 1 , format with the result string ' _ ( % s ) ' , write it to out ."
"sites1 =  findall ( s1 , str ( year ) )","added to a tuple with an element year , substitute the result for s1 . call the function _findall with 2 arguments : s1 and year converted into a string , substitute the result for sites1 ."
for k in keys :,"for every k in keys ,"
connection = connections [ options [ STR_ ] ],"extract the value under the key 'database ' from the options dictionary , use the value for indexing connections list , substitute the result for connection ."
if categories :,"called with 2 arguments : s and string_only as boolean True . if categories is true ,"
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
connection = connections [ options . get ( STR_ ) ],"get the value under the 'database ' key of the options dictionary ,"
"def read ( self , * args , ** kwargs ) :","define the method read with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
"while not answer or answer not in "" STR_ "" :","while answer is false or answer is not contained in string `` yn '' , perform the following ,"
raise ImproperlyConfigured ( STR_ STR_ STR_ % self .   class   .   name   ),raise an ImproperlyConfigured exception wiht an argument string 'Command % s defines both `` requires_model_validation '' '
root = max ( roots ),get maximal element from roots and substitute it for root .
timestamp = git log . communicate ( ) [ NUM_ ],"stderr set to subprocess.PIPE , shell set to boolean True , cwd set to repo_dir and universal_newlines set to boolean True , as arguments , substitute the result for git_log . evaluate the method git_log.communicate , substitute first element of the result for timestamp ."
def t ( self ) :,define the method t with an argument self .
return,"return an empty string ,"
from django . apps import apps,from django.apps import apps into default name space .
plural = [ ],plural is an empty list .
"def in ner run ( self , * args , ** options ) :","define the method inner_run with 3 arguments : self , unpacked list args and unpacked dictionary options ."
if len ( t ) == NUM_ :,"if length of t equals to integer 2 ,"
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","type set to int and help is a string 'Specifies the indent level to use when pretty-printing output. ' . call the method parser.add_argument with 5 arguments : string ' -- database ' , default set to string 'store ' , dest set to 'database ' ,"
"os . chmod ( dst , mode )",call the function os.chmod with arguments dst and mode .
parser . delete first token ( ),call the method parser.delete_first_token .
filename = filename [ : - NUM_ ],truncate the last element of filename .
"def render ( self , name , value , attrs = None , choices = ( ) ) :","define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple ."
try :,"try ,"
"from email . utils import formatdate , getaddresses , formataddr , parseaddr","from email.utils import formatdate , getaddresses , formataddr and parseaddr into default name space ."
"raise AttributeError ( "" STR_ "" % self . name )","raise an AttributeError with an argument string `` % s could not be imported `` , formated with self.name ."
"tpl = "" STR_ ""","tpl is an string `` EntitiesForbidden ( name= ' { } ' , system_id= { ! r } , public_id= { ! r } ) '' ."
return tag in self . tags available ( ),"return boolean True if tag is contained in self.tags_available method return value , return False otherwise ."
"def send mail ( subject , message , from email , recipient list , fail silently = False , auth user = None , auth password = None , connection = None , html message = None ) :","define send_mail funtion with subject , message , from_email , recipient_list , fail_silently set to boolean False ,"
"if six . PY3 and is in stance ( val1 , bytes ) and is in stance ( val2 , bytes ) :","if six.PY3 is true and val1 and val2 are an instances of bytes ,"
data = [ ],data is an empty list .
"return data . get ( name , None )","get the value under the name key of the data dictionary , return it , if the previous doesnt exists , return None ."
else :,"if not ,"
return data,return data .
"def configure logging ( logging config , logging settings ) :",and 3 additional pairs of dictionaries for string . define the function configure_logging with 2 arguments : logging_config and logging_settings .
"if not is in stance ( s , Exception ) :","if s is not an instance of the object Exception ,"
"def get response ( self , request ) :","define the method get_response , with self class instance and request as the arguments ."
def f ( self ) :,define the method f with an argument self .
try :,"try ,"
attr list [ NUM_ ] |= termios . ECHO,"perform binary or for operands : fourth element of_attr_list and termios.ECHO , store the result in fourth element of attr_list ."
with self . in itLock :,"with self.initLock ,"
return form,return form .
get callable . cache clear ( ),call the function get_callable.cache_clear .
"return  i18n cache key suffix ( request , cache key )","to the function url.hexdigest ( ) , respectively , substitute it for cache_key . call the function _i18n_cache_key_suffix with request and cache_key as arguments , return the result ."
"return trim whitespace re . sub ( , s . strip ( ) )","call strip s of the surrounding whitespaces , substitute every occurrence of the whitespace in the trim_whitespace_re with previous result , return the result ."
@ register ( Tags . compatibility ),decorator register with argument Tags.compatibility .
return form,"and initial as a dictionary with 4 entries : result of self.total_form_count method for TOTAL_FORM_COUNT , result of self.initial_form_count method for INITIAL_FORM_COUNT , self.min_num for MIN_NUM_FORM_COUNT and self.max_num for MAX_NUM_FORM_COUNT . return form ."
return,return nothing .
self . pointer = i,substitute i for self.pointer .
if lang code is not None :,"if lang_code is not None ,"
from django . conf import settings,from django.conf import settings into default name space .
import logging,import module logging .
"raise ValueError ( "" STR_ "" )",raise an ValueError with an argument string `` MultiValueDict.update ( ) takes either a MultiValueDict or dictionary '' .
"def   init   ( self , subject = , body = , from email = None , to = None , bcc = None , connection = None , attachments = None , headers = None , cc = None ) :","define the method __init__ with 10 arguments : self , subject set to an empty string , body set to an empty string ,"
from os import path,from os import path into default name space .
from django . core import signals,from django.core import signals into default name space .
"raise AttributeError ( "" STR_ "" )",raise an AttributeError exception with an argument string `` You can not set the upload handlers after the upload has been processed . `` .
"def   getitem   ( self , key ) :",define the method __getitem__ with 2 arguments : self and key .
sql statements = executor . collect sql ( plan ),"call method executor.collect_sql with plan as the argument , substitute the result for sql_statements ."
"os . rename ( old file name , new file name )",call the os.rename function with arguments old_file_name and new_file_name .
pass,do nothing .
if not  is shorthand ip ( ip str ) :,"call the function _is_shorthand_ip with an argument ip_str , if it evaluates to false ,"
"field dict = OrderedDict ( [ ( f , field dict . get ( f ) ) for f in fields if ( ( not exclude ) or ( exclude and f not in exclude ) ) and ( f not in ignored ) ] )","for every f in fields , if exclude is false , or if exclude is true and f is not contained in exclude , and only if f is not in ignored ,"
return value and value [ NUM_ ] . upper ( ) + value [ NUM_ : ],"if value is false , return it , if it is true convert first element of value to uppercase letter , return the value ."
url fields [ NUM_ ] = STR_,first element of url_fields is string 'http ' .
return result,return result .
def   repr   ( self ) :,define the method __repr__ with an argument self .
MONTHS = STR_ . split ( ),"MONTHS is a list with 12 elements : strings 'jan ' , 'feb ' , 'mar ' , 'apr ' , 'may ' , 'jun ' , 'jul ' , 'aug ' , 'sep ' , 'oct ' , 'nov ' , and 'dec ' ."
self . proxy = False,self.proxy is boolean False .
from django . conf import settings,from django.conf import settings into default namespace .
"k , v = x , True",substitute x for k and boolean True for v .
return self,return self .
"def  set post ( self , post ) :",define the _set_post method with self class instance and post as the arguments .
"except ( AttributeError , TypeError ) :","if TypeError or AttributeError exceptions are caught ,"
if option in options :,"if option is contained in options ,"
for match in tag re . finditer ( self . template string ) :,"call the method tag_re.finditer with an argument self.template_string , for every match in result ,"
def   repr   ( self ) :,define the method __repr__ with an argument self .
"except ( DatabaseError , IntegrityError ) as e :","if DatabaseError or IntegrityError , renamed to e , exceptions are caught ,"
self . charset = charset,substitute charset for self.charset .
"val2 = self . var2 . resolve ( context , True )","call the method self.var2.resolve with 2 arguments : context and boolean True , substitute the result for val2 ."
except KeyError :,"except if KeyError exception is caught ,"
with self . mutex :,"with self.mutex perform ,"
except KeyError :,"if KeyError exception is caught ,"
"return neg , res",return neg and res .
request = record . request,substitute record.request for request .
except KeyError :,"if KeyError exception is caught ,"
except GeneratorExit :,"if GeneratorExit exception is caught ,"
return datetime . time ( ** kw ),"called with an argument kw , only if v is not None , substitute the result for kw . call the method datetime.time with an argument unpacked dictionary kw , return the result ."
builtins = [ ],builtins is an empty list .
if bit :,"if bit is true ,"
if self . validate domain part ( domain part ) :,"if method self.validate_domain_part with an argument domain_part evaluates to true ,"
v ( value ),call the function v with an argument value .
self . callback = callback,substitute callback for self.callback .
self . setup environ ( ),call the self.setup_environ method .
"def path ( self , name ) :",define the method path with arguments self and name .
if field . rel . to .  meta . pk . rel :,"if field.rel.to._meta.pk.rel is true ,"
"if line [ - NUM_ : ] in ( b STR_ , b STR_ ) :","if last element of line is newline or carriage return character ,"
"kwargs [ STR_ ] = min ( in t ( cc [ STR_ ] ) , kwargs [ STR_ ] )","convert to integer value of dictionary cc under the key 'max-age ' ,"
RESET = STR_,for every x in sequence of integers from 0 to 7 . RESET is a string ' 0 ' .
from django . core . management . base import BaseCommand,from django.core.management.base import BaseCommand into default name space .
if field value is not None :,"if field_value is not None ,"
sys . stdout . close ( ),call the method sys.stdout.close .
else :,"iterations and dklen , return the result . if not ,"
 default = translation ( settings . LANGUAGE CODE ),"call the function translation with an argument settings.LANGUAGE_CODE , substitute the result for _default ."
obj pk = field . rel . to .  default manager . db manager ( self . db ) . get by natural key ( * field value ) . pk,"call the method field.rel.to._default_manager.db_manager with an argument self.db , on the result call the method get_by_natural_key ,"
"self . file . seek ( NUM_ , os . SEEK END )",position the file self.file pointer at the end .
if token . token type == TOKEN BLOCK and token . contents == endtag :,"if token.token_type equals TOKEN_BLOCK and token.contents equals endtag ,"
raise SerializerDoesNotExist ( format ),raise a SerializerDoesNotExist exception with an argument format .
if status ! = STATUS OK :,"if status is not equal to STATUS_OK ,"
"json . dump ( self . get dump object ( obj ) , self . stream , cls = DjangoJSONEncoder , ** self . json kwargs )","call the json.dump function with 4 arguments : return value of the method self.get_dump_object called with an argument obj , self.stream , cls set to DjangoJSONEncoder and unpacked dictionary self.json_kwargs ."
"from django . db import connections , DEFAULT DB ALIAS",from django.db import connections and DEFAULT_DB_ALIAS into default name space .
token = parser . next token ( ),"call the method parser.next_token , substitute the result for token ."
if len ( self .  cache ) >= self .  max entries :,"if length of self._cache is greater or equal to self._max_entries ,"
"def get renderer ( self , name , value , attrs = None , choices = ( ) ) :","define the method get_renderer with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple ."
"return base64 . urlsafe b64decode ( s . ljust ( len ( s ) + len ( s ) % NUM_ , b = ) )","left justify string s in a field of width equal to the sum of length of s and reminder of the division of length of s by integer 4 ,"
"msg = SafeMIMEMultipart (  subtype = self . alternative subtype , encoding = encoding )","msg is an instance of a class SafeMIMEMultipart , created with the arguments : _subtype set to self.alternative_subtype and encoding set to encoding ."
"return [ format html ( STR_ , self . absolute path ( path ) ) for path in self .  js ]",return a list containing results of the function format_html called with 2 arguments :
"def   contains   ( self , item ) :",define the method __contains__ with an argument self .
pass,do nothing .
chars = STR_,chars is a string 'abcdefghijklmnopqrstuvwxyz0123456789 ! @ # $ % ^ & * ( -_=+ ) ' .
"file path = os . path . normpath ( os . path . join ( dirpath , filename ) )","join dirpath and filename into path , use it as an argument for the call to the function os.path.normpath , substitute it for file_path ."
day = in t ( m . group ( STR_ ) ),"method MONTHS.index , increment the result by integer 1 , substitute it for month . call the method m.group with an argument string 'fay ' , convert the result into a string , substitute it for day ."
"from in spect import getargspec , getcallargs",from inspect import getargspec and getcallargs into default name space .
"if not is in stance ( candidate , six . string types ) :","if candidate is not an instance of six.string_types ,"
return get supported language variant ( accept lang ),"call the function get_supported_language_variant with an argument accept_lang , return the result ."
"assert rawdata [ i : i + NUM_ ] == "" STR_ "" , "" STR_ ""","take two characters from the i-th element of rawdata , if they are not equal to the string ' < / ' ,"
def upper ( value ) :,define the function upper with an argument value .
"yield safe join ( template dir , template name )","call the function safe_join with 2 arguments template_dir and template_name , yield the result ."
"field notes . append ( "" STR_ "" )",append string `` Field renamed because it ended with ' _ ' . '' to field_notes .
"super ( CommandParser , self ) . error ( message )","call the method error with an argument message , from the base class of the class CommandParser ."
@ stringfilter,"decorator stringfilter ,"
break,"break from the loop execution ,"
if bcc :,"if bcc is true ,"
dig1 . update ( u ),call the method dig1.update with an argument u .
url = value,substitute value for url .
if name :,"if name is true ,"
from django . template . base import TemplateDoesNotExist,from django.template.base import TemplateDoesNotExist into default name space .
self . dicts = dicts,RemovedInDjango19Warning and integer 2. substitute dicts for self.dicts .
try :,"try ,"
trail = closing + trail,"sum trail and closing , substitute the result for lead ."
"parts = fixture name . rsplit ( STR_ , NUM_ )","call the method fixture_name.rsplit with 2 arguments : character ' . ' and integer 2 , substitute the result for parts ."
"def python reloader ( main func , args , kwargs ) :",define the function python_reloader with main_func and kwargs as arguments .
from django . conf import settings,"return value of the function os.path.basename called with first element of sys.argv as an argument , and second element of sys.argv . from django.conf import settings into default namespace ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )","raise an ValidationError with 2 arguments : dictionary self.error_messages value under the key 'required ' ,"
raise TemplateSyntaxError ( STR_ % filter name ),"raise an TemplateSyntaxError exception with an argument string ' '' filter % s '' is not permitted . Use the `` autoescape '' tag instead . ' ,"
os . makedirs ( dirname ),create directories from the elements in filename .
return supported,return supported .
self . default timeout = timeout,substitute timeout for self.default_timeout .
  iter   =  iterkeys,substitute _iterkeys for __iter__ .
for migration in merge migrations :,"for every migration in merge_migrations ,"
"def   init   ( self , attrs = None , check test = None ) :","define the method __init__ with 3 arguments : self , attrs set to None and check_test set to None ."
return no,return no .
except IndexError :,"if IndexError exception is caught ,"
elif options [ STR_ ] :,"otherwise if value under the 'app_label ' key of options dictionary is true ,"
global  serializers,use the global variable _serializers .
self . active writers -= NUM_,"decrement self.active_writers by integer 1 ,"
return self . file . close ( ),"call the self.file.close method , return the result ."
nodes . append ( self ),append self to nodes .
cache = DefaultCacheProxy ( ),"call the DefaultCacheProxy function , substitute it for cache ."
or igin = StringOrigin ( template string ),origin is an instance of StringOrigin class created with an argument template_string .
self . paths to remove . append ( tempdir ),append tempdir to self.self.paths_to_remove .
if base . lower ( ) . endswith ( STR_ ) :,"convert base to lowercase , if it ends with string '.tar ' ,"
class SimpleLazyObject ( LazyObject ) :,derive the class SimpleLazyObject from the LazyObject base class .
if palette == PALETTES [ NOCOLOR PALETTE ] :,"if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary ,"
"html4 singlets = ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ )","html4_singlets is a tuple with 9 elements : strings 'br ' , 'col ' , 'link ' , 'base ' , 'img ' , 'param ' , 'area ' , 'hr ' and 'input ' ."
from   future   import absolute import,from __future__ import absolute_import into default name space .
"if is in stance ( message , ValidationError ) :","if message is an instance of ValidationError class ,"
"usage . append ( style . NOTICE ( "" STR_ "" "" STR_ "" % self . settings exception ) )","call the method style.NOTICE with an argument string `` Note that only Django core commands are listed as settings are not properly configured ( error : % s ) . `` , where ' % s ' is replaced by self.settings_exception , append the result to usage ."
if old field name :,"if old_field_name is true ,"
"allow cascade = options . get ( STR_ , False )","get the value 'allow_cascade ' key of the options dictionary , if it exists substitute it for allow_cascade , otherwise allow_cascade is boolean False ."
"if hasattr ( field . rel . to .  default manager , STR_ ) :","if field.rel.to._default_manager has an attribute 'get_by_natural_key ' ,"
return form . save ( commit = commit ),"call the method form.save with an argument commit as commit , return the result ."
token = parser . next token ( ),"call the method parser.next_token , substitute the result for token ."
m2m value = lambda value : value . natural key ( ),"m2m_value is an lambda function with value as an argument , return value is the result of the method value.natural_key ."
try :,"try ,"
"touch import ( STR_ , STR_ , decorated )","call the function touch_import with 3 arguments : string 'django.utils.encoding ' , string 'python_2_unicode_compatible ' and decorated ."
"params = { STR_ : self . max length , STR_ : len ( file name ) }",params is a dictionary with 2 initial entries : self.max_length for 'max ' and length of file_name for 'length ' .
except AttributeError :,"if AttributeError exception is caught ,"
self .  catalog = translation .  catalog . copy ( ),"call the method translation._catalog.copy , substitute the result for self._catalog ."
from django . utils . six . moves import copyreg,from django.utils.six.moves import copyreg into default name space .
yield STR_,yield string 'day ' as an return value of the generator .
if conflicts :,"if conflicts is true ,"
pass,do nothing .
try :,"try ,"
def parse datetime ( value ) :,define the function parse_datetime with an argument value .
"return RegexURLResolver ( r STR_ , urlconf )",return an instance of a class RegexURLResolver created with arguments : raw string '^/ ' and urlconf .
"def file complete ( self , file size ) :",define the function file_complete with arguments self and file_size .
"def   getattr   ( self , attr ) :",define private method __getattr__ with self class instance and attr as the arguments .
label =,label is an empty string .
return mark safe ( message ),"call the function mark_safe with an argument message , return the result ."
elif i < list length - NUM_ :,"otherwise if i is smaller than list_length decremented by one ,"
"def write ( self , outfile , encoding ) :","define the method write with 3 arguments self , outfile and encoding ."
"sql , references = connection . creation . sql create model ( model , no style ( ) , seen models )","app_name and model._meta.object_name , respectively . evaluate connection.creation.sql_create_model method with model , no_style ( ) and seen_models as arguments ,"
self . filters = { },self.filters is an empty dictionary .
url = hashlib . md5 ( force bytes ( iri to uri ( request . build absolute uri ( ) ) ) ),"call iri_to_uri with return value of the request.build_absolute_uri method , us the result as the argument for the call to the"
from django . conf import settings,from django.conf import settings into default name space .
"return [ first item , second item ] , old style list","return list with 2 elements : first_item and second_item , and old_style_list ."
"def smart text ( s , encoding = STR_ , strings only = False , errors = STR_ ) :","define the function smart_text , with s , encoding set to string 'utf-8 ' , strings_only set to False , errors set to 'strict ' as arguments ."
def nodelist ( self ) :,define the method nodelist with an argument self .
"self . stdout . write ( "" STR_ "" )",write string `` No optimizations possible . '' to self.stdout stream .
"def   deepcopy   ( self , memo ) :",define the method __deepcopy__ with 3 arguments : self and memo .
self .  archive = self .  archive cls ( file ) ( file ),"call the method self._archive_cls with an argument file , call the result with an argument file , substitute the result for self._archive ."
return type ( self ) .   bool   ( self ),"evaluate the method type ( self ) .__bool__ with argument self , return the result ."
result args = new args,substitute new_args for result_args .
"self . exclude = getattr ( options , STR_ , None )","get 'exclude ' attribute from the options object , if it exists substitute it for self.exclude , if not self.exclude is None ."
if response is None :,"if response is None ,"
caches = CacheHandler ( ),"call the CacheHandler function , substitute the result for caches ."
"potfile = os . path . join ( self . locale dir , STR_ % str ( domain ) )","join into a file path : self.locale_dir and string '.pot ' appended to domain converted to string , substitute it for potfile ."
if loader is not None :,"if loader is not None ,"
self . template = template,substitute template for self.template .
callable = callable,substitute callable for callable .
class Error ( CheckMessage ) :,derive the class Error from base class CheckMessage .
fixture files = [ ],fixture_files is an empty list .
piece += elt [ NUM_ ],increment piece by firs element of elt .
def  resolve ( self ) :,define the method _resolve with an argument self .
except self . LibraryValueNotFoundException :,"if self.LibraryValueNotFoundException exception is caught ,"
 locks = { },__locks is an empty dictionary .
try :,"try ,"
def close caches ( ** kwargs ) :,define the function close_caches with dictionary pair of elements kwargs as argument .
from django . conf import settings,from django.conf import settings into default name space .
"value , sig = signed value . rsplit ( self . sep , NUM_ )","call the signed_value.rsplit method with arguments self.sep and integer 1 , substitute the result for value and sig , respectively ."
cache timeout = settings . CACHE MIDDLEWARE SECONDS,substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout .
"return "" STR_ "" % ( STR_ . join ( self . loopvars ) , self . sequence , len ( self . nodelist loop ) , reversed text )","return an string `` < For Node : for % s in % s , tail_len : % d % s > '' , substitute ' % s ' with elements of self.loopvars joined into a string ,"
def   str   ( self ) :,"with an argument : value under the name key of the media_attrs dictionary , if it exists , if not use None as an argument . define the method __str__ with an argument self ."
if table name filter is not None and callable ( table name filter ) :,"if table_name_filter is not None and table_name_filter is callable object ,"
"def   init   ( self , loaders ) :",define the method __init__ with 2 arguments : self and loaders .
close = self . closed,substitute self.closed for close .
self .  errors = None,self._errors is None .
viewname = parser . compile filter ( bits [ NUM_ ] ),"where ' % s ' is replaced with first element of bits . call the method parser.compile_filter with second element of bits as an argument , substitute the result for viewname ."
"self . stream = open ( self .  get filename ( ) , STR_ )",open the file in mode 'ab ' and with file name obtained by calling the self._get_filename method .
"def   deepcopy   ( self , memo ) :",define the method __deepcopy__ with arguments self and memo .
class BadSignature ( Exception ) :,derive the class BadSignature from the Exception base class .
def  get queryset ( self ) :,define the method _get_queryset with an argument self .
"self .  delete ( self .  key to file ( key , version ) )","call the function self._key_to_file with key and version as arguments , use the result as an argument for the call to the self._delete method ."
"Meta = type ( str ( STR_ ) , parent , attrs )","Meta is an instance of class with name 'Meta ' , parent base class and fields attrs ."
callback ( self ),call the functoin callback with an argument self .
attrs [ STR_ ] = error messages,substitute error_messages for value under the 'error_messages ' key of attrs dictionary .
"def  findall ( text , substr ) :",define the function _findall with 2 arguments text and substr .
except ValueError :,"if ValueError exception is caught ,"
if not match :,"if there is no match ,"
bits . append ( in t ( x ) ),append x converted to an integer to bits .
else :,"if not ,"
def encoding ( self ) :,define the method encoding with an argument self .
"if hasattr ( base , STR_ ) :","if base has an attribute 'declared_fields ' ,"
"def force bytes ( s , encoding = STR_ , strings only = False , errors = STR_ ) :","define function force_bytes with s , encoding set to 'utf-8 ' , strings_only set to False and errors set to 'strict ' as arguments ."
"from django . template . base import ( Context , FilterExpression , Lexer , Node , NodeList , Parser , RequestContext , Origin , StringOrigin , Template , TextNode , Token , TokenParser , Variable , VariableNode , constant string , filter raw string )","TemplateSyntaxError and VariableDoesNotExist . from django.template.base import Context , FilterExpression , Lexer , Node , NodeList , Parser , RequestContext , Origin , StringOrigin ,"
return self . data . hour - NUM_,"subtract integer 12 from self.data.hour , return the result ."
except KeyError :,"if KeyError exception is caught ,"
  import   ( name ),substitute the result for name . call the function __import__ with an argument name .
"self . new objects . append ( self . save new ( form , commit = commit ) )","call the method self.save_new with 2 arguments : form and commit as commit , append the result to self.new_objects ."
class Serializer ( PythonSerializer ) :,derive the class Serializer from the PythonSerializer base class .
"class SafeMIMEText ( MIMEMixin , MIMEText ) :",derive the class SafeMIMEText from the MIMEMixin and MIMEText base class .
self .   dict   [ STR_ ] = func,substitute func for value under the '_setupfunc ' key of the self.__dict__ dictionary .
DIGIT PATTERN = re . compile ( r STR_ ),"compile a regex from raw string '^\d+ $ ' , substitute it for DIGIT_PATTERN ."
 cached modules =  cached modules . union ( new modules ),add elements from new_modules set to _cached_modules set .
"year val , month val , day val = [ in t ( v ) for v in match . groups ( ) ]","for v in return value of the function match.groups , convert v into an integer and append i to a list ,"
if not url fields [ NUM_ ] :,"if second element of url_fields is false ,"
"if is in stance ( end , unicode ) :","if end is an instance of unicode ,"
class NodeList ( list ) :,derive the class NodeList form the base class list .
"def prepare value ( self , value ) :",define the method prepare_value with 2 arguments : self and value .
"raise CommandError ( "" STR_ "" % ( os . path . basename ( sys . argv [ NUM_ ] ) , sys . argv [ NUM_ ] ) )","if the result is true or self.domain is not None , raise an CommandError exception with an argument string `` Type ' % s help % s ' for usage information . `` , where ' % s ' are replaced by :"
"if is in stance ( rhs , dict ) and number :","if rhs is an instance of dict type and number is true ,"
if r . endswith ( STR_ ) :,"if r ends with string '+00:00 ' ,"
data [ field . attname ] = None,value under the field.attname key of the data dictionary is None .
"from django . utils . safestring import SafeData , EscapeData",from django.utils.safestring import SafeData and EscapeData into default name space .
field notes . append ( STR_ ),append string 'Field renamed to remove unsuitable characters . ' to field_notes .
name = self . path ( name ),"call the self.path with argument name , substitute it for name ."
else :,"if not ,"
"if getattr ( func , STR_ , False ) and is in stance ( obj , SafeData ) :","if 'is_safe ' attribute of func object exists and is true and obj is an instance of SafeData ,"
if primary keys :,"if primary_keys is true ,"
else :,"if not ,"
if self .  varlist :,"if self._varlist is true ,"
link = cache get ( key ),"call the function cache_get with an argument key , substitute the result for link ."
from django . utils import six,from django.utils import six into default name space .
"return [ None , None ]","called with the argument microseconds set to integer 0 , on the result of the method value.time . return list containing 2 elements : None and None ."
"callback , param dict = resolver . resolve error handler ( status code )","call the function resolver.resolve_error_handler with status_code as an argument , assign the result to the callback and param_dict , respectively ."
"  all   = [ STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ]","__all__ is a string containing strings : 'UploadFileException ' , 'StopUpload ' , 'SkipFile ' , 'FileUploadHandler ' ,"
"except ( KeyError , TypeError ) :","if KeyError and TypeError exceptions are caught ,"
"self . check ( app configs = app configs , tags = tags , display num errors = True )","call the method self.check with arguments : app_configs set to app_configs , tags set to tags , display_num_errors set to boolean True ."
def H ( self ) :,define the method H with an argument self .
while True :,"endless loop ,"
from django . utils . timezone import template localtime,from django.utils.timezone import template_localtime into default name space .
return plural suffix,return plural_suffix .
"become daemon ( our home dir = options [ "" STR_ "" ] , ** daemon kwargs )","call the function become_daemon with 2 arguments : our_home_dir set to the value under the 'workdir ' key of options dictionary and ,"
"raise ValidationError ( error message , code = STR_ )",raise an ValidationError exception with 2 arguments : error_message and code as a string 'invalid ' .
if not value :,"if value is false ,"
"super ( QueryDict , self ) .   setitem   ( key , value )","call the method __setitem__ from the base class of the QueryDict class , with arguments key and value ."
for path in gen filenames ( only new = True ) :,"pyinotify.IN_MOVED_FROM , pyinotify.IN_MOVED_TO and pyinotify.IN_CREATE , store the result in mask . for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True ,"
else :,"if not ,"
return STR_ . join ( output ),"join elements of output into a string , separated by newline characters , return it ."
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
return self . limit choices to ( ),"call the method self.limit_choices_to , return the result ,"
if resource string is not None :,"if resource_string is not None ,"
return str ( major + sub ),"sum major and sub , return the result converted to string ."
"parser . add argument ( STR_ , STR_ , dest = STR_ , action = STR_ , default = [ ] , help = STR_ STR_ )","call the method parser.add_argument with string ' -- locale ' , string '-l ' , dest set to string 'locale ' , action set to string 'append ' ,"
duplicate . render context = copy ( self . render context ),"call the function copy with an argument self.render_context , substitute the result for duplicate.render_context ."
global  localtime,use global variable _localtime .
for key in self . keyOrder :,"for every key in self.keyOrder ,"
del bits [ : NUM_ ],delete first 3 elements of bits .
global in valid var format string,use global variable invalid_var_format_string .
try :,"try ,"
if self . can delete and self .  should delete form ( form ) :,"if self.can_delete is true and call to the method self._should_delete_form with an argument form , evaluates to true ,"
return escape ( value ),"call the function escape with an argument value , return the result ."
fail message = STR_,fail_message is a string changed ' .
"pieces . append ( force text ( getattr ( self , piece ) ( ) ) )","get attribute piece of the self object , call it and use the result as an argument for the call to the function force_text ,"
@ register ( Tags . models ),decorator register with Tags.models as an argument .
return token,return token .
"def eval ( self , context ) :",define the method eval with 2 arguments self and context .
import binascii,import module binascii .
offset = - offset,multiply offset by integer -1 .
if close :,"if close is True ,"
parse until = [ ],"parse_until is an empty list ,"
  str   = new method proxy ( str ),"call the function new_method_proxy with an argument str , substitute the result for __str__ ."
return nodelist . render ( context ),"call the method nodelist.render with an argument context , return the result ."
table = connections [ db ] . ops . quote name ( self .  table ),"call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary , substitute the result for table ."
def  itervalues ( self ) :,define the method _itervalues with an argument self .
deps . append ( rel model ),append rel_model to deps .
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
try :,"try ,"
"value = field . clean ( value , in itial )","if not substitute field.initial for initial . call the method filed.clean with arguments value and initial , substitute the result for value ."
return value or arg,"return value , if it is None return arg ."
"msgs = msgs . replace ( "" STR_ "" % self . domain , "" "" )","substitute ' % s ' in string `` # . # - # - # - # - # % s.pot ( PACKAGE VERSION ) # - # - # - # - # \n '' with self.domain ,"
language code = get language ( ),"call the function get_language , substitute the result for language_code ."
from django . conf import settings,from django.conf import settings object to the default name space .
return self . DSTOFFSET,return self.DSTOFFSET .
if func is None :,"if func is None ,"
def   str   ( self ) :,define the method __str__ with an argument self .
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
return avoid wrapping ( value ),"filesize_number_format with result of division of bytes by PB as an argument , substitute the result for value . call the function avoid_wrapping with an argument value , return the result ."
try :,"RemovedInDjango19Warning and stacklevel as integer 2. try ,"
os . remove ( name ),call the os.remove function with argument name .
"if value ! = value or value in ( Decimal ( STR_ ) , Decimal ( STR_ ) ) :","if value is Nan , or value is contained in return value of the Decimal called twice with string 'Inf ' and with string '-Inf ' ,"
var obj = Variable ( var ),"var_obj is an instance of Variable class , created with an argument var ."
"response = wrapped callback ( request , * callback args , ** callback kwargs )","call the function wrapped_callback with request , list or arguments callback_args and dictionary arguments callback_kwargs ,"
format key =,format key is an empty string .
return forms,"with an argument i , append the result to a list , substitute the resulting list for forms . return forms ."
return in t ( calendar . timegm ( self . data . utctimetuple ( ) ) ),"call the method self.data.utctimetuple , use the result as an argument for the call to the function calendar.timegm ,"
"def   deepcopy   ( self , memo ) :",define the method __deepcopy__ with arguments self and memo .
"raise CommandError ( "" STR_ "" % app label )","raise an CommandError with an argument string `` App ' % s ' does not have migrations ( so squashmigrations on it makes no sense ) '' ,"
def   init   ( self ) :,define the __init__ method with argument self .
template string = force text ( template string ),call the function force_text with an argument template_string .
if register to :,"if register_to is true ,"
self .   language = language,substitute language for self.__language .
return phone2numeric ( value ),"call the function phone2numeric with an argument value , return the result ."
used += STR_ + frag,"append ' . ' to frag , append the result to used ."
"return format html ( STR_ , flatatt ( final attrs ) )","call the function format_html with 2 arguments : string ' < input { 0 } / > ' and result of the function flatatt ,"
except ImportError :,"if ImportError exception occurred ,"
if in itial is not None :,"if initial is not None ,"
"re tag = re . compile ( r STR_ , re . S )","re.U and re.S , substitute the result for re_chars . call the function re.compile with 2 arguments : raw string ' < ( / ) ? ( [ ^ ] + ? ) ( ? : ( \s*/ ) | .* ? ) ? > ' and bitwise OR performed with 2 operands ,"
self . state = state,substitute state for self.state .
from django . db . migrations import Migration,from django.db.migrations import Migration into default name space .
if options . settings :,"if options.settings is true ,"
"def colorize ( text = , opts = ( ) , ** kwargs ) :","and ' 8 ' for 'conceal ' . define the method colorize with 3 arguments : text set to an empty string , opts set to an empty tuple and unpacked dictionary kwargs ."
"class EscapeBytes ( bytes , EscapeData ) :",derive the class EscapeBytes from bytes and EscapeData base classes .
self . run shell ( shell = options [ STR_ ] ),call the method self.run_shell with an argument shell set to value under the 'interface ' key of the options dictionary .
def close ( self ) :,define the method close with argument self .
value = force str ( value ),"call the force_str function with an argument value , substitute the result for value ."
fn = code changed,substitute code_changed for fn .
return new context,return new_context .
not ifier . read events ( ),call the method notifier.read_events .
class Enclosure ( object ) :,derive the class Enclosure from the object base class .
if logging config :,"if logging_config is true ,"
else :,"if not ,"
return self . field . widget . is  hidden,"return self.field.widget.is_hidden ,"
import datetime,import module datetime .
if not last row . endswith ( row ender ) :,"if last_row doesnt ends with row_ender ,"
attrs [ STR_ ] = OrderedDict ( current fields ),"value under the 'declared_fields ' key of the attrs dictionary is an instance of OrderedDict class , created with an argument current_fields ."
"def   init   ( self , regex , urlconf name , default kwargs = None , app name = None , namespace = None ) :","define the method __init__ with 6 arguments : self , regex , urlconf_name , default_kwargs set to None , app_name set to None and namespace set to None ."
except smtplib . SMTPException :,"if smtplib.SMTPException exception is caught ,"
if os . path . is dir ( entry ) :,"if entry is a directory ,"
try :,"try ,"
"def build request repr ( request , path override = None , GET override = None , POST override = None , COOKIES override = None , META override = None ) :","define the function build_request_repr with arguments : request , path_override set to None , GET_override set to None ,"
" meth func = "" STR_ """,_meth_func is a string `` __func__ '' .
result . setFormatter ( formatter ),call the method result.setFormatter with an argument formatter .
obj = field . rel . to .  default manager . db manager ( self . db ) . get by natural key ( * field value ),"call the method field.rel.to._default_manager.db_manager with an argument self.db , on the result call the method get_by_natural_key ,"
doublecolon len += NUM_,"increment doublecolon_len by integer 1 ,"
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
 BASE64 DECODE ERROR = TypeError if six . PY2 else binascii . Error,"if six.PY2 is true , _BASE64_DECODE_ERROR is TypeError , if not , _BASE64_DECODE_ERROR is binascii.Error ."
" version = "" STR_ """,_version is a string `` 2.0 '' .
"lead , middle , trail = , word ,","substitute empty string , word an empty string for lead , middle and trail , respectively ."
assert content is None,if content is not None raise an error .
comment = [ ],comment is an empty list .
if ( middle . endswith ( closing ) and middle . count ( closing ) == middle . count ( opening ) + NUM_ ) :,"if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one ,"
if not data :,if data is empty .
tzinfo = utc,substitute utc for tzinfo .
if not formset . is  valid ( ) :,"call the function formset.is_valid , if it evaluates to false ,"
from django . utils . text import unescape entities,from django.utils.text import unescape_entities into default name space .
def   repr   ( self ) :,define the method __repr__ with an argument self .
context [ self . var name ] = [ ],value under the self.var_name key of the context dictionary is an empty list .
def Z ( self ) :,define the method Z with an argument self .
else :,"if not ,"
else :,"if not ,"
return errors,return errors .
if ch == STR_ :,"if ch equal a string ' ( ' ,"
"class CheckboxSelectMultiple ( RendererMixin , SelectMultiple ) :",derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes .
result = self . nodelist . render ( context ),"call the method self.nodelist.render with an argument context , substitute the result for result ."
from django . utils import six,from django.utils import six into default name space .
if not self . allow multiple selected :,"if self.allow_multiple_selected is false ,"
value = value . decode ( charset ),"call the method value.decode with an argument charset , substitute the result for value ."
vary headers = cc delim re . split ( response [ STR_ ] ),"split string cc_delim_re by value of dictionary response under the key 'Vary ' as a delimiter , substitute it for vary_headers ."
return singular,return singular .
"raise CommandError ( "" STR_ "" % self . port )","raise an CommandError exception with an argument string `` % r is not a valid port number . `` , where ' % r ' is repaced with self.port ."
return STR_ . join ( ret ip ),"convert the result into a lowercase , append it to ret_ip . join elements of ret_ip into a string separated with ' : ' , return it ."
if callable ( key func ) :,"if key_function is callable object ,"
"self . extend nodelist ( nodelist , TextNode ( token . contents ) , token )","call the method self.extend_nodelist with 3 arguments : nodelist , instance of TextNode class , created with an argument token.contents ,"
"mail . attach alternative ( html message , STR_ )",call method mail.attach_alternative as html_message and string 'text/hmtl ' as arguments .
"self .  stream = LimitedStream ( self . environ [ STR_ ] , content length )","self._stream is a class instance of a LimitedStream class , initialized with self.environ dictionary value under the 'wsgi.input ' key ,"
return Operator,return Operator .
self .   to language = to language ( language ),"call the function to_language with an argument language , substitute it for self.__to_language ."
"boundary = self .  find boundary ( chunk , len ( chunk ) < self .  rollback )","call the method self._find_boundary with 2 arguments : chunk and boolean if length of chunks is lesser than self._rollback ,"
"walk to end ( ch , pattern iter )",call the function walk_to_end with 2 arguments : ch and pattern_iter .
raise,raise an exception .
if six . PY3 :,"if six.PY3 is true ,"
new class . media = media property ( new class ),"call the method media_property with an argument new_class , substitute the result for new_class.media ."
if len ( bits ) < NUM_ :,"if length of bits is smaller than integer 1 ,"
try :,"try ,"
"elif ch in "" STR_ "" :","otherwise if ch is contained in string `` * ? + { `` ,"
def id for label ( self ) :,define the method id_for_label with an argument self .
for message in message :,"for every message is message ,"
self . remove potfiles ( ),call the method self.remove_potfiles .
@ total ordering,"total_ordering decorator ,"
for key value in natural :,"for every key_value in natural ,"
@ wraps ( fset ),decorator function wraps with an argument fset .
"def urlize ( text , trim url limit = None , nofollow = False , autoescape = False ) :","define the function urlize with 4 arguments : text , trim_url_limit set to None , nofollow set to boolean False ,"
"return RelatedObject ( cls . fk . rel . to , cls . model , cls . fk ) . get accessor name ( ) . replace ( + , )","instantiate RelatedObject class with 3 arguments : cls.fk.rel.to , cls.model and cls.fk ,"
elif k == STR_ :,"otherwise if k equals a string 'bg ' ,"
except NotImplementedError :,"if NotImplementedError exception is caught ,"
if self .  is rendered :,"if self._is_rendered is true ,"
return False,return boolean False .
filelist =  cached filenames + new filenames +  error files,"sum _cached_filenames , new_filenames and _error_files , store the result in filelist ."
if error messages is not None :,"if error_messages is not None ,"
import string ( backend ),call the function import_string with argument backend .
"if hasattr ( file , STR_ ) :","if file object has an attribute 'mode ' ,"
if value == k or text value == force text ( k ) :,"if value equals k or text_value equals return value of the function force_text called with argument k ,"
if verbosity >= NUM_ :,"if verbosity is greater or equal to integer 2 ,"
"def load ( parser , token ) :",define the function load with 2 arguments : parser and token .
return False,return boolean False .
from django . forms . widgets import HiddenInput,from django.forms.widgets import HiddenInput into default name space .
raise,"if it is not equal to stat.S_IREAD , raise an exception ."
match = datetime re . match ( value ),"match regex datetime_re with value , substitute the result for match ."
last bit = self . template string [ upto : ],substitute elements of self.template_string list from upto index to the end for last_lit .
def errors ( self ) :,define the method errors with an argument self .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","and help set to 'Fixture labels. ' . call the method parser.add_argument with 5 arguments : string ' -- database ' , action set to string 'store ' , dest as a string 'database ' ,"
if settings . TEMPLATE DEBUG :,"if settings.TEMPLATE_DEBUG is true ,"
import argparse,import module argparse .
try :,"try ,"
return s,return s .
"if field .  has changed ( in itial value , data value ) :","call the method field._has_changed with 2 arguments : initial_value and data_value , if it evaluates to true ,"
"super ( LoaderOrigin , self ) .   init   ( display name )","call the method __init__ with an argument display_name , from the base class of the LoaderOrigin class ."
self . style func = None,substitute None for self.style_func .
self . waiting readers += NUM_,increment self.waiting_readers by 1 .
self . stream . write ( message . message ( ) . as bytes ( ) + b STR_ ),"call the as_bytes method on the return value of the message.message method append to it '\n ' character , use it as the argument for the call to the self.stream.write method ."
encoding = None,encoding is None .
runfastcgi ( sys . argv [ NUM_ : ] ),"call the function runfastcgi with an argument all the elements , except the first from the sys.argv list ."
try :,"try ,"
apps . get app config ( app label ),call the method apps.get_app_config with an argument app_label .
"raise TemplateSyntaxError ( "" STR_ "" % ( name , param ) )","raise an TemplateSyntaxError exception with an argument `` ' % s ' received unexpected keyword argument ' % s ' '' ,"
"mail . mail admins ( subject , message , fail silently = True , html message = html message , connection = self . connection ( ) )","otherwise html_message is None . call the method mail.mail_admins with 5 arguments : subject , message , fail_silently as boolean True , tml_message as html_message ,"
"return [ super ( ModelMultipleChoiceField , self ) . prepare value ( v ) for v in value ]","call the method prepare_value from the base class of the class ModelMultipleChoiceField , with an argument v ,"
continue,skip this loop iteration .
"def value from datadict ( self , data , files , name ) :","and result of the function flatatt , called with an argument final_attrs . define the method value_from_datadict with 4 arguments : self , data , files and name ."
"def loads ( s , key = None , salt = STR_ , serializer = JSONSerializer , max age = None ) :","define the function loads with 5 arguments : s , key set to None , salt set to string 'django.core.signing ' ,"
if self . stream is None :,if self.stream is None :
import os,import module os .
"return super ( type ( dt ) , dt ) . strftime ( fmt )","call the method strftime with an argument fmt , from the base class of the type of dt class ."
"value = request . META . get ( header , None )",call method request.META.get with arguments header and None .
try :,"try ,"
"HTMLParser .   init   ( self , strict = False )",call the method HTMLParser.__init__ with 2 arguments : self and strict set to boolean False .
def urlunquote plus ( quoted url ) :,define the function urlunquote with an argument quoted_url .
if os . name == STR_ :,"if os.name equals string 'nt ' ,"
"self . stdout . write ( "" STR_ "" % migration , ending = "" "" )","call the self.stdout.write method , with string `` Applying % s ... '' with ' % s ' replaced with migration and ending set to `` , as arguments ."
else :,"if not ,"
elif self .  meta . exclude and field in self .  meta . exclude :,"otherwise if self._meta.exclude is true and field is not contained in self._meta.exclude ,"
from django . utils . encoding import force bytes,from django.utils.encoding import force_bytes into default name space .
self . active readers = NUM_,self.active_readers is an integer 0 .
"def filter ( self , record ) :",define the method filter with 2 arguments : self and record .
if app config . models module is None :,"if app_config.models_module is None ,"
else :,"if not ,"
self .  regex = regex,substitute regex for self._regex .
ignored . append ( f . name ),append f.name to ignored list .
"from django . core . exceptions import DisallowedHost , ImproperlyConfigured",from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space .
"mapping = { STR_ : STR_ , STR_ : STR_ , STR_ : STR_ }","mapping is a dictionary with 3 initial entries : ' a ' for 'alpha ' , ' b ' for 'beta ' and ' c ' for 'rc ' ."
loop dict [ STR_ ] = ( i == NUM_ ),"if i is equal to integer 0 , value under the 'first ' key of the loop_dict dictionary is boolean True , otherwise it is False ."
row data = ( form . cleaned data [ field ] for field in unique check if field in form . cleaned data ),"row_data is an generator object that returns value under the field key of form.cleaned_data dictionary ,"
continue,"skip this loop iteration ,"
"help = "" STR_ """,help is a string `` Updates database schema . Manages both apps with migrations and those without . `` .
import warnings,import module warnings .
if extend :,"if extend is true ,"
if lang is None :,"if lang is None ,"
errors . update ( kwargs [ STR_ ] ),"get the value under the 'error_messages ' key of the kwargs dictionary , update errors dictionary with it ."
"from django . http . cookie import SimpleCookie , parse cookie",from django.http.cookie import SimpleCookie and parse_cookie into default name space .
"pieces . append ( re escaped . sub ( r STR_ , piece ) )","call the method re_escaped.sub with 2 arguments : raw string '\1 ' and piece , append the result to pieces ."
frame = sys .  getframe ( NUM_ ),"call the method sys._getframe with an argument 1 , substitute the result for frame ."
elif name == STR_ :,otherwise if name equals a string 'id ' .
return True,return boolean True .
"full statement = [ "" STR_ "" % qn ( tablename ) ]","full_statement is a list containing : string `` CREATE TABLE % s ( `` , where % s is replaced by result of the function qn called with an argument tablename ."
step = STR_,step is an string 'any ' .
from django . utils import six,from django.utils import six into default name space .
self . connector = conn type,substitute conn_type for self.connector .
deactivate all ( ),call the function deactivate_all .
self . translate = False,self.translate is boolean False .
for middleware method in self .  template response middleware :,"for every middleware_method in self._template_response_middleware ,"
return m + Media ( definition ),"sum m and class Media created with definition , return the result ."
"references to delete . setdefault ( f . rel . to , [ ] ) . append ( ( model , f ) )","call the method references_to_delete.setdefault with arguments : r.rel.to and an empty list , append to the result tuple with 2 entries : model and f ."
field notes = [ ],field_notes is an empty list .
"super ( IncludeNode , self ) .   init   ( * args , ** kwargs )","if not self.isolated_context is boolean False . call the method __init__ from the base class of the class IncludeNode , called with 2 arguments : unpacked dictionary args ,"
qs = qs . or der by ( self . model .  meta . pk . name ),"call the method qs.order_by with argument self.model._meta.pk.name , substitute the result for qs ."
"value , timestamp = result . rsplit ( self . sep , NUM_ )","call the result.rsplit method with arguments self.sep and integer 1 , substitute the result for value and timestamp , respectively ."
if k [ NUM_ ] is None :,"if second element of k is None ,"
return False,return boolean False .
"safe = is in stance ( value , SafeData )","if value is an instance of SafeData , safe is boolean True , otherwise it is boolean False ."
"fd = os . open ( new file name , ( os . O WRONLY | os . O CREAT | getattr ( os , STR_ , NUM_ ) | ( os . O EXCL if not allow overwrite else NUM_ ) ) )","evaluate the binary expression with 4 operands : os.O_WRONLY , binary or os.O_CREATE , binary or 'O_BINARY ' attribute of object os ,"
return self . value == self . choice value,"if self.value equals self.choice_value , return boolean True , if not , return boolean False ."
self .  load post and files ( ),call the method self._load_post_and_files .
self . in itial = in itial,substitute initial_id for self.auto_id .
template tuple = self . template cache . get ( key ),"if not , substitute template_dirs for key . get the value under the key key of the self.template_cache dictionary , substitute it for template_tuple ."
"help = ( "" STR_ "" "" STR_ "" "" STR_ "" )",help is a tuple containing a string `` Output the contents of the database as a fixture of the given ``
"return timesince ( d , now , reversed = True )","evaluate the function timesince with d , now and reversed set to boolean true as arguments , return the result ."
try :,"try ,"
import stat,import module stat .
return smart text ( value ),"evaluate the function smart_text with an argument value , return the result ."
"return STR_ % ( key prefix , version , key )","convert key_prefix , version and key into strings , concatenate them respectively , with character ' : ' as delimiter , return the result ."
try :,"tr ,"
import re,import module re .
try :,"try ,"
 empty value = [ ],_empty_value is an empty list .
year += NUM_,increment year by integer 2000 .
"self . args check ( filter name , filter func , args )","call the method self.args_check with 3 arguments : filter_name , filter_func and args ."
if not  serializers :,"if _serializers is false ,"
else :,"if not ,"
reloader thread ( ),call the function reloader_thread .
"template dir = self . handle template ( options [ STR_ ] , base subdir )",call the method self.handle_template with 2 arguments : value under the 'template ' key of the options dictionary and base_subdir .
"super ( MovedModule , self ) .   init   ( name )",call the __init__ method with an argument name from the base class of the MovedModule class .
self .  stream = BytesIO ( self .  body ),third element of the result of the function sys.exc_info . self._stream is an instance of BytesIO class created with an argument self._body .
def get system encoding ( ) :,"call the function quote with the result and with the safe set to bytes string `` /~ ! * ( ) ' '' , return the function result . define the function get_system_encoding without the input arguments ."
import threading,import module threading .
"for relobj in getattr ( obj , field . name ) . iterator ( ) :",return value of the function smart_text with return value of the method value._get_pk_val as an argument for 'pk ' . for every relobj in iterator generated from the field.name attribute of the obj object .
else :,"if not ,"
if self . activated :,"if self.activated is boolean True ,"
@ property,"property decorator ,"
"help = ( "" STR_ "" "" STR_ "" )","help is a tuple containing a string `` Runs the command-line client for specified database , or the default database if none is provided . `` ."
return self .  changed data,return self._changed_data .
return in ner,self._wrapped .
def scheme ( self ) :,define the method scheme with an argument self .
self .  rollback = len ( boundary ) + NUM_,"increment length of boundary by integer 6 , substitute the result for self._rollback ."
return False,return boolean False .
current timezone = timezone . get current timezone ( ),"call the method timezone.get_current_timezone , substitute the result for current_timezone ."
from django . utils import six,from django.utils import six into default name space .
j = day of year + ( NUM_ - weekday ) + ( jan1 weekday - NUM_ ),"sum day_of_year , result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday ."
return o . is oformat ( ),"call the method o.isoformat , return the result ."
self . set cdata mode ( tag ),call the method self.set_cdata_mode with tag as the argument .
return NUM_,return integer 12 .
if path is not None :,"sum of the result of the function time.time and max_age , substitute it for 'expires ' key of the previously returned dictionary . if path is not None ,"
in  index = - NUM_  if is  reversed else - NUM_,"if index is negative inter 3 , if is_reversed , substitute it for in_index , if not , in_index is negative integer 2 ."
if new name [ NUM_ ] . is digit ( ) :,"if first element of new_name is digit ,"
class MultiValueField ( Field ) :,derive the class MultiValueField from the base class Field class .
"if self .  read started and not hasattr ( self , STR_ ) :",if self._read_started is true and self doesnt have an '_body ' attribute .
if pks :,"if pks is true ,"
def   repr   ( self ) :,define the method __repr__ with an argument self .
if not settings . configured :,"if settings.configured is false ,"
if code is None :,"if code is None ,"
text = match . group ( NUM_ ),"call the method match.group with an argument integer 1 , substitute the result for text ."
try :,"try ,"
self . pubid = pubid,substitute pubid for self.pubid .
run checks = registry . run checks,substitute registry.run_checks for run_checks .
def new date ( d ) :,define the function new_date with an argument d .
"key = self . make key ( key , version = version )","call the self.make_key with key and version set to version as arguments , substitute the result for key ."
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a size ( ) method ' .
"def empty block tag ( self , token ) :",define the method empty_block_tag with 2 arguments : self and token .
for middleware method in self .  response middleware :,"for every middleware_method in self._response_middleware ,"
"super ( QueryDict , self ) . appendlist ( key , value )","call the method appendlist from the base class of the QueryDict class , with arguments key and value ."
if self .  cull frequency == NUM_ :,if self._cull_frequency equals to integer 0 .
from collections import OrderedDict,from collections import OrderedDict into default name space .
def root attributes ( self ) :,define the method root_attributes with an argument self .
"def become daemon ( our home dir = STR_ , out log = STR_ , err log = STR_ , umask = NUM_ o022 ) :","define the function become_daemon with 4 arguments : our_home_dir set to ' . ' , out_log set to a string '/dev/null ' ,"
if compress :,"if compress is true ,"
if self .  wrapped is empty :,"if self._wrapped is contained in empty ,"
ret =  ,substitute _ for ret .
filepath = self . filepath . resolve ( context ),"call the function self.filepath.resolve with an argument context , substitute the result for filepath ."
result = STR_ . join ( hextets [ NUM_ : NUM_ ] ),"second 2 elements of seventh element of hextets converted into hexadecimal number , first 2 elements of eight element of hextets converted into hexadecimal number , second 2 elements of eight element of hextets converted into hexadecimal number . join first 5 elements of hextets into a string , separated by ' : ' , substitute the result for result ."
existing headers = set ( header . lower ( ) for header in vary headers ),existing_headers is a set containing lowercase strings header for every header in vary_headers .
loaded objects in fixture += NUM_,increment loaded_objects_in_fixture by one .
for format in BUILTIN SERIALIZERS :,"for every format in BUILTIN_SERIALIZERS ,"
import django,import module django .
"with open ( filepath , STR_ ) as fp :","open the file named filepath in read mode , with file descriptor renamed to fp perform ,"
"if is in stance ( file , six . string types ) :",if file is an instance of six.string_types .
return context,return context .
raise AttributeError,raise an AttributeError exception .
"return super ( classonlymethod , self ) .   get   ( in stance , owner )","call the method __get__ with 2 arguments : instance and owner , from the base class of the classonlymethod class , return the result ."
"def dictsortreversed ( value , arg ) :",define the function dictsortreversed with 2 arguments value and arg .
"return lazy number ( npgettext , six . text type , context = context , singular = singular , plural = plural , number = number )","call the function lazy_number with 6 arguments : npgettext , six.text_type , context set to context , singular set to singular ,"
"exec  = getattr ( moves . builtins , "" STR_ "" )","get 'exec ' attribute from the moves.builtins object , substitute it for exec_ ."
hidden widget = HiddenInput,substitute HiddenInput for hidden_widget .
stream . unget ( chunk [ header end + NUM_ : ] ),call the method stream.unget with list containing elements of chunk list from the header_end incremented by integer 4 as a start index to the end as argument .
self . error dict [ field ] = messages . error list,substitute messages.error_list for the value under the field key of the self.error_dict dictionary .
return value,return value .
raise SerializerDoesNotExist ( format ),raise a SerializerDoesNotExist exception with an argument format .
def   str   ( self ) :,define the method __str__ with an argument self .
if s len > length :,"if s_len is greater than length ,"
self .  callback str = prefix + STR_ + self .  callback str,"joint prefix , character ' . ' and self._callback_str together , substitute the result for self._callback_str ."
"if ch not in ( < , = ) :","if ch is not equal to string ' < ' or string '= ' ,"
"def loads ( self , data ) :","call the encode method on the result with string 'latin-1 ' as an argument , return the result . define the method loads with arguments self and data ."
else :,"if not ,"
else :,"if not ,"
"return self .  html output ( normal row = STR_ , error row = STR_ , row ender = STR_ , help text html = STR_ , errors on separate row = False )","return the result of the method self._html_output , called with 5 arguments : normal_row to a string ,"
code = STR_,code is a string 'max_value '
if is  aware ( o ) :,"call the function is_aware with an argument o , if it evaluates to true ,"
cls .   str   = cls .   bytes cast,substitute cls.__bytes_cast for cls.__str__ .
INDEX PATTERN = re . compile ( r STR_ ),"compile a regex from raw string '^\ [ \s* ( \w+ ) \s*\ ] \s* ' , substitute it for INDEX_PATTERN ."
self . handle endtag ( tag . lower ( ) ),"convert tag to lowercase , use it as the argument for the call to the method self.handle_endtag ."
if name is None and compile function is None :,"if name is None and compile_function is None ,"
attrs [ STR_ ] = help texts,substitute help_texts for value under the 'help_texts ' key of attrs dictionary .
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` 'cycle ' tag requires at least two arguments '' .
if year < NUM_ :,"if year is lesser than integer 100 ,"
roots = set ( dir ( cls ) ) & set ( convert ),"and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than other or self is equal to other , tuple with 2 elements : string '__le__ ' , and lambda function with 2 arguments : self and other , resulting boolean True if self is lesser than other or self is equal to other , tuple with 2 elements : string '__ge__ ' , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than other , for '__lt__ ' , list with 3 tuples : tuple with 2 elements : string '__ge__ ' , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than or equal to other , or self is equal to other , tuple with 2 elements : string '__lt__ ' , and lambda function with 2 arguments : self and other , resulting boolean True if self is lesser than or equal to other , or self is not equal to other , tuple with 2 elements : string '__gt__ ' , and lambda function with 2 arguments : self and other , resulting boolean False if self is lesser than or equal to other , for '__le__ ' , list with 3 tuples : tuple with 2 elements : string '__lt__ ' , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than other or self is equal to other , tuple with 2 elements : string '__ge__ ' , and lambda function with 2 arguments : self and other , resulting boolean True if self is greater than other or self is equal to other , tuple with 2 elements : string '__le__ ' , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than other , for '__gt__ ' , and list with 3 tuples : tuple with 2 elements : string '__le__ ' , and lambda function with 2 arguments : self and other , resulting boolean True if self is not greater than or is not equal to other , or self is equal to other , tuple with 2 elements : string '__gt__ ' , and lambda function with 2 arguments : self and other , resulting boolean True if self is greater than or not equal to other , or self is not equal to other , tuple with 2 elements : string '__lt__ ' , and lambda function with 2 arguments : self and other , resulting boolean False if self is greater than or equal to other , for '__ge__ ' , convert cls to a dictionary , convert the result into a set and convert convert into a set , roots is a set of differences of the two previous sets ."
retval = handler . upload complete ( ),"call the method handler.upload_complete , substitute the result for retval ."
"return files . get ( name , None )","return value under the name key of the files dictionary , if it doesnt exists , return None ."
"def run checks ( self , app configs = None , tags = None ) :","define the method run_checks with self class instance , app_configs defaulting to None , tags defaulting to None as argument ."
data = self,substitute self for data .
"unique checks , date checks = form . in stance .  get unique checks ( exclude = exclude )","call the method form.instance._get_unique_checks with an argument exclude as exclude , substitute the result for unique_checks , and date_checks , respectively ."
"value = super ( IntegerField , self ) . to python ( value )","call the method to_python with an argument value , from the base class of the IntegerField class , substitute the result for value ."
def next page number ( self ) :,define the method next_page_number with an argument self .
for sql in custom sql :,"for every sql in custom_sql ,"
for attr in  urllib error moved attributes :,"strings `` URLError '' , `` urllib2 '' , `` urllib.error '' , result of the call to the function MovedAttribute with 3 arguments : strings `` HTTPError '' , `` urllib2 '' , `` urllib.error '' and result of the call to the function MovedAttribute with 3 arguments : strings `` ContentTooShortError '' , `` urllib '' , `` urllib.error '' . for every attr in _urllib_error_moved_attributes ,"
"for x in range ( level , NUM_ , - NUM_ ) :","for every x is the range of integers from level to the integer 2 , in the reversed order ,"
except ValidationError as e :,"if ValidationError , renamed to e , exception is caught ,"
"attrs = super ( CharField , self ) . widget attrs ( widget )","call the method widget_attrs from the base class of the class CharField , with an argument widget , substitute the result for attrs ."
class FileBasedCache ( BaseCache ) :,derive the class FileBasedCache from BaseCache base class .
created models . add ( model ),add model to created_models set .
"elif is in stance ( obj , EscapeData ) :","otherwise if obj is an instance of EscapeData ,"
class Serializer ( PythonSerializer ) :,define the class Serializer from the PythonSerializer base class .
self . verbatim = False,self.verbatim is boolean False .
"max width = min ( ( line . endswith ( STR_ ) and width + NUM_  or width ) , width )","if line ends with a new line character substitute width incremented by integer 1 for max_width , if not substitute width for max_width ."
else :,"if not ,"
try :,"try ,"
except ImportError :,"if ImportError exception is caught ,"
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ )","dest set to string 'use_threading ' , default set to boolean True and help set to 'Tells Django to NOT use threading. ' . call the method parser.add_argument with 5 arguments : string ' -- noreload ' , action set to string 'store_false ' ,"
assert mimetype is None,if mimetype is not None raise an error .
continue,skip this loop iteration .
if not data and in itial :,"if data is false and initial is true ,"
if not prefix . endswith ( / ) :,"if prefix doesnt end with character '/ ' ,"
msg = self .  create message ( msg ),"call the self._create_message method with argument msg , substitute it for msg ."
if not os . path . is dir ( directory ) :,"if directory is not an directory ,"
"sql . extend ( connection . creation . sql for pending references ( model , no style ( ) , pending references ) )","use the result as the argument for the call to the sql.extend method . call the connection.creation.sql_for_pending_references method with refto , no_style ( ) and pending_references as arguments ,"
except :,"if an exception occurred ,"
"kw = dict ( ( k , in t ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )","update a dictionary with an entry v converted to an integer for k , for every k and v in result of the function six.iteritems ,"
self . open ( ),call the method self.open .
return self . nodelist . render ( context ),"call the method self.nodelist.render with an argument context , return the result ."
from django . conf import settings,from django.conf import settings into default name space .
return TemplateSyntaxError ( msg ),return an instance of TemplateSyntaxError class with an argument msg .
def   init   ( self ) :,define the method __init__ with an argument self .
class VariableDoesNotExist ( Exception ) :,derive the class VariableDoesNotExist form the base class Exception .
raise StopIteration,raise an StopIteration exception .
checkbox name = self . clear checkbox name ( name ),"call the method self.clear_checkbox_name with an argument name , substitute the result for checkbox_name ."
else :,"if not ,"
class MemcachedCache ( BaseMemcachedCache ) :,derive the class MemcachedCache from the BaseMemcachedCache base class .
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
cache choices = False,substitute boolean False for cache_choices .
style = dummy ( ),style is an instance of the dummy class .
self .  ordering . sort ( key = compare ordering key ),call the method self._ordering.sort with an argument key as compare_ordering_key .
data = str ( data ),"convert data to string , substitute it for data ."
answer = answer [ NUM_ ] . lower ( ),convert first element of answer to lowercase and substitute it for answer .
"compile func = partial ( generic tag compiler , params = params , varargs = varargs , varkw = varkw , defaults = defaults , name = function name , takes context = takes context , node class = SimpleNode )","substitute its __name__ field for function name , if it doesnt exists substitute func.__name__ for function_name . call the function generic_tag_compiler , params set to params , varargs set to varargs , varkw set to varkw , defaults set to defaults ,"
sys . stdout . write ( self . main help text ( commands only = True ) + STR_ ),"call the method self.main_help_text with an argument commands_only set to boolean True , append new line to it , write it to sys.stdout ."
self . current token = self . next token ( ),"call the method self.next_token , substitute the result for self.current_token ."
from django import VERSION as version,from django import VERSION as version into default name space .
try :,"try ,"
def check migrations ( self ) :,define the method check_migrations with an argument self .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = "" STR_ "" )","dest set to string 'no_location ' , default as boolean False and help as a string `` Do n't write ' # : filename : line ' lines. '' . call the method parser.add_argument with 5 arguments : string ' -- no-obsolete ' , action as a string 'store_true ' ,"
for choice in value :,"for every choice in value ,"
pass,do nothing .
return wrapper,"and unpacked dictionary kwargs , return the result . return wrapper ."
"return self .  text chars ( length , truncate , text , truncate len )","call the method self._text_chars with 4 arguments : length , truncate , text and truncate_len , return the result ."
if since <= NUM_ :,"if since is lesser or equal to integer 0 ,"
"if commit and hasattr ( form , STR_ ) :","if commit is true and form has an attribute 'save_m2m ' ,"
"from yaml import SafeLoader , SafeDumper","from yaml import SafeLoader , SafeDumper into default name space ."
self .  raw ipv6 = True,self._raw_ipv6 is boolean True .
try :,"try ,"
if ttl is not None :,"if ttl is not None ,"
if self . in teractive :,"if self.interactive is true ,"
"def  construct form ( self , i , ** kwargs ) :","define the method _construct_form with 3 arguments : self , i and unpacked dictionary kwargs ."
"warnings . warn ( "" STR_ "" "" STR_ "" , RemovedInDjango19Warning )",call the function warnings.warn with 2 arguments : string `` django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. ``
"raise CommandError ( "" STR_ "" % message )","raise an CommandError exception with an argument string `` Error : % s '' , with ' % s ' replaced by message ."
def escape filter ( value ) :,define the function escape_filter with an argument value .
return nodes,return nodes .
"pot path = os . path . join ( path , STR_ % str ( self . domain ) )","join into a file path : path and string ' % s.pot ' , where ' % s ' is replaced with self.domain converted into a string , substitute the result for pot_path ."
use natural foreign keys = options . get ( STR_ ) or use natural keys,"and RemovedInDjango19Warning . get the value under the ' use_natural_foreign_keys ' key of the options dictionary , substitute the result for use_natural_foreign_keys ."
"raise CommandError ( "" STR_ "" )",raise an CommandError exception with an argument string `` You can only use -- pks option with one model '' .
from functools import update wrapper,from functools import update_wrapper .
if nodelist . contains nontext :,"if nodelist.contains_nontext is true ,"
"if is in stance ( rhs , SafeData ) :",if rhs is an instance of SafeData .
"os . kill ( os . getpid ( ) , - exit code )",call the function os.kill with os.getpid ( ) and negative exit_code as arguments .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = "" STR_ "" )","default set to boolean False , help as a string `` Just show what migrations would be made ; do n't actually write them. '' . call the method parser.add_argument with 5 arguments : string ' -- merge ' , action as a string 'store_true ' , dest as a string 'merge ' ,"
else :,"if not ,"
"m =  html parser . attrfind . match ( rawdata , k )","match the rawdata from the position k , with attrfind pattern , assign the result to the m ."
pass,do nothing .
"def  generate cache header key ( key prefix , request ) :",define the funtion _generate_cache_header_key with key_prefix and request as arguments .
"from django . utils import formats , six",from django.utils import formats and six into default name space .
self . message = message,substitute message for self.message .
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % name )","raise an TemplateSyntaxError exception with an argument string `` ' % s ' received some positional argument ( s ) after some keyword argument ( s ) '' , where ' % s ' is replaced with name ."
if in dex is not None and in dex < self . in itial form count ( ) :,"if index is not None and index is smaller than return value of the method self.initial_form_count ,"
"smart split re = re . compile ( r "" "" "" STR_ "" ] * ( ? : ( ? : "" STR_ "" \ \ ] | \ \ . ) * "" STR_ "" ] * ) + ) | \ S + ) "" "" ""  , re . VERBOSE )
","call the function re.compile with 2 arguments : raw string `` ( ( ? : [ ^\s ' '' ] * ( ? : ( ? : '' ( ? : [ ^ '' \\ ] |\\ . ) * '' | ' ( ? : [ ^'\\ ] |\\ . ) * ' ) [ ^\s ' '' ] * ) + ) | \+ ) '' ,"
"return [ Warning ( "" STR_ "" , hint = ( "" STR_ "" "" STR_ "" "" STR_ "" "" STR_ "" "" STR_ "" ) , obj = None , id = STR_ , ) ]","call the Warning function with 4 arguments : string `` MIDDLEWARE_CLASSES is not set . `` , hint tuple containing one string ,"
return t . render ( context ),"call the function t.render with an argument context , return the result ."
if name in lib . filters :,if name is contained in lib.filters .
self . feed . update ( kwargs ),"result of the function iri_to_uri called with an argument link for 'link ' , result of the function to_unicode called with an argument description for 'description ' , result of the function to_unicode called with an argument language for 'language ' , result of the function to_unicode called with an author_email description for 'author_email ' , result of the function to_unicode called with an argument author_name for 'author_name ' , result of the function iri_to_uri called with an argument author_link for 'author_link ' , result of the function to_unicode called with an argument subtitle for 'subtitle ' , if true , categories is value for 'categories ' key , if not , empty tuple is value for 'categories ' key , result of the function iri_to_uri called with an argument feed_url for 'feed_url ' , result of the function to_unicode called with an argument feed_copyright for 'feed_copyright ' , if true , feed_guid is value for 'id ' key , if not , lik is value for 'id ' key and ttl for 'ttl ' . update self.feed dictionary with kwargs ."
ser fmt = None,ser_fmt is None .
"def add arguments ( self , parser ) :",define the method add_arguments with 2 arguments self and parser .
"if is in stance ( message , dict ) :","if message is an instance of dict type ,"
"value = value . replace ( arg , )","replace every occurrence of arg is value for an empty string , substitute the result for value ."
"if is in stance ( other , Promise ) :","if other is an instance of Promise class ,"
"response = self . handle uncaught exception ( request , resolver , sys . exc info ( ) )","call to the self.handle_uncaught_exception method with request , resolver and value of the evaluated function sys.exec_info ,"
if formfield :,"if formfield is true ,"
if max age is not None :,"if max_age is not None ,"
class InclusionNode ( TagHelperNode ) :,derive the class InclusionNode form the base class TagHelperNode .
return self .  errors,return self._errors .
"self . max value , self . min value = max value , min value",substitute max_value and min_value for self.max_value and self.min_value .
raise CommandError ( msg ),"for every e in all_issues , raise an CommandError with argument msg ,"
else :,"if not ,"
current = current ( ),"call the function current , substitute the result for current ."
if value is not result :,"if value is not contained in result ,"
"def   eq   ( self , other ) :",define the method __eq__ with arguments self and other .
"elif is in stance ( value , datetime . date ) :","otherwise if value is an instance of datetime.date ,"
"with open ( fn , STR_ ) as f :","open the file fn in read mode , with file descriptor as f ,"
return endpos,return endpos .
from django . utils import six,from django.utils import six into default name space .
local attrs = self . build attrs ( id = field % id  ),"call the method self.build_attrs with an argument id set to field modulus id_ , substitute the result for local_attrs ."
except IOError as e :,"if IOError , renamed to e , exception is caught ,"
"def check model signals ( app configs = None , ** kwargs ) :","define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments ,"
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
else :,"if not ,"
"while i < len ( subject ) and subject [ i ] in ( , STR_ ) :","while i is lesser than length of subject and i-th element of subject is an empty space or tab character ,"
valid forms = [ form for form in self . forms if form . is  valid ( ) and form not in forms to delete ],"for every form in self.forms append form to a list , if function form.is_valid evaluates to true ,"
final attrs [ STR_ ] = STR_,substitute string 'checked ' for value under the 'checked ' key of final_attrs dictionary .
from django . utils . encoding import force str,from django.utils.encoding import force_str into default name space .
from django . utils . six . moves . urllib . parse import urljoin,from django.utils.six.moves.urllib.parse import urljoin into default name space .
def   bool   ( self ) :,define the method __bool__ with argument self .
"return super ( BaseInlineFormSet , self ) . in itial form count ( )","call the method initial_form_count from the base class of the class BaseInlineFormSet , return the result ."
from django . core . management . templates import TemplateCommand,from django.core.management.templates import TemplateCommand into default name space .
if key not in self :,"if key is not contained in self ,"
if errors :,"if errors is true ,"
return True,return boolean True .
self . can write = threading . Semaphore ( NUM_ ),"call the method threading.Semaphore with an argument integer 0 , substitute the result for self.can_write ."
def is  silenced ( self ) :,define the method is_silence with argument self .
@ register . tag ( STR_ ),"decorator method register.tag with an argument 'block ' ,"
var obj = None,var_obj is None .
"def validate ( self , value ) :",define the method validate with arguments self and value .
else :,"if not ,"
"from django . utils . text import Truncator , wrap , phone2numeric","from django.utils.text import Truncator , wrap and phone2numeric into default name space ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"return getattr (  active , "" STR_ "" , get default timezone ( ) )","get 'value ' attribute of the _active object , if it exists return it , if not , call the function get_default_timezone and return the result ."
return cls,return cls .
from itertools import chain,from itertools import chain into default name space .
def clear cdata mode ( self ) :,"define method clear_cdata_mode , with self class instance as an argument ."
import sys,import module sys .
def handle m2m ( value ) :,"define the function handle_m2m with an argument value ,"
"for ( k , v ) in type  .   dict   . items ( ) :","for every k and v in result of the call to the method type_.__dict__.items ,"
self . or phans = in t ( or phans ),convert orphans into an integer and substitute it for self.orphans .
self .  wrapped = get storage class ( ) ( ),"call the function that is the return value of get_storage_class method , substitute the result for self._wrapped ."
"elif is in stance ( value , six . string types ) :","otherwise if vale is an instance of value ,"
if refto in seen models :,"if refto is contained in seen_models ,"
"def  isdst ( self , dt ) :",define the method _isdst with 2 arguments : self and dt .
if not func . is  usable :,"func.is_usable in false ,"
"def resolve ( self , context , ignore failures = False ) :","define the method resolve with 3 arguments : self , context and ignore_failures set to boolean False ."
del  prefixes . value,delete _prefixes.values .
from django . utils . timezone import is  aware,from django.utils.timezone import is_aware into default name space .
return lookup view,return lookup_view
if not self . timezone :,"if self.timezone is true ,"
netloc = netloc . encode ( STR_ ) . decode ( STR_ ),"call the method netloc.encode with an argument string 'idna ' , on the return value call the decode method with string 'ascii ' as argument , substitute the result for netloc ."
"for regex in RFC1123 DATE , RFC850 DATE , ASCTIME DATE :","for every regex in tuple with 3 elements : RFC1123_DATE , RFC850_DATE and ASCTIME_DATE ,"
@ wraps ( func ),decorator function wraps with an argument func .
return bool ( self . dict ),"convert self.dict into boolean , return the result ."
file name = data . name,substitute data.name for file_name .
"mapping = { STR_ : BLOCK TAG START , STR_ : BLOCK TAG END , STR_ : VARIABLE TAG START , STR_ : VARIABLE TAG END , STR_ : SINGLE BRACE START , STR_ : SINGLE BRACE END , STR_ : COMMENT TAG START , STR_ : COMMENT TAG END , }","mapping is an dictionary with 8 initial entries : BLOCK_TAG_START for 'openblock ' , BLOCK_TAG_END for 'closeblock ' ,"
if  globs  is None :,"if _globs_ is None ,"
return self,return self .
if defaults is not None :,"where ' % s ' is replaced with name . if defaults is not None ,"
for obj in queryset :,"for every obj in queryset ,"
i = NUM_,i is integer 0 .
self . resolver match = None,self.resolver_match is None .
if field . widget . needs multipart form :,"if field.widget.needs_multipart_form is true ,"
"tpl = "" STR_ ""","tpl is an string `` DTDForbidden ( name= ' { } ' , system_id= { ! r } , public_id= { ! r } ) '' ."
"dict .   setitem   ( self , key , http cookies . Morsel ( ) )","call the private dict.__setitem__ method with self class instance , key and result of the function http_cookies.Morsel ( ) as arguments ."
if response :,"if response is True ,"
return self . streaming content,return self.streaming_content
class Debug ( CheckMessage ) :,derive the class Debug from base class CheckMessage .
val2 = parser . compile filter ( bits [ NUM_ ] ),"call the method parser.compile_filter with an argument , third element of bits , substitute the result for val2 ."
"host = STR_ % ( host , server port )","if return value of the self.is_secure is false and server port is not equal to string '80 ' , join host and server_port into a string , separated with ' : ' , substitute the result for host ."
"if is in stance ( message , SafeData ) :",if message is an instance of SafeData .
format = force str ( default or get format ( STR_ ) [ NUM_ ] ),"call the function force_str with an argument : default if it is true , or if not , first element of the result of the function ,"
over chunk = field stream . read ( NUM_ - over bytes ),"call the method field_stream.read with an argument : over_bytes subtracted from integer 4 , substitute the result for over_chunk ."
"final path = abspathu ( join ( base , * paths ) )","join base an unpacked list paths into a string , get the absolute path in unicode representation of the result , substitute the result for final_path ."
message = . join ( tokens ),"join tokens elements into a string , substitute it for message ."
for format in settings . SERIALIZATION MODULES :,"for every format in settings.SERIALIZATION_MODULES ,"
if name == STR_ :,"if name equals a string 'content-disposition ' ,"
if field . rel is None :,"if field.rel is None ,"
except IOError as e :,"if IOError , renamed to e , exception is caught ,"
if STR_ in cc and STR_ in kwargs :,"if cc contains item 'max-age ' and kwargs contains item 'max_age ' ,"
return self,return self .
"return render value in context ( value , context )","call the function render_value_in_context with 2 arguments : value and context , return the result ."
if i >= self . in itial form count ( ) and self . in itial extra :,"if i is greater or equal to the result of the method self.initial_form_count and self.initial_extra is true ,"
value = value . astimezone ( timezone ),"call the method value.astimezone with an argument timezone , substitute the result for value ."
"nodelist empty = parser . parse ( ( STR_ , ) )","call the method parser.parse with an argument tuple with an element string 'endfor ' , substitute the result for nodelist_empty ."
from django . core import signals,from django.core import signals into default name space .
references to delete = { },references_to_delete is an empty dictionary .
self . code = code,substitute code for self.code .
"condition = TemplateIfParser ( parser , bits ) . parse ( )","call the method parse from the instance of TemplateIfParser class , created with 2 arguments parser and bits , substitute the result for condition ."
hextet = ip str . split ( STR_ ),"split ip_str by ' : : ' , substitute it for hextet ."
"def handle ( self , ** options ) :",define the method handle with arguments self and unpacked dictionary options .
raise,raise an exception .
"return tpl . format ( self . sysid , self . pubid )",call the method tpl.format with an arguments self.sysid and self.pubid .
if safe :,"if safe is true ,"
except ValueError :,"if ValueError exception is caught ,"
def tag ( self ) :,define the method tag with an argument self .
"path = os . path . join ( app config . path , STR_ )","join app_config.path and string 'management ' into a file path , substitute it for path ."
if self .  errors is None :,"if self._errors is None ,"
pass,do nothing .
"def resolve ( self , path ) :",define the method resolve with an argument self .
def reset cache ( ** kwargs ) :,define the function reset_cache with an argument unpacked dictionary kwargs .
"return FixedOffset ( offset , name )","return an instance of FixedOffset class , created with 2 arguments : offset and name ."
"offset = ( len ( self .   starttag text ) - self .   starttag text . rfind ( "" STR_ "" ) )","find the last index of newline occurrence in self.__starttag_text , subtract it from total length of self.__starttag_text ,"
import tempfile,import module tempfile .
current = settings . TEMPLATE STRING IF INVALID,substitute settings.TEMPLATE_STRING_IF_INVALID for current .
elif self . use ipv6 and not  fqdn :,"otherwise if self.use_ipv6 is true and _fqdn is false ,"
return,return nothing .
stream . close ( ),close the file stream .
"return  trans . npgettext ( context , singular , plural , number )","call the method _trans.npgettext with 4 arguments context , singular , plural and number ."
from   future   import absolute import,from __future__ import absolute_import into default name space .
def close ( self ) :,define the method close with argument self .
def render js ( self ) :,"and use it as the name of the attribute to get from the self object , call the result and append it to a list for every name in MEDIA_TYPES , join all the results into a string with newline separator , use the result as an argument for the call to the function mark_safe , return the result . define the method render_js with an argument self ."
loop dict [ STR_ ] = i,substitute i for value under the 'counter0 ' key of the loop_dict dictionary .
opt label += =,append '= ' to opt_label .
"def assignment tag ( self , func = None , takes context = None , name = None ) :","define the method assignment_tag with 4 arguments : self , func set to None , takes_context set to None and name set to None ."
def or dered forms ( self ) :,define the method ordered_forms with an argument self .
"for widget in self . get renderer ( name , value , attrs , choices ) :","call the method self.get_renderer with 4 arguments : name , value , attrs and choices , for every widget in result ,"
def temporary file path ( self ) :,define the method temporary_file_path with argument self .
return datetime . fromtimestamp ( os . path . getctime ( self . path ( name ) ) ),"call the function self.path with argument name , use the result as an argument for the call to the function os.path.getctime ,"
result . pop ( ),remove the first element from result .
def  get choices ( self ) :,define the method _get_choices with an argument self .
self . app or project = app or project,substitute app_or_project for self.app_or_project .
try :,"try ,"
except ValueError :,"if ValueError exception is caught ,"
"def exec  (  code  ,  globs  = None ,  locs  = None ) :","define the function exec with 3 arguments : _code_ , _globs_ set to None and _locs_ set to None ."
"def error ( self , token , msg ) :","define the method enter_command with 3 arguments : self , token and msg ."
continue,skip this loop iteration .
"self .  files . appendlist ( force text ( old field name , self .  encoding , errors = STR_ ) , file obj )","call the function force_text with 3 arguments : old_field_name , self._encoding and errors as a string 'replace ' ,"
self . negated = negated,substitute negated for self.negated .
  delitem   = complain,substitute complain for __delitem__ .
if field . serialize :,"if field.serialize is true ,"
class TypedMultipleChoiceField ( MultipleChoiceField ) :,derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class .
"return [ ( k , self [ k ] ) for k in self . keyOrder ]","put a tuple with 2 elements : k and value under k key of self dictionary into a list , for every k in self.keyOrder ,"
except ValueError :,"if ValueError exception is caught ,"
e . django template source = node . source,substitute node.source for e.django_template_source .
from django . utils . html import avoid wrapping,from django.utils.html import avoid_wrapping into default name space .
from django . core . files . base import File,from django.core.files.base import File into default name space .
"in dex output . append ( "" STR_ "" % ( unique , qn ( STR_ % ( tablename , f . name ) ) , qn ( tablename ) , qn ( f . name ) ) )","replace ' % s ' in string `` CREATE % sINDEX % s ON % s ( % s ) ; '' with : unique , return value of the function qn called with an argument :"
overlapped = OVERLAPPED ( ),"call the OVERLAPPED function , substitute the result for overlapped ."
"def   getitem   ( self , alias ) :",define the __getitem__ method with self and alias arguments .
"def render ( self , name , value , attrs = None ) :","define the method render with 4 arguments : self , name , value and attrs set to None ."
def   str   ( self ) :,define the method __str__ with an argument self .
"def   deepcopy   ( self , memo ) :",define the method __deepcopy__ with 2 arguments self and memo .
chunk size *= NUM_,double the chunk size .
"help = ( "" STR_ "" "" STR_ "" "" STR_ "" )",help is a tuple containing string `` Creates a Django project directory structure for the given ``
self . DSTOFFSET = timedelta ( seconds = -  time . altzone ),"call the function timedelta with an argument seconds set to negative _time.altzone , substitute the result for self.DSTOFFSET ."
timeout = NUM_,timeout is integer 300 .
else :,"if not ,"
cleaned data = form . cleaned data,substitute form.cleaned_data for cleaned_data .
"def get resolved arguments ( self , context ) :",define the method get_resolved_arguments with 2 arguments : self and context .
"def  set ( self , key , value , timeout = DEFAULT TIMEOUT ) :","define the method _set with 4 arguments , self class instance , key , value and timeout set to DEFAULT_TIMEOUT ."
except Exception :,"if POST_override is not None , or otherwise generated with the call to the function pformat with an argument request.POST . if Exception exception is caught ,"
if STR_ in kwargs :,"if 'warning ' is contained in kwargs ,"
"return "" """,return an empty string .
"return zipfile . ZipFile . read ( self , self . namelist ( ) [ NUM_ ] )",call the method zipfile.ZipFile.read with 2 arguments : self and first element of the result of the self.namelist method .
class URLNode ( Node ) :,derive the class URLNode from Node base class .
if six . PY3 :,"if six.PY3 is true ,"
subcommands = list ( get commands ( ) ) + [ STR_ ],"call the function get_commands , convert the result to a list , append string 'help ' to it , substitute it for subcommands ."
lang = get language ( ),"call the function get_language , substitute the result for lang ."
self . m2m data = None,self.m2m_data is None .
else :,"if not ,"
self . paths to remove . append ( tempdir ),append the tempdir to self.paths_to_remove .
"parser = CommandParser ( self , prog = "" STR_ "" % ( os . path . basename ( prog name ) , subcommand ) , description = self . help or None )","parser is an instance of CommandParser class , created with 3 arguments : self , prog as a string created by joining :"
"if is in stance ( boundary , six . text type ) :","if boundary is an instance of six.text_type class ,"
message context = context match . group ( NUM_ ),"substitute the result for context_match . call the method context_match.group with an argument integer 1 , substitute the result for message_context ."
"if is in stance ( timezone , tzinfo ) :","if timezone is an instance of tzinfo ,"
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
if not path . exists ( target dir ) :,"if target_dir path doesnt exists ,"
from django . utils . module loading import import string,from django.utils.module_loading import import_string into default name space .
"if not hasattr ( self , STR_ ) :","if self doesnt have an attribute '_fqdn ' ,"
m = self . DOT PATTERN . match ( rest ),"match rest string with self.DOT_PATTERN regex , substitute the result for m ."
break,break from the loop execution .
root [ KEY ] = root [ RESULT ] = None,root dictionary values under the KEY and RESULT keys are both None .
"def   init   ( self , obj ) :",define the method __init__ with 2 arguments : self and obj .
conflicts = loader . detect conflicts ( ),"call the method loader.detect_conflicts , substitute the result for conflicts ."
pass,do nothing .
if not self . use argparse :,"if self.use_argparse is false ,"
def get language bidi ( ) :,define the function get_language_bidi .
return attrs,return attrs .
return True,return boolean True .
self . endElement ( name ),call the method self.endElement with an argument name .
var obj = Variable ( constant ) . resolve ( { } ),"instantiate Variable class , with an argument constant , call the resolve method with an empty dictionary as an argument , substitute the result for var_obj ."
if  ipv6 :,"if _ipv6 is true ,"
try :,"try ,"
if i >= len ( subject ) :,if i is greater than or equal to length of subject .
import re,import module re .
self . month none value = self . none value,substitute self.none_value for self.month_none_value .
"from django . db import models , router",from django.db import models and router into default name space .
"def clean ( self , value ) :",define the method clean with arguments self and value .
"ip address validator map = { STR_ : ( [ validate ipv46 address ] ,   ( STR_ ) ) , STR_ : ( [ validate ipv4 address ] ,   ( STR_ ) ) , STR_ : ( [ validate ipv6 address ] ,   ( STR_ ) ) , }","ip_address_validator_map is a dictionary containing 3 initial entries : tuple containing 2 elements : list with an element , validate_ipv46_address and return value of the function _ with an argument string 'Enter a valid IPv4 or IPv6 address . ' for 'both ' ,"
parts = config string . lower ( ) . split ( STR_ ),"convert config_string to lowercase and split it by ' ; ' character , substitute the result for parts ."
"raise TemplateSyntaxError ( "" STR_ "" % ( name , "" STR_ "" . join ( "" STR_ "" % p for p in unhandled params ) ) )",raise TemplateSyntaxError (
chunk size = NUM_,chunk_size is an integer 1024 .
return ( self . data . weekday ( ) + NUM_ ) % NUM_,"call the method self.data.weekday , increment the result by an integer 1 , divide it with integer 7 , return the reminder of the division ."
"return numberformat . format ( value , get format ( STR_ , lang , use l10n = use l10n ) , decimal pos , get format ( STR_ , lang , use l10n = use l10n ) , get format ( STR_ , lang , use l10n = use l10n ) , force grouping = force grouping )","call the method numberformat.format with 6 arguments : value , result of the function get_format called with 3 arguments :"
timeout = - NUM_,timeout is a integer -1 .
self . loaded object count = NUM_,self.loaded_object_count is integer 0 .
self .  boundary = boundary,substitute boundary for self.boundary .
append = complain,substitute complain for append .
errors = [ ],errors is an empty list .
args = ( ),args is an empty tuple .
"kwargs [ "" STR_ "" ] = getattr ( self . parent instance , self . to field )","get self.to_field attribute of self.parent_instance object , substitute it for value under the 'initial ' key of the kwargs dictionary ."
return compiled parent .  render ( context ),"call the method compiled_parent._render with an argument context , return the result ."
return in stance,return instance .
if sub tried is not None :,"if sub_tried is not None ,"
return mark safe ( value ),"call the function mark_safe with an argument value , return the result ."
def   repr   ( self ) :,define the method __repr__ with an argument self .
if decimal pos is not None :,if decimal_pos is not None
@ python 2 unicode compatible,"decorator python_2_unicode_compatible ,"
return node,return node .
return unbound . im func,return unbound.im_func .
def get language info ( lang code ) :,define the function get_language_info with an argument lang_code .
os . makedirs ( basedir ),"make basedir directory ,"
"new obj = func ( obj , autoescape = context . autoescape , * arg vals )","call the function func with 3 arguments : obj , autoescape set to context.autoescape and unpacked list arg_vals ,"
self . verbosity = options . get ( STR_ ),"if not , self.hide_empty is boolean False . get the value under the 'verbosity ' key of the options dictionary , substitute it for self.verbosity ."
"m = getattr ( lookup view , STR_ , None )","get the attribute '__module__ ' from the getattr , if it exists substitute it for m , if not , m is None ."
i += NUM_,"increment i by integer 1 , ."
"self . dict = OrderedDict ( ( ( x , None ) for x in iterable ) if iterable else [ ] )","self.dict is an instance of OrderedDict class , created with arguments : tuples with 2 argument x and None , for every x in iterables ,"
else :,"if not ,"
" builtin context processors = ( STR_ , )",_builtin_context_processors is a tuple containing a string 'django.core.context_processors.csrf ' .
for model in app models :,"for every model in app_models ,"
"def get ( self , key , otherwise = None ) :","define the method get with 3 arguments : self , key and otherwise set to None ."
class InputStreamExhausted ( Exception ) :,derive the class InputStreamExhausted from the Exception base class .
weight += NUM_,increment weight by integer 2 .
self . write migration files ( changes ),call the method self.write_migration_files with an argument changes .
"lib = libraries . get ( library name , None )","get the value under the library_name key of the libraries dictionary , if it exists , substitute it for lib , if not , lib is None ."
else :,"widget is an instance of HiddenInput class . if not ,"
self . fed = [ ],self.fed is an empty list .
"def to python ( self , value ) :",define the method to_python with arguments self and value .
"name , val = forbid multi line headers ( name , val , STR_ )","call the function forbid_multi_line_headers with 3 arguments : name , val and string 'ascii ' , substitute the result for name and val , respectively ."
if field ! = NON FIELD ERRORS and field not in self . fields :,"if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields ,"
except KeyError :,"if KeyError exception is caught ,"
self . parent name = parent name,substitute parent_name for self.parent_name .
"return self .  get page ( self . object list [ bottom : top ] , number , self )","call the self._get_pages method with 3 arguments : self.object_list from the bottom to the top index , number and self , return the result ."
"setattr ( base , old method name , wrapper ( old method ) )",set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method .
"re chars = re . compile ( r STR_ , re . U | re . S )","re.U and re.S , substitute the result for re_words . call the function re.compile with 2 arguments : raw string ' < .* ? > | ( . ) ' and bitwise OR performed with 2 operands ,"
BLOCK CONTEXT KEY = STR_,BLOCK_CONTEXT_KEY is a strign 'block_context ' .
"if now and not is in stance ( now , datetime . datetime ) :","if now equals to boolean True and now is not an instance of datetime.datetime ,"
app list = resolver . app dict [ ns ],"get the value under the ns key of the resolver.app_dict dictionary , substitute it for app_list ."
if remaining is None :,"if remaining is None ,"
return cache,reuturn cache .
"if not hasattr ( values , STR_ ) :","if values has an attribute '__len__ ' ,"
continue,skip this loop iteration .
i = NUM_,i is integer 366 .
class MovedModule (  LazyDescr ) :,derive class MovedModule from the _LazyDescr base class .
"class EscapeText ( six . text type , EscapeData ) :",derive the class EscapeText from six.text_type and EscapeData base classes .
class OVERLAPPED ( Structure ) :,derive the class OVERLAPPED from the Structure base class .
self . class name = class name,substitute class_name for self.class_name .
match = self . regex . search ( path ),"call the function self.regex.search with an argument path , substitute the result for match ."
"return d ( stream or string , ** options )","call the object d with arguments stream_or_string and unpacked dictionary options , return the result ."
if f . db index :,"if f.db_index is true ,"
except KeyError :,"if KeyError exception is caught ,"
"def   deepcopy   ( self , memo ) :",define the method __deepcopy__ with 2 arguments : self and memo .
return True,"where ' % d ' is replaced with name , dlen subtracted from alen , and plen . return boolean True ."
"sys . stderr . write ( "" STR_ "" )","call the method sys.stderr.write with an argument string `` installed flup , then make sure you have it in your PYTHONPATH.\n '' ."
table = connections [ db ] . ops . quote name ( self .  table ),"call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary , substitute the result for table ."
"if is in stance ( receiver , types . FunctionType ) :","if receiver is an instance of types.FunctionType type ,"
"return Page ( * args , ** kwargs )","return a instance of the class Page , created with 2 arguments : unpacked list args and unpacked dictionary kwargs ."
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'email ' and value under the 'author_email ' key of the item dictionary .
if not match :,"if match is true ,"
date = datetime safe . new datetime ( date ),"call the method datetime_safe.new_datetime with an argument date , substitute the result for date ."
return id ,return id_ .
"out . write ( STR_ % p . split ( STR_ , NUM_ ) [ NUM_ ] )","split p into two parts at the first ' : ' , use the second element of the result to format string ' _ ( % s ) ' , write it to out ."
using sysrandom = False,string ' A secure pseudo-random number generator is not available on your system . Falling back to Mersenne Twister. ' . using_sysrandom is boolean False .
"recipients = [ sanitize address ( addr , email message . encoding ) for addr in email message . recipients ( ) ]","call the function sanitize_address with arguments addr and email_message.encoding , for every addr in return value of the function email_message.recipients , store the results in a recipients list ."
if in stance is None :,"save_as_new set to boolean False , prefix set to None , queryset set to None and unpacked dictionary kwargs . if instance is None ,"
neg = NUM_,neg is integer 1 .
for key value in related :,"for every key_value in related ,"
"return { f : e . as data ( ) for f , e in self . items ( ) }","return a dictionary generated with an expression , return value of the method e.as_data for f ,"
"def   init   ( self , * args , ** kwargs ) :","define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
from django . utils . six . moves import cPickle as pickle,from django.utils.six.moves import cPickle as pickle into default name space .
else :,"self._files is an instance of class MultiValueDict . if not ,"
bad app labels = set ( ),bad_app_labels is an empty set .
self . cmd = cmd,substitute cmd for self.cmd .
"data [ "" STR_ "" ] = smart text ( obj .  get pk val ( ) , strings only = True )","call the smart_text function with 2 arguments : return value of the obj._get_pk_val function and string_only set to boolean True ,"
self .  container . append ( self . make bytes ( content ) ),"call the method self.make_bytes with an argument content , append it to self._container ."
return SafeBytes ( t ),"return an instance of SafeBytes , created with an argument t ."
def value ( self ) :,define the method value with an argument self .
if path is None :,"if path is not initialized ,"
elif msg and visible issue count :,"otherwise if msg and visible_issue_count are true ,"
import sys,import module sys .
self . can read . acquire ( ),call the method self.can_read.acquire .
try :,"try ,"
FormSet . fk = fk,substitute fk for FormSet.fk .
class IntegerField ( Field ) :,derive the class IntegerField from the base class Field class .
"raise base . DeserializationError ( "" STR_ "" )",raise an base.DeserializationError exception with string `` < field > node is missing the 'name ' attribute '' as argument .
elif args [ NUM_ ] == STR_ :,"otherwise if second element of args equals a string '404 ' ,"
contains nontext = False,contains_nontext is boolean False .
continue,"skip this loop iteration ,"
for ext in extensions :,"for every ext in extensions ,"
"if options . get ( "" STR_ "" , False ) :","if the value under the 'test_flush ' key of the options dictionary exists ,"
if i >= len ( subject ) :,"if i is greater than , or equal to subject ,"
def import string ( dotted path ) :,define the function import_string with an argument dotted_path .
"name , val = forbid multi line headers ( name , val , self . encoding )","call the function forbid_multi_line_headers with 3 arguments : name , val and self.encoding , substitute the result for name and val , respectively ."
self .  namespace dict [ language code ] = namespaces,substitute namespaces for the value under language_code key of the self._namespace_dict dictionary .
return self . forms [ NUM_ ] . is  multipart ( ),"call the method is_multipart on the first element of self.forms , return it ."
in itial value = in itial if in itial is not None else,"if initial is not None , substitute initial for initial_value , otherwise initial_value is an empty string ."
else :,"if not ,"
"from django . utils . translation import ugettext lazy as   , pgettext lazy",from django.utils.translation import ugettext_lazy as _ and pgettext_lazy into default name space .
def needs multipart form ( self ) :,define the method needs_multipart_form with an argument self .
"self . stdout . write ( "" STR_ "" % line )","append new line to line , write it to self.stdout stream ."
"count , ch = get quantifier ( ch , pattern iter )","call the function get_quantifier with 2 arguments : ch and pattern_iter , substitute the result for count and ch , respectively ."
save . alters data = True,"and construct as boolean False , return the result . save.alters_data is boolean True ."
self . stream . flush ( ),call the method self.stream.flush .
self .  raw ipv6 = False,self._raw_ipv6 is boolean False .
for f in chain . from iterable ( l [ NUM_ ] for l in self .  files . lists ( ) ) :,for every f in return value of the return value of the method chain.from_iterable called with argument :
class CacheKeyWarning ( DjangoRuntimeWarning ) :,derive class CacheKeyWarning from the DjangoRuntimeWarning base class .
self . args = args,substitute args for self.args .
import errno,import module errno .
try :,"try ,"
"return force text ( quote plus ( force str ( url ) , force str ( safe ) ) )","call the function quote_plus with 2 arguments : result of the function force_str called with an argument url ,"
result = block . nodelist . render ( context ),"call the method block.nodelist.render with an argument context , substitute the result for result ."
from django . utils . safestring import mark safe,from django.utils.safestring import mark_safe into default name space .
return,return nothing .
result |= or d ( x ) ^ or d ( y ),"perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y ,"
continue,skip this loop iteration .
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
else :,"if not ,"
pass,do nothing .
form = self . form ( ** defaults ),"call the method self.form with unpacked dictionary defaults as an argument , substitute it for form ."
@ property,"library set to memcache and value_not_found_exception set to ValueError . property decorator ,"
def find commands ( management dir ) :,define the function find_commands with an argument management_dir .
yield subnode,yield subnode .
else :,"if not ,"
admin = STR_,admin is a string 'admin '
s = StringIO ( ),s is an instance of StringIO class .
content = force bytes ( content ),"call the function force_bytes with argument content , substitute it for content ."
if plan node in loader . applied migrations :,"if plan_node is contained in loader.applied_migrations ,"
"def   init   ( self , parent widget , name , value , attrs , choices ) :","define the method __init__ with 6 arguments self , parent_widget , name , value , attrs and choices ."
if not qs . or dered :,"if qs.ordered is false ,"
def  get scheme ( self ) :,define the method _get_scheme with an argument self .
end tag = STR_ + bits [ NUM_ ],where ' % r ' is replaced with first element of bits . append first element of bits to 'end ' . substitute the result for end_tag .
return len ( value ) == in t ( arg ),"if lengths of value and arg are equal , return boolean True , otherwise return boolean False ."
base directory = STR_ % app or project,"append string '_directory ' to app_or_project , substitute it for base_directory ."
"if not self . is  required and CheckboxInput ( ) . value from datadict ( data , files , self . clear checkbox name ( name ) ) :","called with 3 arguments : data , files and name , substitute the result for upload . if self.is_required is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class ,"
return ip str,return ip_str .
self . choices = choices,substitute choices for self.choices .
"if value ! = value or value == Decimal ( "" STR_ "" ) or value == Decimal ( "" STR_ "" ) :","if value is not equal to value or value equals return value of the call to Decimal with argument 'Inf ' ,"
for o in opts :,"for every o in opts ,"
rv = level,substitute level for rv .
if is o input not in val :,"for every iso_input in the result , if iso_input is not contained in val ,"
missing fields = ( set ( none model fields ) - set ( new class . declared fields . keys ( ) ) ),"substitute the resulting list for none_model_fields . missing_fields is difference between set containing none_model_fields and set containing result of the method ,"
if dklen > ( NUM_ ** NUM_ - NUM_ ) * hlen :,"bring intger 2 to integer 32 , decrement the result by 1 , multiply it with hlen , if dklen is greater than the previous result ,"
qs = self . queryset . filter ( ** { STR_ % key : value } ),"code set to string 'invalid_pk_value and params with an entry : pk for 'pk ' . call the method self.queryset.filter with an argument , unpacked dictionary with an entry : value for string '__in ' appended to key ,"
"self . stdout . write ( "" STR_ "" % ( app name , model .  meta . object name ) )","call the self.stdout.write method with string `` Installing custom SQL for % s. % s model\n '' as argument ,"
if not os . path . exists ( self . default locale path ) :,"if self.default_locale_path directory doesnt exists ,"
"six . reraise ( CommandError , CommandError ( new msg ) , sys . exc info ( ) [ NUM_ ] )","`` * The database is n't running or is n't configured correctly.\n * At least one of the expected database tables does n't exist.\n '' `` * The SQL was invalid.\nHint : Look at the output of 'django-admin.py sqlflush ' . That 's the SQL this command was n't able to run.\n '' `` The full error : % s '' , where ' % s ' is replaced by value under the 'NAME ' key of the connection.settings_dict dictionary and e. call the function six.reraise with 3 arguments : CommandError , CommandError created with argument new_msg ,"
class EscapeData ( object ) :,derive the class EscapeData from object base class .
"def custom sql for model ( model , style , connection ) :","define the function custom_sql_for_model with 3 arguments : app_config , style and connection ."
if translators comment start is not None and lineno >= translators comment start :,"if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start ,"
if self . verbosity > NUM_ :,"if self.verbosity is greater than integer 1 ,"
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
"self .  post , self .  files = QueryDict ( , encoding = self .  encoding ) , MultiValueDict ( )","self._post is an instance of QueryDict created with arguments : an empty string and encoding set to self._encoding ,"
"def accessed time ( self , name ) :",define the method accessed_time with arguments self and name .
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
"from django . utils . html import conditional escape , format html",from django.utils.html import conditional_escape and format_html into default name space .
"from lib2to3 . fixer util import find indentation , Name , syms , touch import","from lib2to3.fixer_util import find_indentation , Name , syms and touch_import into default name space ."
path info = /,path_info is a character '/ ' .
self . start object ( obj ),call the self.start_object with an argument obj .
"self . stdout . write ( "" STR_ "" % writer . as string ( ) )","use it as an argument for the call to the method self.style.MIGRATE_HEADING , write the result to self.stdout . call the method writer.as_string , append newline to the result , write it to self.stdout ."
elif self . waiting readers ! = NUM_ :,"otherwise if self.waiting_readers is not equal to integer 0 ,"
self . can read . release ( ),call the method self.can_read.release .
" fields  = [ ( STR_ , ULONG PTR ) , ( STR_ , ULONG PTR ) , ( STR_ ,  OFFSET UNION ) , ( STR_ , HANDLE ) ]","_fields_ is a list containing 4 tuples : first tuple contains : string 'Internal ' and ULONG_PTR ,"
return cookiedict,return cookiedict .
import os,import module os .
must be first = True,must_be_first is boolean True .
if in dex is not None :,"if index is not None ,"
"slugify = allow lazy ( slugify , six . text type )","mark_safe function , return the result . call the function allow_lazy with 2 arguments : slugify and six.text_type , substitute the result slugify ."
from logging . config import dictConfig,from logging.config import dictConfig .
"def content ( self , value ) :",define the method content with self and value .
"if hasattr ( TemplateLoader , STR_ ) :","if TemplateLoader has an attribute 'load_template_source ' ,"
self . verbosity = options . get ( STR_ ),"get the value under the 'verbosity ' key of the options dictionary , substitute it for self.verbosity ."
if app config . models module is None :,"RemovedInDjango19Warning and stacklevel set to integer 2. if app_config.models_module is None ,"
try :,"try ,"
self .  cached loaders = cached loaders,substitute cached_loaders for self._cached_loaders .
if m :,"if m is true ,"
for pk in value :,"for every pk in value ,"
exit code = restart with reloader ( ),"call the function restart_with_reloader , substitute the return value for exit_code ."
"raise TemplateSyntaxError ( "" STR_ "" % ( bits [ NUM_ ] , block name ) )","raise an TemplateSyntaxError exception with an argument string `` ' % s ' tag with name ' % s ' appears more than once '' ,"
from django . utils . six . moves import map,from django.utils.six.moves import map into default name space .
"return ( fp . read ( ) . decode ( settings . FILE CHARSET ) , filepath )","read file fp , call the method decode on the result with an argument settings.FILE_CHARSET , return tuple containing 2 elements ,"
return { STR_ : settings . STATIC URL },return an dictionary containing 1 entry : settings.STATIC_URL for 'STATIC_URL ' .
self . lookups = None,self.lookups is None .
return view func,"where string ' % s ' is replaced by mod_name and func_name , respectively . return view_func ."
id  = widget . attrs . get ( STR_ ) or self . auto id,"get the value under the 'id ' key of the widget.attrs dictionary , if the key exists substitute it for id_ ,"
else :,"if not ,"
"self . name , self . value = name , value",substitute name and value for self.name and self.value .
failures = test runner . run tests ( test labels ),"call the method test_runner.run_tests with an argument test_labels , substitute it for failures ."
def to locale ( language ) :,define the function to_locale with an argument language .
cur lineno = t . lineno + t . contents . count ( STR_ ),"count occurrences of '\n ' in t.contents , add the result to t.lineno , substitute the result for cur_lineno ."
model list . append ( model ),append model to model_list .
for attr in  urllib request moved attributes :,"for every attr in _urllib_request_moved_attributes ,"
if not pythonrc :,"and string '~/.pythonrc.py ' as tuples second element . if pythonrc is true ,"
return self . extract ( absolute path ),"call the method self.extract with an argument absolute_path , return the result ."
"super ( MemcachedCache , self ) .   init   ( server , params , library = memcache , value not found exception = ValueError )","call method __init__ from the base class of the class MemcachedCache with arguments : server , params ,"
pid = os . getpid ( ),"call the function os.getpid , substitute it for pid ."
"return STR_ % ( self . number , self . paginator . num pages )","return the string ' < Page % s of % s > ' , with occurrences of ' % s ' replaced by self.number and self.paginator.num_pages , respectively ."
attrs = [ ],attrs is a empty list .
raise NotImplementedError ( STR_ ),raise an NotImplementedError with an argument string 'subclasses of Tokenparser must provide a top ( ) method ' .
"handler . startElement ( "" STR_ "" , self . rss attributes ( ) )",call the method handler.startElement with 2 arguments : string `` rss '' and result of the method self.rss_attributes .
assert len ( version ) == NUM_,"if length of version does not equals to integer 5 , raise an exception ."
words [ i ] = escape ( word ),"call the function escape with an argument word , substitute the result for i-th element of words ."
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to integer 2 ,"
return  decorator,return _decorator .
"reporter = ExceptionReporter ( request , is  email = True , * exc info )","and request_repr , respectively . reporter is an instance of ExceptionReporter class , created with 3 arguments : request , is_email as boolean True ,"
path rest = root [ prefix length : ],"slice root starting from the prefix_length index to the end , substitute it for path_rest ."
"for i in range ( NUM_ , self . total form count ( ) ) :","for every i in sequence of integers , from 0 to the result of the method self.total_form_count ,"
"def pbkdf2 ( password , salt , iterations , dklen = NUM_ , digest = None ) :","define the function pbkdf2 with 5 arguments : password , salt , iterations , dklen set to integer 0 and digest set to None ."
model list = app config . get models ( ),"call the method app_config.get_models , substitute the result fr model_list ."
self .  wrapped = self .  setupfunc ( ),"call the method self._setupfunc , substitute the result for self._wrapped ."
"command . stdout . write ( STR_ % ( self . file , self . dirpath ) )","substitute ' % s ' is string 'processing file % s in % s\n ' with self.file and self.dirpath , write it to command.stdout ."
if PY3 :,"if PY3 is true ,"
return False,return boolean False .
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
"v = ValueError ( STR_ % ( s , e ) )","raise an ValueError exception with an argument string ' Can not resolve % r : % s ' , formated with s and e ."
from datetime import datetime,from datetime import datetime into default name space .
"return timezone . localize ( value , is  dst = None )","call the method timezone.localize with 2 arguments : value and is_dst as None , return the result ."
"return self . filter function ( func , ** flags )","call the method self.filter_function with 2 arguments func and unpacked dictionary flags , return the result ."
except KeyError :,"if KeyError exception is caught ,"
"if options . traceback or not is in stance ( e , CommandError ) :","if options.traceback is true or e is not CommandError instance ,"
"def to python ( self , value ) :",define the method to_python with arguments self and value .
args = [ ],args is an empty list .
"for i , piece in enumerate ( re formatchars . split ( force text ( formatstr ) ) ) :","call the function force_text with an argument formatstr , use the result as an argument for the call to the method ,"
from django . core . wsgi import get wsgi application,from django.core.wsgi import get_wsgi_application into default name space .
from django . test . utils import get runner,from django.test.utils import get_runner into default name space .
def  get media ( self ) :,define the method _get_media with an argument self .
return in stance,return instance .
"self . changed objects . append ( ( obj , form . changed data ) )",append a tuple with 2 elements : obj and form.changed_data to self.changed_objects .
return res,return res .
try :,"try ,"
"if not is in stance ( item , ( list , tuple ) ) :","if item is not an instance of list or tuple class ,"
if not  serializers :,"if _serializers is false ,"
for bit in self . lookups :,"for bit in self.lookups ,"
values =  itervalues,substitute _itervalues for values .
return value,return value .
return func,"use its __name__ field as a key to get the value from self.tags , assign func to it . return func ."
try :,"try ,"
try :,"try ,"
if not os . path . is file ( in it path ) :,"if init_path is not a file ,"
def get queryset ( self ) :,define the method get_queryset with an argument self .
"def validate ( self , value ) :",define the method to_python with arguments self and value .
obj = settings . TEMPLATE STRING IF INVALID,substitute settings.TEMPLATE_STRING_IF_INVALID with obj .
attrs = { STR_ : model },attrs is a dictionary with model for 'model ' .
try :,"try ,"
try :,"try ,"
"def   init   ( self , form , field , name ) :","define the method __init__ with 4 arguments : self , form , field and name ."
if not check for language ( lang ) :,"call the function check_for_language with an argument lang , if it evaluates to false ,"
"def  set queryset ( self , queryset ) :",define the method _set_queryset with 2 arguments : self and queryset .
"def load template source ( self , template name , template dirs = None ) :","define the method load_template_source with 3 arguments : self , template_name , template_dirs set to None ."
"elif not options [ "" STR_ "" ] and not options [ "" STR_ "" ] and not options [ "" STR_ "" ] :","if values under the 'socket ' , 'host ' and 'port ' keys of the options dictionary are false ,"
self .  response middleware = [ ],_response_middleware is an empty list .
kwargs [ STR_ ] = number,substitute number for value under the 'number ' key of the kwargs dictionary .
"def configure formatter ( self , config ) :",define the method configure_formatter with 2 arguments : self and config .
os . makedirs ( dirname ),create directories from the elements in filename .
if not model identifier :,"if model_identifier is false ,"
func ( path ),call the function func with an argument path .
error text = str ( e ),"convert e to a string , substitute it for error_text ."
t = self . current token,substitute self.current_token for t .
return lang code,"called with an argument lang_code is true , return lang_code ."
"def wordwrap ( value , arg ) :",define the function wordwrap with 2 arguments value and arg .
"nm = Header ( nm , encoding ) . encode ( )","call the encode function on the Header class instance , created with arguments nm and encoding , substitute the result for nm ."
with open ( pythonrc ) as handle :,"open pythonrc , with the file handle renamed to handle perform the following ,"
"none model fields = [ k for k , v in six . iteritems ( fields ) if not v ]","opts.localized_fields , opts.labels , opts.help_texts and opts.error_messages , substitute the result for fields . for every k and v in return value of the function six.iteritems called with an argument fields , if n is false , append it to a list ,"
for basedir in basedirs :,"for every basedir in basedirs ,"
else :,"if set is empty return string ' ( none ) ' instead , append the previous to the string `` Apply all migrations : `` , use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL , use the result as an argument for the call to the method self.stdout.write . if not ,"
"field type = connection . in trospection . get field type ( row [ NUM_ ] , row )","call the method connection.introspection.get_field_type with 2 arguments : second element of row and row , substitute the result for field_type ."
try :,"try ,"
 load serializers ( ),call the function _load_serializers .
"from django . core . cache . backends . base import ( InvalidCacheBackendError , CacheKeyWarning , BaseCache )","from django.core.cache.backends.base import InvalidCacheBackendError , CacheKeyWarning and BaseCache into default name space ."
@ python 2 unicode compatible,python_2_unicode_compatible decorator
import random,import module random .
return self . path < other . path,"if self.path is lesser than other.path , return boolean True , otherwise return boolean False ."
if float ( value ) ! = NUM_ :,"convert value to an floating point number if it is not equal to integer 1 ,"
value = converter ( suffix ),"call the function converter with an argument suffix , substitute the result for value ."
return d,return d .
self . content type = content type,substitute content_type for self.content_type .
"result = datetime . datetime ( year , month , day , hour , min , sec )","call the method MONTHS.index with 6 arguments : year , month , day , hour , min and sec , substitute the result for result ."
try :,"try ,"
if name == STR_ :,"if name equals a string 'regex ' ,"
if id  :,"if id_ is true ,"
return NUM_,return an integer 0 .
return parse http date ( date ),"call the function parse_http_date with an argument date , return the result ."
def get full path ( self ) :,define the method get_full_path with an argument self .
"return force text ( ngettext ( singular , plural , number ) )","call the function ngettext with 3 arguments : singular , plural and number , use the result as an argument for the call to the force_text ,"
for name in loggers :,"for every name in loggers ,"
available shells = [ shell ] if shell else self . shells,"if shell is true substitute list with element shell for available_shells , if not substitute self.shells for available_shells ."
except LookupError :,"if LookupError exception is caught ,"
if PY3 :,"if PY3 is true ,"
value = formats . sanitize separators ( value ),"call the method formats.sanitize_separators with an argument value , substitute the result for value ."
if not self . closed :,"if file self is not closed ,"
"handler . addQuickElement ( "" STR_ "" , , { "" STR_ "" : "" STR_ "" , "" STR_ "" : item [ STR_ ] . url , "" STR_ "" : item [ STR_ ] . length , "" STR_ "" : item [ STR_ ] . mime type } )","call the method handler.addQuickElement with 3 arguments : string 'link ' , an empty string and a dictionary with 4 entries :"
"def iterkeys ( d , ** kw ) :",define the function iterkeys with 2 arguments : d and unpacked dictionary kw .
"raise TypeError ( "" STR_ "" )",raise an TypeError exception with an argument string `` sep must be None or a string '' .
construct instance exclude . append ( name ),"and field _state.adding of value under the name key of self.cleaned_data dictionary is true , append name to construct_instance_exclude list ."
"def to bytes ( val , encoding ) :",define the function to_bytes with arguments val and encoding .
def   str   ( self ) :,define the method __str__ with an argument self .
for attr in  urllib robotparser moved attributes :,"`` RobotFileParser '' , `` robotparser '' , `` urllib.robotparser '' . for every attr in _urllib_robotparser_moved_attributes ,"
"value = ugettext ( "" STR_ "" ) % filesize number format ( bytes / KB )","call the function ugettext with an argument string `` % s KB '' , substitute ' % s ' with the result of the call to the function ,"
return False,return boolean False .
"if hasattr ( mw instance , STR_ ) :",if mw_instance has an attribute named 'process_request ' .
elif field in self . fields :,"otherwise if field is contained in self.fields ,"
def end serialization ( self ) :,define the method end_serialization with an argument self .
os . environ [ STR_ ] = options [ STR_ ],substitute value under the 'liveserver ' key of the options dictionary for value under the 'DJANGO_LIVE_TEST_SERVER_ADDRESS ' key of the os.environ dictionary .
else :,"if not ,"
self . error class = error class,substitute .error_class for self.error_class .
self . tags = { },self.tags is an empty dictionary .
non capturing groups = [ ],non_capturing_groups is an empty list .
elif ( attrvalue [ : NUM_ ] == STR_ == attrvalue [ - NUM_ : ] or attrvalue [ : NUM_ ] == STR_ == attrvalue [ - NUM_ : ] ) :,"otherwise , if first and the last character of attrvalue are '\ ' charter or first and last character of attrvalue are ' '' ' character ,"
del  error files [  error files . in dex ( filename ) ],remove the first occurrence of the filename value in the _error_files list .
COMMENT TAG END = STR_,COMMENT_TAG_END is a string ' # } ' .
if not dklen :,"if dklen is false ,"
if i :,"if i is true ,"
"field name = force text ( field name , encoding , errors = STR_ )","call the function force_text with 3 arguments : field_name , encoding and errors as a string 'replace ' , substitute the result for field_name ."
from unittest import *,from unittest import import everything .
cls .   dispatch = { },cls.__dispatch is an empty dictionary .
filename = file . name,substitute file.name for filename .
self . var name = var name,substitute var_name for self.var_name .
sys . stdout . write ( self . main help text ( ) + STR_ ),"and a list containing a string '-h ' , call the method self.main_help_text , append new line to it , write it to sys.stdout ."
SafeString = SafeText,substitute SafeText for SafeString .
def safe ( value ) :,define the function safe with an argument value .
except StandardError as e :,"if StandardError , renamed to e , exception is caught ,"
pass,do nothing .
"cache . set ( cache key , [ ] , cache timeout )","call the method cache.set with cache_key , an empty list and cache_timeout as arguments ."
if six . PY2 :,"if field PY2 of the module six is boolean True ,"
"def   init   ( self , var1 , var2 , nodelist true , nodelist false , negate ) :","define the method __init__ with 6 arguments : ( self , var1 , var2 , nodelist_true , nodelist_false and negate ."
"def   init   ( self , loopvars , sequence , is  reversed , nodelist loop , nodelist empty = None ) :","define the method __init__ with 6 arguments : self , loopvars , sequence , is_reversed , nodelist_loop and nodelist_empty set to None ."
"def in lineformset factory ( parent model , model , form = ModelForm , formset = BaseInlineFormSet , fk name = None , fields = None , exclude = None , extra = NUM_ , can order = False , can delete = True , max num = None , formfield callback = None , widgets = None , validate max = False , localized fields = None , labels = None , help texts = None , error messages = None , min num = None , validate min = False ) :","define the function inlineformset_factory with 20 arguments : parent_model , model , form set to ModelForm ,"
qs = self . queryset,substitute self.queryset for qs .
"from django . db import connections , router , transaction , models , DEFAULT DB ALIAS","from django.db import connections , router , transaction , models and DEFAULT_DB_ALIAS into default name space ."
if self .  wrapped is empty :,"if self._wrapped is empty ,"
repr attr = self .  setupfunc,substitute self._setupfunc for repr_attr .
can import settings = True,can_import_settings is boolean True .
extra classes . add ( self . form . required css class ),add self.form.required_css_class to extra_classes set .
self . choices = list ( choices ),"convert elements of choices into a list , substitute it for self.choices ."
else :,"if not ,"
LOCK EX = NUM_ x2,LOCK_EX is a hexadecimal 2 .
"if is in stance ( other , Promise ) :","if other is an instance of Promise class ,"
language code = get language ( ),"call the method get_language , substitute the result for language_code ."
object data . update ( in itial ),update object_data dictionary with initial .
"six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args ,"
"return self .   class   ( [ ( key , copy . deepcopy ( value , memo ) ) for key , value in self . items ( ) ] )","call the method self.__class__ with an argument list , with 2 elements : key and result of the function copy.deepcopy ,"
"return b64 encode ( salted hmac ( salt , value , key ) . digest ( ) )","call the salted_hmac with 3 arguments : salt , value and key , call the digest method on the result ,"
"if is in stance ( other dict , MultiValueDict ) :",if other_dict is an instance of MultiValueDict .
else :,"if not ,"
"plural forms re = re . compile ( r STR_ , re . MULTILINE | re . DOTALL )","call the method re.compile with 2 arguments : raw string '^ ( ? P < value > '' Plural-Forms.+ ? \\n '' ) \s* $ ' ,"
return NUM_,return integer 0 .
"return path . split ( / , NUM_ )","index of the first occurrence of '\\ ' in path , or alternatively if '\\ ' is not contained in path , split path in two parts by '/ ' character , return the result ."
"def format subject ( self , subject ) :",define the method format_subject with 2 arguments : self and subject .
for field in unique check :,"substitute the result for value under the NON_FIELD_ERRORS key of the form._errors dictionary . for every field in unique_check ,"
token = parser . next token ( ),"call the method parser.next_token , substitute the result for token ."
sys . stderr . close ( ),call the method sys.stderr.close .
def is  hidden ( self ) :,define the method is_hidden with an argument self .
if six . PY2 and value > sys . maxint :,"if six.PY2 is true and value is greater than sys.maxint ,"
"super ( BaseTemporalField , self ) .   init   ( * args , ** kwargs )","call the method __init__ from the base class of the BaseTemporalField class , with arguments : unpacked list args and unpacked dictionary kwargs ."
"def  wrapper ( self , * args , ** kwargs ) :","define the method _wrapper with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
if self . load initial data :,"if self.load_initial_data is not empty ,"
def flush ( self ) :,where ' % s ' is replaced with self.__class__.__name__ . define the method flush with an argument self .
self . filters = filters,"where ' % s ' is replaced with elemnts of token from upto index till the end , and token . substitute filters for self.filters ."
return result,return result .
self . connection = get connection ( fail silently = fail silently ),"call the function get_connection with argument fail_silently set to fail_silently , substitute it for self.connection ."
"def  format value ( self , value ) :",define the method _format_value with 2 arguments : self and value .
except serializers . SerializerDoesNotExist :,"if serializers.SerializerDoesNotExist exception is caught ,"
forms valid &= form . is  valid ( ),"call the method form.is_valid , perform bitwise and with the result and forms_valid as operands , substitute the result for forms_valid ."
try :,"try ,"
if in put val in special floats :,"if every input_val in special_floats ,"
return [ self . forms [ i [ NUM_ ] ] for i in self .  ordering ],"for i in self._ordering append to a list value under the first element of i key of the self.forms dictionary , return resulting list ."
model dependencies . reverse ( ),call the methof model_dependencies.reverse .
locales = set ( locales ) - set ( exclude ),locales is relative complement of set exclude in set locales .
else :,"if not ,"
processors = tuple ( processors ),convert processors into a tuple and substitute it for processors .
else :,"if not ,"
return d,return d .
if ret :,if ret is true .
"msg += "" STR_ """,append string `` The domain name provided is not valid according to RFC 1034/1035 . '' to msg .
from django . utils . deconstruct import deconstructible,from django.utils.deconstruct import deconstructible into default name space .
from collections import namedtuple,from collections import namedtuple .
return,return nothing .
"obj = base . build instance ( Model , data , self . db )","call the method base.build_instance with arguments Model , data and self.db , substitute the result for obj ."
"def set signed cookie ( self , key , value , salt = , ** kwargs ) :","define the method set_signed_cookie with 5 arguments : self , key , value , salt as an empty string and unpacked dictionary kwarg ."
def boolean check ( v ) :,define the function boolean_check with an argument v .
"self . stdout . write ( "" STR_ "" )",write string `` No conflicts detected to merge . '' to self.stdout stream .
"yield ( "" "" , self . field . empty label )",yield a tuple with 2 elements : an empty string and self.field.empty_label .
"self . stdout . write ( "" STR_ "" )","self.style.MIGRATE_HEADING , write the result to self.stdout . write string `` You should commit this migration but leave the old ones in place ; '' to self.stdout ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid ' key of the self.error_messages dictionary and code set to 'invalid ' .
importer =   import  ,substitute __import__ for importer .
parsed = False,parsed is boolean False .
try :,"try ,"
"return "" STR_ "" % ( obj , id , self . msg , hint )","replace all ' % s ' from string `` % s : % s % s % s '' with values of obj , id , self.msg and hint , respectively , return the result ."
"dir name , file name = os . path . split ( name )","call the os.path.split with argument name , assign the result to the dir_name and file_name respectively ."
elif len ( options . args ) < NUM_ :,"otherwise , length of options.args is lesser than integer 1 ,"
self . clear cdata mode ( ),call the method self.clear_cdata_mode .
"def new file ( self , * args , ** kwargs ) :","define the method new_file with arguments : self , unpacked list args and unpacked dictionary kwargs ."
max num = NUM_,max_num is integer 1 .
def  decorator ( view func ) :,substitute the middleware . define the function _decorator with an argument view_func .
return chunk [ : - rollback ],return last rollback elements of chunk .
self . pubid = pubid,substitute pubid for self.pubid .
if filepath . startswith ( root ) :,"if filepath starts with root ,"
if old attr is None :,"if old_attr is None ,"
if bmatch . group ( NUM_ ) :,"call the method bmatch.group with an argument integer 1 , if it evaluates to true ,"
except StandardError as e :,"substitute the result for filters dictionary value under name key . if StandardError , renamed to e , exception is caught ,"
else :,"if not ,"
res =,res is an empty string .
"in dent = self . options . get ( "" STR_ "" )","get the value under the 'indent ' key of the self.options dictionary , substitute it for indent ."
self . base = base,substitute base for self.base .
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a delete ( ) method ' .
pass,do nothing .
"self . setlist ( k , v )",call the method self.setlist with 2 arguments : k and v .
from django . core . exceptions import DisallowedRedirect,from django.core.exceptions import DisallowedRedirect into default name space .
field params [ STR_ ] = row [ NUM_ ],substitute sixth element of row for value under the 'decimal_places ' key of the field_params .
elif not self . required and not value :,"and code set to string 'required . otherwise if self.required is false and value is false ,"
del  active . value,delete _active.value .
if csrf token is not None :,"if csrf_token is not None ,"
return yes,return yes .
return self .   cast ( ) ! = other,"call the method self.__cast , if the result doesnt equal to other , return boolean True , otherwise return boolean False ."
import types,import module types .
now = now . replace ( tzinfo = None ),"call the method now.replace with argument tzinfo set to None , substitute it for now ."
if not support legacy :,"if support_legacy is false ,"
from datetime import datetime,from datetime import datetime into default name space .
"if hasattr ( middleware , STR_ ) :","if middleware has an attribute 'process_view ' ,"
else :,"if not ,"
substitutions [ STR_ ] = conditional escape ( checkbox id ),"substitute the result for value under the 'clear_checkbox_name ' key of the substitutions dictionary . call the function conditional_escape with an argument checkbox_id ,"
return data,return data .
@ streaming content . setter,"streaming_content.setter decorator ,"
elif ch == STR_ :,"otherwise if ch equals a string ' $ ' ,"
year = year + off,"sum year and off , substitute the result for year ."
"self . xml = SimplerXMLGenerator ( self . stream , self . options . get ( "" STR_ "" , settings . DEFAULT CHARSET ) )",self.xml is a instance of SimplerXMLGenerator class created with 2 arguments : self.stream and value under the 'encoding ' key of the
"return force text ( quote ( force str ( url ) , force str ( safe ) ) )","call the function quote with 2 arguments : result of the function force_str called with an argument url ,"
return self . tokens . pop ( NUM_ ),"remove first element from self.tokens , return removed element ."
for module in get format modules ( lang ) :,"call the function get_format_modules with an argument lang , for every module in the result ,"
except UnicodeEncodeError :,"if UnicodeEncodeError exception is caught ,"
"def   init   ( self , * args , ** kwargs ) :","define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
"return render value in context ( value , context )","call the function render_value_in_context with 2 arguments : value and context , return the result ."
if localized fields is not None :,"if localized_fields is not None ,"
used column names = [ ],used_column_names is an empty list .
termios = None,termios is None .
else :,"if not ,"
"elif not is in stance ( file name , six . string types ) and is  iterable ( file name ) :","otherwise if file_name is not an instance of six.string_types and call to the function is_iterable with an argument file_name ,"
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] , { "" STR_ "" : "" STR_ "" } )","call the method handler.addQuickElement with 3 arguments : string 'summary ' , value under the 'description ' key of item dictionary ,"
self . in stance = self . fk . rel . to ( ),"call the method self.fk.rel.to , substitute the result for self.instance ."
class HttpResponseNotModified ( HttpResponse ) :,derive the class HttpResponseNotModified from the HttpResponse base class .
httpd . serve forever ( ),call the method httpd.serve_forever .
"has new option = hasattr ( self , STR_ )","if self has an 'requires_system_checks ' attribute , has_new_option is boolean True , otherwise it is boolean False ."
or iginal lookup = lookup view,"substitute lookup_view for original_lookup ,"
for entry in package path :,"for every entry in package_path ,"
if escaped :,"if escaped is true ,"
if finder . find module ( name ) :,"if call to the method finder.find_module with an argument name evaluates to true ,"
def exit command ( self ) :,define the method exit_command with an argument self .
def  to tuple ( s ) :,define function _to_tuple with s as an argument .
break,"break from the loop execution ,"
class SkipFile ( UploadFileException ) :,derive the class SkipFile from the UploadFileException base class .
"return data . get ( name , None )","get the value under the name key of the data dictionary , if it exists return it , if not return None ."
"self . stdout . write ( "" STR_ "" % ( "" STR_ "" . join ( app labels ) ) )","substitute ' % s ' in string `` No changes detected in apps ' % s ' '' with the app_labels joined into a string , separated by string `` ' , ' '' ,"
"w = self . choice input class ( self . name , self . value , self . attrs . copy ( ) , choice , i )","call the method self.choice_input_class with 5 arguments : self.name , self.value , return value of the method self.attrs.copy ,"
for meta line in self . get meta ( table name ) :,for meta_line in return value of the method self.get_meta called with an argument table_name .
if url . endswith ( / ) :,"if url ends with '/ ' character ,"
"return - . join ( [ template name , hashlib . sha1 ( force bytes ( | . join ( template dirs ) ) ) . hexdigest ( ) ] )","join template_dirs elements into a string , separated by '| ' , use it as an argument for the call to the function force_bytes ,"
def reload ( self ) :,define the method with reload with an argument self .
"pks = set ( force text ( getattr ( o , key ) ) for o in qs )","substitute the result for qs . pks is a set containing results of the call to the function force_text with an argument , key attribute of the o object ,"
if timeout > NUM_ :,"if timeout is greater than integer 2592000 ,"
continue,skip this loop iteration .
url = unquote ( force str ( url ) ),"call the function force_str with an argument url , use the result as an argument for the call to the function unquote , substitute the result for url ."
def   iter   ( self ) :,define the method __iter__ with argument self .
@ register . tag,"an instance of VerbatimNode class , return it . register.tag decorator ,"
class ExtendsError ( Exception ) :,derive the class ExtendsError from the Exception base class .
"if is in stance ( pk , OneToOneField ) or is in stance ( pk , ForeignKey ) :","if pk is an instance of OneToOneField or ForeignKey classes ,"
key salt = force bytes ( key salt ),"call the function force_bytes with an argument key_salt , substitute the result for key_salt ."
key = hashlib . sha1 ( key salt + secret ) . digest ( ),"call the method hashlib.sha1 with an argument secret appended to key_salt , call the method digest on the result , return the result ."
"migration . merged operations . extend ( loader . get migration ( node app , node name ) . operations )","call the method loader.get_migration with arguments node_app and node_name , extend the migration.merged_operations with the operations field of the result ."
else :,"if not ,"
if not kwarg format :,"otherwise it is boolean False . if kwarg_format is false ,"
try :,"try ,"
"super ( CharField , self ) .   init   ( * args , ** kwargs )","call the method __init__ from the base class of the class CharField , with arguments unpacked list args and unpacked dictionary kwargs ."
"sortable virtual fields = [ f for f in opts . virtual fields if is in stance ( f , ModelField ) ]","if f is an instance of ModelFiled , for every f in opts.virtual_fields , append f to a list , substitute the resulting list for sortable_virtual_fields ."
"callback = getattr ( self . urlconf module , STR_ % view type , None )","replace ' % s ' in the string 'handler % s ' with view_type , use it as an name of the attribute to get from the self.urlconf_module ,"
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ )","call the method parser.add_argument with 5 arguments : string ' -- noinput ' , action set to string 'store_false ' ,"
for form in self . in itial forms :,"for every form in self.initial_forms ,"
self .  done = False,self._done is boolean False .
"MIMEMultipart .   setitem   ( self , name , val )","call the method MIMEMultipart.__setitem__ with arguments self , name and val ."
host = self . META [ STR_ ],"substitute the value under the 'SERVER_NAME ' key of the self.META dictionary , substitute it for host ."
help text =,label is an empty string .
"new name , num repl = re . subn ( r STR_ , STR_ , new name )","cal the method re.subn with 3 arguments : raw string '\W ' , string ' _ ' and new_name ."
"def ext convert ( self , value ) :",define the method ext_convert with 2 arguments : self and value .
return self . empty value,return self.empty_value .
try :,"try ,"
"return [ source [ NUM_ ] ] , [ params ]",return a list containing first element of source and a list containing params .
"exctype , value = exc info [ : NUM_ ]","substitute fist and second element of exc_info for exctype and value , respectively ."
"def load template ( self , template name , template dirs = None ) :","define the method load_template with 3 arguments : self , template_name , template_dirs set to None ."
field desc += STR_ + . join ( comment notes ),"join elements of comment_notes into a string , separated by whitespaces , append it to the string ' # ' , append the result to field_desc ."
"naiveip re = re . compile ( r "" "" "" STR_ "" "" "" , re . X )","call the method re.compile with 2 arguments : raw string `` '' '' ^ ( ? : ( ? P < addr > ( ? P < ipv4 > \d { 1,3 } ( ? : \.\d { 1,3 } ) { 3 } ) | '' '' ''"
self . buf size = buf size,substitute buf_size for self.buf_size .
@ register . tag,"register.tag decorator ,"
"def error ( self , token , msg ) :","define the method error with 3 arguments : self , token and msg ."
"string types = basestring ,",substitute basestring for string_types .
mime type = STR_,mime_type is a string 'application/rss+xml ; charset=utf-8 ' .
return,return an empty string .
if keys :,"if keys is true ,"
if extra attrs :,"if extra_attrs is true ,"
"self . stdout . write ( "" STR_ "" % tablename )","replace ' % s ' in string `` Cache table ' % s ' created . '' with tablename , write it to self.stdout ."
return None,return None .
"def modified time ( self , name ) :",define the method modified_time with arguments self and name .
return datetime . datetime ( ** kw ),"call the method datetime.datetime with an argument unpacked dictionary kw , return the result ."
root = logging . getLogger ( ),"call the method logging.getLogger , substitute the result for root ."
self . verbosity = options . get ( STR_ ),"get the value under the 'verbosity ' key of the options dictionary , substitute it for self.verbosity ."
"help = ( "" STR_ "" "" STR_ "" "" STR_ "" )",help is a tuple containing a string `` Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory . `` .
key prefix = settings . CACHE MIDDLEWARE KEY PREFIX,substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix .
if find command ( self . program ) is None :,"if evaluation of the function find_command with self.program as argument equals to None ,"
from django . core . servers . basehttp import get internal wsgi application,from django.core.servers.basehttp import get_internal_wsgi_application into default name space .
"attrs . append ( ( attrname . lower ( ) , attrvalue ) )","form the tuple from the attrname converted to lowercase and attrvalue , append it to the end of attrs ."
if path not in self .  js :,"if path is not contained in self._js ,"
@ property,"property decorator ,"
def tokenize ( self ) :,define the method tokenize with an argument self .
flup module += STR_,"for 'maxSpare ' , value under the key 'minspare ' of options dictionary converted to an integer for 'minSpare ' , value under the key 'maxchildren ' of options dictionary converted to an integer , for 'maxChildren ' , and value under the key 'maxrequests ' of options dictionary converted to an integer , for 'maxRequests ' . append string '_fork ' to flup_module ."
LANGUAGE SESSION KEY = STR_,"'get_language_from_request ' , 'get_language_info ' , 'get_language_bidi ' , 'check_for_language ' , 'to_locale ' , 'templatize ' , 'string_concat ' , 'gettext ' , 'gettext_lazy ' , 'gettext_noop ' , 'ugettext ' , 'ugettext_lazy ' , 'ugettext_noop ' , 'ngettext ' , 'ngettext_lazy ' , 'ungettext ' , 'ungettext_lazy ' , 'pgettext ' , 'pgettext_lazy ' , 'npgettext ' , 'npgettext_lazy ' and 'LANGUAGE_SESSION_KEY ' . LANGUAGE_SESSION_KEY is an string '_language ' ."
iteritems =  iteritems,substitute _iteritems for iteritems .
"related = getattr ( obj , field . name )","get field.name attribute of the obj , substitute it for related ."
try :,"try ,"
import io,import io .
status code = NUM_,status_code is an integer 403 .
return self . forms [ self . in itial form count ( ) : ],"call the self.initial_form_count method , return the sublist of self.forms , using previous result as start index to the end ."
"def add post render callback ( self , callback ) :",define the method add_post_render_callback with 2 arguments : self and callback .
"def localize ( value , use l10n = None ) :","string 'DECIMAL_SEPARATOR ' , lang and use_l10n set to use_l10n , decimal_pos , result of the function get_format called with 3 arguments : string 'NUMBER_GROUPING ' , lang and use_l10n as use_l10n , result of the function get_format called with an argument : string 'THOUSAND_SEPARATOR ' , lang and use_l10n as use_l10n and force_grouping as force_grouping , return the result . define the function localize with 2 arguments value and use_l10n set to None ."
"def convert ( self , number , from digits , to digits , sign ) :","define convert method with self class instance , number , from_digits , to_digits and sign as arguments ."
"host validation re = re . compile ( r "" STR_ "" )","compile the regex `` ^ ( [ a-z0-9.- ] +|\ [ [ a-f0-9 ] * : [ a-f0-9 : ] +\ ] ) ( : \d+ ) ? $ '' , substitute it for host_validation_re ."
else :,"convert the result to a lowercase string , substitute it for step . if not ,"
def   str   ( self ) :,define private method __str__ with argument self .
self . cc = list ( cc ),"put cc into a list , assign it to self.cc ."
raise e,raise an exception e .
return result,return result .
compile func = self . tags [ command ],substitute the value under the command key of self.tags dictionary for compile_func .
else :,"if not ,"
else :,"if not ,"
ext = base [ - NUM_ : ] + ext,"take last four elements of base and append ext to it , substitute result for ext ."
import warnings,import module warnings .
"default error messages = { STR_ :   ( STR_ ) , STR_ : ungettext lazy ( STR_ , STR_ , STR_ ) , STR_ : ungettext lazy ( STR_ , STR_ , STR_ ) , STR_ : ungettext lazy ( STR_ , STR_ , STR_ ) , }","default_error_messages is a dictionary with 4 initial entries : return value of the function _ called with string as an argument ,"
get method function = operator . attrgetter (  meth func ),"call the method operator.attrgetter with an argument _meth_func , substitute the result for get_method_function ."
"request = sys . modules [   name   + "" STR_ "" ]","append string `` .moves.urllib_request '' to __name__ , use it as an key to get the value from the sys.modules dictionary , substitute it for request ."
content subtype = STR_,content_subtype is a string 'plain ' .
from django . core . management . sql import sql flush,from django.core.management.sql import sql_flush into default name space .
"for opt in [ STR_ , STR_ , STR_ ] :","assign the result to opts and new_class._meta . for every opt in list containing 3 elements : strings 'fields ' , 'exclude ' and 'localized_fields ' ,"
for node in self :,"for every node in self ,"
"def handle ( self , * fixture labels , ** options ) :","dest as a string 'ignore ' , default set to boolean False and help set to string 'Ignores entries in the serialized data for fields that do not currently exist on the model. ' . define the method handle with 3 arguments : self , unpacked list fixture_labels and unpacked dictionary options ."
if len ( bits ) < NUM_ :,"if length bits is smaller than intger 4 ,"
"LocaleRegexProvider .   init   ( self , regex )",call the method LocaleRegexProvider.__init__ with arguments self and regex .
"def get ( self , key , default = None , version = None ) :","define the method get with 4 arguments , self class instance , key , default set to None and version set to None ."
def clean ( self ) :,define the method clean with an argument self .
field = Model .  meta . get field ( field name ),"settings.DEFAULT_CHARSET if the key doesnt exists and strings_only set to boolean True . call the Model._meta.get_field method with an argument field_name , substitute the result for field ."
if propagate is not None :,"if propagate is not None ,"
pass,do nothing .
"def   init   ( self , path , match = None , recursive = False , allow files = True , allow folders = False , required = True , widget = None , label = None , in itial = None , help text = , * args , ** kwargs ) :","define the method __init__ with 13 arguments : self , path , match set to None , recursive set to boolean False ,"
"@ wraps ( view func , assigned = available attrs ( view func ) )","decorator function wraps with 2 arguments : view_func and assigned set to result of the function available_attrs ,"
"setattr ( self .  wrapped , name , value )",set name attribute of self._wrapped object to value .
return mail . send ( ),return the evaluated result of the mail.send method .
 format modules cache = { },_format_modules_cache is an empty dictionary .
if os . fork ( ) > NUM_ :,"fork a child process , if the result equals integer 0 ,"
" iterlists = "" STR_ """,_iterlists is a string `` iterlists '' .
if len ( unique check ) == NUM_ :,"if length of unique_check equals integer 1 ,"
raise CommandError ( STR_ % in valid tag ),"use tag as an argument to call the iterator method next , substitute the result for invalid_tag . raise an CommandError exception with an argument string 'There is no system check with the `` % s '' tag . ' , where ' % s ' is replaced with invalid_tag ."
truncate = property ( lambda self : self . file . truncate ),"define lambda function that returns self.file.truncate field , use it as an argument for property function , put the result in truncate ."
"UnlockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , LPOVERLAPPED ]","UnlockFileEx.argtypes is a list containing 5 elements : HANDLE , DWORD , DWORD , DWORD and LPOVERLAPPED ."
def wordcount ( value ) :,define the function wordcount with an argument value .
"from decimal import Decimal , DecimalException",from decimal import Decimal and DecimalException into default name space .
from django . test . utils import get runner,from django.test.utils import get_runner into default namespace .
kwargs = kwargs or { },"if args in None of boolean False , substitute it for an empty dictionary ."
if decompress :,"if decompress is true ,"
"def in ner ( self , * args ) :",define the method inner with 2 arguments : self and unpacked list args .
return ZERO,return ZERO .
"def cut ( value , arg ) :",define the function cut with 2 arguments value and arg .
"def add arguments ( self , parser ) :",define the method add_arguments with self and parser as arguments .
try :,"try ,"
args =,args is an empty string .
stream = self .  stream,substitute self._stream for stream .
"from django . http . response import ( HttpResponse , StreamingHttpResponse , HttpResponseRedirect , HttpResponsePermanentRedirect , HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden , HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone , HttpResponseServerError , Http404 , BadHeaderError , JsonResponse )","from django.http.response import HttpResponse , StreamingHttpResponse , HttpResponseRedirect , HttpResponsePermanentRedirect ,"
"def urlquote plus ( url , safe = ) :",define the function urlquote_plus with 2 arguments : url and safe set to an empty string .
self . file = BytesIO ( ),"call the function BytesIO , substitute the result for self.file ."
"def   init   ( self , * args , ** kwargs ) :","define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments ."
if settings . DEBUG :,"extra is an dictionary with two pairs of elements 'status_code ' with value 500 , and 'request with value request , respectively use the previous as the arguments for the call to the logger.error function . if settings.DEBUG is True ,"
self .  num pages = in t ( ceil ( hits / float ( self . per page ) ) ),"divide hits by a floating point number self.per_page , convert its ceiling value to an integer and substitute it for self._num_pages ."
return None,return None .
self . can read . release ( ),call the method self.can_read.release .
msgs = fp . read ( ),"with the result renamed to fp , perform the following : read file fp and substitute the result for msgs ."
def  get width ( self ) :,define method _get_width with self class instance as the argument .
clean data = [ ],clean_data is an empty list .
import bpython,import bpython .
return self . as widget ( ) + self . as hidden ( only initial = True ),"call the method self.as_hidden with an argument only_initial set to boolean True ,"
return,return nothing .
if STR_ in cc and STR_ in kwargs :,"if it is smaller than the value of dictionary kwargs under the key 'max_age ' , substitute kwargs value under the key 'max-age ' by it . if cc contains item 'private ' and kwargs contains item 'public ' ,"
"register serializer ( format , BUILTIN SERIALIZERS [ format ] , serializers )","call the function register_serializer with 3 arguments : format , value under the format key of the BUILTIN_SERIALIZERS dictionary and serializers ."
attrs [ STR_ ] = exclude,substitute exclude for value under the 'exclude ' key of attrs dictionary .
def  cull ( self ) :,define the method _cull with argument self .
except KeyError :,"and ' 3 ' for ' 3 ' , substitute it for value . if KeyError exception is caught ,"
return not ( ( converter ( opts . db table ) in tables ) or ( opts . auto created and converter ( opts . auto created .  meta . db table ) in tables ) ),"evaluate next boolean expression , value of converter function with opts.db_table as argument is contained in tables ,"
if not self .  is rendered :,"if self._is_rendered is false ,"
"file move safe ( tmp path , fname , allow overwrite = True )","call the function file_move_safe with tmp_path , fname , allow_overwrite set to boolean True as arguments ."
return { },return an empty dictionary .
if STR_ not in template :,"if character ' : ' is not contained in template ,"
return Truncator ( value ) . chars ( length ),"instantiate class Truncator , with an argument value , call the method chars on the result with an argument length , return the result ."
"def render ( self , name = None , value = None , attrs = None , choices = ( ) ) :","define the method render with 5 arguments : self , name set to None , value set to None , attrs set to None and choices set to an empty tuple ."
field params [ STR_ ] = row [ NUM_ ],substitute fifth element of row for value under the 'max_digits ' key of the field_params .
"import module ( STR_ , app config . name )",import module '.management ' from the package app_config.name .
def n ( self ) :,define the method n with an argument self .
if safe input :,"if safe_input is true ,"
return list ( self . iteritems ( ) ),"call the method self.iteritems , return the list of results ."
def urlconf module ( self ) :,define the method urlconf_module with an argument self .
"if self . field . required and hasattr ( self . form , STR_ ) :","and convert it again to the dictionary , if attrs is false , leave it alone , substitute the result for attrs . if self.field.required is true and self.form has an attribute 'required_css_class ' ,"
or ig vars . pop ( slots var ),remove slots_var key from the orig_vars dictionary .
result . parent = self,substitute self for result.parent .
"def wrapped ( * args , ** kwargs ) :",define the function wrapped with 2 arguments : unpacked list args and unpacked dictionary kwargs .
"raise NotImplementedError ( "" STR_ "" "" STR_ "" )",raise an NotImplementedError with an argument string `` Subclasses of AppCommand must provide a handle_app_config ( ) method . `` .
attrs [ STR_ ] = labels,substitute labels for value under the 'labels ' key of attrs dictionary .
"constant re = re . compile ( r "" "" "" STR_ "" . * ? "" STR_ "" "" "" )","call the function re.compile with an argument raw string `` _\ ( ( ( ? : '' .* ? '' ) | ( ? : '.* ? ' ) ) \ ) '' , substitute the result for constant_re ."
"root = config . get ( STR_ , None )","get config dictionary element under 'root ' key , if it exists substitute it for root , if not , root is None ."
"elif is in stance ( value , datetime . time ) :","otherwise if value is an instance of datetime.time ,"
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )","raise an ValidationError with 2 arguments : self.error_messages dictionary value under the 'invalid_choice ' key ,"
"form . fields [ DELETION FIELD NAME ] = BooleanField ( label =   ( STR_ ) , required = False )","value under the DELETION_FIELD_NAME key of the form.fields is an instance of BooleanField class , created with 2 arguments :"
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
"def as tuple ( self , value ) :",define the method as_tuple with 2 arguments : self and value .
try :,"try ,"
"from django . template . loader import get template , select template","from django.template.loader import get_template , select_template ."
"raise CommandError ( "" STR_ "" "" STR_ "" )",raise an CommandError exception with an argument string `` currently makemessages only supports domains 'django ' and 'djangojs ' '' .
if settings . configured :,"if settings.configured ,"
addr = parseaddr ( force text ( addr ) ),"call the parseaddr function with return value of the force_text with argument addr , as argument , substitute the result for addr ."
result = SimpleLazyObject ( self .  setupfunc ),"result is an instance of SimpleLazyObject class , created with an argument self._setupfunc ."
if self . is  url ( template ) :,"call the method self.is_url with an argument template , if it evaluates to true ,"
return len ( self . content ),return the length of self.content .
"if hasattr ( signal , STR_ ) :","if signal has an attribute 'SIGTTOU ' ,"
if not plan :,"if plan is not true ,"
repr attr = self .  wrapped,substitute self._wrapped for repr_attr .
def  archive cls ( file ) :,define the method _archive_cls with an argument file .
return self . g ( ),"call the method self.g , return the result ."
return form,return form .
return  trans . activate ( language ),"call the function _trans.activate with an argument language , return the result ."
"from . import Error , Tags , register","from . import Error , Tags and register into default name space ."
else :,"if not ,"
"def   init   ( self , template string , or igin ) :","define the method __init__ with 3 arguments : self , template_string and origin ."
"handler . addQuickElement ( "" STR_ "" , item [ "" STR_ "" ] , { "" STR_ "" : "" STR_ "" } )","call the method handler.addQuickElement with 3 arguments : string 'dc : creator ' ,"
self . xml . characters ( smart text ( key value ) ),"call the function smart_text with argument key_value , use the result as an argument for the call to the self.xml.characters method ."
"def widget attrs ( self , widget ) :",define the method widget_attrs with arguments self and widget .
output . append ( STR_ ),append 2 consecutive newlines to output .
self . cookies [ key ] [ STR_ ] = max age,"get the value under the key key of the self.cookies dictionary , substitute max-age for 'max-age ' key of the returned dictionary ."
if not lookup :,"if lookup is false ,"
@ property,"property decorator ,"
response = response . render ( ),"with name of the class type of the middleware_method instance , use it as the argument for call to the ValueError exception raise . call the response.render ( ) method and assign the return to the response ."
if self . save as new :,"if self.save_as_new is true ,"
if status ! = STATUS OK :,if statue is not equal to STATUS_OK .
for dict  in self . dicts :,"for every dict_ in self.dicts ,"
forms = . join ( form . as table ( ) for form in self ),"for every form in self call the form.as_table method , join the results in a string , separated by an empty string ."
class EntitiesForbidden ( DefusedXmlException ) :,derive the class EntitiesForbidden from the DefusedXmlException base class .
"super ( Command , self ) . execute ( * args , ** options )","call the method execute form the base class of the class Command , with 2 arguments : unpacked list args and unpacked dictionary options ."
self . location = abspathu ( self . base location ),substitute the return value of the function abspathu with self.base_location as argument for self.location .
if compare to ! = state frame [ self ] :,if compare_to is not equal to value under the self key of state_frame .
if colors and colors [ - NUM_ ] in color names :,"if colors is true and last element of colors is contained in color_names ,"
self . style = no style ( ),"call the function no_style , substitute the result for self.style ."
for loc in locales :,"for every loc in locales ,"
self . content type extra = content type extra,substitute content_type_extra for self.content_type_extra .
return value,return value .
for type  in reversed ( resultclass . mro ( ) ) :,"call the method resultclass.mro , reverse the order of elements , for every type_ in the result ."
"location = urljoin ( current uri , location )","and path with self.path , substitute the result for current_uri . call the function urljoin with arguments current_uri and location , substitute the result for location ."
 file . close ( ),close the _file file .
"return datetime . datetime . strptime ( force str ( value ) , format )","call the method datetime.datetime.strptime with 2 arguments : result of the function force_str called with an argument value ,"
state = self .   dict   . copy ( ),"call the method self.__dict__.copy , substitute the result for state ."
d =,d is an empty string .
if row is None :,"if row is None ,"
"super ( MultiValueDict , self ) .   setitem   ( key , [ value ] )","call the method __setitem__ from the base class of the class MultiValueDict , with 2 arguments key and list containing element value ."
self .  current [ field . name ] = value,substitute value for field.name key of self._current dictionary .
"def add arguments ( self , parser ) :",define method add_arguments with class instance self and parser as the input arguments .
"normalize newlines = allow lazy ( normalize newlines , six . text type )","call the function allow_lazy with 2 arguments : normalize_newlines and six.text_type , substitute the result for normalize_newlines ."
class ImproperlyConfigured ( Exception ) :,derive the class ImproperlyConfigured from the Exception base class .
self . seek ( NUM_ ),position the file pointer at the beginning of self file .
"autoreload . main ( self . in ner run , None , options )","call the method autoreload.main with 3 arguments : self.inner_run , None and options ."
from django . core . servers . fastcgi import FASTCGI HELP,from django.core.servers.fastcgi import FASTCGI_HELP into default namespace .
if row [ NUM_ ] :,"if seventh element of row is true ,"
return data . getlist ( name ),"call the method data.getlist with an argument name , return the result ."
"super ( QueryDict , self ) .   delitem   ( key )","call the method __delitem__ from the base class of the QueryDict class , with an argument key ."
add to builtins ( STR_ ),call the function add_to_builtins with an argument string 'django.template.defaulttags ' .
"replaces . append ( ( migration . app label , migration . name ) )",append tuple with 2 elements : migration.app_label and migration.name to replaces .
raise ImproperlyConfigured ( msg . format ( name = self . urlconf name ) ),"If you see valid patterns in the file then the issue is probably caused by a circular import . '' raise an ImproperlyConfigured exception with an argument : return value of the method msg.format , called with an argument name set to self.urlconf_name ."
widget = widget ( ),"call the function widget , substitute the result for widget ."
"if "" STR_ "" in self .   starttag text :","if self.__stattag_text contains newline character ,"
os . rmdir ( or iginal path ),remove original_path directory .
if i < NUM_ ** factor :,"bring integer 36 to the power of factor , if i is smaller than the result ,"
result = [ ],result is an empty list .
root = logging . root,substitute logging.root for root .
"disable existing = config . pop ( STR_ , True )","remove config dictionary element under 'disable_existing_loggers ' key , if it exists substitute it for disable_existing , if not ,"
"f . save form data ( in stance , cleaned data [ f . name ] )",call the method f.save_form_data with 2 arguments : instance and value under the f.name key of cleaned_data dictionary .
errors = [ ],errors is an empty list
"syear = "" STR_ "" % ( dt . year , )",syear is a string `` % 04d '' formated with dt.year .
self . test runner = arg [ len ( option ) : ],"get the length of the options , use it as a starting index for the slicing arg list , substitute it for self.test_runner ."
else :,"if not ,"
"def get ( self , key , default = None ) :","define the method get with 3 arguments : self , key and default set to None ."
"server address = ( addr , port )",server_address is a tuple containing 2 initial elements : addr and port .
def upath ( path ) :,define the function upath with an argument path .
self . use tz = use tz,substitute use_tz for self.use_tz .
output transaction = True,output_transaction is boolean True .
if self . verbosity > NUM_ :,"if self.verbosity is integer 1 ,"
db = router . db for read ( self . cache model class ),"call the method router.db_for_read with self.cache_model_class as argument , substitute the result for db ."
class DjangoRuntimeWarning ( RuntimeWarning ) :,derive the class DjangoRuntimeWarning from the RuntimeWarning base class .
items =  iteritems,substitute _iteritems for items .
"from django . utils . html import ( conditional escape , escapejs , escape , urlize as  urlize , linebreaks , strip tags , avoid wrapping , remove tags )","from django.utils.html import conditional_escape , escapejs , escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping ,"
def   repr   ( self ) :,define the method __repr__ with an argument self .
"self . common logger config ( logger , config , in cremental )","call the method self.common_logger_config with 3 arguments : logger , config and incremental ."
warnings . warn ( STR_ STR_ ),"call the function warnings.warn with an argument ,"
help = STR_,help is string 'Compiles .po files to .mo files for use with builtin gettext support . ' .
"return get connection ( backend = self . email backend , fail silently = True )",call the function get_connection with 2 arguments : backend set to self.email_backend and fail_silently set to boolean True .
return STR_ . join ( statements ),"join statements into a string , separated by newlines , return it ."
else :,"if not ,"
import sys,import module sys .
"def   init   ( self , attrs = None , choices = ( ) ) :","define the method __init__ with 3 arguments : self , attrs set to None and choices set to an empty tuple ."
def decorator ( klass ) :,define the function decorator with an argument klass .
endtag re = re . compile ( STR_ % tags re ),"substitute the result for starttag_re . call the function re.compile with an argument string ' < / % s > ' formated with tags_re , substitute the result for endtag_re ."
r = o . is oformat ( ),call the method o.isoformat substitute the result for r .
def closed ( self ) :,define the method closed with self as the argument .
"if NUM_ <= response . status code < NUM_  or response . status code in ( NUM_ , NUM_ ) :","if response.status_code is lesser than integer 200 and grater or equal than 100 , or response.status_code equals to integer 204 or 304 ,"
return flat,return flat .
else :,"if not ,"
if t in self .   dispatch :,"if t is contained in self.__dispatch ,"
activate ( self . timezone ),call the method activate with an argument self.timezone .
st = os . stat ( filename ),"call the function os.stat with an argument filename , substitute the result for st ."
def parse ( self ) :,define the method parse with an argument self .
from unittest2 import *,from unittest2 import everything .
else :,"if not ,"
bits = token . split contents ( ),"call the method token.split_contents , substitute the result for bits ."
def deconstruct ( obj ) :,define the function deconstruct with an argument obj .
"obj dict = super ( SimpleTemplateResponse , self ) .   getstate   ( )","call the __getstate__ method from the base class of the class SimpleTemplateResponse , substitute the result for obj_dict ."
"p1 , p2 = urlparse ( url1 ) , urlparse ( url2 )",substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2 .
"t = re . sub ( "" STR_ "" , lambda m : m . group ( NUM_ ) . lower ( ) , value . title ( ) )","call the function re.sub with 3 arguments : string `` ( [ a-z ] ) ' ( [ A-Z ] ) '' , lambda function with an argument m and return value ,"
"def load template ( self , template name , template dirs = None ) :","define the method load_template with 3 arguments : self , template_name and template_dirs set to None ."
"data = json . dumps ( data , cls = encoder )","serialize data to JSON format with cls set to encoder , substitute it for data ."
def conditional escape ( text ) :,define the function conditional_escape with an argument text .
"klass = load command class ( app name , subcommand )","call the function load_command_class with arguments app_name and subcommand , substitute the result for klass ."
else :,"if not ,"
if self . domain regex . match ( domain part ) :,"call the self.domain_regex.match method with an argument domain_part , if it evaluates to true ,"
except ImportError :,"if ImportError exception is caught ,"
"e . args = ( "" STR_ "" % ( fixture file , e ) , )","e.args is a tuple containing string `` Problem installing fixture ' % s ' : % s '' , where ' % s ' is replaced with fixture_file , e ."
if saved locale is not None :,"if saved_locale is not None ,"
reason phrase = None,reason_phrase is None .
import readline,import readline .
"def parse name ( self , fixture name ) :",define the method parse_name with arguments self and fixture_name .
"def download ( self , url ) :","and ' % s ' is replaced with app_or_project and message , respectively . define the method download with arguments self and url ."
module = import module ( module path ),"and third element of result of the function sys.exc_info . call the function import_module with an argument module_path , substitute the result for module ."
if f . name in cleaned data :,"if f.name is contained in cleaned_data ,"
if filters :,"if filters is true ,"
pass,do nothing .
if charset == STR_ :,"if charset equals to string 'utf-8 ' ,"
return [ etag str ],return a list with an element etag_str .
"warnings . warn ( "" STR_ "" "" STR_ "" , RemovedInDjango19Warning , stacklevel = NUM_ )","call the function warnings.warn with 3 arguments : string `` cache_choices has been deprecated and will be removed in Django 1.9 . `` ,"
return self .  callback,return self._callback .
"response = self . get exception response ( request , resolver , NUM_ )","status code set to integer 400 , return the result . call the method self.get_exception_response with the request , resolver and integer 400 as the arguments , substitute the result for response ."
seconds = abs ( seconds ),substitute absolute seconds for seconds .
class BaseHandler ( object ) :,"derive class BaseHandler , derive from the base class object , making this a new style class ."
django dir = os . path . normpath ( os . path . join ( os . path . dirname ( django .   file   ) ) ),"call the function os.path.dirname with an argument django.__file__ , join the result into a path ,"
connections [ self . using ] . close ( ),"get the value under the self.using key of the connections dictionary , call the method close on it ."
if value is None :,"if value is None ,"
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % subject )","raise an TemplateSyntaxError exception with an argument `` Searching for value . Expected another value but found end of string : % s '' ,"
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = "" STR_ "" )","dest as a string 'ignore_patterns ' , default as an empty list , metavar as a string 'PATTERN ' , and help as a string 'Ignore files or directories matching this glob-style pattern . Use multiple times to ignore more. ' . call the method parser.add_argument with 5 arguments : string ' -- no-default-ignore ' , action as a string 'store_false ' ,"
token = get token ( request ),"call the function get_token with an argument request , substitute the result for token ."
" illegal formatting = re . compile ( r "" STR_ "" )","compile the regex from the raw string `` ( ( ^| [ ^ % ] ) ( % % ) * % [ sy ] ) '' , substitute the result for _illegal_formatting ."
return,return nothing .
"return tpl . format ( self . name , self . sysid , self . pubid )","call the method tpl.format with an arguments self.name , self.sysid and self.pubid ."
return pickle . loads ( zlib . decompress ( f . read ( ) ) ),"call f.read function , use the result as the argument for zlib.decompress function call , call the pickle.loads function with the previous result as argument , return the result ."
return mark safe (  helper ( value ) ),"call the function _helper with an argument value , use it as an argument for the call to the function mark_safe , return the result ."
"self . length , self . mime type = length , mime type",substitute length and mime_type for self.length and self.mime_type .
try :,"try ,"
if STR_ not in config :,"if string 'version ' is not contained in config ,"
serializers . get serializer ( format ),call the method serializers.get_serializer with an argument format .
try :,"try ,"
data = [ ],data is an empty list .
class EmailBackend ( BaseEmailBackend ) :,derive the class EmailBackend from the BaseEmailBackend base class .
response = http . HttpResponseBadRequest ( ),"with one entry 'status_code ' is integer 400 , as arguments . call the http.HttpResponseBadRequest function , assign the result to the response ."
"parser . add argument ( STR_ , STR_ , action = STR_ , dest = STR_ , default = False , help = "" STR_ "" "" STR_ "" )","dest is 'use_natural_primary_keys ' , default is boolean False and help is a string 'Use natural primary keys if they are available. ' . call the method parser.add_argument with 6 arguments : string '-a ' , string ' -- all ' , action set to 'store_true ' ,"
seen models . add ( model ),"assign the result to the sql and references , respectively . add model to seen_models set ."
in trans = False,intrans is boolean False .
"raise CommandError ( "" STR_ "" "" STR_ "" % self . program )","raise CommandError exception , with sring `` Ca n't find % s . Make sure you have GNU gettext tools 0.15 or newer installed . '' as argument , substitute ' % s ' with self.program ."
"delattr ( obj .   class   , self . name )",delete self.name attribute from the obj.__class__ object .
request started = Signal ( ),request_started is a instance of a Signal class .
"def  proxy method ( self , * args , ** kwargs ) :","define the method _proxy_method with 3 arguments self , unpacked list args and unpacked dictionary kwargs ."
return in put val,return input_val .
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` second argument to 'regroup ' tag must be 'by ' '' .
self . stdout . write ( errors ),write errors to self.stdout .
"def get parent ( self , context ) :",define the method get_parent with 2 arguments self and context .
return import string ( import path or settings . DEFAULT FILE STORAGE ),"call the import_string with argument : import_path if exists or settings.DEFAULT_FILE_STORAGE , if not , return the result ."
if use func :,"if use_func is true ,"
raise TypeError,"raise a TypeError exception ,"
"def value from datadict ( self , data , files , name ) :","define the method value_from_datadict with 4 arguments : self , data , files and name ."
opts = self .  meta,substitute self._meta for opts .
if not f . blank and not form field . required and field value in form field . empty values :,"if not field_value is None . if f.blank is false and form_field.required is false and field_value is contained in form_field.empty_values ,"
"cache key = STR_ % ( key prefix , url . hexdigest ( ) )","use the result as an argument for function call of force_bytes , use the result as an argument for calling the method hashlib.md5 , put the result in url . substitute the ' % s ' in string 'views.decorators.cache.cache_header. % s. % s ' with key_prefix and result of the function call ,"
not ifier . check events ( timeout = None ),call the method notifier.check_events with argument timeout set to None .
"resolved kwargs = dict ( ( k , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )","resolved_kwargs is dictionary with elements : return value of the method v.resolve called with an argument context , for k ,"
write ( arg ),call the function write with an argument arg .
"return t [ NUM_ ] . lower ( ) , t [ NUM_ ]","return tuple , consisting of first element of t converted to lowercase and second element of t ."
"elif item [ "" STR_ "" ] :","formated with values under the 'author_email ' and 'author_name ' keys of item dictionary . otherwise if value under the `` author_email '' key of the item dictionary is true ,"
"mode = STR_ if is in stance ( chunk , bytes ) else STR_","mode is a string 'wb ' is chunk is instance of the type bytes , otherwise mode is a string 'wt ' ."
definition = { },"definition is an empty dictionary ,"
callback = callback . func,substitute callback.func for callback .
try :,"try ,"
return mark safe ( force text ( value ) . translate (  js escapes ) ),"call the function force_text with an argument value , call the method translate on the result , with an argument _js_escapes ,"
"if bit . startswith ( STR_ ) or bit . startswith ( "" STR_ "" ) :","if bit starts with ' _ ( `` ' ot bit starts with `` _ ( ' '' ,"
trimmed = trim url ( middle ),"call the function trim_url with an argument middle , substitute the result for trimmed ."
for path in paths :,"for every path in paths ,"
if error . params :,"if error.params is true ,"
def   next   ( self ) :,define the method __next__ with an argument self .
if empty label is not None :,"if empty_label is not None ,"
self .  assert mutable ( ),call the method self._assert_mutable .
"non atomic requests = getattr ( view , STR_ , set ( ) )","get attribute '_non_atomic_requests ' from the view object , if the attribute doesnt exist return the empty set , substitute the result for non_atomic_requests ."
self . waiting readers = NUM_,self.waiting_readers is integer 0 .
opts = model .  meta,substitute model._meta for opts .
requires system checks = False,requires_system_checks is boolean False .
for model in app models :,"for every model in app_models ,"
def O ( self ) :,define the method O with an argument self .
"result = getattr (  default , translation function ) ( eol message )","get translation_function attribute of the object _default , call the result with an argument eol_message , substitute the result for result ."
return self .  non form errors,return self._non_form_errors .
"def delete many ( self , keys , version = None ) :","define the method delete_many with 3 arguments : self , keys , and version set to None ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"hour , minute = divmod ( timezone , NUM_ )","and integer 60 , substitute the result for timezone . divide timezone by integer 60 , substitute the quotient of the division for hour and reminder for minute ."
return nodelist,return nodelist .
if settings . USE TZ and value is not None and timezone . is  naive ( value ) :,"if settings.USE_TZ is true and value is not None and call to the function timezone.is_naive with an argument value , evaluates to true ,"
self . stdout . write ( STR_ + self . style . SQL KEYWORD ( connection . ops . end transaction sql ( ) ) ),"call the method connection.ops.end_transaction_sql , use the result as the argument for the call to the method self.style.SQL_KEYWORD ,"
pass,ModelFormMetaclass and BaseModelForm . do nothing .
return self . filter expr . resolve ( context ),"call the function self.filter_expr.resolve with an argument context , return the result ."
"def get many ( self , keys , version = None ) :","define the method get_many with 3 arguments : self , keys , and version set to None ."
try :,"try ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
for entry in os . listdir ( path ) :,"for every entry in os.listdir function return value called with the argument path ,"
def b64 decode ( s ) :,define the function b64_decode with an argument s .
@ cached property,"cached_property decorator ,"
self . autoescape = autoescape,use_l10n set to None and use_tz set to None . substitute autoescape for self.autoescape .
from django . core . management . sql import check for migrations,from django.core.management.sql import check_for_migrations into default name space .
@ property,property decorator .
from django . core . servers . fastcgi import runfastcgi,from django.core.servers.fastcgi import runfastcgi into default namespace .
"from subprocess import PIPE , Popen",from subprocess import PIPE and Popen into default name space .
"warnings . warn ( "" STR_ "" "" STR_ "" , RemovedInDjango20Warning )",call the function warnings.warn with 2 arguments : string `` OptionParser usage for Django management commands ``
"def clean ( self , data , in itial = None ) :","define the method clean with arguments self , data and initial set to None ."
break,break from the smallest enclosing loop .
use natural keys = options . get ( STR_ ),"get the value under the 'use_natural_keys ' key of the options dictionary , substitute the result for use_natural_keys ."
"from django . utils . timezone import is  aware , utc",from django.utils.timezone import is_aware and utc into default name space .
class IfChangedNode ( Node ) :,derive the class IfChangedNode from Node base class .
 super = super,substitute super for _super .
@ property,"property decorator ,"
elif ch == STR_ :,"otherwise if ch equals a string ' ) ' ,"
raise TemplateDoesNotExist,raise an TemplateDoesNotExist exception .
return self . environ . get ( STR_ ),return value under the 'wsgi.url_scheme ' key of self.environ dictionary .
"locks . lock ( fd , locks . LOCK EX )",call the function locks.lock with arguments fd and locks.LOCK_EX .
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % bits [ NUM_ ] )","raise an TemplateSyntaxError exception with an argument string `` Second ( optional ) argument to % s tag must be 'parsed ' '' ,"
"self . compression formats = { None : ( open , STR_ ) , STR_ : ( gzip . GzipFile , STR_ ) , STR_ : ( SingleZipReader , STR_ ) , }","self.compression_formats is an dictionary with 3 initial entries : tuple containing 2 elements : open and string 'rb ' for None ,"
"setattr ( base , old method name , wrapper ( new method ) )",set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method .
new path = path [ match . end ( ) : ],"slice the path list from the result of the match.end method as the start index to the end , substitute it for new_path ."
"return result [ NUM_ ] , result [ NUM_ ]",return first and second element of result .
new permissions = stat . S IMODE ( st . st mode ) | stat . S IWUSR,"call the method stat.S_IMODE with an argument st.st_mode , calculate binary OR with the result and stat.S_IWUSR , as operands ,"
return token,return token .
return result,return result .
"for i , item in enumerate ( values ) :","for every i and item in enumerated iterable values ,"
class RemovedInDjango19Warning ( DeprecationWarning ) :,derive the class RemovedInDjango19Warning from DeprecationWarning base class .
"return  trans . ngettext ( singular , plural , number )","call the method _trans.ngettext with 3 arguments singular , plural and number ."
class TarArchive ( BaseArchive ) :,derive the class TarArchive from the BaseArchive base class .
natural = value . natural key ( ),"call the value.natural_key method , substitute the result for natural ."
 cookie allows colon in names = False,_cookie_allows_colon_in_names is boolean False .
memoryview = memoryview,substitute memoryview for memoryview .
"converter = getattr ( self , converter )","get converter attribute from self object , substitute it for converter ."
def GET ( self ) :,define method GET with self class instance as an argument .
class metaclass ( meta ) :,derive the class metaclass form the meta base class .
"def ngettext ( singular , plural , number ) :","define the function ngettext with 3 arguments : singular , plural and number ."
def lists ( self ) :,define the method lists with an argument self .
"def handle ( self , ** options ) :","default set to boolean False and help set to a string 'Display all settings , regardless of their value . Default values are prefixed by `` # # # '' . ' define the method handle with arguments self and unpacked dictionary options ."
"parser . add argument ( STR_ , STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ )","call parser.add_argument method with ' -- ipv6 ' , string '-6 ' , action set to string 'store_true ' , dest set to string 'use_ipv6 ' ,"
return repr ( list ( self ) ),"convert elements of self into a list , return the its printable representation ."
del cache [ oldkey ],delete entry under the oldkey key of the cache dictionary .
self .  done = True,self._done is boolean True .
class SuspiciousFileOperation ( SuspiciousOperation ) :,derive the class SuspiciousFileOperation from the SuspiciousOperation base class .
def app dict ( self ) :,define the method app_dict with an argument self .
except ImportError as e :,"if ImportError , rename it to e , exception is caught ,"
regexes = self . regexes,substitute self.regexes for regexes .
os . umask ( umask ),call the method os.umask with an argument umask .
if formfield callback is None :,"if formfield_callback is None ,"
renamed = True,renamed is boolean True .
if latest date is None or item date > latest date :,"if latest_date is None or item_date is greater than latest_date ,"
import os,import module os .
return value . date ( ),"call the method value.date , return the result ."
"fields = [ ( field name , attrs . pop ( field name ) ) for field name , obj in list ( six . iteritems ( attrs ) ) if is in stance ( obj , Field ) ]","RemovedInDjango19Warning , stacklevel set to integer 2. for field_name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs ."
import errno,import module errno .
import types,import module types .
output . append ( label output ),append label_output to output .
allow multiple selected = True,allow_multiple_selected is boolean True .
link [ NEXT ] = root,substitute root for value under the NEXT key of the link dictionary .
return valid,return valid .
cmp fmts = list ( self . compression formats . keys ( ) ) if cmp fmt is None else [ cmp fmt ],"call the method self.compression_formats.keys , convert it to list , substitute it for cmp_fmts if cmp_fmt is None ,"
return filter func,return filter_func .
import sys,import module sys .
else :,"if not ,"
class Page ( collections . Sequence ) :,derive the class Page from the collections.Sequence base class .
self . kwargs = kwargs,substitute kwargs for self.kwargs .
"update wrapper (  wrapper , func )",call the function update_wrapper with 2 arguments : _wrapper and func .
"return chain ( * [ [ format html ( STR_ , self . absolute path ( path ) , medium ) for path in self .  css [ medium ] ] for medium in media ] )","return the result of the call to the function chain , with an argument unpacked list , containing the result of the function ,"
return result,return result .
class PermissionDenied ( Exception ) :,derive the class PermissionDenied from the Exception base class .
"opts = new class .  meta = ModelFormOptions ( getattr ( new class , STR_ , None ) )","instantiate class ModelFormOptions with argument : attribute 'Meta ' of the new_class object . if it exists or None , if not ,"
for d in self . dicts [ - NUM_ ] :,"for every d in last element of self.dicts ,"
"return hmac . compare digest ( force bytes ( val1 ) , force bytes ( val2 ) )","call the function hmac.compare_digest with 2 arguments : result of the function force_bytes called with an argument val1 ,"
"def merge ( self , other ) :",define the method merge with 2 arguments self and other .
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
else :,"if not ,"
self . blocks = defaultdict ( list ),"convert elements of defaultdict to list , substitute it for self.blocks ."
y = data . get ( self . year field % name ),"format self.year_field string with name , use it as the key for the data dictionary , substitute the result for y ."
filelist = self .  list cache files ( ),"call the self._list_cache_files method , substitute the result for filelist ."
"return self .   dt ,",return a tuple with an element self.__dt .
"def render ( self , name , value , attrs = None ) :","define the method render with 4 arguments : self , name , value and attrs set to None ."
import logging . handlers,RemovedInDjango19Warning and stacklevel set to integer 2. import module logging.handlers .
"def get nodes by type ( self , nodetype ) :",define the method get_nodes_by_type with 2 arguments : self and nodetype .
"filename = ( STR_ , , filename )","filename is a tuple containing 3 initial elements : string 'utf-8 ' , and empty string and filename ."
class CheckboxChoiceInput ( ChoiceInput ) :,derive the class CheckboxChoiceInput from the ChoiceInput base class .
from django . utils import six,from django.utils import six into default name space .
while True :,"endless loop ,"
 encoding = None,_encoding is None .
from django . utils . six . moves import xrange,from django.utils.six.moves import xrange into default name space .
else :,"substitute the result for value under the f.name key of data dictionary . if not ,"
return not ( v is False or v is None or v == ),"if v is boolean False or v is None or v is an empty string , return boolean False , otherwise return boolean True ."
"def url ( self , name ) :",define the method url with arguments self and name .
"def tzname ( self , dt ) :",define the method tzname with 2 arguments self and dt .
"def translate token ( self , token ) :",define the method translate_token with 2 arguments : self and token .
"def bound func ( * args2 , ** kwargs2 ) :",define the function bound_func with 2 arguments : unpacked list args2 and unpacked dictionary kwargs2 .
"if is in stance ( value , six . string types ) :","if value is an instance of six.string_types ,"
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'required ' key of the self.error_messages dictionary and code set to string 'required ' .
"def   init   ( self , class name , old method name , new method name , deprecation warning ) :","deifne the method __init__ with 5 arguments : self , class_name , old_method_name , new_method_name and deprecation_warning ."
result = self . configurator . convert ( value ),"call the method self.configurator.convert with an argument value , substitute the result for result ."
import mimetypes,import module mimetypes .
pass,do nothing .
else :,"if not ,"
"yield base . DeserializedObject ( obj , m2m data )","call the function base.DeserializedObject with obj and m2m_data as arguments , yield the result as the generator return value ."
if STR_ not in var and STR_ not in var . lower ( ) :,"if ' . ' is not contained in var and ' e ' is not contained in var converted into lowercase ,"
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
for table name in connection . in trospection . table names ( cursor ) :,"for every table_name in return value of the method connection.introspection.table_names called with an argument cursor ,"
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
backend cls = import string ( backend ),"call the import_string with argument backend , substitute it for backend_cls ."
def parse time ( value ) :,define the function parse_time with an argument value .
except smtplib . SMTPException :,"if smtplib.SMTPException exception is caught ,"
self . is  bound = data is not None or files is not None,"initial set to None , error_class set to ErrorList , label_suffix set to None , empty_permitted set to boolean False . if data is not None or files is not None , self.is_bound is boolean True , otherwise it is boolean False ."
with lock :,"with lock ,"
def   len   ( self ) :,define the method __len__ with argument self .
from lib2to3 . pgen2 import token,from lib2to3.pgen2 import token into default name space .
"self . xml . startElement ( "" STR_ "" , { } )",call the method self.xml.startElement with arguments string 'natural ' and an empty dictionary .
self . file . write ( raw data ),write raw_data to self.file file .
else :,"if not ,"
if template tuple is TemplateDoesNotExist :,"if template_tuple is contained in TemplateDoesNotExist ,"
"from django . utils . functional import allow lazy , SimpleLazyObject",from django.utils.functional import allow_lazy and SimpleLazyObject into default name space .
"def widget attrs ( self , widget ) :",define the method widget_attrs with arguments self and widget .
output = [ ],output is an empty list .
self . validate key ( key ),call the method self.validate_key with argument key .
if not self . user regex . match ( user part ) :,"call the self.user_regex.match method with an argument user_part , if it evaluates to false ,"
memoryview = memoryview,substitute memoryview for memoryview .
opts = model .  meta,substitute model._meta for opts .
j = match . end ( ),"find the ending position of the regular expression match of the object match , substitute the result for j ."
else :,"if not ,"
if not  serializers :,"f _serializers is false ,"
try :,"with all occurrences of ' % s ' replaced with app_name and model._meta.object_name , respectively . try ,"
for d in reversed ( self . dicts ) :,"for every d in reversed list self.dicts ,"
for path to remove in self . paths to remove :,"for every path_to_remove in self.paths_to_remove ,"
"self . stream . write ( "" STR_ "" )",write a new line to the self.stream file stream .
"args . append ( ( True , Variable ( var arg ) ) )","take a tuple with 2 elements : boolean False and instance of Variable class , created with an argument constant_arg , append it to args ."
class ExternalReferenceForbidden ( DefusedXmlException ) :,derive the class ExternalReferenceForbidden from the DefusedXmlException base class .
"yield "" STR_ """,yield string `` # You 'll have to do the following manually to clean this up : '' as the result .
else :,"if not ,"
if data list :,"if data_list is true ,"
class CheckboxInput ( Widget ) :,derive the class CheckboxInput from the Widget base class .
if options [ STR_ ] :,"if value under the 'errlog ' key of options dictionary is true ,"
"return self . set cookie ( key , value , ** kwargs )","call the method sign on the result with an argument value , substitute the result for value . call the method self.set_cookie with 3 arguments : key , value and unpacked dictionary kwargs , return the result ."
"flags = ( os . O WRONLY | os . O CREAT | os . O EXCL | getattr ( os , STR_ , NUM_ ) )","evaluate binary expression with 4 operands : os.O_WRONLY , binary or os.O_CREAT , binary or os.O_EXCL ,"
changes = autodetector . changes ( graph = executor . loader . graph ),"and return value of the call to the method ProjectState.from_apps with apps as an argument , assign it to the autodetector . call the method autodetector.changes with the graph set to executor.loader.graph as an argument , substitute it for the changes ."
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
self .  setup ( ),call the method self._setup .
else :,"if not ,"
def npath ( path ) :,define the function npath with an argument path .
def  explode shorthand ip string ( ip str ) :,define the function _explode_shorthand_ip_string with an argument ip_str .
prefix = settings . MEDIA URL,substitute settings.MEDIA_URL for prefix .
field list = [ ],field_list is an empty list .
errors . extend (  check middleware classes ( ** kwargs ) ),"call the function _check_middleware_classes with dictionary kwargs as argument , use the result as an argument for the call to the function errors.extend ."
"self . validate name ( app name , "" STR_ "" )",call the method self.validate_name with 2 arguments : app_name and string 'app ' .
def check programs ( * programs ) :,define the method check_programs with an argument unpacked list programs .
"return format html ( STR_ , flatatt ( final attrs ) )","substitute the result for final_attrs dictionary value under the 'value ' key . call the function format_html with 2 arguments : string ' < input { 0 } / > ' ,"
raise NotImplementedError ( STR_ ),"raise an exception of class NotImplementedError , with string 'subclasses of BaseCache must provide a get ( ) method ' as argument ."
yield,yield and empty string as the result .
fp = six . BytesIO ( ),fp is a instance of a class six.BytesIO .
msg += STR_,append newline character to msg .
"def add arguments ( self , parser ) :",define the method add_arguments with an argument self and parser .
return None,return None .
self . extra context [ name ] = var,substitute var for value under the name key of the self.extra_context dictionary .
else :,"subtype and charset , respectively . if not ,"
except AmbiguityError :,"if AmbiguityError exception is raised ,"
def get library ( library name ) :,define the function get_library with an argument library_name .
def   repr   ( self ) :,define the method __repr__ with an argument self .
try :,"try ,"
existing headers = set ( header . lower ( ) for header in vary headers ),existing_headers is a set of lowercase headers for every header in vary_headers .
"def make writeable ( self , filename ) :",define the method make_writeable with arguments self and filename .
"@ register . filter ( is  safe = True , needs autoescape = True )","use the result as an argument for the call to the function mark_safe , return the result . decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True ."
if self . to field :,"if self.to_field is true ,"
return result,return result .
raise ImproperlyConfigured ( STR_ % self . file path ),"raise an ImproperlyConfigured exception with argument string 'Path for saving emails is invalid : % r ' , replace ' % r ' with self.file_path ."
use base manager = options . get ( STR_ ),"get the value under the 'use_base_manager ' key of the options dictionary , substitute the result for use_base_manager ."
if last == NUM_ :,"if las equals integer 2 ,"
except ValueError :,"if ValueError exception is caught ,"
threading = options . get ( STR_ ),substitute value under the 'use_threading ' key of the options dictionary for threading .
d = self . config [ m . groups ( ) [ NUM_ ] ],"call the method m.groups , use the first element of the result as key for obtaining value from self.config dictionary ,"
"if not hasattr ( e , STR_ ) :","if e doesnt have an 'django_template_source ' attribute ,"
"def template localtime ( value , use tz = None ) :",define the function template_localtime with 2 arguments : value and use_tz set to None .
if args :,"if args is true ,"
status code = NUM_,status_code is an integer 410 .
class Deserializer ( six . Iterator ) :,derive the class Deserializer from the six.Iterator base class .
"def sync apps ( self , connection , app labels ) :","define the method sync_apps with self class instance , connection and app_labels as arguments ."
week number -= NUM_,decrement week_number by integer 1 .
"return self . form . errors . get ( self . name , self . form . error class ( ) )","get the value under the self.name key of the self.form.errors dictionary , if the key exists , return it ,"
ending = self . ending if ending is None else ending,if ending is None substitute self.ending for ending .
class Literal ( TokenBase ) :,derive the class Literal from the TokenBase base class .
stream . unget ( chunk ),call the method stream.unget with an argument chunk .
process all = options . get ( STR_ ),"get the value under the 'all ' key of the options dictionary , substitute it for process_all ."
if fd . is atty ( ) :,"evaluate the fd.isatty method , if the result is true ,"
  all   = [ STR_ ],__all__ is an list containing a string 'File ' .
if size :,"if size is not zero ,"
"self . stdout . write ( self . style . MIGRATE SUCCESS ( "" STR_ "" ) )",wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string `` OK '' as a argument .
if location is None :,"if location is None ,"
if weight >= NUM_ :,"if weight is greater or equal to integer 6 ,"
except KeyError :,"if KeyError exception is caught ,"
"def read ( self , size = None ) :",define the method read with self class instance and size set to None as arguments .
if response . streaming :,"if response.streaming is True ,"
"def   exit   ( self , * args , ** kwargs ) :","define the method __exit__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
"def render ( self , name , value , attrs = None , choices = ( ) ) :","define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple ."
else :,"and self.ns for `` xmlns '' . if not ,"
else :,"if not ,"
for name in MEDIA TYPES :,"for every name in MEDIA_TYPES ,"
token = parser . next token ( ),"call the method parser.next_token , substitute the result for token ."
"def expression ( self , rbp = NUM_ ) :",define the method expression with 2 arguments : self and rbp set to integer 0 .
"self . allow files , self . allow folders = allow files , allow folders",substitute allow_files and allow_folders for self.allow_files and self.allow_folders .
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % node )","raise TemplateSyntaxError ( `` % r must be the first tag in the template . `` , where ' % s ' is replaced with node ."
self . changed objects = [ ],self.changed_objects is an empty list .
else :,"if not ,"
"warnings . warn ( "" STR_ "" "" STR_ "" , RemovedInDjango19Warning , stacklevel = NUM_ )",call the function warnings.warn with 3 arguments : string `` The django.forms.util module has been renamed. ``
if key func is not None :,"if key_func is not of None type ,"
"def update error dict ( self , error dict ) :",define the method update_error_dict with arguments self and error_dict .
app = TerminalIPythonApp . in stance ( ),"call the method instance of TerminalIPythonApp class , substitute the result for app ."
except ImportError :,"if ImportError exception is caught ,"
"self . base fields [ MIN NUM FORM COUNT ] = IntegerField ( required = False , widget = HiddenInput )","created with an argument widget set to HiddenInput . value under the MIN_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class ,"
if opts . model :,"if opts.model is true ,"
"output . extend ( connection . ops . prepare sql script ( fp . read ( ) ,  allow fallback = True ) )","call the method connection.ops.prepare_sql_script with 2 arguments : return value of the function fp.read ,"
"simple url 2 re = re . compile ( r STR_ , re . IGNORECASE )","call the function re.compile with 2 arguments : raw string '^www\.|^ ( ? ! http ) \w [ ^ @ ] +\. ( com|edu|gov|int|mil|net|org ) ( $ |/ . * ) $ ' ,"
"return self . expression . resolve ( context , True )","call the method self.expression.resolve with 2 arguments : context and boolean True , return the result ."
if file  :,"and _ , respectively . if file_ is true ,"
"error dict . setdefault ( NON FIELD ERRORS , [ ] ) . extend ( self . error list )",call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments : NON_FIELD_ERRORS and an empty list .
if path . exists ( absolute path ) :,"if file path absolute_path exists ,"
val = None,val is None .
encoding = property ( lambda self : self . file . encoding ),"define lambda function that returns self.file.encoding field , use it as an argument for property function , put the result in encoding ."
processors = [ ],processors is an empty list .
class BadHeaderError ( ValueError ) :,"'PROCESSING ' for 102 , 'OK ' for 200 , 'CREATED ' for 201 , 'ACCEPTED ' for 202 , 'NON-AUTHORITATIVE INFORMATION ' for 203 , 'NO CONTENT ' for 204 , 'RESET CONTENT ' for 205 , 'PARTIAL CONTENT ' for 206 , 'MULTI-STATUS ' for 207 , 'ALREADY REPORTED ' for 208 , 'IM USED ' for 226 , 'MULTIPLE CHOICES ' for 300 , 'MOVED PERMANENTLY ' for 301 , 'FOUND ' for 302 , 'SEE OTHER ' for 303 , 'NOT MODIFIED ' for 304 , 'USE PROXY ' for 305 , 'RESERVED ' for 306 , 'TEMPORARY REDIRECT ' for 307 , 'PERMANENT REDIRECT ' for 308 , 'BAD REQUEST ' for 400 , 'UNAUTHORIZED ' for 401 , 'PAYMENT REQUIRED ' for 402 , 'FORBIDDEN ' for 403 , 'NOT FOUND ' for 404 , 'METHOD NOT ALLOWED ' for 405 , 'NOT ACCEPTABLE ' for 406 , 'PROXY AUTHENTICATION REQUIRED ' for 407 , 'REQUEST TIMEOUT ' for 408 , 'CONFLICT ' for 409 , 'GONE ' for 410 , 'LENGTH REQUIRED ' for 411 , 'PRECONDITION FAILED ' for 412 , 'REQUEST ENTITY TOO LARGE ' for 413 , 'REQUEST-URI TOO LONG ' for 414 , 'UNSUPPORTED MEDIA TYPE ' for 415 , 'REQUESTED RANGE NOT SATISFIABLE ' for 416 , 'EXPECTATION FAILED ' for 417 , ' I 'M A TEAPOT ' for 418 , 'UNPROCESSABLE ENTITY ' for 422 , 'LOCKED ' for 423 , 'FAILED DEPENDENCY ' for 424 , 'UPGRADE REQUIRED ' for 426 , 'PRECONDITION REQUIRED ' for 428 , 'TOO MANY REQUESTS ' for 429 , 'REQUEST HEADER FIELDS TOO LARGE ' for 431 , 'INTERNAL SERVER ERROR ' for 500 , 'NOT IMPLEMENTED ' for 501 , 'BAD GATEWAY ' for 502 , 'SERVICE UNAVAILABLE ' for 503 , 'GATEWAY TIMEOUT ' for 504 , 'HTTP VERSION NOT SUPPORTED ' for 505 , 'VARIANT ALSO NEGOTIATES ' for 506 , 'INSUFFICIENT STORAGE ' for 507 , 'LOOP DETECTED ' for 508 , 'NOT EXTENDED ' for 510 and 'NETWORK AUTHENTICATION REQUIRED ' for 511. derive the class BadHeaderError from the ValueError base class ."
"if is in stance ( s , Promise ) :",if s is an instance of an object Promise .
return default key func,return default_key_func .
return SafeBytes ( s ),"return an instance of SafeBytes , created with an argument s ."
"def get connection ( self , fail silently = False ) :",define the method get_connection with arguments self and fail_silently set to boolean False .
except AttributeError :,"if AttributeError exception is caught ,"
"def   init   ( self , in put formats = None , * args , ** kwargs ) :","define the method __init__ with arguments self , input_formats set to None , unpacked list args and unpacked dictionary kwargs ."
"raise ValueError ( "" STR_ "" )",raise an ValueError exception with an argument string `` Base36 input too large '' .
klass .   unicode   = klass .   str  ,"`` to % s because it does n't define __str__ ( ) . `` , replace % s with string value of klass.__name__ . substitute __str__ filed of klass for __unicode__ field of klass ."
"description = "" STR_ "" % receiver .   class   .   name  ",description is a string `` An instance of the ' % s ' class '' with ' % s ' replaced by value of receiver.__class__.__name__ .
import warnings,import module warnings .
else :,"substitute the result for last element of output . if not ,"
else :,"if not ,"
"statements = sql custom ( app config , self . style , connection )","call the function sql_custom with app_config , self.style and connection as the arguments , substitute the result for statements ."
return,return nothing .
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
def   iter   ( self ) :,define the method _iter with an argument self .
connection . close ( ),"call the method connection.close ,"
"def   init   ( self , args , kw ) :","define the method __init__ with 3 arguments : self , args and kw ."
"safe input = is in stance ( text , SafeData )","if text is an instance of SafeData , safe_input is boolean True , otherwise is boolean False ."
for item in elt :,"for every item in elt ,"
if self . require all fields :,"if self.require_all_fields is boolean true ,"
return True,return boolean True .
context [ self . asvar ] = url,substitute url for value under the self.asvar key of context dictionary .
if field is not None :,"if field is not None ,"
ALLOWED VARIABLE CHARS = ( STR_ STR_ ),ALLOWED_VARIABLE_CHARS is a string 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_ . ' .
self . close called = True,substitute True for self.close_called .
"def read ( self , size = None ) :",define the method read with arguments self and size set to None .
try :,"try ,"
length = in t ( arg ),substitute arg converted into an integer for length .
class DebugVariableNode ( VariableNode ) :,derive the class DebugVariableNode from the VariableNode base class .
def   repr   ( self ) :,define the method __repr__ with an argument self .
"value = super ( IntegerField , self ) . to python ( value )","call the method to_python with an argument value , from the base class of the IntegerField class , substitute the result for value ."
clear checkbox label = ugettext lazy ( STR_ ),"call the function ugettext_lazy with an argument string 'Clear ' , substitute the result for clear_checkbox_label ."
absolute path = self . download ( template ),"call the method self.download with an argument template , substitute the result for absolute_path ."
return found,return found .
if e . errno ! = errno . ENOENT :,"if e.errno does not equals to errno.ENOENT ,"
class DeserializationError ( Exception ) :,derive the class DeserializationError from the Exception base class .
"except ( ValueError , TypeError , OverflowError ) :","if ValueError , TypeError or OverflowError exceptions are caught ,"
exclude . append ( f . name ),append f.name to exclude .
return self . as table ( ),"call the method self.as_table , return the result ."
quit command = STR_ if sys . platform == STR_ else STR_,"if not , shutdown_message is an empty string . if sys.platform equals string win32 ' , substitute string 'CTRL-BREAK ' for quit_command , if not substitute string 'CONTROL-C ' for quit_command ."
"ch , escaped = next ( pattern iter )","get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively ."
from django . utils import formats,"CheckboxInput , Select , NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput , SplitDateTimeWidget , SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION . from django.utils import formats into default name space ."
self . name = name,substitute name for self.name .
"def  dec ( * args , ** kwargs ) :",define the method _dec with 2 arguments : unpacked list args and unpacked dictionary kwargs .
"html [ STR_ ] = self . create select ( name , self . month field , value , month val , choices , self . month none value )","call the method self.create_select with 6 arguments : name , self.month_field , value , month_val , choices and self.month_none_value ,"
msg data = msg . as bytes ( ),"call the method msg.as_bytes , substitute the result for msg_data ."
stream created = self . open ( ),"call the method self.open , substitute the result for stream_created ."
"return self . dicts [ - NUM_ ] . get ( key , otherwise )","return value under the key key of dictionary in last element of self.dicts ,"
reverse = complain,substitute complain for reverse .
"def add arguments ( self , parser ) :",define the method add_arguments with 2 arguments self and parser .
builtins . append ( import library ( module ) ),"call the function import_library with an argument module , append the result to builtins ."
except Exception :,"if Exception exception is caught ,"
in itial set = set ( force text ( value ) for value in self . prepare value ( in itial ) ),"initial_set is set created out of return values of the function force_text called with an argument value ,"
"reset sequences = options . get ( STR_ , True )","get the value 'reset_sequences ' key of the options dictionary , if it exists substitute it for reset_sequences , otherwise reset_sequences is boolean True ."
"value = getattr ( self , STR_ % name ) ( )","get 'clean_ % s ' , where ' % s ' is replaced with name ' attribute of the self object , call the result as an function ,"
self . verbosity = options . get ( STR_ ),"get the value under the 'verbosity ' key of the options dictionary , substitute it for self.verbosity ."
self . number = number,substitute number for self.number .
class ErrorDict ( dict ) :,derive the class ErrorDict from the dict base class .
"lead , trail = escape ( lead ) , escape ( trail )","call the function escape with an argument lead , substitute the result for lead , call the function escape with an argument trail ,"
var obj = None,var_obj is None .
"def validate ( self , app config = None , display num errors = False ) :","define the method with 3 arguments : self , app_config set to None and display_num_errors set to boolean False ."
"for app name , model list in manifest . items ( ) :","for every app_name and model_list in return value of manifest.items method ,"
"all issues = checks . run checks ( app configs = app configs , tags = tags )","call the method checks.run_checks with 2 arguments : app_configs set to app_configs , tags set t tags , substitute the result for all_issues ."
options [ option ] = value,substitute value for value under the options key of options dictionary .
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
"def   init   ( self , level , msg , hint = None , obj = None , id = None ) :","define initialization method __init__ with self class instance , level , msg , hint defaulting to None , obj defaulting to None and if defaulting to None as arguments ."
self . xml . endDocument ( ),call the self.xml.endDocument method .
if not sys . warnoptions :,"if sys.warnoptions is false ,"
"def   init   ( self , request , template , context = None , content type = None , status = None , current app = None ) :","define the method __init__ with 7 arguments : self , request , template , context set to None , content_type set to None ,"
"def serialize ( self , queryset , ** options ) :","define the method serialize with 3 arguments : self , queryset and unpacked dictionary options ."
parts = parts [ : - NUM_ ],substitute the last element of parts for parts .
"kw = dict ( ( k , in t ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )","substitute the result for value under the 'microsecond ' key of the kw dictionary . update a dictionary with an entry v converted to an integer for k , for every k and v in result of the function six.iteritems ,"
"urlunquote = allow lazy ( urlunquote , six . text type )","use the result as an argument for the call to the function force_text , return the result . call the function allow_lazy with 2 arguments : urlunquote and six.text_type , substitute the result for urlunquote ."
def  populate ( self ) :,"self.namespace and self.regex.pattern , respectively . return it . define the method _populate with an argument self ."
pass,do nothing .
raise v,raise an v exception .
@ stringfilter,"decorator stringfilter ,"
post = STR_,post is a string ' < could not parse > ' .
self . backout = [ ],self.backout is an empty list .
name = self . format ( STR_ ),"call the method self.format with an argument string ' 0 ' , substitute the result for name ."
loop dict [ STR_ ] = len values - i,"subtract i from len_values , substitute the result for value under the 'revcounter ' key of the loop_dict dictionary ."
class CacheHandler ( object ) :,derive the class CacheHandler from the object base class .
def get major version ( version = None ) :,define the function get_major_version with an argument version defaulting to None .
if f . rel and f . rel . to not in to delete :,"if f.rel and f.rel.to are not contained in to_delete ,"
" add doc ( reraise , "" "" "" STR_ "" "" "" )",call the function _add_doc with 2 arguments : reraise and string `` '' '' Reraise an exception . `` `` '' .
"def timesince filter ( value , arg = None ) :",define the function timesince_filter with 2 arguments value and arg set to None .
"if sender and getattr ( sender , STR_ , False ) :","if sender is true and sender attribute 'handles_files ' is also True ,"
errors = [ e for e in all issues if checks . ERROR <= e . level < checks . CRITICAL ],"and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false . append e to errors list for every e in all_issues , if checks.ERROR is lesser than or equal to e.level ,"
loop dict [ STR_ ] = i + NUM_,substitute i incremented by 1 for value under the 'counter ' key of the loop_dict dictionary .
try :,"try ,"
cycle iter = context . render context [ self ],"get the value under the self key of the context.render_context dictionary , substitute it for cycle_iter ."
try :,"try ,"
if not self :,"if self is false ,"
class MediaDefiningClass ( type ) :,derive the class MediaDefiningClass from the type base class .
if is  protected type ( value ) :,"call the function is_protected_type with an argument value , if it evaluates to true ,"
from django . utils . safestring import mark safe,from django.utils.safestring import mark_safe into default name space .
"result . append ( "" STR_ "" )",append string ' . ' to result .
version = self . version,substitute self.version for version .
"return six . text type ( s , encoding , STR_ )","call the method six.text_type with 3 arguments : s , encoding and string 'replace ' ."
value = value . encode ( charset ),"call the method value.encode with an argument charset , substitute the result for value ."
"if is in stance ( app name , BaseCommand ) :","if app_name is an instance of BaseCommand ,"
"return s [ NUM_ : - NUM_ ] . replace ( r STR_ % quote , quote ) . replace ( r STR_ \ \  )
","remove first and last elements of s , replace every occurrence of string '\ % s ' formated with quote with quote ,"
if errors :,"if errors is True ,"
if bits and not kwarg format :,"if bits is true and kwarg_format is false ,"
class MaxLengthValidator ( BaseValidator ) :,derive the class MaxLengthValidator form the BaseValidator base class .
if self . verbosity > NUM_  or self . in teractive :,"with arguments al and mn , for every al , mn in executor.loader.graph.forwards_plan method return value called with 2 arguments : migration.app_label , migration.name , only if al equals migration.app_label . if self.verbosity is greater than integer 0 or self.interactive is true ,"
bits = list ( token . split contents ( ) ),"call the method token.split_contents , convert the result into a list and substitute it for bits ."
if self . locale paths :,"if self.locale_paths is true ,"
not ifier . process events ( ),call the method notifier.process_events .
from django . utils . six . moves import html parser as  html parser,from django.utils.six.moves import html_parser as _html_parse into default name space .
return field . to python,return field.to_python .
while new name . find ( STR_ ) >= NUM_ :,"while the result of the method new_name.find , called with an argument string '__ ' is greater or equals integer 0 ,"
if STR_ in kwargs :,"if 'error_messages ' is contained in kwargs ,"
else :,"if not ,"
raise,raise an exception .
if varargs is None :,"if varargs is None ,"
else :,"if not ,"
tried . extend ( [ pattern ] + t for t in sub tried ),"call the method tried.extend with an argument : t added to a list containing element pattern , for every t in sub_tried ."
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
"return File ( open ( self . path ( name ) , mode ) )","call the function self.path with argument name , use it and mode as arguments for the call to the function open , use it as an argument for creatinon of a File object instance , return it ."
return,return nothing .
"def absolute path ( self , path , prefix = None ) :","format_html called with 3 arguments : string ' < link href= '' { 0 } '' type= '' text/css '' media= '' { 1 } '' rel= '' stylesheet '' / > ' , return value of the function self.absolute_path called with an argument path and medium , for every medium in media and for every path in value under the medium key of the self._css dictionary . define the method absolute_path with 3 arguments self , path and prefix set to None ."
"template = get template from string ( template , or igin , template name )","call the function get_template_from_string with 3 arguments : template , origin and template_name , substitute the result for template ."
"if "" STR_ ""  ) :
","if encoded contains string `` \\ '' and if encoded doesnt start with the double quote symbol ,"
return STR_ % self . data . month,return a string ' % 02d ' formated with self.data.month .
"return get template ( template name , dirs )","call the function get_template with 2 arguments template_name and dirs , return the result ."
from django . db . migrations . loader import AmbiguityError,from django.db.migrations.loader import AmbiguityError into default name space .
tried . append ( [ pattern ] ),append list containing pattern to tried .
"return self .  truncate html ( length , truncate , self .  wrapped , length , True )","call the method self._truncate_html with 5 arguments : length , truncate , self._wrapped , length and boolean True , return the result ."
return result,return result .
import warnings,import module warnings .
self . paginator = paginator,substitute paginator for self.paginator .
except ImportError :,"if ImportError exception is caught ,"
forms to delete = self . deleted forms,substitute self.deleted_forms for forms_to_delete .
"def   init   ( self , key = None , sep = STR_ , salt = None ) :","define the method __init__ with 4 arguments : self , key set to None , sep set to ' : ' and salt set to None ."
"def run validators ( self , value ) :",define the method run_validators with arguments self and value .
"raise self . error ( token , "" STR_ "" )","call the method self.error with 2 arguments : token and string `` Empty block tag '' , return the result ."
"key = self . cache key ( name , dirs )","call the method self.cache_key with 2 arguments name and dirs , substitute the result for key ."
"return str ( STR_ ) % ( value , self . sep , self . signature ( value ) )","convert value , self.sep and return value of a method self.signature called with an argument value , concatenate them together , return the result ."
from django . utils import datastructures,from django.utils import datastructures into default name space .
dirnames . remove ( dirname ),"use the result as an argument for the call to the os.path.join function , use the result and the norm_patterns as arguments for the call to the is_ignored function , if it evaluates to true , remove dirname from the dirnames ."
"raise CommandError ( "" STR_ "" "" STR_ "" "" STR_ "" "" STR_ "" % new path )",raise a CommandError exception with an argument :
return self . tag function ( name ),"call the method self.tag_function with an argument name , return the result ."
if ch2 == STR_ :,"if ch2 equals string ' ? ' ,"
try :,"try ,"
def   init   ( self ) :,define initialization method __init__ with argument self .
token = self . next token ( ),"call the method self.next_token , substitute the result for token ."
return  dec,return _dec .
return [ smart text ( val ) for val in value ],"for every val in value call the function smart_text with an argument val , return the results in a lit ."
if kwargs :,"if kwargs is true ,"
"self . configure logger ( name , loggers [ name ] , True )","call the method self.configure_logger with 3 arguments : name , value under name key of loggers dictionary and boolean True ."
output transaction = True,output_transaction is boolean True .
def get serializer formats ( ) :,define the function get_serializer_formats .
attrs = { },attrs is an empty dictionary .
"if settings . USE L10N and is in stance ( value , six . string types ) :","if settings.USE_L10N is true and value is an instance of six.string_types ,"
"raise ValueError ( STR_ STR_ % ( final path , base path ) )","called with sep appended to base_path as an argument and results of the function normcase called twice with final_path , and base_pah are not equal and directory name of the result of the function normcase called with an argument base_path , if not equal to the result of the function normcase called with an argument base_path . raise an ValueError with an argument string 'The joined path ( % s ) is located outside of the base path component ( % s ) ' ,"
memo [ id ( self ) ] = obj,substitute obj for the value of the memo dictionary at the identity of the self object key .
import sys,import module sys .
data = raw data,substitute raw_data for data .
pass,do nothing .
" cookie encodes correctly = http cookies . SimpleCookie ( ) . value encode ( STR_ ) == ( STR_ , STR_ )","call the function http_cookies.SimpleCookie , on the return value call the value_encode method , with the argument character ' ; ' ,"
"raise CommandError ( "" STR_ "" % ( migration name , app label ) )","raise an CommandError with an argument string `` Can not find a migration matching ' % s ' from app ' % s ' . `` ,"
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to integer 1 ,"
"if not is in stance ( list  , ( tuple , list ) ) or len ( list  ) ! = NUM_ :","if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2 ,"
def   cast ( self ) :,"use the result as an argument for the call to the function bytes , return the result . define the method __cast with an argument self ."
if not chunks :,"if chunks is false ,"
chunk size = NUM_ * NUM_ ** NUM_,"bring integer 2 to the power of 10 , multiply it by integer 64 , substitute the result for chunk_size ."
"final attrs = self . build attrs ( attrs , name = name )","call the method self.build_attrs with arguments attrs , name as name , substitute the result for final_attrs ."
"if not is in stance ( i , six . in teger types ) :","if i is not an instance of six.integer_types class ,"
else :,"to the function timedelta called with an argument seconds as negative time.altzone , return the result . if not ,"
if year < NUM_ :,"if year is lesser than integer 70 ,"
"return super ( SimpleTemplateResponse , self ) .   iter   ( )","call the method __init__ from the base class of the class SimpleTemplateResponse , return the result ."
"key += tuple ( type ( v ) for k , v in sorted items )","create a tuple out of types of v , for every k and v in sorted_items , extend key tuple with the result ."
"compiled result = compile func ( self , token )","call the method compile_func with 2 arguments self and token , substitute the result for compiled_result ."
return None,return None .
if type ( s ) == bytes :,"return the result . if type of s equals bytes ,"
return [ ],return an empty list .
self . toks = { },self.tokens is an empty dictionary .
if media :,"if media is true ,"
"self . version = params . get ( STR_ , NUM_ )","call the params.get method wit string 'VERSION ' and integer 1 as arguments , substitute the result for self.version ."
"unicode value = force text ( value , strings only = True )","call the function force_text with arguments value and strings_only set to boolean True , substitute the result for unicode_value ."
class ModelFormOptions ( object ) :,derive the class ModelFormOptions from object base class .
"attrs = [ "" STR_ "" , "" STR_ "" ]",attrs is a list with 2 elements : strings `` __doc__ '' and `` __name__ '' .
try :,"try ,"
import django . core . checks . compatibility . django 1 6 0,import module django.core.checks.compatibility.django_1_6_0 .
try :,"try ,"
def  get filename ( self ) :,define the method _get_filename with argument self .
result = cursor . fetchone ( ),"substitute the ' % s ' with table and list containing key , respectively . fetch one entry from the database that cursor points at , substitute it for the result ."
"return   proxy   ( args , kw )","call the function __proxy__ with 2 arguments : args and kw , return the result ."
continue,skip this loop iteration .
"super ( TemporaryFileUploadHandler , self ) . new file ( file name , * args , ** kwargs )","call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments : file_name , unpacked list args and unpacked dictionary kwargs ."
callback = pattern .  callback,substitute pattern._callback for callback .
class MinValueValidator ( BaseValidator ) :,derive the class MinValueValidator form the BaseValidator base class .
doublecolon len = NUM_,doublecolon_len is integer 0 .
def translation ( language ) :,define the function translation with an argument language .
for app label in app labels :,"for every app_label in app_labels ,"
if escaped :,"if escaped is true ,"
"for dirpath , dirnames , filenames in os . walk ( root , topdown = True , followlinks = self . symlinks ) :","call the function os.walk with 3 arguments : root , topdown set to boolean True , followlinks set to self.symlinks ,"
smart unicode = smart text,substitute smart_text for smart_unicode .
"setattr ( Module six moves urllib request , attr . name , attr )",set attr.name attribute of the Module_six_moves_urllib_request object to attr .
from django . utils import lru cache,from django.utils import lru_cache into default name space .
from logging import  checkLevel,from logging import _checkLevel .
cached =  format cache [ cache key ],substitute value under the cache_key key of the _format_cache dictionary for cached .
"super ( IntegerField , self ) .   init   ( * args , ** kwargs )","call the method __init__ from the base class of the class IntegerField , with arguments unpacked list args and unpacked dictionary kwargs ."
from django . db import models,from django.db import models into default name space .
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
self . choice value = force text ( choice [ NUM_ ] ),"call the function force_text with first element of choice as an argument , substitute the result for self.choice_value ."
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with an argument string 'subclasses of BaseCommand must provide a handle ( ) method ' .
"def in dexbytes ( buf , i ) :",define the function indexbytes with 2 arguments buf and i .
pass,do nothing .
"def get str from wsgi ( environ , key , default ) :","define the get_str_from_wsgi function with environ , key and default as arguments ."
return self . format ( STR_ ),"call the method return self.format with an argument string 'D , j M Y H : i : s O ' , return the result ."
"candidate subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate subs . items ( ) )","candidate_pat formated with candidate_subs and re.UNICODE . candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v ,"
def   repr   ( self ) :,define the method __repr__ with an argument self .
for part in parts :,"for every part in parts ,"
continue,skip this loop iteration .
except ImportError :,"if ImportError exception is caught ,"
from collections import OrderedDict,from collections import OrderedDict into default name space .
def get fixed timezone ( offset ) :,define the function get_fixed_timezone with an argument offset .
"def send messages ( self , email messages ) :",define the method send_messages with arguments self and email_messages .
return default,return default .
return in put val,return input_val .
s len = NUM_,s_len is integer 0 .
self . registered checks . append ( check ),call the method self.registered_checks.append with argument check .
obj . save ( using = self . using ),call the method obj.save with an argument using set to self.using .
if comment lineno cache == cur lineno :,if comment_lineno_cache equals cur_lineno .
new value . append ( self . coerce ( choice ) ),"call the method self.coerce with an argument choice , append the result to new_value ."
"parser . add argument ( STR_ , STR_ , action = STR_ , dest = STR_ , default = STR_ , type = in t , choices = [ NUM_ , NUM_ , NUM_ , NUM_ ] , help = STR_ )","and version set to result of the method self.get_version . call the method parser.add_option with 8 arguments : string '-v ' , string ' -- verbosity ' , action set to string 'store ' ,"
"help = "" STR_ """,help is a string `` Prints the SQL statements for the named migration . ''
if self . setting :,"if self.setting is true ,"
from django . db import models,from django.db import models into default name space .
if level not in logging .  levelNames :,"if level is not contained in logging._levelNames ,"
"def   init   ( self , server , params ) :","define the method __init__ with self , server and params as arguments ."
return True,return boolean True .
"os . makedirs ( directory , self . directory permissions mode )",call the os.makedirs function with directory and self.directory_permissions_mode as arguments .
"handler . addQuickElement ( "" STR_ "" , self . feed [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'link ' and value under the 'link ' key of the self.feed dictionary .
return,return an empty string .
"return  generate cache key ( request , request . method , [ ] , key prefix )","call the function _generate_cache_key with request , request.method , an empty list and key_prefix as arguments , return the result ."
self . flags = flags,substitute flags for self.flags .
for app name in app names :,"for every app_name is app_names ,"
def  split statements ( content ) :,define the function _split_statements with an argument content .
return,return nothing .
return value,return value .
@ stringfilter,"decorator stringfilter ,"
self . months = MONTHS,substitute MONTHS for self.months .
if settings . USE ETAGS and not response . has header ( STR_ ) :,"if settings.USE_ETAGS is True and function call response.has_header with string 'ETag ' as argument returns boolean False ,"
"checks = [ check for check in self . registered checks if hasattr ( check , STR_ ) and set ( check . tags ) & set ( tags ) ]","append check to checks list , for every check in self.register_checks , if check has an attribute 'tags ' and check.tags and tags set intersection is a non empty set ."
from django . utils import six,from django.utils import six into default name space .
try :,"try ,"
if default list is None :,"if default_list is None ,"
r = dklen - ( l - NUM_ ) * hlen,"decrement l by integer 1 , multiply it with hlen , subtract the result from dklen , substitute the result for r ."
"def urlencode ( self , safe = None ) :",define the method urlencode with 3 arguments : self and safe set to None .
"return WithNode ( None , None , nodelist , extra context = extra context )","return an instance of a class WithNode , created with 4 arguments : None , None , nodelist and extra_context as extra_context ."
upto = NUM_,upto is integer 0 .
from functools import total ordering,from functools import total_ordering .
with connections [ db ] . cursor ( ) as cursor :,"call the cursor method on the value under the db key of connections dictionary , preform following with return value named cursor ,"
import datetime,import module datetime .
def get wsgi application ( ) :,define the function get_wsgi_application .
model identifier = node . getAttribute ( attr ),"call the method node.getAttribute with an argument attr , substitute the result for model_identifier ."
parsed = True,parsed is boolean True .
self . default args = default args or { },"if default_args exists substitute it for self.default_args , if not , self.default_args is an empty dictionary ."
continue,skip this loop iteration .
FILTER ARGUMENT SEPARATOR = STR_,FILTER_ARGUMENT_SEPARATOR is a string ' : ' .
else :,"if the key doesnt exists use sys.stderr as an argument . if not ,"
want unicode = True,want_unicode is boolean True .
  Y2 = r STR_,__Y2 is a raw string ' ( ? P < year > \d { 2 } ) ' .
for localedir in reversed ( settings . LOCALE PATHS ) :,"reverse settings.LOCALE_PATHS element order , for every localedir in the result ,"
self .  caches . caches = { },self._caches.caches is an empty dictionary .
requires system checks = False,requires_system_checks is boolean False .
old umask = os . umask ( NUM_ ),"call the os.umask function with argument integer 0 , substitute the result for old_umask ."
if jan1 weekday > NUM_ :,"if jan1_weekday is greater than integer 4 ,"
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to integer 1 ,"
pass,do nothing .
return [ ],return an empty list .
"expires = timezone . make naive ( expires , timezone . utc )","call the method timezone.make_naive with arguments : expires , timezone.utc , substitute the result for expires ."
"def content ( self , value ) :",define the method content with 2 arguments : self and value .
src data = prepare js for gettext ( src data ),"call the function prepare_js_for_gettext with an argument src_data , substitute it for src_data ."
pass,do nothing .
try :,"try ,"
raise DisallowedHost ( msg ),raise an DisallowedHost exception with an argument msg .
if obj list is None :,"if obj_list is None ,"
return number format ( value ),"call the function number_format with an argument value , return the result ."
if len ( s ) > NUM_ :,"if length of s is greater than integer 13 ,"
"exec  ( "" "" "" STR_ "" "" "" )","call the function exec_ with an argument string `` '' '' def reraise ( tp , value , tb=None ) : raise tp , value , tb '' '' '' ."
"if hasattr ( pattern , STR_ ) :","if pattern has an attribute '_callback_str ' ,"
if self .  validate unique :,"if self._validate_unique is true ,"
"if hasattr ( content , STR_ ) :","if content has an attribute 'temporary_file_path ' ,"
from django . utils import six,from django.utils import six into default name space .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid_time ' key of the self.error_messages dictionary and code set to string 'invalid_time ' .
"targets = [ ( app label , migration . name ) ]","replace all the ' % s ' occurrences with migration_name and app_label , respectively . target is a list containing tuple with two elements app_label and migration.name ."
self . urlconf name = urlconf name,substitute urlconf_name for self.urlconf_name .
if name in MEDIA TYPES :,"if name is contained in MEDIA_TYPES ,"
return self .  encoding,return self._encoding .
class RenameMethodsBase ( type ) :,derive the class RenameMethodsBase from type base class .
if language code not in self .  reverse dict :,if language_code is not contained in self._reverse_dict
try :,"try ,"
output . append ( STR_ % field ),"convert field into a string and concatenate it to a string '* ' , append the result to output ."
if self . domain == STR_ :,"if self.domain equals to string 'djangojs ' ,"
else :,"if not ,"
def validate ipv46 address ( value ) :,define the function validate_ipv46_address with an argument value .
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
self . choices = choices,"widget set to widget , label set to label , initial set to initial , help_text set to help_text , unpacked list args , and unpacked dictionary kwargs . substitute choices for self.choices ."
formatters [ name ] = self . configure formatter ( formatters [ name ] ),"call the method self.configure_filter with an argument value under name key of formatters dictionary ,"
if not e . connection reset :,"if e.connection_reset is false ,"
try :,"try ,"
"super ( ManagementForm , self ) .   init   ( * args , ** kwargs )","created with 2 arguments : required as boolean False and widget set to HiddenInput . call the method __init__ from the base class of the class ManagementForm , called with 2 arguments : unpacked list args ,"
extra files = [ ],"and ignored as an empty tuple , convert the result into a tuple and substitute it for extensions . extra_files is an empty list ."
"return os . path . join ( self .  dir , . join ( [ hashlib . md5 ( force bytes ( key ) ) . hexdigest ( ) , self . cache suffix ] ) )","join into a string : md5 hash sum of force_bytes ( key ) and self.cache_suffix , compose root file path out of self._dir and previous result , return it ."
utf8 charset . body encoding = None,utf8_charset.body_encoding is None .
COMMENT TAG START = STR_,COMMENT_TAG_START is a string ' { # ' .
ensure echo on ( ),call the function ensure_echo_on .
related = related . natural key ( ),"call the method related.natural_key , substitute the result for related ."
if response . has header ( STR_ ) :,"if call to the function response.has_header with string 'Vary ' as an argument returns True ,"
"@ register . filter ( "" STR_ "" , is  safe = True )",decorator function register.filter with 2 arguments string `` escape '' and is_safe set to boolean True .
return cache [ mem args ],"get the value under the mem_args key of the cache dictionary , return it ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , help = STR_ )","call the method parser.add_argument with 4 arguments : string ' -- plain ' , action set to string 'store_true ' , dest as a string 'plain ' ,"
from django . apps import apps,from django.apps import apps into default name space .
return path,return path .
self .  delete ( f . name ),call the self._delete method with argument f.name .
for app config in apps . get app configs ( ) :,"for every app_config in return value of the call to the function apps.get_app_configs ,"
if ( i - day of year ) < ( NUM_ - weekday ) :,"subtract day_of_year from i , if the result is smaller than the result of subtraction of weekday from integer 4 ,"
class  HashedSeq ( list ) :,"`` misses '' , `` maxsize '' and `` currsize '' . derive class _HashedSeq from list base class ."
self . connection = connection,substitute connection for self.connection .
"def  find boundary ( self , data , eof = False ) :","define the method _find_boundary with an arguments self , data and eof set to boolean False ."
self . render context = RenderContext ( ),self.render_context is a instance of RenderContext class .
"u = salt + struct . pack ( b STR_ , i )","call the method struct.pack with 2 arguments : bytes string ' > I ' and i , append the result to salt , substitute the result or u ."
class Node ( object ) :,derive the class Node form the base class object .
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
format key = STR_,format_key is a string 'TIME_INPUT_FORMATS ' .
neg = NUM_,neg is integer 0 .
except ValueError :,"if ValueError exception is caught ,"
"  all   = ( STR_ , STR_ , STR_ , STR_ )","__all__ is a tuple containing strings : 'Storage ' , 'FileSystemStorage ' , 'DefaultStorage ' and 'default_storage ' ."
self . view name = STR_ . join ( self . namespaces + [ view path ] ),"append list containing view_path to self.namespaces list , join all the elements into a string separated by character ' : ' ,"
"super ( URLValidator , self ) .   call   ( url )","call the __call__ method from the base class of the URLValidator class , with an argument url ."
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
"with open ( writer . path , "" STR_ "" ) as fh :","open writer.path file in write mode , with the file descriptor as fh , perform ,"
raise TemplateDoesNotExist ( name ),raise an TemplateDoesNotExist exception with an argument name .
continue,"skip this loop iteration ,"
self . stdout . write ( STR_ . join ( sorted ( registry . tags available ( ) ) ) ),"call the method registry.tags_available , sort the result and join it into a string , separate by newlines , write it to self.stdout ."
"if not is in stance ( message , ValidationError ) :","if message is not an instance of the ValidationError class ,"
"def   getitem   ( self , idx ) :",define the method __getitem__ with 2 arguments : self and idx .
"while i < len ( subject ) and subject [ i ] not in ( , STR_ ) :","while i is lesser than length of subject and i-th element of subject is not an empty space or tab character ,"
  slots   = STR_,__slots__ is a string 'hashvalue ' .
parser . delete first token ( ),call the method parser.delete_first_token .
for filename in gen filenames ( ) :,"for every filename in gen_filenames ( ) ,"
"blocks = dict ( ( n . name , n ) for n in compiled parent . nodelist . get nodes by type ( BlockNode ) )","blocks is a dictionary with elements : n for n.name , for every n in return value of the method ,"
@ python 2 unicode compatible,"and unpacked dictionary kwargs . python_2_unicode_compatible decorator ,"
"def assertRegex ( self , * args , ** kwargs ) :","and unpacked dictionary kwargs , return the result . define the function assertRegex with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
except ImproperlyConfigured :,"if ImproperlyConfigured exception is caught ,"
return encoding,return encoding .
"WEEKDAYS = { NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) }","WEEKDAYS is an dictionary with 7 entries : result of the call to the function _ with an argument string 'Monday ' for 0 ,"
continue,skip this loop iteration .
latest date = None,latest_date is None .
"none value = ( NUM_ , STR_ )",none_value is a tuple containing 2 elements : integer 0 and string ' -- - ' .
if o . microsecond :,"if o.microsecond is true ,"
if self . is olated context :,"for every name and var in return value of the function six.iteritems called with an argument self.extra_context . if self.isolated_context is true ,"
def i ( self ) :,define the method i with an argument self .
parts . reverse ( ),call the method parts.reverse .
cache [ key ] = result,substitute result for cache dictionary value under the key key .
"def   init   ( self , template string , or igin = None , name = None ) :","define the method __init__ with 4 arguments : self , template_string , origin set to None and name set to None ."
"sublist =  helper ( sublist item , tabs + NUM_ )","call the function _helper with 2 arguments : sublist_item and tabs incremented by 1 , substitute the result for sublist ."
"def   contains   ( self , item ) :",define the method __contains__ with 2 arguments : self and item .
@ register . filter ( is  safe = True ),return the result . decorator function register.filter with an argument is_safe set to boolean True .
i += NUM_,"where ' % d ' is replaced with i and ' % s ' is replaced with subject . increment i by integer 1 ,"
"def get template ( template name , dirs = None ) :",define the function get_template with 2 : template_name and dirs set to None .
"ESCAPE MAPPINGS = { "" STR_ "" : None , "" STR_ "" : None , "" STR_ "" : None , "" STR_ "" : "" STR_ "" , "" STR_ "" : "" STR_ "" , "" STR_ "" : "" "" , "" STR_ "" : "" STR_ "" , "" STR_ "" : "" STR_ "" , "" STR_ "" : "" STR_ "" , "" STR_ "" : None , }","ESCAPE_MAPPINGS is an dictionary with 10 initial entries : None for ' A ' , None for ' b ' , None for ' B ' , ' 0 ' for 'd ' , ' x ' for 'D ' ,"
nodelist . append ( node . render ( context ) ),"call the method node.render with an argument context , append the result to the nodelist ."
"def get many ( self , keys , version = None ) :","define the method get_many with self class instance , keys and version defaulting to None as arguments ."
for field in concrete model .  meta . local fields :,"for every field in concrete_model._meta.local_fields ,"
if t is not None :,"if t is not None ,"
global  default,use global variable _default .
return self .   offset,return self.__offset .
"if ( is in stance ( fp , file ) and is in stance ( data , unicode ) and fp . encoding is not None ) :","if fp is an instance of file and data is an instance of unicode and fp.encoding is not None ,"
REQUEST = property (  get request ),_get_request is getter function for REQUEST attribute of this class .
except OSError as e :,"if OSError renamed to e , exception is caught ,"
try :,"try ,"
return lookup view,return lookup_view .
return False,return boolean False .
token . lineno = self . lineno,substitute self.lineno for token.lineno .
"def content ( self , value ) :",define the method content with 2 arguments : self and value .
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
timezone = get current timezone ( ),"call the function get_current_timezone , substitute the result for timezone ."
result args [ i ] . append ( param ),append param to i-th element of result_args .
"elif not is in stance ( sep , str ) :","otherwise if sep is not an instance of string type ,"
return  trans . ugettext ( message ),call the method _trans.gettext_noop with an argument message .
return self . as table ( ),"call the method self.as_table , return the result ."
"if self . META . get ( STR_ , ) . startswith ( STR_ ) :","get the value under the 'CONTENT_TYPE ' key of the self.META dictionary , if it starts with a string 'multipart/form-data ' ,"
"user part , domain part = value . rsplit ( STR_ , NUM_ )","call the method value.rsplit with arguments character ' @ ' and integer 1 , assign the result to user_part and domain_part , respectively ."
else :,"substitute the result for offset . if not ,"
import sys,import module sys .
except AttributeError :,"if AttributeError exception is caught ,"
if six . PY2 :,"if six.PY2 is true ,"
return ipv4 unpacked,return ipv4_unpacked .
 supported = None,_supported is None .
"def create variable node ( self , filter expression ) :",define the method create_variable_node with 2 arguments self and filter_expression .
except :,"if any exception is caught ,"
class ModelChoiceIterator ( object ) :,derive the class ModelChoiceIterator from object base class .
class DebugNode ( Node ) :,derive the class DebugNode from Node base class .
if app config . models module is None :,"if app_config.models_module is None ,"
result . key = key,substitute key for result.key .
"def with metaclass ( meta , * bases ) :",define the function with_metaclass with 2 arguments meta and unpacked list bases .
"if hasattr ( message , STR_ ) :","if message has an 'error_dict ' attribute ,"
"self . empty value = kwargs . pop ( STR_ , [ ] )","if not , self.coerce is an identity lambda function with an argument val . if 'empty_value ' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value ,"
content = token string [ NUM_ : - NUM_ ] . strip ( ),"take elements of token_string from second to second last element and strip the whitespaces surrounding the result ,"
"WEEKDAYS REV = { STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ , STR_ : NUM_ }","result of the call to the function _ with an argument string 'Tue ' for 1 , result of the call to the function _ with an argument string 'Wed ' for 2 , result of the call to the function _ with an argument string 'Thu ' for 3 , result of the call to the function _ with an argument string 'Fri ' for 4 , result of the call to the function _ with an argument string 'Sat ' for 5 , and result of the call to the function _ with an argument string 'Sun ' for 6 . WEEKDAYS_REV is an dictionary with 7 entries : 0 for 'monday ' , 1 for 'tuesday ' , 2 for 'wednesday ' , 3 for 'thursday ' , 4 for 'friday ' , 5 for 'saturday ' and 6 for 'sunday ' ."
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
"elif ch == "" ^ "" :","otherwise if ch equals a string '^ ' ,"
"def sql delete ( app config , style , connection , close connection = True ) :","define the function sql_delete with 4 arguments : app_config , style , connection and close_connection set to boolean True ."
"def parse bits ( parser , bits , params , varargs , varkw , defaults , takes context , name ) :","define the function parse_bits with 8 arguments : parser , bits , params , varargs , varkw , defaults , takes_context and name ."
class StreamingBuffer ( object ) :,derive the class StreamingBuffer from the object base class .
from django . forms . widgets import *,from django.forms.widgets import everything into default name space .
def escape ( text ) :,define the function escape with an argument text .
if definition :,"if definition is true ,"
if self . field . choice cache is None :,"if self.field.choice_cache is None ,"
"child nodelists = ( STR_ , STR_ )",child_nodelists is an tuple with 2 elements : strings 'nodelist_loop ' and 'nodelist_empty ' .
try :,"try ,"
"if not is in stance ( value , ( list , tuple ) ) :","if value is not an instance of list or tuple types ,"
"help = "" STR_ """,help is an string `` Prints the DROP INDEX SQL statements for the given model module name ( s ) . `` .
from django . core import mail,from django.core import mail into default name space .
"self .   name = "" STR_ "" % ( sign , abs ( offset ) / NUM_ , abs ( offset ) % NUM_ )","self.__name is a string `` % s % 02d % 02d '' , replace ' % s ' with sign , ' % 02d ' is replaced with absolute value of offset divided by 60 ,"
self . content type = None,self.content_type is None .
now = datetime . utcnow ( ),"call the function datetime.utcnow , substitute the result for now ."
def copy ( self ) :,define the method copy with an argument self .
break,break from the loop execution .
assert token . contents == STR_,"if token.contents doesn not equals a string 'endif ' , raise an AssertionError exception ,"
"raise ImproperlyConfigured ( "" STR_ "" % loader )",raise an ImproperlyConfigured exception with an argument string `` Error importing template source loader % s - ca n't pass arguments to
"def   init   ( self , lexer ) :",define the method __init__ with 2 arguments : self and lexer .
self . asvar = asvar,substitute asvar for self.asvar .
if six . PY3 :,"if six.PY3 is true ,"
"raise AttributeError ( "" STR_ "" )",raise an AttributeError exception with an argument string `` This method is available only on the view class . `` .
app label = options [ STR_ ],substitute the value under the 'app_label ' key of options dictionary for app_label .
if not self . fail silently :,"if self.fail_silently is false ,"
"def created time ( self , name ) :","use the result as an argument for the call to the function datetime.fromtimestamp , return the result . define the method created_time with arguments self and name ."
return [ ],return an empty list .
self . active readers -= NUM_,"decrement self.active_readers by integer 1 ,"
return number,return number .
"if name . lower ( ) in ( from , STR_ ) :","convert name to lower case if it equals to string 'from ' or 'to ,"
BASE16 ALPHABET = STR_,BASE16_ALPHABET is a string '0123456789ABCDEF ' .
if response :,"if response is True ,"
"time str = date . strftime ( STR_ % ( dow , month ) )","call the function date.strftime with an argument string ' % s , % % d % s % % Y % % H : % % M : % % S ' formated with dow and month ,"
"confirm = in put ( "" "" "" STR_ "" "" "" % connection . settings dict [ STR_ ] )","request user input from the standard input , assign it o confirm , with the query string : `` You have requested a flush of the database . ''"
if value in self . empty values :,"if value is contained in self.empty_values ,"
if self . connector == conn type :,"if self.connector equals conn_type ,"
"def get connection ( backend = None , fail silently = False , ** kwds ) :","'SafeMIMEMultipart ' , 'DEFAULT_ATTACHMENT_MIME_TYPE ' , 'make_msgid ' , 'BadHeaderError ' , 'forbid_multi_line_headers ' , 'get_connection ' , 'send_mail ' , 'send_mass_mail ' , 'mail_admins ' and 'mail_managers ' . define function get_connection with backend set to None , fail_silently set to boolean False and dictionary kwds as arguments ."
while i < list length :,"while i is smaller than list_length ,"
return datetime . date ( ** kw ),"for every k and v in the previous result , add a key into a dictionary : v converted to an integer for k , substitute the resulting dictionary for kw . call the method datetime.date with an argument unpacked dictionary kw , return the result ."
cursor = connection . cursor ( ),"call the connection.cursor method , substitute the result for cursor ."
"end = kwargs . pop ( "" STR_ "" , None )","remove 'end ' key from the kwargs dictionary , if it exists substitute it for end , if not end is None ."
"raise CommandError ( "" STR_ "" % ( url , filename , e ) )","raise an CommandError exception with an argument string `` could n't download URL % s to % s : % s '' , where ' % s ' is replaced with url ,"
else :,"if not ,"
from importlib import import module,from importlib import import_module into default name space .
return,return nothing .
 cookie allows colon in names = True,_cookie_allows_colon_in_names is a boolean True .
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
format locations . append ( STR_ ),append string 'django.conf.locale. % s ' to format_locations .
"self . to field = kwargs . pop ( "" STR_ "" , None )","if not self.pk_field is boolean False . remove element from kwargs dictionary under the key 'to_field ' , substitute it for self.to_field if it exists ,"
return s . getvalue ( ),"evaluate the method s.getvalue , return the result ."
"def   new   ( cls , * args , ** kwargs ) :","define the method __new__ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs ."
"for name , app in six . iteritems ( get commands ( ) ) :","substitute the result for commands_dict . for every name and app in return value of the function six.iteritems calle with return argument of function get_commands as an arugment ,"
raise MultiPartParserError ( STR_ ),raise an MultiPartParserError with an argument string 'multipartparser.exhaust ( ) was passed a non-iterable or stream parameter ' .
self . new objects = [ ],self.new_objects is an empty list .
else :,"if not ,"
return klass,"str.__unicode__ ( ) .encode ( 'utf-8 ' ) , call the lambda function and put the result in the __str__ filed of klass . return klass ."
curr =,curr is an empty string .
self . object list = list ( self . object list ),convert self.object_list to a list .
"def get language from request ( request , check path = False ) :",define the function get_language_from_request with 2 arguments : request and check_path set to boolean False .
counters = [ NUM_ ] * len ( handlers ),counters is a list containing length of handlers number of zeros .
except KeyError :,"if KeyError exception is caught ,"
return it . next ( ),return next element of the iterable it .
if self . verbosity > NUM_ :,"if self.verbosity is greater than integer 1 ,"
"output . append ( widget . render ( name + STR_ % i , widget value , final attrs ) )","substitute the result for final_attrs . call the method widget.render with 3 arguments : string created by concatenation from : name , string ' _ ' and i , widget_value ,"
"scheme = template . split ( STR_ , NUM_ ) [ NUM_ ] . lower ( )","split template once at the first character ' : ' , convert the first element to lowercase and substitute it for scheme ."
if buffer  :,"if buffer_ is true ,"
"warnings . warn ( msg , RemovedInDjango19Warning , stacklevel = NUM_ )","call the function warnings.warn with 3 arguments : msg , RemovedInDjango19Warning and stacklevel as integer 2 ."
"return mark safe (  urlize ( value , trim url limit = in t ( limit ) , nofollow = True , autoescape = autoescape ) )","call the function _urlize with 4 arguments : value , trim_url_limit as limit converted into an integer , nofollow as boolean True ,"
continue,skip this loop iteration .
if str ( STR_ ) in value or str ( STR_ ) in value :,"convert '\n ' to a string , if it is contained in value or '\r ' converted to an string is contained in value ,"
"current = getattr ( current , bit )","get the bit attribute of current object , substitute it for current ."
def media ( request ) :,define the function media with an argument request .
return,return nothing .
"def   getitem   ( self , key ) :",define the method __getitem__ with 2 arguments : self and key .
"if hasattr ( self , STR_ ) :","if self has an attribute '_files ' ,"
"from django . utils . translation import ugettext lazy , pgettext lazy",from django.utils.translation import ugettext_lazy and pgettext_lazy into default name space .
from django . template . base import TemplateDoesNotExist,from django.template.base import TemplateDoesNotExist into default name space .
def   del   ( self ) :,define __del__ method with self as the argument .
"if not f . editable or is in stance ( f , models . AutoField ) or f . name not in cleaned data :","if f.editable is true and f is an instance of models.AutoField , or f.name is not contained in cleaned_data ,"
def content ( self ) :,define the method content with an argument self .
if settings . USE L10N :,"if settings.USE_L10N is true ,"
"wsgi opts [ STR_ ] = options [ "" STR_ "" ]",substitute the value under the 'socket ' key of options dictionary for value under the 'bindAddress ' key of wsgi_opts dictionary .
tables = connection . in trospection . django table names ( only existing = True ),"call the method connection.introspection.django_table_names with an argument boolean true , substitute the result for tables ."
self . extensions = handle extensions ( exts ),"call the function handle_extensions exts , substitute self.extensions ."
self . app name = app name,substitute app_name for self.app_name .
def as ul ( self ) :,"separated by newline , use it as an argument for the call to the function mark_safe , return the result . define the method as_ul with an argument self ."
def  post clean ( self ) :,define the method _post_clean with an argument self .
class HttpResponseNotFound ( HttpResponse ) :,derive the class HttpResponseNotFound from the HttpResponse base class .
kwargs = { },kwargs is a empty dictionary .
try :,"try ,"
return code,return code .
try :,"try ,"
import datetime,import module datetime .
"def load handler ( path , * args , ** kwargs ) :","name set to self.file_name , content_type set to self.content_type , size set to file_size , charset set to self.charset , and content_type_extra set to self.content_type_extra , return it . define the function load_handler with arguments : path , unpacked list args and unpacked dictionary kwargs ."
"self . stdout . write ( "" STR_ "" % ( len ( operations ) , len ( new operations ) ) )","replace ' % s ' in string `` Optimized from % s operations to % s operations . '' with lengths of operations and ew_operations , respectively ,"
"if args [ - NUM_ ] == "" as "" :","if third element from the end of the args equals string 'as ' ,"
"def pop ( self , k , * args ) :","define the method pop with 3 arguments : self , k and unpacked list args ."
def write ( data ) :,define the function write with an argument data .
for c in response . cookies . values ( ) :,"for every c in return value of the method response.cookies.values ,"
"except ( ValueError , TypeError ) :","if TypeError or ValueError exceptions are caught ,"
if has bz2 :,"tuple with 2 arguments : gzip.GzipFile and string 'rb ' for 'gz ' , tuple with 2 arguments : SingleZipReader and string ' r ' for 'gzip ' . if has_bz2 is true ,"
"super ( RadioChoiceInput , self ) .   init   ( * args , ** kwargs )","call the method __init__ from the base class of the class RadioChoiceInput , with 2 arguments : unpacked list args ,"
while rest :,"substitute it for d. while rest is true ,"
return data,return data .
value = STR_ . join ( reversed ( parts ) ),"reverse order of parts , join them into a string , separated with ' . ' , substitute the result for value ."
app template dirs = calculate app template dirs ( ),"call the function calculate_app_template_dirs , substitute the result for app_template_dirs ."
in ner . update ( password . translate ( hmac . trans 36 ) ),"append the result to password . call the method password.translate with an argument hmac.trans_36 , update inner dictionary with the result ."
try :,"try ,"
if attrs is not None :,"if attrs is not None ,"
  D = r STR_,__D is a raw string ' ( ? P < day > \d { 2 } ) ' .
@ property,"property decorator ,"
try :,"try ,"
