code,nl
def dec ( func ) :,and name set to None . define the function dec with an argument func .
 format cache [ cache key ] = None,value under the cache_key key of the _format_cache dictionary is None .
"result . setlist ( key , value )",call the method result.setlist with the arguments : key and value .
else :,"otherwise return boolean False . if not ,"
if required and ( in itial is not None ) :,"required set to boolean True , widget set to None , label set to None , initial set to None , help_text set to an empty string , to_field_name set to None , limit_choices_to set to None , unpacked list args and unpacked dictionary kwargs . if required is true and initial is not None ,"
self .   starttag text = rawdata [ i : endpos ],"slice the list from the i-th to the endpos-th element , substitute it for self.__starttag_text ."
for form in self . extra forms :,"for every form in self.extra_forms ,"
"nodelist = parser . parse ( ( STR_ , ) )","first element of bits and first element of remaining_bits . call the method parser.parse with an argument tuple , with an element string 'endwith ' , substitute the result for nodelist ."
data [ f . name ] = [ ],value under f.name key of the dta dictionary is an empty list .
prefix = STR_ % self . app or project,replace ' % s ' in string 'django_ % s_template_ ' with self.app_or_project .
"MIMEText .   init   ( self , text , subtype , None )","call the method MIMEText.__init__ with 4 arguments : self , text , subtype and None ."
"def trim url ( x , limit = trim url limit ) :",define the function trim_url with 2 arguments : x and limit set to trim_url_limit .
"if "" STR_ "" not in str ( te ) :","if string `` 'format ' '' is not contained in e converted into a string ,"
in  tag = False,in_tag is boolean False .
  contains   = has header,substitute has_header for __contains__ .
flup module = STR_ + options [ STR_ ],"append value under the 'protocol ' key of the options dictionary to the string 'server . ' , substitute it for flup_module ."
parts = NUM_  if version [ NUM_ ] == NUM_  else NUM_,"assign integer 2 to parts if third element of version equals to zero , otherwise assign it integer 3 ."
block context = context . render context [ BLOCK CONTEXT KEY ],"get the value under the BLOCK_CONTEXT_KEY key of the context.render_context dictionary , substitute it for block_context ."
"print ( "" STR_ "" % app config . label )","replace ' % s ' in string `` Running post-migrate handlers for application % s '' with app_config.label , print it to the standard output ."
raise InputStreamExhausted ( ),"raise an InputStreamExhausted exception ,"
self . in put formats = in put formats,substitute input_formats for self.input_formats .
"pending references . setdefault ( refto , [ ] ) . extend ( refs )","call the method pending_references.setdefault with 2 arguments : refto and an empty list , extend the result with refs ."
"raise ImproperlyConfigured ( "" STR_ "" "" STR_ "" )",raise an ImproperlyConfigured with an argument string `` Calling modelform_factory without defining 'fields ' or 'exclude ' explicitly is prohibited . ''
"test runner class = get runner ( settings , self . test runner )","default set to None and help set to string 'Overrides the default address where the live server ( used ' 'with LiveServerTestCase ) is expected to run from . The default value is localhost:8081 . ' call the function get_runner with arguments settings and self.test_runner , substitute the result for test_runner_class ."
self .  stream . unget ( unused char ),call the method self._stream.unget with an argument unused_char .
"groupid = "" STR_ "" % tok . id",groupid is a string `` t % d '' formated with tok.id .
"def  reset dicts ( self , value = None ) :",define the method _reset_dicts with 2 arguments : self and value set to None .
self . kwargs = kwargs,substitute kwargs for self.kwargs .
"out . write ( blankout ( p , STR_ ) )","call the function blankout with 2 arguments : p and ' F ' , write the result to out ."
get supported language variant . cache clear ( ),call the method get_supported_language_variant.cache_clear .
def save m2m ( ) :,"where ' % s ' is replaced with opts.object_name and fail_message , respectively . define the function save_m2m ."
"self . set ( key , new value , version = version )","call the self.set method with key , new_value and version set to version as arguments ."
except IndexError :,"if IndexError exception is caught ,"
self . pubid = pubid,substitute pubid for self.pubid .
from django . utils . deprecation import RemovedInDjango19Warning,from django.utils.deprecation import RemovedInDjango19Warning into default name space .
"from django . db import connections , router , transaction , DEFAULT DB ALIAS","from django.db import connections , router , transaction and DEFAULT_DB_ALIAS into default name space ."
def close ( self ) :,define the method close with argument self .
return b . join ( self .  container ),"join self._container elements into a string , return it ."
class Atom1Feed ( SyndicationFeed ) :,derive the class Atom1Feed from the SyndicationFeed base class .
except ImportError :,if ImportError exception is caught .
self .  charset = settings . DEFAULT CHARSET,substitute settings.DEFAULT_CHARSET for self._charset .
exp = datetime . max,substitute the datetime.max for exp .
if alias not in settings . CACHES :,"if alias is not contained in setting.CACHES ,"
"def   init   ( self , name , value , attrs , choice , in dex ) :","define the method __init__ with 6 arguments : self , name , value , attrs , choice and index ."
for filename in files :,"for every filename in files ,"
"def memoize ( func , cache , num args ) :","define the function memoize with 3 arguments : func , cache and num_args ."
"super ( QueryDict , self ) .   init   ( )",call the __init__ method of the base class of the QueryDict class .
"return BlockNode ( block name , nodelist )","return an instance of a BlockNode class , created with 2 arguments : block_name and nodelist ."
return value,return value .
yield emitting,yield emitting as result of the generator .
oldkey = root [ KEY ],substitute value under the KEY key of the root dictionary for oldkey .
"targets = set ( STR_ . join ( ( fixture name , suffix ) ) for suffix in suffixes )","perform the previous for every combo in result of the function product called with 3 arguments : databases , ser_fmts and cmp_fmts , substitute the result for suffixes . join fixture_name and suffix into a string , separated by ' . ' for every suffix in suffixes , put the results in set , substitute it for targets ."
elif child . nodeType == child . ELEMENT NODE :,"otherwise if child.nodeType equals to child.ELEMENT_NODE ,"
m = IDENTIFIER . match ( s ),"match string s with regex IDENTIFIER , substitute the result for m ."
if rel to in known models :,"otherwise call the method table2model with second element of the i-th row of relations and substitute it for rel_to . if rel_to is contained in known_models ,"
except UnicodeError :,"substitute the result for netloc . if UnicodeError exception is caught ,"
"return format html ( STR_ , format html join ( , STR_ , ( ( k , force text ( v ) ) for k , v in self . items ( ) ) ) )","call the function format_html with 2 arguments : string ' < ul class= '' errorlist '' > { 0 } < /ul > ' , and return value of the function ,"
def  setup ( self ) :,define the method _setup with an argument self .
"warnings . warn ( "" STR_ "" , RemovedInDjango19Warning , stacklevel = NUM_ )","call the function warnings.warn with 3 arguments : string `` django.utils.unittest will be removed in Django 1.9 . `` ,"
result . extend ( [ result [ - NUM_ ] ] * ( count - NUM_ ) ),"create a list with count decremented by 1 number of last element of result elements , extend list result with it ."
self . stdout . write ( output ),write the result to the self.stdout stream . write output to self.stdout stream .
height = property (  get height ),"get property attribute _get_height , and substitute it for width ."
graph = loader . graph,substitute loader.graph for graph .
"mail = EmailMultiAlternatives ( STR_ % ( settings . EMAIL SUBJECT PREFIX , subject ) , message , settings . SERVER EMAIL , [ a [ NUM_ ] for a in settings . ADMINS ] , connection = connection )","call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated ,"
"def   deepcopy   ( self , memo ) :",and result of the method self.__getstate__ . define the method __deepcopy__ with 2 arguments self and memo .
"parser . add argument ( STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","call the add_argument method on parser object , use string ' -- database ' , default set to DEFAULT_DB_ALIAS and help set to string ,"
"javascript quote = allow lazy ( javascript quote , six . text type )","call the function allow_lazy with 2 arguments : javascript_quote and six.text_type , substitute the result for javascript_quote ."
def as data ( self ) :,define the method as_data with an argument self .
defaults [ STR_ ] = self . in itial [ i ],substitute i-th element of self.initial for value under the 'initial ' key of the defaults dictionary .
self . items . append ( item ),append item to self.items .
stream or string = stream or string . read ( ),"call the stream_or_string.read function , substitute the result for stream_or_string ."
self . pos = NUM_,self.pos is integer 0 .
"app path = getattr ( settings , STR_ )","get 'WSGI_APPLICATION ' attribute from the settings , substitute it for app_path ."
"def csrf token ( parser , token ) :",define the function csrf_token with 2 arguments : parser and token .
"return dict ( ( k , repr ( v ) ) for k , v in module .   dict   . items ( ) if not omittable ( k ) )","return dictionary created out of tuple elements k and printable representation of v ,"
"response = middleware method ( request , response )","call the function middleware_method with request and response as the arguments , substitute the result for response ."
if app config . models module is None or app config in excluded apps :,"if app_config.models_module is None or app_config is contained in excluded_apps ,"
except StandardError as e :,"if StandardError , renamed to e , exception is caught ,"
"k , v = x . split ( = , NUM_ )","call the x.split method with arguments : character '= ' and integer 1 , store the result in k and v , respectively ."
return get git changeset . cache,return get_git_changeset.cache .
self . file . seek ( NUM_ ),position the file pointer at the start of the self.file file .
"def localize input ( value , default = None ) :",define the function localize_input with 2 arguments value and default set to None .
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` widthratio takes at least three arguments '' .
output = [ ],outut is an empty list .
self . in voked for django = True,self.invoked_for_django is boolean True .
with self . mutex :,"with self.mutex perform ,"
except AmbiguityError :,"if AmbiguityError exception is caught ,"
"se = open ( err log , STR_ , buffering )","open err_log flie in append mode with buffering size of input buffer , substitute the result for se ."
"with io . open ( fname , STR_ ) as f :","with call to the io.open function with fname and string 'rb ' as arguments , renamed to f ,"
if httponly :,"if httponly is true ,"
capfirst = lambda x : x and force text ( x ) [ NUM_ ] . upper ( ) + force text ( x ) [ NUM_ : ],"if identity lambda function returns false , substitute the x for capfirst , if not call the function force_text with an argument x ,"
for error in self . error list :,"for every error in self.error_list ,"
value = None,value is None .
"except ( KeyError , IndexError , AttributeError ) :","if KeyError , IndexError and AttributeError exception is caught ,"
"parser . add argument ( STR_ , default = , help = STR_ )","default set to boolean True and help set to string 'Tells Django to NOT prompt the user for input of any kind. ' . call the parser.add_argument with string ' -- addrport ' , default set to an empty string and help as string 'Port number or ipaddr : port to run the server on . ' ."
"assert not is in stance ( to , six . string types ) , STR_",if to is not an six.string_types instance raise an error with message string ' '' to '' argument must be a list or tuple ' .
"os . symlink ( or iginal path , symlink path )",make a system symbolic link between original_path and symlink_path .
kwargs = { },kwargs is an empty dictionary .
"  all   = ( STR_ , STR_ , )","__all__ is a tuple , containing strings 'NamedTemporaryFile ' and 'gettempdir ' ."
"in put attrs = dict ( value = force text ( v ) , ** final attrs )","unpack dictionary final_attrs , map the values through force_text function with an argument v and convert it to a dictionary , again ,"
if self . data . hour > NUM_ :,"if self.data.hour is greater than integer 11 ,"
"self . stdout . write ( self . style . MIGRATE HEADING ( "" STR_ "" % writer . path ) )","replace ' % s ' in a string `` Created new squashed migration % s '' with writer.path , use it as an argument for the call to the method ,"
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = "" STR_ "" )","default set to boolean False and help set to a string `` Enable fixing of migration conflicts. '' . call the method parser.add_argument with 5 arguments : string ' -- empty ' , action as a string 'store_true ' , dest as a string 'empty ' ,"
"def save ( self , name , content ) :","define the method save with arguments self , name and content ."
kwargs [ STR_ ] = help texts [ f . name ],substitute value under the f.name key of the help_texts dictionary for value under the 'help_text ' key of kwargs dictionary .
return self . pointer < len ( self . subject ),"if self.pointer is smaller than length of self.subject , return boolean True , otherwise return False ."
parentloop = { },parentloop is an empty dictionary .
self . translate = True,self.translate is boolean True .
"def   eq   ( self , other ) :",define the method __eq__ with arguments self and other .
if model list is None :,"if model_list is None ,"
seen data . add ( row data ),add row_data to seen_data set .
if len ( bits ) ! = NUM_ :,"if length of bits is not equal to integer 2 ,"
"formfield callback = attrs . pop ( STR_ , None )","remove entry under the 'formfield_callback ' key of the attrs dictionary , if it exists substitute if for formfield_callback ,"
ctx = hashlib . md5 ( ),"ctx is an hashlib object , for calculating hash function with md5 algorithm ."
"def accessed time ( self , name ) :",define the method accessed_time with arguments self and name .
modified code = None,modified_code is None .
from IPython . Shell import IPShell,from IPython.Shell import IPShell into default namespace .
value = float ( value ),"convert value into an floating point number , substitute it for value ."
elif autoescape :,"otherwise if autoescape is true ,"
"call command ( STR_ , STR_ , ** options )","call the function call_command with 3 arguments : string 'loaddata ' , string 'initial_data ' and unpacked dictionary options ."
line = buffer  + line,increment line by buffer_ .
best doublecolon end = ( best doublecolon start + best doublecolon len ),"sum best_doublecolon_start and best_doublecolon_len , substitute the result for best_doublecolon_end ,"
for f in fields :,"for every f in fields ,"
obj . delete ( ),call the method obj.delete .
if self . empty :,"result of the method ProjectState.from_apps with an argument apps and result of the method InteractiveMigrationQuestioner , called with 2 arguments specified_apps set to app_labels and dry_run set to self.dry_run . if self.empty is true ,"
class BadHeaderError ( ValueError ) :,derive the class BadHeaderError from the ValueError base class .
timeout += in t ( time . time ( ) ),"convert return value of the function time.time to an integer , increment timeout by it ."
"if in t ( hextet , NUM_ ) < NUM_ x0 or in t ( hextet , NUM_ ) > NUM_ xFFFF :","if hextet converted to hexadecimal number is smaller than hexadecimal 0 , or hextet converted to hexadecimal number is smaller than hexadecimal FFFF ,"
value = formats . sanitize separators ( value ),"call the method formats.sanitize_separators with an argument value , substitute the result for value ."
return value . strftime ( format ),"get_format called with an argument string 'DATETIME_INPUT_FORMATS ' , substitute the result for format . call the method value.strftime with an argument format , return the result ."
return dummy ( ),return an instance of a dummy class .
self . check migrations ( ),call the method self.check_migrations .
except OverflowError :,"if OverflowError exception is caught ,"
return self .  get image dimensions ( ) [ NUM_ ],return the first element of the return value of the call to the self._det_image_dimensions method .
self . encoding = content params [ STR_ ],"get the value under the 'charset ' key of content_params dictionary , substitute it for self.encoding ."
for filename in locale filenames :,"for every filenam in locale_filenames ,"
"def tzname ( self , dt ) :",define the method tzname with 2 arguments self and dt .
for dict  in self . dicts :,"for every dict_ in self.dicts ,"
new ip = ip str . split ( STR_ ),"split ip_str into parts by ' : ' , substitute the result for new_ip ."
return . join (  generator ( ) ),"call the function _generator , join the result into a string , return the result ."
"special floats = [ str ( pos inf ) , str ( neg inf ) , str ( nan ) ]","special_floats is an list with 3 elements , pos_inf , neg_inf and nan , all converted to strings ."
return make middleware decorator ( middleware class ),"call the function make_middleware_decorator with an argument middleware_class , return the result ."
logger . level = logging . NOTSET,substitute logging.NOTSET for logger.level .
"s = s . replace ( STR_ , STR_ )",replace every occurrence of ' < / ' in s with ' < \\/ ' .
from django . utils import baseconv,from django.utils import baseconv into default name space .
from django . utils . six . moves import  dummy thread as thread,from django.utils.six.moves import _dummy_thread as thread into default name space .
attrs = attrs or { },"if attrs is false , make it an empty dictionary ."
"def pluralize ( value , arg = STR_ ) :",define the function pluralize with 2 arguments value and arg set to character 's ' .
data value = data if data is not None else,"if data is not None , substitute data for initial_value , otherwise data_value is an empty string ."
i = self . pointer,substitute self.pointer for i .
other = other .   cast ( ),"call the method other.__cast , substitute the result for other ."
"from django . utils . translation import get language , to locale , check for language","from django.utils.translation import get_language , to_locale and check_for_language into default name space ."
view path = url name or self .  func path,"if url_name exists substitute it for view_path , if not substitute .self._func_path for view_path ."
"def   ne   ( self , other ) :",define the method __ne__ with self and other as arguments .
if self . translate :,"if self.translate is true ,"
self . func = func,substitute func for self.func .
found = False,found is boolean False .
deactivate ( ),call the method deactivate .
import unicodedata,import module unicodedata .
"def urlencode ( value , safe = None ) :",define the function urlencode with 2 arguments value and safe set to None .
from django . utils . encoding import smart text,from django.utils.encoding import smart_text into default name space .
from   future   import absolute import,from __future__ import absolute_import into default name space .
"return force str ( STR_ % ( self .   class   .   name   , self . name , self . regex . pattern ) )","substitute ' % s ' in string ' < % s % s % s > ' with self.__class__.__name__ , self.name and self.regex.pattern , respectively ,"
"def get unique error message ( self , unique check ) :",define the method get_unique_error_message with 2 arguments : self and unique_check .
"self .  func path = STR_ . join ( [ func .   module   , func .   name   ] )","join func.__module__ and func.__name__ into a string , separated by character ' . ' , substitute it for self._func_path ."
rfcdate = formatdate ( epoch seconds ),"call the function formatdate with an argument epoch_seconds , substitute the result for rfcdate ."
self . files = files or { },"if data is true , substitute it for self.files , otherwise self.files is an empty dictionary ."
"return super ( Critical , self ) .   init   ( CRITICAL , * args , ** kwargs )","call the __init__ method with 3 arguments : CRITICAL , unpacked list args and unpacked dictionary kwargs from the base class of Critical ."
except IOError :,"previous result and filepath . if IOError exception is caught ,"
field params = { },field_params is an empty dictionary .
"output . append ( "" STR_ "" % ( key , user settings [ key ] ) )","replace ' % s ' in string `` % s = % s # # # '' with key and value under the key key of the user_setting dictionary , append it to the output ."
definition [ STR_ ] = fg,substitute fg for value under the 'fg ' key of definition dictionary .
class SyndicationFeed ( object ) :,derive the class SyndicationFeed from the object base class .
temp lib = Library ( ),temp_lib is an instance of Library class .
"def handle ( self , ** options ) :",define the method handle with 2 arguments : self and unpacked dictionary options .
if not self . connection :,"if self.connection is false ,"
"middle = STR_ % ( url , nofollow attr , trimmed )","substitute the result for trimmed . middle is a string ' < a href= '' % s '' % s > % s < /a > ' formated with url , nofollow_attr and trimmed ."
self . cookies [ key ] [ STR_ ] = cookie date ( time . time ( ) + max age ),"get the value under the key key of the self.cookies dictionary , call the cookie_date function with an argument :"
output . append ( STR_ ),append string ' < /select > ' to output .
if ch == STR_ :,"if ch equals a string ' ? ' ,"
if  default is None :,"if _default is None ,"
middle = middle [ : - len ( closing ) ],"substitute elements of middle from the beginning to the negative length of closing , for middle ."
httpd cls = WSGIServer,substitute WSGIServer for httpd_cls .
def reader leaves ( self ) :,define the method reader_leaves with an argument self .
"in itial = self . in itial . get ( name , field . in itial )","get the value under the name key of the self.initial dictionary , if it exists substitute it for initial ,"
self . cache choices = cache choices,substitute cache_choices for self.cache_choices .
break,breaks from the smallest enclosing loop execution .
from django import http,from django import http into default name space .
if max length is not None :,"if max_length is not None ,"
saved locale = translation . get language ( ),"call the method translation.get_language , substitute th result for saved_locale ."
if parts [ - NUM_ ] in self . serialization formats :,"if last element of parts is contained in self.serialization_formats ,"
return t,return t .
"if is subclass ( klass , logging . handlers . MemoryHandler ) and STR_ in config :","substitute the result for klass . if klass is a subclass of logging.handlers.MemoryHandler base class and string 'target ' is contained in config ,"
new ip = hextet [ NUM_ ] . split ( STR_ ),"split first element of hextet into parts by ' : ' , append them to new_ip ."
"warnings . warn ( "" STR_ "" "" STR_ "" , RemovedInDjango19Warning , stacklevel = NUM_ )",call the function warnings.warn with 3 arguments : string `` django.utils.tzinfo will be removed in Django 1.9. ``
"sys . modules [   name   + "" STR_ "" ] = sys . modules [   name   + "" STR_ "" ] = Module six moves urllib request (   name   + "" STR_ "" )","call the method Module_six_moves_urllib_request with an argument : string `` .moves.urllib.request '' appended to __name__ ,"
from django . utils .  os import upath,from django.utils._os import upath into default name space .
if fd >= NUM_ :,if fd is greater or equal to integer 0 .
keys = node . getElementsByTagName ( STR_ ),"call the method node.getElementsByTagName with the argument string 'natural ' , substitute the result for keys ."
elif param in kwargs :,"where ' % s ' are replaced with name and param . otherwise if param is contained in kwargs ,"
"localpart , domain = addr . split ( STR_ , NUM_ )","call the addr.split method with character ' @ ' and integer 1 as arguments , substitute the result for localpart and domain , respectively ."
import operator,import module opera .
def split domain port ( host ) :,define the function split_domain_port with an argument host .
attrs [ STR_ ] = fields,substitute fields for value under the 'fields ' key of attrs dictionary .
possible sizes = [ x . chunk size for x in upload handlers if x . chunk size ],"for every x in upload_handlers if x.chunk_size is true , append x.chunk_size to a list , substitute the result for possible_sizes ."
app labels = set ( app labels ),"if not , self.empty is boolean False . crate a set containing of app_labels elements , substitute it for app_labels ."
raise,raise the exception .
def id for label ( self ) :,define the method id_for_label with an argument self .
"options += [ ( sorted ( s opt . option strings ) [ NUM_ ] , s opt . nargs ! = NUM_ ) for s opt in parser .  actions if s opt . option strings ]","append to options a tuple containing 2 entries : firs element of sorted list of the s_opt.option_strings ,"
self . models = set ( ),self.models is an empty set .
"return getattr ( self ,  assertRegex ) ( * args , ** kwargs )","get _assertRegex attribute of the self object , call the result with 2 arguments : unpacked list args ,"
"super ( Command , self ) . add arguments ( parser )",call the parent class of Command class add_arguments method and parser as the arguments .
return node . render ( context ),"call the method node.render with an argument context , return the result ."
self . base = base,substitute base for self.base .
"if hasattr ( handler , STR_ ) :","if handler has an attribute 'file ' ,"
elif token string . startswith ( COMMENT TAG START ) :,"otherwise if token_string starts with COMMENT_TAG_START ,"
arg = ugettext ( STR_ ),"call the function ugettext with string 'yes , no , maybe ' as an argument , substitute the result for arg ."
streaming = False,streaming is boolean False .
raise ContextPopException,raise an ContextPopException .
"def   init   ( self , name , regex , next = None ) :","define the method __init__ with 4 arguments : self , name , regex and next set to None ."
"return tuple ( a for a in WRAPPER ASSIGNMENTS if hasattr ( fn , a ) )","if fh has an attribute a , for every a in WRAPPER_ASSIGNMENTS , put a into a tuple , return the resulting tuple ."
return None,return None .
if not package :,"if package is false ,"
"db = options . pop ( STR_ , DEFAULT DB ALIAS )","remove the value under the 'using ' key from the options dictionary , assign it to the db , if the entry doesnt exists ,"
return self . paginator . validate number ( self . number + NUM_ ),"call the method self.paginator.validate_number with self.number incremented by 1 as argument , return the result ."
from django . core . validators import EMPTY VALUES,from django.core.validators import EMPTY_VALUES into default name space .
return SafeText ( s ),"return an instance of SafeText , created with an argument s ."
return header . lower ( ) in self .  headers,"convert deader to lowercase , if it is contained in self._headers return boolean True , if not , return boolean False ."
class SlugField ( CharField ) :,derive the class SlugField from the base class CharField class .
raise SystemRestart,"raise an SystemRestart exception ,"
return self . queryset . none ( ),"call the method self.queryset.none , return the result ."
"self . stdout . write ( "" STR_ "" % migration , ending = "" "" )","call the self.stdout.write method , with string `` Unapplying % s ... '' with ' % s ' replaced with migration and ending set to `` , as arguments ."
if os . path . exists ( name ) :,"if os.path.exists function with argument name , evaluates to boolean True ,"
"super ( MultiWidget , self ) .   init   ( attrs )","if not append w to the list , substitute the resulting list for self.widgets . call the method __init__ from the base class of the class MultiWidget , with an argument attrs ."
"nodelist = parser . parse ( ( STR_ , ) )","call the method parser.parse with an argument tuple with an element string 'endif ' , substitute the result for nodelist ."
"raise CommandError ( "" STR_ "" % app label )","raise CommandError exception with `` App ' % s ' does not have migrations ( you can not selectively sync unmigrated apps ) '' ,"
ungettext = ngettext,substitute ngettext for ungettext .
default translation = translation ( settings . LANGUAGE CODE ),"call the function translation with an argument settings.LANGUAGE_CODE , substitute the result for default_translation ."
"def add blocks ( self , blocks ) :",define the method self and blocks .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = "" STR_ "" )","and help as a string 'Specify the app label ( s ) to create migrations for. ' . call the method parser.add_argument with 5 arguments : string ' -- dry-run ' , action as a string 'store_true ' , dest as string 'dry_run ' ,"
"view func = getattr ( mod , func name )","get func_name attribute from the mod object , substitute it for view_func ."
from django . utils . encoding import force text,from django.utils.encoding import force_text into default name space .
class FilePathField ( ChoiceField ) :,derive the class FilePathField from the base class ChoiceField class .
class UploadedFile ( File ) :,derive the UploadedFile class from the File base class .
yield self . choice ( obj ),"call the method self.choice with an argument obj , yield the result ."
"warnings . warn ( "" STR_ "" % ( class name , old method name , new method name ) , deprecation warning , NUM_ )","call the function warnings.warn with 3 arguments : string `` ` % s. % s ` method should be renamed ` % s ` . `` ,"
return s,return s .
level += NUM_,increment level by one .
"return Truncator ( value ) . words ( length , html = True , truncate = STR_ )","instantiate class Truncator , with an argument value , call the method words on the result with 3 arguments length ,"
"def in valid block tag ( self , token , command , parse until = None ) :","define the method invalid_block_tag with 4 arguments : self , token , command and parse_until as None ."
"setattr ( self , attr , value )",set attr attribute of the self object to value .
leave locale alone = True,leave_locale_alone is boolean True .
"def   init   ( self , obj , m2m data = None ) :","define the method __init__ , with 3 arguments : self , m2m and data set None ."
"self . command stack . append ( ( command , token . source ) )","append tuple with 2 elements : command and token.source , append the result to self.command_stack ."
"raise CommandError ( "" STR_ "" % ( filename , tempdir , e ) )","raise an CommandError with an argument string `` could n't extract file % s to % s : % s '' , where ' % s ' is replaced with filename , tempdir and e ."
return self . stream . getvalue ( ),"evaluate self.stream.getvalue method , return the result ."
check for language = lambda x : True,check_for_language is lambda function that returns boolean True for every argument x .
return os . path . getsize ( self . path ( name ) ),"call the self.path with argument name , use the result as an argument for the call to the os.path.getsize function , return the result ."
"from django . core . management . sql import custom sql for model , emit post migrate signal , emit pre migrate signal","from django.core.management.sql import custom_sql_for_model , emit_post_migrate_signal and emit_pre_migrate_signal into default name space ."
"for field , error list in error . items ( ) :","call the method error.items , for every field and error_list in the result ,"
parts = [ ],parts is an empty list .
return smart text ( token ),"call the smart_text function with an argument token , return the result ."
param = . join ( name ),"join elements of name into a string , substitute it for param ."
  bytes   = new method proxy ( bytes ),"call the function new_method_proxy with an argument bytes , substitute the result for __bytes__ ."
if transaction . get autocommit ( self . using ) :,"call the method transaction.get_autocommit with an argument self.using , if it evaluates to true ,"
"if not is in stance ( viewname , six . string types ) :","if viewname is not an instance of the six.string_types object ,"
if len ( list  ) == NUM_ :,"if length of list_ equals integer 1 ,"
"return middleware . process response ( request , response )","call the method middleware.process_response with 2 arguments : request and response , return the result ."
def  createdir ( self ) :,define the method _createdir with argument self .
parts = t . contents . split ( | ),"split t.contents by '| ' symbol , substitute the result for parts ,"
def   iter   ( self ) :,define the method __iter__ with an argument self .
"name = "" STR_ "" % num args",name is a string `` _ % d '' formated with num_args .
sub tried = e . args [ NUM_ ] . get ( STR_ ),"call the get method with an argument string 'tried ' on the first element of the e.args , substitute the result for sub_tried ."
"yield ch , False",yield ch and boolean False .
curs . execute ( statement ),execute statement on the database that curs points to .
while not bit . endswith ( sentinal ) :,"while bit doesnt end with sential ,"
self . run validators ( value ),call the method self.run_validators with an argument value .
self .  done = True,self._done is boolean True .
"raise ValueError ( "" STR_ "" "" STR_ "" )","raise an ValueError exception with argument string `` EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive , so only set one of those settings to True . `` ."
os . makedirs ( or iginal path ),make a directory named original_path .
attrs . update ( { STR_ : str ( self . max length ) } ),update attrs dictionary with entry : self.max_length converted into a string for 'maxlength ' .
if six . PY3 :,"if six.PY3 is true ,"
"def   init   ( self , max length = None , min length = None , * args , ** kwargs ) :","define the method __init__ with 5 arguments : self , max_length set to None , min_length set to None , unpacked list args ,"
if x == NUM_ :,"if x equals to integer 0 ,"
class Serializer ( base . Serializer ) :,derive Serializer from the base.Serializer base class .
"def lazy ( func , * resultclasses ) :",define the function lazy with 2 arguments : func and unpacked list resultclasses .
asvar = None,asvar is None .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ )","and help is a string 'Migrations will be squashed until and including this migration. ' . call the method parser.add_argument with 5 arguments : string ' -- no-optimize ' , action as a string 'store_true ' ,"
id = None,id is None .
self .  urlconf module = import module ( self . urlconf name ),"call the function import_module with argument self.urlconf_name , substitute the result for self._urlconf_module ."
while self . tokens :,"while self.tokens is true ,"
default attrs . update ( attrs ),update default_attrs dictionary with attrs entry .
"tpl = "" STR_ ""","tpl is an string `` ExternalReferenceForbidden ( system_id= ' { } ' , public_id= { } ) '' ."
"if filter name in ( STR_ , STR_ ) :","if every filter_name in strings 'escape ' or 'safe ' ,"
if not ip str . lower ( ) . startswith ( STR_ ) :,"convert ip_str to lowercase , if it doesnt start with a string '0000:0000:0000:0000:0000 : ffff : ' ,"
package name = package .   name  ,substitute package.__name__ for package_name .
src data = fp . read ( ),"perform the following : call the method fp.read , substitute the result for src_data ."
def has next ( self ) :,define the method has_next with an argument self .
"def   init   ( self , object list , per page , or phans = NUM_ , allow empty first page = True ) :","def the method __init__ with 5 arguments : self , object_list , per_page , orphans set to integer 0 and allow_empty_first_page set to boolean True ."
else :,"format the string ' < p > % s < /p > ' with the result , for every p in paras , substitute list of results for paras . if not ,"
"return quote ( force bytes ( iri ) , safe = b "" STR_ "" )","call the function quote with return value of the evaluated function force_bytes ( iri ) ,"
"def   init   ( self , context , base , sysid , pubid ) :","define the method __init__ with arguments self , context , base , sysid and pubid ."
get = ( pformat ( GET override ) if GET override is not None else pformat ( request . GET ) ),"get is a tuple containing elements generated by the call to the function pformat with an argument GET_override ,"
break,break the loop execution .
p = PillowImageFile . Parser ( ),"p is image parser object , set by calling the PillowImageFile.Parser method ."
"for key , value in dict . items ( self ) :","for every key and value in items of dictionary self ,"
zfile . write ( item ),write item to zfile stream .
"def contains ( source , in st ) :",define the function contains with 2 arguments source and inst .
del self .  cache [ key ],delete the value under the key key of self._cache dictionary .
return self .  errors,return self._errors .
return  serializers [ format ] . Deserializer,"get the value under the format key of the _serializers dictionary , return the Deserializer filed of the result ."
value = normalize newlines ( value ),"call the function normalize_newlines with an argument value , substitute the result for value ."
klass = import string ( backend or settings . EMAIL BACKEND ),"call the function import_string with backend if exists or settings.EMAIL_BACKEND if not , store the result into klass ."
message = e,substitute e for message .
if self . check test ( value ) :,"call the method self.check_test with an argument value , if it evaluates to true ,"
return self .  coerce ( value ),"call the method self._coerce with an argument value , return the result ."
color settings = termcolors . parse color setting ( DJANGO COLORS ),"call the function termcolors.parse_color_setting with DJANGO_COLORS as an argument , assign the result to color_settings ."
"statements = sql all ( app config , self . style , connection )","call the function sql_all with 3 arguments : app_config , self.style and connection , substitute the result for statements ."
"from django . utils . crypto import constant time compare , salted hmac",from django.utils.crypto import constant_time_compare and salted_hmac into default name space .
program = STR_,program is string 'msgfmt '
out . write ( STR_ % line ),"substitute ' % s ' in string ' # % s ' with line , write it to out file ."
"warnings . warn ( STR_ % or iginal lookup , RemovedInDjango20Warning , stacklevel = NUM_ )","call the function warnings.warn with 3 arguments : string 'Reversing by dotted path is deprecated ( % s ) . ' , with ' % s ' replaced with"
"models . Model . save base ( self . object , using = using , raw = True )","call the models.Model.save_base method with arguments self.object , using as using and raw set to boolean True ."
is  dst = False if dt is None else self .  isdst ( dt ),"if dt is None is_dst is boolean False , otherwise call the method self._isdst with an argument dt , substitute the result for is_dst ."
"handlers = config . get ( STR_ , EMPTY DICT )","get config dictionary element under 'handlers ' key , if it exists substitute it for handlers , if not , handlers is EMPTY_DICT ."
"def  proxy method ( self , * args , ** kwargs ) :","define the method _proxy_method with 3 arguments self , unpacked list args and unpacked dictionary kwargs ."
self . setlistdefault ( key ) . append ( value ),"call the method self.setlistdefault with an argument key , append value to the result ."
"def to python ( self , data ) :",define the method to_python with arguments self and data .
self .  close files ( ),call the method self._close_files .
obj = self . var . resolve ( context ),"call the method self.var.resolve with an argument context , substitute it for obj ."
"def handle ( self , * test labels , ** options ) :","define the method handle with 3 arguments : self , unpacked list test_labels and unpacked dictionary options ."
elif maxsize is None :,"otherwise if maxsize is None ,"
if not path info :,"if path_info is empty ,"
raise ImportError,raise an ImportError exception .
is  reversed = bits [ - NUM_ ] == STR_,where ' % s ' is replaced with token.contents . assign the string 'reversed ' to is_reversed and bits last elements .
import operator,import module operator .
HTMLParseError =  html parser . HTMLParseError,"or if current_version is greater than ( 3,0 ) , but smaller than ( 3,2,3 ) , otherwise set use_workaround to boolean False . substitute HTMLParseError from the module _html_parser for HTMLParseError ."
self . fixture count += NUM_,increment self.fixture_count by one .
dec part = dec part + ( STR_ * ( decimal pos - len ( dec part ) ) ),"subtract length of dec_part from decimal_pos , multiply the number of character ' 0 ' by the result ,"
"def handle field ( self , obj , field ) :","define the method handle_field with arguments self , obj and field ."
value = to current timezone ( value ),"call the function to_current_timezone with an argument , substitute the result for value ."
return dec ( func ),"call the function dec with an argument func , return the result ."
except ValidationError as e :,"if ValidationError renamed to e , exception is caught ,"
"handler . addQuickElement ( "" STR_ "" , item [ STR_ ] )",call the method handler.addQuickElement with 2 arguments : string 'comments ' and value under the 'comments ' key of the item dictionary .
view name = self . view name . resolve ( context ),"result of the call to the method v.resolve with an argument context , for result of the function smart_text called with 2 arguments k and string 'ascii ' . call the method self.view_name.resolve with an argument context , substitute the result for view_name ."
excluded apps . add ( app config ),add app_config to excluded_apps set .
src data = fp . read ( ),"with the result renamed to fp , perform the following : call the method fp.read , substitute the result for src_data ."
if not self . is  valid ( ) or not self . can delete :,"if call to the method self.is_valid , evaluates to false or self.can_delete is boolean false ,"
"usage = [ "" "" , "" STR_ "" % self . prog name , "" "" , "" STR_ "" , ]","usage is a list containing 4 entries : an empty string , string `` Type ' % s help < subcommand > ' for help on a specific subcommand . `` ,"
"parser = CommandParser ( None , usage = "" STR_ "" , add help = False )","parser is an instance of CommandParser class , created with 3 arguments , None , usage as a string `` % ( prog ) s subcommand [ options ] [ args ] '' and add_help set to boolean False ."
from django . conf import settings,from django.conf import settings into default namespace .
except TemplateDoesNotExist :,"if TemplateDoesNotExist exception is caught ,"
if len ( bits ) ! = NUM_ :,"if length of bits is not equalt to integer 2 ,"
forms = . join ( form . as p ( ) for form in self ),"for every form in self call the form.as_p method , join the results in a string , separated by an empty string ."
"def in clusion tag ( self , file name , context class = Context , takes context = False , name = None ) :","define the method inclusion_tag with 5 arguments : self , file_name , context_class set to Context , takes_context set to boolean False ,"
from django . utils . deprecation import RemovedInDjango20Warning,from django.utils.deprecation import RemovedInDjango20Warning into default name space .
class NumberAwareString ( resultclass ) :,derive the class NumberAwareString from the resultclass base class .
"def   init   ( self ,  subtype = STR_ , boundary = None ,  subparts = None , encoding = None , **  params ) :","define the method __init__ with 6 arguments : self , _subtype set to string 'mixed ' , boundary set to None , _subparts set to None ,"
if not templatetags modules :,"if templatetags_modules is false ,"
"parser . add argument ( STR_ , STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ STR_ )","help set to a string 'The file extension ( s ) to examine ( default : `` html , txt '' , or `` js '' ' 'if the domain is `` djangojs '' ) . Separate multiple extensions with commas , or use -e multiple times . ' and action as a string 'append ' . call the method parser.add_argument with 6 arguments : string ' -- symlinks ' , string '-s ' , action as a string 'store_true ' ,"
args . append ( work file ),"string ' -- keyword=gettext_noop ' , string ' -- keyword=gettext_lazy ' , string ' -- keyword=ngettext_lazy:1,2 ' , string ' -- keyword=ugettext_noop ' , string ' -- keyword=ugettext_lazy ' , string ' -- keyword=ungettext_lazy:1,2 ' , string ' -- keyword=pgettext:1c,2 ' , string ' -- keyword=npgettext:1c,2,3 ' , string ' -- keyword=pgettext_lazy:1c,2 ' , string ' -- keyword=npgettext_lazy:1c,2,3 ' and string ' -- output=- ' , substitute the result for args . append work_file to args ."
dirnames . remove ( dirname ),remove dirname from the dirnames .
"if reduce ( operator . eq , level ) :","apply operator.eq function to elements of level iterable , until level is reduced to a single value , if the result is true ,"
from django . core . management . color import no style,from django.core.management.color import no_style into default name space .
"return iter ( getattr ( d ,  iteritems ) ( ** kw ) )","get _iteritems attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,"
return bool ( self . changed data ),"convert self.changed_data into boolean , return it ."
from django . conf import settings,"from django.conf import settings into default namespace ,"
"super ( TemporaryFileUploadHandler , self ) .   init   ( * args , ** kwargs )","call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments : unpacked list args ,"
"year val , month val , day val = v . year , v . month , v . day","and input_format , substitute the result for v. substitute v.year , v.month and v.day for year_val , month_val and day_val , respectively ."
"cleaned line = comment re . sub ( r "" STR_ "" , line ) . strip ( )","call the method comment_re.sub with an arguments : raw string '\1 ' and line , strip the whitespaces surrounding the result , return it ."
if len ( args ) == NUM_ :,"for second and third element of args , respectively . if length of args equals integer 2 ,"
"return "" """,return an empty string .
"for model in router . get migratable models ( app config , connection . alias , in clude auto created = True ) :","for model in router.get_migratable_models method return value , called with 3 arguments : app_config , connection.alias ,"
if errors :,"if errors is true ,"
"for model in router . get migratable models ( app config , connection . alias , in clude auto created = True ) :","for every model in return value of the function router.get_migratable_models , called with arguments :"
"substitutions [ STR_ ] = CheckboxInput ( ) . render ( checkbox name , False , attrs = { STR_ : checkbox id } )","substitute the result for value under the 'clear_checkbox_id ' key of the substitutions dictionary . call the method render from the instance of CheckboxInput class , with 3 arguments : checkbox_name , boolean False ,"
from threading import local,from threading import local into default name space .
"for i , ext in enumerate ( ext list ) :","for every i and ext in enumerated iterable ext_list ,"
import traceback,import module traceback .
"got request exception = Signal ( providing args = [ "" STR_ "" ] )","got_request_exception is a instance of a Signal class , created with an argument providing_args as the list containing string 'request ' ."
"import module ( STR_ % ( app config . name , module to search ) )","call the function import_module with an argument string ' % s. % s ' , where ' % s ' is replaced with app_config.name and module_to_search ."
def errors ( self ) :,define the method errors with an argument self .
def check for language ( lang code ) :,define the function check_for_language with an argument lang_code .
"return "" STR_ "" % ( sign , seconds // NUM_ , ( seconds // NUM_ ) % NUM_ )","return a string `` % s % 02d % 02d '' formated with sign , floored result of the division of seconds by integer 3000 ,"
"def is  valid path ( path , urlconf = None ) :",define the function is_valid_path with arguments path and urlconf set to None .
register = Library ( ),register is an instance of Library class .
if delta < NUM_ :,if delta is smaller than integer 0 .
attrvalue = self . unescape ( attrvalue ),"call the method unescape with attrvalue as the argument on the self class instance , substitute the result for attrvalue ."
remaining bits = bits [ NUM_ : ],"substitute bits , without the first two elements , substitute the result for remaining_bits ."
filename = ev . filename,substitute ev.filename for filename .
self . cache model class = CacheEntry,substitute CacheEntry for self.cache_model_class .
import gettext as gettext module,import module gettext as gettext_module .
"def validate number ( self , number ) :",define the method validate_number with self class instance and number as arguments .
get resolver . cache clear ( ),call the function get_resolver.cache_clear .
"from decimal import Decimal , InvalidOperation , Context , ROUND HALF UP","from decimal import Decimal , InvalidOperation , Context and ROUND_HALF_UP into default name space ."
request queue size = NUM_,request_queue_size is integer 10 .
if sequence sql :,"substitute the result for sequence_sql . if sequence_sql is true ,"
"def validate domain part ( self , domain part ) :",define the method validate_domain_part with arguments self and domain_part .
if not os . path . exists ( potfile ) :,"if potfile file path doesnt exist ,"
"potfile = os . path . join ( path , STR_ % str ( self . domain ) )","join into a path : path and string ' % s.pot ' , where ' % s ' is replaced with self.domain converted into a string ."
"raise InvalidTemplateLibrary ( "" STR_ "" "" STR_ "" % ( library name , STR_ . join ( tried modules ) ) )","raise an InvalidTemplateLibrary exception with an argument string `` Template library % s not found , tried % s '' ,"
return message,return message .
return key in caches [ DEFAULT CACHE ALIAS ],"if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary , return boolean True , otherwise return False ."
else :,"and sub_widgets set to return value of the function sub_ul_renderer.render , append the result to output . if not ,"
iteritems =  iteritems,substitute _iteritems for iteritems .
if self . verbosity > NUM_ :,"if self.verbosity is greater than integer 0 ,"
"domain , port = split domain port ( host )","call the function split_domain_port with an argument host , assign the result to domain and port , respectively ."
"def get backend timeout ( self , timeout = DEFAULT TIMEOUT ) :",define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments .
global  translations,use global variable _translations .
"return getattr ( module , self . attr )","gett self.attr from the module object , return it ."
replacement =  BROWSERS DEPRECATED LOCALES . get ( lang code ),"get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary , substitute it for replacement ."
"super ( Context , self ) .   init   ( dict  )",call the the method __init__ from the base class of the class Context .
"props = config . pop ( STR_ , None )","remove config dictionary element under ' . ' key , if it exists substitute it for props , if not , props is None ."
"default error messages = { STR_ :   ( STR_ ) , }","default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string ,"
counters = [ NUM_ ] * len ( handlers ),counters is a list containing length of handlers number of zeros .
if is  templatized :,"if is_templatized is true ,"
def compare ordering key ( k ) :,define the function compare_ordering_key with an argument k .
def   reversed   ( self ) :,define the method __reversed__ with an argument self .
def escapejs filter ( value ) :,define the function escapejs_filter with an argument value .
in valid var format string = STR_ in settings . TEMPLATE STRING IF INVALID,"if ' % s ' is contained in settings.TEMPLATE_STRING_IF_INVALID , invalid_var_format_string is boolean True , otherwise it is False ."
"setattr ( self . object , accessor name , object list )",set accessor_name of the self.object to object_list .
text value = force text ( value ),"call the function force_text with an argument value , substitute the result for text_value ."
if  cached modules == module values :,"if _cached_modules equals to module_values ,"
"if submod and not module has submodule ( import module ( parentmod ) , submod ) :",if submod is true and return value of the function module_has_submodule called with 2 arguments : result of the function :
"from django . utils . translation import ugettext lazy as   , ugettext",from django.utils.translation import ugettext_lazy as _ and ugettext into default name space .
size = self . remaining,substitute self.remaining for size .
"basedirs = [ os . path . join ( STR_ , STR_ ) , STR_ ]","basedirs is a list containing tuple with strings , 'conf/locale ' and 'locale ' ."
"super ( WSGIRequestHandler , self ) .   init   ( * args , ** kwargs )","call the __init__ method from the base class of the WSGIRequestHandler class , with 2 arguments : unpacked list args and unpacked dictionary kwargs ."
def as text ( self ) :,"format_html_join , called with 3 arguments : empty string , string ' < li > { 0 } < /li > ' , tuple containing results of the function , force_text with an argument e , for every e in self , return the result . define the method as_text with an argument self ."
if callable ( callback ) :,"if callback is an callable object ,"
return value . lower ( ),convert value to lowercase and return the result .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ STR_ )","call the method parser.add_argument with 5 arguments : string ' -- all ' , action set to string 'store_true ' , dest set to string 'all ' ,"
def is  valid ( self ) :,define the method is_valid with an argument self .
"if sys . platform . startswith ( "" STR_ "" ) :","if sys.platform starts with string 'java ' ,"
def timestamp ( self ) :,define the method timestamp with an argument self .
from email . mime . message import MIMEMessage,from email.mime.message import MIMEMessage into default name space .
libraries [ library name ] = lib,substitute lib for value under the library_name key of libraries dictionary .
response [ STR_ ] = cc,"join the resulting sequence in a string with comma as separator , assign the string to cc . substitute response dictionary value under the key 'Cache-Control ' for cc ."
QuerySetPaginator = Paginator,substitute Paginator for QuerySetPaginator .
class HTMLParser (  html parser . HTMLParser ) :,derive the class HTMLParser from the base class HTMLParser located in the module _html_parser .
"def   init   ( self , dir , params ) :","define the initialization method __init__ with arguments : self class instance , dir and params ."
"ret = fcntl . flock (  fd ( f ) , fcntl . LOCK UN )","all the function fcntl.flock with return value of the _fd ( f ) function and fcntl.LOCK_UN as arguments , substitute the result for ret ."
class Widget ( six . with metaclass ( MediaDefiningClass ) ) :,derive the class Widget from the base class in the return value of the six.with_metaclass called with an argument MediaDefiningClass .
temp lib . filters [ name ] = lib . filters [ name ],substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary .
comment notes . extend ( field notes ),extend comment_notes list with field_notes .
"self . in stance = construct instance ( self , self . in stance , opts . fields , construct instance exclude )","call the function construct_instance with 4 arguments : self , self.instance , opts.fields and construct_instance_exclude ,"
elif len ( bits ) == NUM_ :,"otherwise if length of bits equals integer 6 ,"
option value =,option_value is an empty string .
"def assertCountEqual ( self , * args , ** kwargs ) :","define the function assertCountEqual with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
messages . update ( error messages or { } ),"use the result as the argument for the call to the messages.update function . update messages dictionary with error_messages , if it exists , if not do n't update it ."
file . seek ( file pos ),set the file position pointer at file_pos .
"def deserialize ( format , stream or string , ** options ) :","define the function deserialize with 3 arguments : format , stream_or_string and unpacked dictionary options ."
self . size = size,substitute size for self.size .
media attrs = media .   dict  ,substitute media.__dict__ for media_attrs .
"from django . utils import six , lru cache",from django.utils import six and lru_cache into default name space .
"return self . check ( app configs = app configs , display num errors = display num errors )","call the method self.check with 2 arguments app_configs set to app_configs , display_num_errors set to display_num_errors , return the result ."
self . namespaces = [ x for x in namespaces if x ],"append x to self.namespaces list for every x in namespaces , only if x is true ."
class FileProxyMixin ( object ) :,"derive class FileProxyMixin from the base class object , making it a new-style class ."
 file = None,_file is None .
result = self . find template cache [ key ],"get the value under the key key of the self.find_template_cache dictionary , substitute it for result ."
"value = getattr (  module , attr )","get attr attribute from the _module object , substitute it for value ."
msgs = msgs . decode ( STR_ ),"call the method msgs.decode with an argument string 'utf-8 ' , substitute it for msgs ."
result = type ( self ) ( ),"get type of self , call it and substitute the result for result ."
"warnings . warn ( STR_ STR_ % key , CacheKeyWarning )","substitute ' % r ' in string 'Cache key contains characters that will cause errors if used with memcached : % r ' with key ,"
if end index is None and s len > truncate len :,"if end_index is None and s_len is greater than truncate_len ,"
raise EmptyPage ( STR_ ),raise an EmptyPage exception with string 'That page number is less than 1 ' as an argument .
"def   deepcopy   ( self , memodict ) :",define the method __deepcopy__ with 2 arguments : self and memodict .
"key = bytes to text ( key , self . encoding )","call the method bytes_to_text with an arguments key and self.encoding , substitute the result for key ."
else :,"if nor ,"
params = conf . copy ( ),"call the function conf.copy , substitute it for params ."
os .  exit ( NUM_ ),close the process with an argument 0 .
class AppCommand ( BaseCommand ) :,derive the AppCommand class from the BaseCommand base class .
with context . push ( ) :,"call the context.push method , with the result , perform ,"
if ending and not msg . endswith ( ending ) :,"if ending is true and msg doesnt end with ending ,"
if not boundary or not cgi . valid boundary ( boundary ) :,"if boundary is false or return value of the method cgi.valid_boundary called with an argument boundary evaluates to false ,"
trimmed = False,trimmed is boolean False .
key = self . to field name or STR_,"and code set to string 'list . substitute self.to_field_name , if true , for key , or if not , substitute string 'pk ' for key ."
result = self . configurator . convert ( value ),"call the method self.configurator.convert with an arugment value , substitute the result for result ."
if node . must be first and nodelist :,"if node.must_be_first is true and nodelist is true ,"
self . first = False,self.first is boolean False .
"def load ( self , rawdata ) :",define the method load with self class instance and rawdata as arguments .
"date value = datetime . date ( in t ( y ) , in t ( m ) , in t ( d ) )","call the function datetime.date with 3 arguments : y , m and d all converted into a integers , substitute the result for date_value ."
if value == k2 or text value == force text ( k2 ) :,"if value equals k2 or text_value equals return value of the function force_text called with argument k2 ,"
self . nodelist empty = nodelist empty,substitute nodelist_empty for self.nodelist_empty .
if cache timeout is None :,"if cache_timeout is None ,"
fixture . close ( ),call the method fixture.close .
"def print help ( self , prog name , subcommand ) :","define the method print_help with 3 arguments : self , prog_name and subcommand ."
"response = self . handle uncaught exception ( request , resolver , sys . exc info ( ) )","call the method self.handle_uncaught_exception with request , resolver and return value of the function sys.exec_info as the arguments ."
"s = six . text type ( bytes ( s ) , encoding , errors )","call the function six.text_type with return value of the function bytes ( s ) , encoding and errors as the arguments ,"
loaders . append ( loader ),append loader to loaders .
"def   ne   ( self , other ) :","and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code , and self.inverse_match equals to other.inverse_match , return the result . define the method __ne__ with arguments self and other ."
def ugettext ( message ) :,define the function ugettext with an argument message .
self . parent instance = parent instance,substitute parent_instance for self.parent_instance .
if not self . in itial forms :,"if self.initial_forms is false ,"
if self . output transaction :,"if self.output_transaction is true ,"
"with open ( filename , STR_ ) as outfile :","open filename file in write mode , with the file descriptor renamed to outfile , perform ,"
class Command ( AppCommand ) :,derive the class Command from the base class AppCommand .
code . in teract ( local = imported objects ),call the method code.interact with an argument local set to imported_objects .
self .   args = args,substitute args for self.__args .
"setattr ( result , name , value )",set result attribute name to value value .
"super ( MultiValueField , self ) .   init   ( * args , ** kwargs )","if not , self.require_all_fields is boolean True . call the method __init__ with 2 arguments : unpacked list args and unpacked dictionary kwargs , from the base class of the class MultiValueField ."
return left,return left .
"def streaming content ( self , value ) :",define the method streaming_content with 2 arguments : self and value .
qs = pk . rel . to .  default manager . get queryset ( ),"call the method pk.rel.to._default_manager.get_queryset , substitute the result for qs ."
fixture files . extend ( fixture files in dir ),fixture_name and result of the function humanize called with an argument fixture_dir . extend fixture_files list with fixture_files_in_dir .
"def emit post migrate signal ( created models , verbosity , in teractive , db ) :","app set to app_config.models_module , create_models set to create_models , verbosity set to verbosity , interactive set to interactive , and db set to db . define the function emit_post_migrate_signal with 4 arguments : created_models , verbosity , interactive and db ."
return in put val,return input_val .
comment notes . append ( STR_ ),append string 'AutoField ? ' to comment_notes .
return bool ( self . children ),"convert self.children into an boolean , return it ."
if mem args in cache :,"if mem_args is contained in cache ,"
if lookup view in self .  callback strs :,"if lookup_view is contained in self._callback_strs ,"
if self . settings exception is not None :,"if self.settings_exception is not None ,"
"function name = ( name or getattr ( func , STR_ , func ) .   name   )","if name is true , substitute it for function_name , if not get attribute '_decorated_function ' from func object ,"
if item [ STR_ ] is not None :,"if value under the 'unique_id ' key of the item dictionary is not None ,"
self . is  reversed = is  reversed,substitute is_reversed for self.is_reversed .
absolute max = max num + DEFAULT MAX NUM,"sum max_num and DEFAULT_MAX_NUM , substitute the result for absolute_max ."
"def tag exists ( self , tag ) :",define the method tag_exists with self class instance and tag as arguments .
def   str   ( self ) :,"choice and idx , return the result . define the method __str__ with an argument self ."
bits = token . split contents ( ) [ NUM_ : ],"call the function token.split_contents , substitute the result without the first element for bits ."
"message = ungettext lazy ( STR_ , STR_ , STR_ )","call the function ungettext_lazy with 3 arguments : string 'Ensure this value has at most % ( limit_value ) d character ( it has % ( show_value ) d ) ,"
"csrf token = context . get ( STR_ , None )","get the value under the 'csrf_token ' key of the context dictionary , if it exists substitute the result for csrf_token ,"
if six . PY2 :,"if six.PY2 is true ,"
"return re camel case . sub ( r STR_ , value ) . strip ( ) . lower ( )","call the method re_camel_case.sub with 2 arguments : raw string ' \1 ' and value , strip the result of whitespaces from both ends ,"
if primary keys :,"if primary_keys is true ,"
self . fixture count = NUM_,self.fixture_count is integer 0 .
httpd . set app ( wsgi handler ),call the method httpd.set_app with an argument wsgi_handler .
except AttributeError :,"if AttributeError exception is caught ,"
if val is None :,"if val is None ,"
for key in self :,"for every key in self ,"
fd = sys . stdin,substitute sys.stdin for fd .
obj = form . in stance,substitute form.instance for obj .
" url drive re = re . compile ( STR_ , re . I )","call the function re.compile with 2 arguments : string '^ ( [ a-z ] ) [ : | ] ' and re.I , substitute the result for _url_drive_re ."
"if hasattr ( data , STR_ ) :","if data has an attribute 'read ' ,"
def  list cache files ( self ) :,define the method _list_cache_files with argument self .
def in clude is allowed ( filepath ) :,define the function include_is_allowed with an argument filepath .
"return ( TYPE , outdict , stream )","return a tuple with 3 elements : TYPE , outdict and stream ."
"def   init   ( self , regex = None , message = None , code = None , in verse match = None , flags = None ) :","define the method __init__ with 6 arguments : self , regex set to None , message set to None , code set to None ,"
except ValueError :,"if ValueError exception is caught ,"
"def   eq   ( self , other ) :",define the method __eq__ with self and other as arguments .
if any ( len ( x ) < NUM_  for x in ip str . split ( STR_ ) ) :,"split ip_str into parts by ' : ' , for every x in the result , calculate length of x , if any is smaller than integer 4 ,"
if timezone . is  aware ( expires ) :,"call the method timezone.is_aware with an argument expires , if it evaluates to true ,"
from django . utils . module loading import import string,from django.utils.module_loading import import_string into default name space .
response [ STR_ ] = http date ( ),"call the function http_date with no arguments , and substitute its return value"
"raise CommandError ( "" STR_ "" % ( self . app or project , template ) )","raise an CommandError exception with an argument string `` could n't handle % s template % s . `` , replace ' % s ' with self.app_or_project and template ."
bits = token . contents . split ( ),"call the method token.split_contents , substitute the result for bits ."
return mark safe ( STR_ . join ( output ) ),"join output into a string , separated by newline characters , use it as an argument for the call to the mark_safe , return the result ."
"def apply response fixes ( self , request , response ) :","define the method apply_response_fixes with self class instance , request and response as the arguments ."
self . META = { },self.META is an empty dictionary .
if in plural :,"if inplural is true ,"
"attrs = super ( DecimalField , self ) . widget attrs ( widget )","call the method widget_attrs with an argument widget , from the base class of the DecimalField class , substitute the result for attrs ."
def get public serializer formats ( ) :,define the function get_public_serializer_formats .
"return RegroupNode ( target , expression , var name )","parser.compile_filter , substitute the result for expression . return an instance of a RegroupNode class , created with 3 arguments target , expression and var_name ."
bits = [ ],bits is an empty list .
"class WSGIServer ( simple server . WSGIServer , object ) :",derive the class WSGIServer from simple_server.WSGIServer and object base classes .
return wraps ( func ) (  dec ),"substitute func for _dec._decorated_function . call the function wraps with an argument func , call the result with an argument _dec , return the result ."
if lang code :,"if lang_code is true ,"
Image . open ( file ) . verify ( ),"call the method Image.open with an argument file , on the result call the verify method"
return forms valid and not self . non form errors ( ),"if forms_valid is true and call to the method self.non_form_errors , evaluates to false , return boolean True , otherwise return False ."
"return STR_ % ( type ( self ) .   name   , repr attr )","return a string ' < % s : % r > ' , format it with __name__ field of the self class and repr_attr ."
absolute path = path . abspath ( expanded template ),"get the absolute file path of the expanded_template , substitute it for absolute_path ."
except ValidationError as e :,"if ValidationError , renamed to e , is caught ,"
from django . db . migrations . executor import MigrationExecutor,from django.db.migrations.executor import MigrationExecutor into default name space .
lbp = NUM_,lbp is an integer 0 .
self . stream . write ( b - * NUM_ ),write 79 '- ' characters into self.stream file stream .
db = router . db for write ( self . cache model class ),"call the method router.db_for_write with argument self.cache_model_class , substitute the result for db ."
import datetime,import module datetime .
"changes = dict ( ( app , [ Migration ( "" STR_ "" , app ) ] ) for app in app labels )","crate a dictionary with app mapping and from the class Migration , created with arguments : string 'custom ' and app ,"
"def   setattr   ( self , name , value ) :","define the method __setattr__ with self , name and value as arguments ."
import json,import module json .
"def   init   ( self , conditions nodelists ) :",define the method __init__ with 2 arguments : self and conditions_nodelists .
sys . exit ( NUM_ ),write it for self.stderr . exit the program with the integer 2 as exit code .
def items ( self ) :,define the method items with an argument self .
if self . is  bound :,"if self.is_bound is true ,"
found = True,found is boolean True .
all unique checks = set ( ),all_unique_checks is an empty set .
"with transaction . atomic ( using = connection . alias , savepoint = connection . features . can rollback ddl ) :","with the call to the transaction.atomic method with using set to connection.alias , savepoint set to connection.features.can_rollback_ddl as arguments ,"
"  all   = [ STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , ]","__all__ is an list containing 6 elements : 'get_cache ' , 'cache ' , 'DEFAULT_CACHE_ALIAS ' , 'InvalidCacheBackendError ' ,"
return dec,return dec .
self . handle data ( rawdata [ i : j ] ),"slice the rawdata to obtain substring from i-th to j-th element , use it as the argument for the method call to the self.handle_data ."
try :,"`` That port is already in use . '' for errno.EADDRINUSE and `` That IP address ca n't be assigned-to . '' for errno.EADDRNOTAVAIL . try ,"
"raise DjangoUnicodeDecodeError ( s , * e . args )","raise an exception DjingoUnicodeDecodeError , with s and list of arguments *args from object e , as the arguments ."
obj dict = self .   dict   . copy ( ),"call the method self.__dict__.copy , substitute the result for obj_dict ."
def luhn ( candidate ) :,define the function luhn with an argument candidate .
else :,"substitute the result for new_obj . if not ,"
"value = super ( TypedMultipleChoiceField , self ) . clean ( value )","call the method clean with an argument value from the base class of the class TypedMultipleChoiceField , substitute the result for value ."
if options [ STR_ ] :,"if value under the 'umask ' key of options dictionary is true ,"
except InputStreamExhausted :,"if InputStreamExhausted exception is caught ,"
"char2number = { STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ , STR_ : STR_ }","char2number is an dictionary , with 26 elements : 2 for ' a ' , 2 for ' b ' , 2 for ' c ' , 3 for 'd ' , 3 for ' e ' , 3 for ' f ' , 4 for ' g ' ,"
self . default locale path = self . locale paths [ NUM_ ],substitute first element of self.locale_paths for self.default_locale_path .
return hash ( self .   cast ( ) ),"call the method self.__cast , return the hash value of the result ."
"def find filter ( self , filter name ) :",define the function find_filter with 2 arguments : self and filter_name .
"with open ( writer . path , "" STR_ "" ) as fh :","open writer.path file in write mode , with the file descriptor as fh , perform the following ,"
if label output :,"if label_output is true ,"
data = file . read ( chunk size ),read chunk_size bytes from file and store it in data .
"return "" STR_ "" % dirname if dirname else STR_","if dirname is true , return dirname converted to a string and surounded by single quotes , if not return string 'absolute path ' ."
for app config in apps . get app configs ( ) :,"call the method apps.get_app_configs , for every app_config in the result ,"
"def   init   ( self , takes context , args , kwargs ) :","define the method __init__ with 4 arguments : self , takes_context , args and kwargs ."
"name = getattr ( func , "" STR_ "" , func ) .   name  ","get `` _decorated_function '' attribute from func object , if it exists substitute __name__ field of the result for name ,"
new attr = name,substitute name for new_attr .
"self . emit post migrate ( verbosity , in teractive , database )","call the method self.emit_post_migrate with arguments verbosity , interactive and database ."
"if is in stance ( s , bytes ) :","if s is an instance of bytes class ,"
"self . stdout . write ( self . style . NOTICE ( "" STR_ "" ) )","string : `` \nYou have unapplied migrations ; your app may not work properly until they are applied . `` , write it to self.stdout . call the method self.style.NOTICE with an argument string `` Run 'python manage.py migrate ' to apply them.\n '' ,"
del self .  headers [ header . lower ( ) ],delete the value under the header converted to lowercase key of the self._headers dictionary .
parts = parts [ : - NUM_ ],substitute the last element of parts for parts .
"six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc info ( ) [ NUM_ ] )","call the function six.reraise with 3 arguments : UnreadablePostError , UnreadablePostError instantiated with unpacked list e.args ,"
break,break from the loop execution .
if force text ( val ) not in pks :,"call the function force_text with an argument val , if the result is not contained in pks ,"
except ValidationError as e :,"if ValidationError , substituted for e , exception is caught ,"
"if field . rel and is in stance ( field . rel , models . ManyToManyRel ) :","if field.rel is true , and field.rel is an instance of models.ManyToManyRel ,"
"def to python ( self , value ) :","'Select a valid choice . % ( value ) s is not one of the available choices . ' for 'invalid_choice ' , and return value of the function _ called with an argument string 'Enter a list of values . ' for 'invalid_list ' . define the method to_python with arguments self and value ."
from django . core . serializers . base import DeserializationError,from django.core.serializers.base import DeserializationError into default name space .
else :,"for every var in self._varlist . if not ,"
ignore patterns = options . get ( STR_ ),"get the value under the 'ignore_patterns ' key of the options dictionary , substitute it for ignore_patterns ."
token = tokens [ i ],substitute i-th element of tokens for token .
from django . core . checks . registry import registry,from django.core.checks.registry import registry into default name space .
"the path , in fo = urlretrieve ( url , path . join ( tempdir , filename ) )","call the function urlretrieve with arguments url and tempdir and filename joined into a file path , assign the result to the_path , and info , respectively ."
"return super ( MultiValueDict , self ) .   getitem   ( key )","call the method __getitem__ from the base class of the class MultiValueDict , with an argument key , return the result.."
force str = force bytes,substitute force_bytes for force_str .
"def nud ( self , parser ) :",define the method nud with 2 arguments self and parser .
dow = days [ date . weekday ( ) ],"call the method date.weekday , use the result as an key to obtain the value from the days dictionary , substitute it for dow ."
return data,substitute it for value under the 'pk ' key of data dictionary . return data .
pk value = self . get queryset ( ) [ in dex ] . pk,"call the method self.get_queryset , substitute field pk under the result at the index index for pk_value ."
"missing args message = "" STR_ """,`` project name in the current directory or optionally in the given directory. '' . missing_args_message is a string `` You must provide a project name . `` .
"shutil . copyfileobj ( extracted , outfile )",call the method shutil.copyfileobj with 2 arguments : extracted and outfile .
c = subject [ i ],substitute i-th element of subject for c .
return self . file . size,return self.file.size .
def convert old style list ( list  ) :,define the function convert_old_style_list with an argument list_ .
"def   contains   ( self , key ) :",define the method __contains__ with self and key as arguments .
if value and not self . valid value ( value ) :,"if value is true and method self.valid_value called with an argument value evaluates to false ,"
"self . key func = get key func ( params . get ( STR_ , None ) )","call the method params.get with 2 arguments , string 'KEY_FUNCTION ' and None , use the result as the argument for the call to the function get_key_func , substitute the result for the self.key_func ."
if template source loaders is None :,"if template_source_loaders is None ,"
prefixed name = self . add prefix ( name ),"call the method self.add_prefix with an argument name , substitute the result for prefixed_name ."
"self . token type , self . contents = token type , contents",substitute token_type and contents for self.token_type and self.contents .
"return handle app ( app config . models module , ** options )",call the function handle_app with 2 arguments : app_config.models_module and unpacked dictionary options .
"def   init   ( self , in put date formats = None , in put time formats = None , * args , ** kwargs ) :","for 'invalid_date ' and return value of the function _ called with an string 'Enter a valid time . ' , for 'invalid_time . define the method __init__ with 3 arguments : self , input_date_formats set to None , input_time_formats set to None ,"
 cached filenames += new filenames,append new_filenames to _cached_filenames .
template = self . template . resolve ( context ),"call the method self.template.resolve with an argument context , substitute the result for template ."
"return f . fileno ( ) if hasattr ( f , STR_ ) else f","return result of the f.fileno method if f has an 'fileno ' attribute , otherwise return f ."
value =,value is an empty string .
import zlib,import module zlib .
del self .  expire info [ key ],delete the value under the key key of self._expire_info dictionary .
if target is None :,"if target is None ,"
"return date format ( value , STR_ , use l10n = use l10n )","call the function date_format with 2 arguments : value , string 'DATETIME_FORMAT ' and use_l10n as use_l10n , return the result ."
id  += STR_,append string '_0 ' to id_ .
"module = import module ( STR_ % ( app name , name ) )","replace ' % s ' in string ' % s.management.commands. % s ' with app_name and name , respectively , use it as an result for the call to the"
if ipv4 unpacked :,"if ipv4_unpacked is true ,"
"sys . modules [   name   + "" STR_ "" + attr . name ] = attr","concatenate __name__ , string '.moves ' and attr.name together , use it as an key to get the value from the sys.modules dictionary ,"
from django . utils import autoreload,from django.utils import autoreload into default name space .
def set urlconf ( urlconf name ) :,define the function set_urlconf with an argument urlconf_name .
self . language = language,substitute language for self.language .
self .  encoding = encoding or settings . DEFAULT CHARSET,"if encoding is true , substitute it for self._encoding , if not substitute settings.DEFAULT_CHARSET for self._encoding ."
week number = NUM_,week_number is integer 1 .
@ register . tag ( with ),"called with an argument this_value_expr , result of the method parser.compile_filter called with an argument max_value_expr , return value of the method parser.compile_filter called with an argument max_width and asvar as asvar . register.tag decorator function with an argument 'with ' ,"
"self .  post . appendlist ( field name , force text ( data , encoding , errors = STR_ ) )",call the method self._post.appendlist with 2 arguments : field_name and result of the function force_text called with 3 arguments :
"def reverse ( viewname , urlconf = None , args = None , kwargs = None , prefix = None , current app = None ) :","define the function reverse with 6 arguments : viewname , urlconf set to None , args set to None , kwargs set to None ,"
"elif self . argv [ NUM_ : ] in ( [ STR_ ] , [ STR_ ] ) :","if self.argv , without the first element is contained in a tuple with 2 entries : a list containing a string ' -- help ' ,"
if response . has header ( STR_ ) :,"if call to the function response.has_header with argument 'Vary ' returns boolean True ,"
"def resolve ( self , context ) :",define the method resolve with 2 arguments : self and context .
return self .   name,return self.__name .
"msg = "" STR_ "" % msg","replace ' % s ' in string `` System check identified some issues : \n % s '' with msg , substitute it for msg ."
class CheckRegistry ( object ) :,derive the class CheckRegistry with object as base class .
self .  changed data = None,self._changed_data is None .
in t ( value ),convert value into an integer .
key += tuple ( type ( v ) for v in args ),"create a tuple out of types of v , for every v in args , extend key tuple with the result ."
"setattr ( obj , self . name , result )",set self.name attribute of the obj object to result .
kwargs [ STR_ ] = None,set value under the 'stream ' key of kwargs dictionary to None .
from django . utils import six,from django.utils import six into default name space .
if name is None :,"otherwise name is None . if name is None ,"
return   ( STR_ ),"call the function _ with an argument string 'midnight ' , return the result ."
import hashlib,import hashlib module .
"def partition ( predicate , values ) :",define the function partition with 2 arguments : predicate and values .
value = True,value is boolean True .
"return ( self . func , self . args , self . kwargs ) [ in dex ]","return the element at the index index of the tuple containing 3 elements : self.func , self.args and self.kwargs ."
"return tpl . format ( self . name , self . sysid , self . pubid )","call the method tpl.format with an arguments self.name , self.sysid and self.pubid ."
stream = stream or string,substitute stream_or_string for stream .
c = self . resolve ( c ),"call the method self.resolve with an argument c , substitute the result for c ."
if self . verbosity > NUM_ :,"substitute the result for plural_form_line . if self.verbosity is greater than integer 1 ,"
"def usage ( self , subcommand ) :",define the method usage with 2 argument : self and subcommand .
data = None,data is None .
errors = [ ],errors is an empty list .
"return time str + STR_ % ( hour , minute )","format string ' % +03d % 02d ' with hour and minute , append it to time_str , return the result ."
def decorator from middleware with args ( middleware class ) :,define the function decorator_from_middleware_with_args with an argument middleware_class .
from django . utils . six . moves . urllib . parse import urlparse,from django.utils.six.moves.urllib.parse import urlparse into default name space .
"text kwargs = dict ( ( k , force text ( v ) ) for ( k , v ) in kwargs . items ( ) )","text_kwargs is a dictionary created from the result of the function force_text with an argument v , mapped through function k , for every k and v in return value of the kwargs.items ."
"field value = smart text ( field value , options . get ( "" STR_ "" , settings . DEFAULT CHARSET ) , strings only = True )","call the smart_text function with 3 arguments : field_value , value under the 'encoding ' key of the options dictionary or ,"
widget = NullBooleanSelect,substitute NullBooleanSelect for widget .
return Media ( definition ),"return an instance of Media class , created with definition as an argument ."
return   wrapper  ,return __wrapper__ .
return list ( self ) ! = other,"if other is not equal to list containing elements of self , return boolean True , otherwise return boolean False ."
@ register . filter ( is  safe = True ),return all the results in a list . decorator function register.filter with an argument is_safe set to boolean True .
return s,"join the result in a string separated by whitespaces , substitute it for s. return s ."
logger . addHandler ( handler ),call the method logger.addHandler with an argument handler .
"def get random string ( length = NUM_ , allowed chars = STR_ STR_ ) :","and digestmod set to hashlib.sha1 , return the result . define the function constant_time_compare with 2 arguments : length set to integer 12 ,"
if print  is None :,"if print_ is None ,"
"def set ( self , key , value , timeout = DEFAULT TIMEOUT , version = None ) :","define the method set with 5 arguments , self , key , value , timeout set to DEFAULT_TIMEOUT and version set to None ."
"from django . db import connections , DEFAULT DB ALIAS",from django.db import connections and DEFAULT_DB_ALIAS into default name space .
mimetype = DEFAULT ATTACHMENT MIME TYPE,substitute DEFAULT_ATTACHMENT_MIME_TYPE for mimetype .
"header = self .  convert to charset ( header , STR_ )","call the method self._convert_to_charset with arguments : header and string 'ascii ' , substitute the result for header ."
return kwargs,return kwargs .
"except ( OverflowError , ValueError ) :","if OverflowError or ValueError exceptions are caught ,"
"form class attrs = { STR_ : Meta , STR_ : formfield callback }",form_class_attrs is a dictionary with 2 entries : Meta for 'Meta ' and formfield_callback for 'formfield_callback ' .
if self . required :,"if self.required is boolean true ,"
def close ( self ) :,define the method close with an argument self .
"def   init   ( self , request , dict  = None , processors = None , current app = None , use l10n = None , use tz = None ) :","define the method __init__ with 7 arguments : self , request , dict_ set to None , processors set to None , current_app set to None ,"
self . tagname = self . tag ( ),"call the method self.tag , substitute the result for self.tagname ."
as form = False,as_form is boolean False .
from django . utils . functional import cached property,from django.utils.functional import cached_property into default name space .
return other dict,return other_dict .
qs = self . model .  default manager . get queryset ( ),call the method self.model._default_manager.get_queryset with an argument qs .
file field list . append ( f ),append f to file_field_list .
"def create select ( self , name , field , value , val , choices , none value ) :","define the method id_for_label with arguments self , name , field , value , val , choices and none_value ."
"def  create cache ( backend , ** kwargs ) :",define the function _create_cache with backend and dictionary pair of elements kwargs as arguments .
"if is in stance ( self . data , datetime . datetime ) and is  aware ( self . data ) :","if self.data is an instance of datetime.datetime and result of the function is_aware called with an argument self.data evaluates to true ,"
new name = col name . lower ( ),"convert col_name to lowercase , substitute the result for new_name ."
flat = { },"flat is an empty dictionary ,"
new conn created = self . open ( ),"call the method self.open , substitute the result for the new_conn_created ."
if illegal formatting :,"if illegal_formatting is true ,"
class EmailMultiAlternatives ( EmailMessage ) :,derive the class EmailMultiAlternatives from the EmailMessage base class .
output = [ pformat ( val ) for val in context ],"output is an list with initial elements generated with call to the function pformat with an argument val , for every val in context ."
"self . in ner run ( None , ** options )",call the method self.inner_run with 2 arguments : None and unpacked dictionary options .
self . registered checks = [ ],self.registered_checks is an empty list .
if text [ NUM_ ] in STR_ :,if first element of text is contained in 'xX ' .
def get deserializer ( format ) :,"only if v.Serializer.internal_use_only is false , return the resulting list . define the function get_deserializer with an argument format ."
if os . path . exists ( fname ) :,"if fname file path exists ,"
return upload,return boolean upload .
if message is not None :,if message is not None
alter sql = [ ],alter_sql is an empty list .
"def ifequal ( parser , token ) :",define the function ifequal with 2 arguments : parser and token .
"pk value = getattr ( self . in stance , self . fk . rel . field name )",get self.instance
def trim whitespace ( s ) :,define the function trim_whitespace with an argument s .
if related att is not None :,"if related_att is not None ,"
return self .   text cast ( ),"call the method self.__text_cast , return the result ."
key = force bytes ( settings . SECRET KEY ),"call the force_bytes function with an argument settings.SECRET_KEY , substitute the result for key ."
"def run ( self , ** options ) :",define the method run with 3 arguments : self and unpacked dictionary options .
not  installed models = set ( pending references . keys ( ) ),"call the method pending_references.keys , put the result into a set and substitute it for not_installed_models ."
"to unicode = lambda s : force text ( s , strings only = True )","author_name set to None , author_link set to None , subtitle set to None , categories set to None , feed_url set to None , feed_copyright set to None , feed_guid set to None , ttl set to None and unpacked dictionary kwargs . to_unicode is an lambda function with an argument s , result is the result of the function force_text ,"
self .  lib = library,substitute library for self._lib .
if self .  request middleware is None :,"if self._request_middleware is None ,"
except LookupError :,"if LookupError exception is caught ,"
def  parse date fmt ( ) :,define the function _parse_date_fmt .
return attachment,return attachment .
from django . conf import settings,from django.conf import settings into default name space .
delta = NUM_ - year,"subtract year from integer 2000 , substitute the result for delta ."
self . sysid = sysid,substitute sysid for self.sysid .
except NotImplementedError :,"if NotImplementedError exception is caught ,"
"nodelist false = parser . parse ( ( end tag , ) )","call the method parser.parse with an argument tuple with an element end_tag , substitute the result for nodelist_false ."
return self .  callback,return self._callback .
"def  isdst ( self , dt ) :",define the method _isdst with 2 arguments self and dt .
"def get date error message ( self , date check ) :","where ' % ( field ) s ' is replaced with return value of the get_text_list function called with 2 arguments : unique_check and return value of the function six.text_type called with return value of the function _ with an argument string 'and ' , return the result . define the method get_date_error_message with 2 arguments : self and date_check ."
from django . db . models . fields . related import RelatedObject,from django.db.models.fields.related import RelatedObject into default namespace .
return ( ( evens + odds ) % NUM_ == NUM_ ),"use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary , sum all the results and substitute the result for odds . sum evens and odds , if the result is divisible by integer 10 , return boolean True , if not return boolean False ."
values = [ parser . compile filter ( arg ) for arg in args [ NUM_ : ] ],"call the function parser.compile_filter with an argument arg for every arg in args from first element to the end ,"
def get internal wsgi application ( ) :,define the funtion get_internal_wsgi_application .
tags = [ re . escape ( tag ) for tag in tags . split ( ) ],"tags is a list containing results of the function re.escape with an argument tag , for every tag in tags split into words ."
""""""" """"""",docsring
if tablename in connection . in trospection . table names ( ) :,"if tablename is contained in return value of the method connection.introspection.table_names ,"
while factor >= NUM_ :,"while factor is greater or equal to integer 0 ,"
"return ugettext ( "" STR_ "" )","call the function ugettext with an argument string `` Please correct the duplicate values below . `` , return the result ."
from django . utils . six . moves import xrange,from django.utils.six.moves import xrange into default name space .
"cache key += STR_ % getattr ( request , STR_ , get language ( ) )","call the function getattr with request , string 'LANGUAGE_CODE ' and function get_language as arguments ,"
"return template , None",return template and None .
"call command ( STR_ , * fixture labels , ** { STR_ : verbosity } )","serialize set to boolean False , substitute the return value for db_name . call the method call_command with 3 arguments , string 'loaddata ' , unpacked list fixture_labels and unpacked dictionary containing 1 element : verbosity for 'verbosity ' ."
"except ( ImportError , AttributeError ) as e :","if ImportError , AttributeError , renamed to e , exceptions are caught ,"
args . append ( parser . compile filter ( bit ) ),"call the method parser.compile_filter with an argument bit , append the result to args ."
"six . reraise ( MultiPartParserError , MultiPartParserError ( msg ) , sys . exc info ( ) [ NUM_ ] )","call the method six.reraise with 3 arguments : MultiPartParserError , MultiPartParserError created with msg ,"
for    in xrange ( fill to - sep ) :,"for every __ in range of integers from 0 up to sep subtracted from fill_to ,"
count = property (  get count ),count is a property object with _get_count as a getter method .
self . write message ( message ),call the method self.write_message with argument message .
if e . errno == errno . EEXIST :,"if e.errno equals to errno.EEXIST ,"
result = self . configurator . convert ( value ),call the method self.configurator.convert with an argument value .
"sign , digittuple , exponent = value . as tuple ( )","call the method value.as_tuple , assign the result to sign , digittuple and exponent , respectively ."
except OSError as e :,"if OSError , renamed to e , is caught ,"
return timedelta ( seconds = - time . timezone ),"call the function timedelta with an argument seconds as negative time.timezone , return the result ."
"return getattr ( settings , format type )","get format_type attribute of the settings object , return it ."
"out . write ( blankout ( part , STR_ ) )","call the method blankout with 2 arguments : part and 'S ' , write the result to out ."
self .  populated = False,self._populated is boolean False .
ratio = ( value / max value ) * max width,"divide value by max_value , multiply the result with max_width , substitute it for ratio ."
kwargs [ STR_ ] = error messages [ f . name ],substitute value under the f.name key of the error_messages dictionary for value under the 'error_messages ' key of kwargs dictionary .
cmatches = constant re . findall ( t . contents ),"call the function constant_re.findall with an argument t.contents , substitute the result for cmatches ."
"return base . DeserializedObject ( obj , m2m data )","call the method base.DeserializedObject with arguments obj and m2m_data , return the result ."
else :,"use the it as an argument for the call to the self.style.MIGRATE_LABEL method , use the result to cal the self.stdout.write method . if not ,"
values = . join ( quant ) . split ( STR_ ),"join elements of quant into a string , split it by string ' , ' , substitute the result for values ."
try :,"RemovedInDjango19Warning and stacklevel as integer 2. try ,"
words = word split re . split ( force text ( text ) ),"call the function force_text with an argument text , split by it word_split_re , substitute it for words ."
language code = get language ( ),"call the function get_language , substitute the result for language_code ."
"if not self . use natural primary keys or not hasattr ( obj , STR_ ) :",and self._current for 'fields ' . if self.use_natural_primary_keys is false or obj doesnt have a 'natural_key ' attribute .
def get current timezone ( ) :,define the function get_current_timezone .
if targets [ NUM_ ] [ NUM_ ] is None :,"if element of targets in first row and second column is None ,"
def   str   ( self ) :,define the method with reload with an argument self .
except StopIteration :,"if StopIteration exception ,"
"nodelist = parser . parse ( ( STR_ , ) )","call the method parser.parse with an argument tuple with an element string 'endverbatim ' , substitute the result for nodelist ."
context [ self . variable name ] = value,substitute value for value under the self.variable_name key of the context dictionary .
continue,"skip this loop iteration ,"
self . alternatives = alternatives or [ ],"bcc , connection , attachments , headers and cc . if alternatives exists substitute it for self.alternatives , if not self.alternatives is an empty list ."
"self . xml . endElement ( "" STR_ "" )",call the method self.xml.endElement with an argument string 'field ' .
if data is False :,"if data is boolean False ,"
"self . json kwargs . pop ( STR_ , None )",remove the entry under the 'stream ' key of the self.json_kwargs dictionary .
"from django . utils . encoding import force text , force str",from django.utils.encoding import force_text and force_str into default name space .
subcommand = self . argv [ NUM_ ],substitute first element of self.argv for subcommand .
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % token . contents )","raise an TemplateSyntaxError exception with an argument string `` 'for ' statements should use the format 'for x in y ' : % s '' ,"
"self . stdout . write ( "" STR_ "" % ( ser fmt , fixture name , humanize ( fixture dir ) ) )","call the method self.stdout.write with an argument string `` Installing % s fixture ' % s ' from % s . `` ,"
if count ! = NUM_ :,"if count does not equals to integer 0 ,"
self . db table = table,substitute table for self.db_table .
with connection . cursor ( ) as cursor :,"otherwise returns s. call the method connection.cursor , with the result as cursor ,"
class DefaultStorage ( LazyObject ) :,derive the class DefaultStorage from the LazyObject base class .
now = timezone . now ( ),"call the timezone.now function , substitute the result for now ."
result = copy . copy ( self ),"call the method copy.copy with an argument self , substitute the result for result ."
if   name   == STR_ :,if __name__ equals a string '__main__ ' .
"def add error ( self , field , error ) :","define the method add_error with 3 arguments : self , field and errors ."
"with io . open ( pofile , STR_ , encoding = STR_ ) as fp :","replace all the occurrences of previous string in msgs for an empty string , substitute the result for msgs . call the function io.open with 3 arguments : pofile , string ' w ' and encoding set to string 'utf-8 ' as arguments ,"
"resource = resource string ( app config . name , pkg name )","call the function resource_string with 2 arguments app_config.name and pkg_name , substitute the result for resource ."
"if not hasattr ( mail , STR_ ) :","if mail doesnt have an 'outbox ' attribute ,"
"return super ( FileInput , self ) . render ( name , None , attrs = attrs )","call the method render from the base class of the class FileInput , called with 3 arguments : name , None and attrs as attrs ."
val = self .  cache . get ( key ),"call the self._cache.get method with argument key , substitute the result for val ."
"return Truncator ( value ) . chars ( length , html = True )","instantiate class Truncator , with an argument value , call the method chars on the result with 2 arguments length ,"
if form . errors :,"if form.errors is true ,"
return self,return self .
"if migration name == "" STR_ "" :","with ' % s ' substituted for app_label , as arguments . if migration_name equals to string 'zero ' ,"
"raise parser . error class ( "" STR_ "" )",raise an exception parser.error_class with an argument string `` Unexpected end of expression in if tag . `` .
"self . stdout . write ( "" STR_ "" )",write the string `` Creating tables ... \n '' to the standard output .
"parser . add argument ( STR_ , help = STR_ )","dest set to string 'verbosity ' , default set to string ' 1 ' , type set to int , choices is a list , containing integers : 0 , 1 , 2 and 3 , call the method parser.add_option with 2 arguments : string ' -- settings ' and help as a string 'The Python path to a settings module , e.g . `` myproject.settings.main '' . If this isn\'t provided , the DJANGO_SETTINGS_MODULE environment variable will be used . '"
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % ( i , subject ) )","raise an TemplateSyntaxError exception with an argument string `` Searching for value . Unexpected end of string in column % d : % s '' ,"
retval = self . expression ( ),"call the method self.expression , substitute the result for retval ."
"level = config . get ( STR_ , None )","get value under the 'level ' key of the config dictioanry , if it exists substitute it for level , if not level is None ."
if message context :,"if message_context is true ,"
template = STR_,an empty string for 'clear_template ' and self.clear_checkbox_label for 'clear_checkbox_label ' . template is a string ' % ( input ) s ' .
unused char = self .  stream . read ( NUM_ ),"call the method self._stream.read with an argument integer 1 , substitute the result for unused_char ."
block name = bits [ NUM_ ],where ' % s ' is replaced with first element of bits . substitute second element for bits for block_name .
obj = None,"obj is None ,"
"file = tempfile . NamedTemporaryFile ( suffix = STR_ , dir = settings . FILE UPLOAD TEMP DIR )",call the method tempfile.NamedTemporaryFile with arguments : suffix set to string '.upload ' and dir set to settings.FILE_UPLOAD_TEMP_DIR .
"def   mod   ( self , rhs ) :",define the method __mod__ with 2 arguments : self and rhs .
"if hasattr ( data , STR_ ) :","if data has an 'temporary_file_path ' attribute ,"
"def linenumbers ( value , autoescape = None ) :",define the function linenumbers with 2 arguments value and autoescape set to None .
if in comment :,"if incomment is true ,"
class Tags ( object ) :,derive the class Tags with base class object .
del attr,delete attr .
import random,import module random .
self . from email = from email or settings . DEFAULT FROM EMAIL,"if from_email exists substitute from_email for self.from_email , if not substitute settings.DEFAULT_FROM_EMAIL for self.from_email ."
"self . stdout . write ( "" STR_ "" % ( f . file , f . dirpath ) )","substitute ' % s ' in string `` UnicodeDecodeError : skipped file % s in % s '' with f.file and f.dirpath , write it to self.stdout ."
"strfunc = Name ( "" STR_ "" , prefix = unifunc . prefix )","strfunc is an instance of a class Name , created with 2 arguments : string `` __str__ '' and prefix as unifunc.prefix ."
"def   eq   ( self , other ) :",define the method __ne__ with 2 arguments : self and other .
if in valid var format string is None :,"if invalid_var_format_string is None ,"
 module = self .  resolve ( ),"call the method self._resolve , substitute the result for _module ."
return self . func ( value ),call the method self.func with an argument value .
from itertools import dropwhile,from itertools import dropwhile into default name space .
"def compress ( self , data list ) :",define the method compress with arguments self and data_list .
start += len ( toktext ),increment start by length of toktext .
existing . sort ( ),sort elements of list existing .
addr . encode ( STR_ ),call the addr.encode method with string 'ascii ' as an argument .
"fname = self .  key to file ( key , version )","call the function self._key_to_file with key and version as arguments , substitute it for fname ."
emitting = chunk [ : remaining ],"create list of first remaining elements of chunk , substitute it for emitting ."
output = fp . read ( ),"read file fp , substitute the read data for output ."
models = app config . get models ( in clude auto created = True ),"call the method app_config.get_models with include_auto_created set to boolean True , substitute the result for models ."
"if sys . platform == "" STR_ "" :","if sys.platform equals to string `` win32 '' ,"
"hint = "" STR_ "" % self . hint if self . hint else","if self.hint exists , replace ' % s ' in a string `` \n\tHINT : % s '' with value of self.hint , substitute it for hint , otherwise hint is an empty string ."
"from django . utils . encoding import force text , DEFAULT LOCALE ENCODING",from django.utils.encoding import force_text and DEFAULT_LOCALE_ENCODING into default name space .
if not unused char :,"if unused_char is false ,"
if self . use argparse :,"if self.use_argparse is true ,"
self .  ordering = [ ],self._ordering is an empty list .
"if is in stance ( value , list ) :","if valu is an instance of list type ,"
self . size = len ( content ),substitute length of content for self.size .
self . configure root ( root ),call the method self.configure_root with an argument root .
format key = STR_,format_key is a string 'DATETIME_INPUT_FORMATS ' .
"max age = max ( NUM_ , delta . days * NUM_ + delta . seconds )","multiply delta.days with an integer 86400 add to the result delta.seconds , if the result is greater than integer 0 ,"
for field in concrete model .  meta . many to many :,"for every field in concrete_model._meta.many_to_many ,"
finally :,"finally perform ,"
"warnings . warn ( "" STR_ "" "" STR_ "" % fixture name , RuntimeWarning )","call the method warnings.warn with 2 arguments : string `` No fixture data found for ' % s ' . ( File format may be invalid . ) '' ,"
elif self . fixture object count == self . loaded object count :,"otherwise if self.fixture_object_count equals self.loaded_object_count ,"
return res,return res .
executor = MigrationExecutor ( connections [ DEFAULT DB ALIAS ] ),"substitute them for app_label and migration_name , respectively . executor is an instance of MigrationExecutor , created with value under the DEFAULT_DB_ALIAS key of the connections dictionary ."
"return s . encode ( "" STR_ "" )",call the method e.encode with an argument string `` latin-1 '' .
"return ( path or STR_ % ( obj .   class   .   module   , obj .   class   .   name   ) , obj .  constructor args [ NUM_ ] , obj .  constructor args [ NUM_ ] , )","return a tuple with 3 elements : if path is true , path , in not , a string ' % s. % s ' formated with obj.__class__.__module__ ,"
"msg = ( "" STR_ "" "" STR_ "" "" STR_ "" )","msg is a tuple containing string `` \nYou have installed Django 's auth system , and do n't have any superusers defined.\nWould you like to create one now ? ( yes/no ) : `` ."
else :,"unpacked list field_value as an argument , substitute the result for value of under the field.attname key of the data dictionary . if not ,"
"def   init   ( self , * args , ** kwargs ) :","define the method __init__ with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
return ip str,return ip_str .
from email . header import Header,from email.header import Header into default name space .
self . validate ( value ),call the method self.validate with an argument value .
result = self . stream . read ( size ),"read size number of bytes from self.stream stream , store the result in the result ."
return self . empty value,return self.empty_value .
filters = [ ],filters is an empty list .
if ( self . negate and val1 ! = val2 ) or ( not self . negate and val1 == val2 ) :,"if self.negate is true and val1 is not equal to val2 , or if , self.negate is false and val1 equals val2 ,"
"os . write ( fd , current chunk )",write current_chunk to file fd .
guessed filename = used name,substitute used_name for guessed_filename .
bytes read = NUM_,bytes_read is integer 0 .
self . message context = None,self.message_context is None .
@ register . tag,"register.tag decorator ,"
if self . addr :,"if self.addr is true ,"
else :,"substitute the result for s. if not ,"
return language [ : p ] . lower ( ) + STR_ + language [ p + NUM_ : ] . lower ( ),"convert fist p elements of language to lowercase , append ' _ ' to it ,"
"level = config . pop ( STR_ , None )","remove config dictionary element under 'level ' key , if it exists substitute it for level , if not , level is None ."
raise NotImplementedError ( STR_ ),raise an NotImplementedError with an argument string 'Subclasses must define this method . ' .
try :,"'startapp ' and 'startproject ' . try ,"
self .  upload handlers = upload handlers,substitute upload_handlers for self._upload_handlers .
"elif char == \\' :

","otherwise if cahr equals a string '\\ ' ,"
self . in clude html = in clude html,substitute include_html for self.include_html .
self . allow empty first page = allow empty first page,substitute allow_empty_first_page for self.allow_empty_first_page .
"self . stdout . write ( self . style . NOTICE ( "" STR_ "" ) )","call the method self.style.NOTICE with string `` Run 'manage.py makemigrations ' to make new migrations , and then re-run 'manage.py migrate ' to apply them . '' as an argument , use the result as an argument for the call to the self.stdout.write method ."
self .  reset dicts ( dict  ),call the method self._reset_dicts with an argument dict_ .
def   next   ( self ) :,define the method __next__ with an argument self .
raise ValueError ( STR_ STR_ % e ),raise an ValueError exception with an argument string 'Unable to configure root logger : % s ' formated with e .
"return super ( BaseModelFormSet , self ) . in itial form count ( )","call the method initial_form_count from the base class of the class BaseModelFormSet , return the result ."
return locale . lower ( ),convert locale to lowercase and return it .
return DebugNode ( ),return an instance of DebugNode class .
if cursor and connection . in trospection . table name converter ( model .  meta . db table ) in table names :,"if cursor is true and return value of the function connection.introspection.table_name_converter called with an arugment : model._meta.db_table is contained in table_names ,"
if self . localize :,"if self.localize is true ,"
"def split leading dir ( self , path ) :",define the method split_leading_dir with 2 arguments self and path .
"if is in stance ( value , datetime . time ) :","if value is an instance of datetime.time ,"
skipped = [ ],skipped is an empty list .
"stats = [ NUM_ , NUM_ ]",stats is an list with 2 elements : 2 integers 0 .
self .   offset = timedelta ( minutes = offset ),"call the function timedelta with an argument minutes set to offset , substitute the result for self.__offset ."
"if not hasattr ( template , STR_ ) :","if template doesnt have a 'render ' attribute ,"
"for accessor name , object list in self . m2m data . items ( ) :",for every accessor_name and object_list is return value of the method self.m2m_data.items .
"except ( HTMLParseError , UnboundLocalError ) :","if HTMLParseError or UnboundLocalError exceptions are caught ,"
return SafeString ( str ( s ) ),"return an instance of SafeText , created with an argument s converted into a string ."
translators comment start = lineno,substitute lineno for translators_comment_start .
node . source = token . source,substitute token.source for node.source .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",raise an ValidationError with 2 arguments : value under the 'invalid ' key of the self.error_messages dictionary and code set to 'invalid ' .
"robotparser = sys . modules [   name   + "" STR_ "" ]","append string `` .moves.urllib_robotparser '' to __name__ , use it as an key to get the value from the sys.modules dictionary , substitute it for robotparser ."
best doublecolon len = doublecolon len,substitute doublecolon_len for best_doublecolon_len .
"from django . template import ( Lexer , TOKEN TEXT , TOKEN VAR , TOKEN BLOCK , TOKEN COMMENT , TRANSLATOR COMMENT MARK )","from django.template import Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK , TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK ."
result = self .  resolve ( ),"call the method self._resolve , substitute the result for result ."
if six . PY2 :,"if six.PY2 ,"
del cmd options [ STR_ ],delete value under the 'args ' key of the cmd_options dictionary .
field notes . append ( STR_ ),append string `` Field renamed because of name conflict . '' to field_notes .
def exhaust ( stream or iterable ) :,define the function exhaust with an argument stream_or_iterable .
return self .  headers [ header . lower ( ) ] [ NUM_ ],"convert header to lowercase , use it as the key to get the value from the self._headers dictionary , return the second element of the result ."
run syncdb = True,run_syncdb is boolean True .
"def decompress ( self , value ) :",define the method decompress with 2 arguments : self and value .
import random as random module,import module random as random_module .
"if data is None or is in stance ( data , dict ) :","RemovedInDjango19Warning and stacklevel set to integer 2. if data is None or data is an instance of dict type ,"
"return "" STR_ "" % ( self .   class   .   name   , self . level , self . msg , self . hint , self . obj , self . id )","in the string `` < % s : level= % r , msg= % r , hint= % r , obj= % r , id= % r > '' , replace ' % s ' with the name of the type of this class instance ,"
self .  leftover = b,self._leftover is an empty string .
"parser . add argument ( STR_ , metavar = STR_ , nargs = * , help = STR_ STR_ )","call the method parser.add_argument with 4 arguments : string 'args ' , metavar set to string 'table_name ' , nargs set to '* ' character ,"
def   iter   ( self ) :,"separated with string ' , ' , substitute ' % s ' with self.sequence , substitute ' % d ' with length of self.nodelist_loop , substitute ' % s ' with reversed_text . define the method __iter__ with an argument self ."
auto id = self . auto id,substitute self.auto_id for auto_id .
@ property,"property decorator ,"
for potfile in potfiles :,"for every potfile in potfiles ,"
if status ! = STATUS OK :,"if status is not equal to STATUS_OK ,"
"if hasattr ( mw instance , STR_ ) :",if mw_instance has an attribute named 'process_view ' .
for basedir in basedirs :,"for every basedir in basedirs ,"
stamp = time . mktime ( tt ),"call the method time.mktime with an argument tt , substitute the result for stamp ."
value = self . to python ( value ) . strip ( ),"call the method self.to_python with an argument value , strip the whitespaces from the result , substitute it for value ."
class IfParser ( object ) :,derive the class IfParser from the object base class .
if os . path . exists ( pot path ) :,"if pot_path file path exists ,"
"def push ( self , * args , ** kwargs ) :","define the method push with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
def from current timezone ( value ) :,define the function from_current_timezone with an argument value .
return response,return response .
"self . xml . startElement ( "" STR_ "" , { } )",call the method self.xml.startElement with argument string 'object ' and an empty dictionary .
 len = len,substitute len for _len .
return self . nodelist . render ( new context ),"call the method self.nodelist.render with an argument new_context , return the result ."
from django . utils . six . moves import in put,from django.utils.six.moves import input into default name space .
if stream :,"if stream is true ,"
"s = . join ( [ force text ( arg , encoding , strings only , errors ) for arg in s ] )","for every arg in s , call the function force_text with arg , encoding , strings_only and errors as arguments ,"
d = d [ idx ],substitute value under idx key of dictionary d for d .
return type ( self ) .   bool   ( self ),"call the __bool__ method with argument self , on the return value of the type function with argument self , return the result ."
locales = locale or all locales,"if locale is not false or None , substitute it for locales , otherwise substitute all_locales for locales ."
os .  exit ( NUM_ ),call the method os._exit with an argument integer 1 .
"warnings . simplefilter ( "" STR_ "" , RemovedInNextVersionWarning )",call the function warnings.simplefilter with 2 arguments : string `` default '' and RemovedInNextVersionWarning .
return usage,return usage .
from django . utils . http import cookie date,from django.utils.http import cookie_date into default name space .
import module ( app name ),call the function import_module with an argument app_name .
if len ( value ) ! = NUM_ :,"'Use SplitDateTimeField instead . ' , RemovedInDjango19Warning and stacklevel set to integer 2. if length of value is not equal to integer 2 ,"
"return path . split ( \\' , 1 )

","split path in two parts by '\\ ' string , return the result ."
def full clean ( self ) :,define the method full_clean with an argument self .
def   reduce   ( self ) :,define the method __reduce__ with an argument self .
from django . utils . six . moves import html entities,from django.utils.six.moves import html_entities into default name space .
if safe is not None :,"if safe is not None ,"
if self . match is None or self . match re . search ( f ) :,"if self.match is None or call to the method self.match_re.search with an argument f , evaluated to true ,"
"new migration = subclass ( "" STR_ "" % ( biggest number + NUM_ ) , app label )","dependencies set to a list of tuples with 2 elements : app_label and migration.name for every migration in merge_migrations . call the method subsclass with 2 arguments : string `` % 04i_merge '' , replace ' % 04i ' with biggest_number incremented by one ,"
def safeseq ( value ) :,define the function safeseq with an argument value .
return f,return f .
"fk =  get foreign key ( parent model , model , fk name = fk name )","call the function _get_foreign_key with 3 arguments : parent_model , model and fk_name=fk_name , substitute the result for fk ."
"key = bytes to text ( key , self . encoding )","call the method bytes_to_text with 2 arguments : key and self.encoding , substitute the result for key ."
if domain is not None :,"if domain is not None ,"
self . literal = None,"self.literal is None ,"
"extend = getattr ( definition , STR_ , True )","get the attribute 'extend ' of the cls object , if it exists substitute it for extend , if not extend is boolean True ."
return self .   cast ( ) < other,"call the method self.__cast , if the result is lesser than other , return boolean True , otherwise return boolean False ."
return template name,return template_name .
widget = self . field . widget,substitute self.field.widget for widget .
except Exception :,"if GET_override is not None , or otherwise generated with the call to the function pformat with an argument request.GET . if Exception exception is caught ,"
contents = contents or self . label,"if contents is false , substitute self.label for contents ."
"from django . template . loader import BaseLoader , get template from string , find template loader , make origin","from django.template.loader import BaseLoader , get_template_from_string , find_template_loader and make_origin into default name space ."
if not token . contents :,"if token.contents is false ,"
def i18n ( request ) :,define the function i18n with an argument request .
"if callable ( getattr ( self . stream , STR_ , None ) ) :","get 'getvalue ' attribute of the self.stream object , if it exists and is callable ,"
cursor = connection . cursor ( ),"call the connection.cursor method , substitute it for cursor ."
"acceptable endblocks = ( STR_ , STR_ % block name )","acceptable_endblocks is a tuple with 2 elements : string 'endblock ' and 'endblock % s ' , where ' % s ' replaced with block_name ."
self . exception = exception,substitute exception for self.exception .
"return "" STR_ "" % self . filter expression","return a string `` < Variable Node : % s > '' , substitute ' % s ' with self.filter_expression ."
if self . required and not value :,"if self.required is true and value is false ,"
return,return nothing .
if options [ STR_ ] :,"if value under the 'outlog ' key of options dictionary is true ,"
"data = self . field . bound data ( self . data , self . form . in itial . get ( self . name , self . field . in itial ) )","call the method self.field.bound_data with 2 arguments : self.data and value under the self.name key of the dictionary ,"
"def delete ( self , key , version = None ) :","define the method delete with self , key and version set to None as arguments ."
"sublist = STR_ % ( in dent , sublist , in dent , in dent )","sublist is an string '\n % s < ul > \n % s\n % s < /ul > \n % s ' , where every ' % s ' is replaced with indent , sublist , indent and indent , respectively ."
if data :,"if data is true ,"
"setattr ( filter func .  decorated function , attr , value )",set filter_func._decorated_function objects attr attribute to value .
"if field .  has changed ( field . to python ( in itial ) , data ) :","call the method field._has_changed with 2 arguments : return value of the function field.to_python called with an argument initial ,"
in puts = [ ],inputs is an empty list .
"from django . core . mail . message import ( EmailMessage , EmailMultiAlternatives , SafeMIMEText , SafeMIMEMultipart , DEFAULT ATTACHMENT MIME TYPE , make msgid , BadHeaderError , forbid multi line headers )","from django.core.mail.message import EmailMessage , EmailMultiAlternatives , SafeMIMEText , SafeMIMEMultipart ,"
"def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :","define the method subwidgets with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple ."
memo [ id ( self ) ] = result,substitute result for value under the id of self key of memo dictionary .
connection = connections [ options [ STR_ ] ],"get the value under the 'database ' key of the options dictionary , use it as the key to get the value from the connections dictionary , substitute the result for connection ."
"def update ( self , * args , ** kwargs ) :","define the method update with 3 arguments : self , unpacked list args and unpacked dictionary kwargs ."
"handler . addQuickElement ( "" STR_ "" , "" STR_ "" % ( item [ STR_ ] , item [ STR_ ] ) )","call the method handler.addQuickElement with an argument string `` author '' , `` % s ( % s ) '' ,"
"if hasattr ( hmac , "" STR_ "" ) :","join the results into a string , return it . if hmac has an attribute `` compare_digest '' ,"
"assert match , STR_",if match evaluates to False throw an exception with the string message 'unexpected call to parse_starttag ( ) ' .
"parser = self . create parser ( argv [ NUM_ ] , argv [ NUM_ ] )","call the method self.create_parser with first and second element of argv , substitute the result for parser ."
def previous page number ( self ) :,define the method previous_page_number with an argument self .
child loggers = [ ],child_loggers is an empty list .
for root in settings . ALLOWED INCLUDE ROOTS :,"for every root in settings.ALLOWED_INCLUDE_ROOTS ,"
return timezone . zone,return timezone.zone .
"if hasattr ( mw instance , STR_ ) :",if mw_instance has an attribute named 'process_exception ' .
"def   init   ( self , target , expression , var name ) :","define the method __init__ with 4 arguments : self , target , expression and var_name ."
import time,import module time .
return output,return output .
"self . stdout . write ( "" STR_ "" "" STR_ "" % ( app or project , STR_ . join ( extensions ) ) )","call the method self.stdout.write , with an argument string `` Rendering % s template files with extensions : % s\n '' ,"
class TemporaryFileUploadHandler ( FileUploadHandler ) :,derive the class TemporaryFileUploadHandler from the FileUploadHandler base class .
class LocaleRegexURLResolver ( RegexURLResolver ) :,"`` arguments ' % s ' not found . % d pattern ( s ) tried : % s '' , replace ' % s ' with lookup_view_s , args , kwargs , length of patterns , patterns , and respectively . derive the class LocaleRegexURLResolver with RegexURLResolver as base class ."
self . is  bound = data is not None or files is not None,"if data is not None or files is not None , self.is_bound is boolean True , otherwise it is boolean False ."
import yaml,import module yaml .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ )",or value equals return value of the call to Decimal with argument '-Inf ' raise an ValidationError with 2 arguments : value under the 'invalid ' key of the self.error_messages dictionary and code set to 'invalid ' .
open tags = open tags [ i + NUM_ : ],"create a list out of open_tags elements form ( i+1 ) -th index to the end , substitute it for open_tags ."
"for k2 , v2 in v :","for every k2 and v2 in v ,"
"meta = type ( str ( STR_ ) , ( object , ) , { } )","meta is an instance of a class named 'Meta ' , derived from the object base class , without any fields ."
bits = token . split contents ( ),"call the method token.split_contents , substitute the result for bits ."
"raise ValueError ( "" STR_ "" % date )",raise an ValueError exception with an argument string `` % r is not in a valid HTTP date format '' formated with date .
urlconf = request . urlconf,substitute request.urlconf for urlconf .
in put type = None,input_type is None .
"super ( ValidationError , self ) .   init   ( message , code , params )","call the __init__ method from the base class of the class ValidationError with arguments message , code and params ."
if not changes and self . verbosity >= NUM_ :,"if it exists or None if not and convert_apps set to app_labels , if it exists or None if not , substitute the result for changes . if changes is false and self.verbosity is greater than , or equal to iteger 1 ,"
self . cleaned data [ name ] = value,substitute the result for value . substitute value for the value under the name key of the self.cleaned_data dictionary .
"def   init   ( self , name , sysid , pubid ) :","define the method __init__ with arguments self , name , sysid and pubid ."
logging .  handlers . clear ( ),disable_existing is boolean True . call the method logging._handler.clear .
return obj,return obj .
return STR_ % self . data . minute,return a string ' % 02d ' formated with self.data.minute .
class DefusedExpatParser (  ExpatParser ) :,derive the class DefusedExpatParser from the _ExpatParser base class .
"wrapper = warn about renamed method ( class name , * renamed method )","call the function warn_about_renamed_method with 2 arguments : class_name and unpacked list renamed_method , substitute the result for wrapper ."
class IncludeNode ( Node ) :,derive the class IncludeNode from the Node base class .
"middleware = middleware class ( * m args , ** m kwargs )","call the function middleware_class with 2 arguments : unpacked list m_args and unpacked dictionary m_kwargs ,"
  contains   = new method proxy ( operator . contains ),"call the function new_method_proxy with an argument operator.contains , substitute the result for __contains__ ."
exclude . append ( f . name ),append f.name to exclude .
@ decorator,decorator decorator .
targets = [ key for key in executor . loader . graph . leaf nodes ( ) if key [ NUM_ ] == app label ],"with ' % s ' substituted for app_label , as arguments . for every key in return vale of the method executor.loader.graph.leaf_nodes , check if the first element of key equals to app_label ,"
elif STR_ in self . META :,"if 'HTTP_HOST ' is contained in self.META ,"
form . data [ form . add prefix ( self . fk . name ) ] = None,"use the result as an key to get the value of the form.data dictionary , assign it value None . call the method form.add_prefix with an argument self.fk.name ,"
return out,return out .
"background = dict ( ( color names [ x ] , STR_ % x ) for x in range ( NUM_ ) )","for every x in sequence of integers from 0 to 7. background is a dictionary created with elements : x appended to a string ' 4 ' for value under the key x of color_names dictionary ,"
"def setdefault ( self , key , default = None ) :","define the method setdefault with 3 arguments : self , key and default set to None ."
if response . has header ( STR_ ) :,"if call to the method response.has_header with string 'Cache-Control ' as an argument returns boolean True ,"
"max width = min ( ( line . endswith ( STR_ ) and width + NUM_  or width ) , width )","if line ends with a new line character substitute width incremented by integer 1 for max_width , if not substitute width for max_width ."
"help = "" STR_ """,help is a string `` Creates new migration ( s ) for apps . `` .
if item [ STR_ ] is not None :,"if value under the 'description ' key of the item dictionary is not None ,"
"return BoundField ( self , field , name )","return an instance of BoundField class , created with arguments self , field and name ."
for dirname in dirs [ : ] :,"for dirname in dirs ,"
"for match in regexes [ state ] . finditer ( text , start ) :","get the value under the state key of the regexes dictionary , call the method finditer on the result with 2 arguments : text and start ,"
"raise ValueError ( "" STR_ "" % key )","raise an exception of the class ValueError with string `` Key ' % s ' not found '' as argument , ' % s ' is substituted for key ."
@ total ordering,"decorator total_ordering ,"
"m = regex . search ( text , pos )",call the method regex.search with 2 arguments : text and pos .
@ wraps ( func ),"string `` memoize wrapper is deprecated and will be removed in Django 1.9 . Use django.utils.lru_cache instead . `` , RemovedInDjango19Warning and stacklevel set to integer 2. decorator function wraps with an argument func ."
num entries = len ( filelist ),num_entries is length of filelist .
if ip str . count ( STR_ ) > NUM_ :,"if count of occurrence of ' : ' in ip_str is greater than integer 7 ,"
url = hashlib . md5 ( force bytes ( iri to uri ( request . build absolute uri ( ) ) ) ),"call method request.build_absolute_uri , use the result as an argument for function call of iri_to_uri ,"
"def reraise ( tp , value , tb = None ) :","define the function reraise with 3 arguments : tp , value and tb set to None ."
"if not hasattr ( parser , STR_ ) :","if parser doesnt have an '_namedCycleNodes ' attribute ,"
oldvalue = root [ RESULT ],substitute value under the RESULT key of the root dictionary for oldvalue .
if not regex match :,"if regex_match is false ,"
for key in sorted ( user settings ) :,"for every key in sorted list of user_settings ,"
"def ljust ( value , arg ) :",define the function ljust with 2 arguments value and arg .
except UnicodeError :,"if UnicodeError exception is caught ,"
def deactivate ( ) :,define the function deactivate .
def D ( self ) :,define the method D with an argument self .
self .  current [ field . name ] = value,substitute value for value under the field.name key of the self._current dictionary .
"raise TemplateSyntaxError ( "" STR_ "" "" STR_ "" % bits [ NUM_ ] )","raise an TemplateSyntaxError exception with an argument string `` ' % s ' takes at least one argument ( path to a view ) '' ,"
if not settings . DEBUG and not settings . ALLOWED HOSTS :,"if not settings.DEBUG is true and settings.ALLOWED_HOSTS is false ,"
return in t ( time . mktime ( self . data . timetuple ( ) ) ),"call the method self.data.timetuple , use the result as an argument for the call to the function time.mktime ,"
return True,return boolean True .
"msgs with ctxt = ( "" STR_ "" % ( context , CONTEXT SEPARATOR , singular ) , "" STR_ "" % ( context , CONTEXT SEPARATOR , plural ) , number )","msgs_with_ctxt is a tuple containing 2 elements : string created by concatenating context , CONTEXT_SEPARATOR and singular ,"
extra params [ STR_ ] = True,"value under the 'primary_key ' key of the extra_params dictionary is boolean True ,"
elif ch == | :,"otherwise if ch equals a string '| ' ,"
return self . new objects,return self.new_objects .
traceback . print exc ( ),call the traceback.print_exc method .
if neg :,"if neg is true ,"
SimpleCookie = http cookies . SimpleCookie,substitute http_cookies.SimpleCookie for SimpleCookie .
cls .   unicode   = cls .   text cast,substitute cls.__text_cast for cls.__text_cast .
 translations = { },_translations is an empty dictionary .
def restart with reloader ( ) :,define the function restart_with_reloader .
"stderr = getattr ( self , STR_ , OutputWrapper ( sys . stderr , self . style . ERROR ) )","if it exists , get 'stderr ' attribute of self , substitute it for stderr , if not , stderr is an instance of OutputWrapper class ,"
in itial forms = self . in itial form count ( ),"call the method self.initial_form_count , return the result initial_forms ."
"return save instance ( self , self . in stance , self .  meta . fields , fail message , commit , self .  meta . exclude , construct = False )","call the function with 7 arguments : self , self.instance , self._meta.fields , fail_message , commit , self._meta.exclude ,"
self . template cache [ key ] = TemplateDoesNotExist,substitute TemplateDoesNotExist for self.find_template_cache dictionary value under the key key .
self . activated = False,self.activated is boolean False .
if data is not None :,"if data is not None ,"
response [ STR_ ] = STR_,substitute char ' 0 ' for the value under the 'Content-Length ' key of the response dictionary .
"raise TypeError ( "" STR_ "" )",raise an TypeError with an argument string `` relative imports require the 'package ' argument '' .
self .  view middleware = [ ],self._view_middleware is an empty list .
def first ( value ) :,define the function first with an argument value .
"translation = self .  new gnu trans ( localedir , use null fallback )","call the function self._new_gnu_trans with 2 arguments : localedir and use_null_fallback , substitute the result for translation ."
"logger . warning ( STR_ , request . path , extra = { STR_ : NUM_ , STR_ : request } )","substitute ' % s ' in 'Forbidden ( Permission denied ) : % s ' with request.path , extra is an dictionary with two pairs of elements ,"
"default error messages = { STR_ :   ( STR_ ) , }","default_error_messages is an dictionary with an initial entry : result of the function _ called with an argument string ,"
raise SerializerDoesNotExist ( format ),raise a SerializerDoesNotExist exception with an argument format .
output . append ( options ),append options to output .
"raise ImproperlyConfigured ( "" STR_ "" % DEFAULT CACHE ALIAS )","raise an exception ImproperlyConfigured with string `` You must define a ' % s ' cache '' as argument , with ' % s ' replaced with DEFAULT_CACHE_ALIAS converted into a string ."
def dec ( func ) :,"define the function dec with an argument func ,"
from django . core . exceptions import SuspiciousMultipartForm,from django.core.exceptions import SuspiciousMultipartF into default name space .
with context . push ( ) :,"call the method context.push , with the result perform ,"
"def   init   ( self , template , * args , ** kwargs ) :","define the method __init__ with 4 arguments : self , template , unpacked list args and unpacked dictionary kwargs ."
for val in value :,"for every o in opts . for every val in value ,"
self . default kwargs = default kwargs or { },"if default_kwargs exists , substitute it for self.default_kwargs , otherwise self.default_kwargs is an empty dictionary ."
def is  serious ( self ) :,"replace all the ' % r ' with self.level , self.msg , self.hint . self.obj and self.id , respectively , return the result . define the method is_serious with argument self ."
value = field . clean ( value ),"call the method field.clean with an argument value , substitute the result for value ."
"self . stream . write ( "" STR_ "" )",write a ' [ ' to the self.stream file stream .
last = root [ PREV ],substitute value under the PREV key of the root dictionary for last .
"return STR_ . join ( sql flush ( self . style , connections [ options [ STR_ ] ] , only django = True ) )","call the sql_flush function with self.style , connections under the key with the value of options dictionary under the 'database ' key ,"
"result . append ( self . create token ( self . template string [ start : end ] , ( start , end ) , True ) )","call the method self.create_token with 3 arguments : self.template_string list elements from start index to end index ,"
"def render ( self , name , value , attrs = None , choices = ( ) ) :","define the method render with 5 arguments : self , name , value , attrs set to None and choices set to an empty tuple ."
"from django . forms . fields import Field , FileField",from django.forms.fields import Field and FileField into default name space .
self . validate key ( key ),call the method self.validate_key with argument key .
css classes = bf . css classes ( ),"call the method bf.css_classes , substitute the result for css_classes ."
text = force text ( text ),"call the function force_text with an argument text , substitute the result for text ."
widget . attrs . update ( extra attrs ),update widget.attrs dictionary with extra_attrs .
get language bidi = lambda : settings . LANGUAGE CODE in settings . LANGUAGES BIDI,get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI .
errors = [ model . check ( ** kwargs ) for model in apps . get models ( ) if app configs is None or model .  meta . app config in app configs ],"call the model.check method with unpacked dictionary kwargs for every model in return value of function apps.get_models ,"
bit = . join ( trans bit ),"join trans_bit into a string separated with whitespaces , substitute the result for bit ."
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = DEFAULT DB ALIAS , help = STR_ )","dest set to string 'interactive ' , default set to boolean True , help as a string 'Tells Django to NOT prompt the user for input of any kind. ' . call the method parser.add_argument with 5 arguments : string ' -- database ' , action set to string 'store ' , dest as a string 'database ' ,"
if len ( args ) ! = NUM_ :,"if length of args is not equal to integer 2 ,"
"return super ( TimeField , self ) . to python ( value )","call the method to_python with an argument value from the base class of the TimeField class , return the result ."
if imatch :,"if imatch is true ,"
"def add css ( self , data ) :",define the method add_css with arguments self and data .
m = data . get ( self . month field % name ),"format self.month_field string with name , use it as the key for the data dictionary , substitute the result for m ."
"def yesno ( value , arg = None ) :",define the function yesno with 2 arguments value and arg set to None .
Module six moves urllib response .  moved attributes =  urllib response moved attributes,substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes .
serializers = { },serializers is an empty dictionary .
new ip = [ ],"new_ip is an empty list ,"
"def get exception response ( self , request , resolver , status code ) :","define method get_exception_response , with self class instance , request , resolver and status_code as the arguments ."
suffix = d [ STR_ ],"substitute value under the 'suffix ' key of dictionary d , substitute it for suffix ."
"if hasattr ( self , STR_ ) :","if self has an 'error_dict ' attribute ,"
return VariableNode ( filter expression ),return an instance of VariableNode class with an argument filter_expression .
"self . selected fields = options . pop ( "" STR_ "" , None )","if the key doesnt exists call the six.String function and substitute the result for self.stream . remove the 'fields ' key from the options dictionary and substitute it for self.selected_fields ,"
"def now ( parser , token ) :",define the function now with 2 arguments : parser and token .
"if self . domain not in ( STR_ , STR_ ) :","if self.domain is not equal to string 'django ' or string 'djangojs ' ,"
"sorted issues = [ ( criticals , STR_ ) , ( errors , STR_ ) , ( warnings , STR_ ) , ( in fos , STR_ ) , ( debugs , STR_ ) , ]","sorted_issues is a list of tuples with 5 entries : criticals and 'CRITICALS ' , errors and 'ERRORS ' , warnings and 'WARNINGS ' ,"
result = result [ : start ] + [ in ner ],"append list with element inner to list containing first start elements of result , substitute it for result ."
self .   locale = to locale ( language ),"call the function to_locale with an argument language , substitute it for self.__locale ."
except Exception :,"if Exception exception is caught ,"
return result,return result
return list ( self . iteritems ( ) ),"call the method self.iteritems , return list of results ."
"fixture name , ser fmt , cmp fmt = self . parse name ( fixture label )","call the method self.parse_name with an argument fixture_label , substitute the result for fixture_name , ser_fmt , cmp_fmt , respective ."
middle = middle [ : - len ( punctuation ) ],"substitute elements of middle from the beginning to the negative length of punctuation , for middle ."
from importlib import import module,from importlib import import_module into default name space .
kwargs [ STR_ ] = self . fk . rel . field name,substitute self.fk.rel.field_name for value under the 'to_field ' key of the kwargs dictionary .
"return iter ( getattr ( d ,  iterkeys ) ( ** kw ) )","get _iterkeys attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,"
return mod . register,return mod.register .
"message = "" STR_ "" % ( self . format ( record ) , request repr )","message is an string `` % s\n\nRequest repr ( ) : % s '' formated with the result of the metod self.format with an argument record ,"
urlresolvers . set urlconf ( urlconf ),call the method urlresolvers.set_urlconf with urlconf as the argument .
def urlunquote ( quoted url ) :,define the function urlunquote with an argument quoted_url .
for val in value :,"and code set to an string 'required ' . for every val in value ,"
@ register . filter ( is  safe = True ),"result of the m.group method called with an argument integer 0 converted into lowercase and t , return the result . decorator function register.filter with an argument is_safe set to boolean True ."
"def   init   ( self , name , content , content type = STR_ ) :","define the method __init__ with 4 arguments : self , name , content and content_type defaulting to a string 'text/plain ' ."
deps = [ ],deps is an empty list .
"top errors . extend ( [   ( STR_ ) % { STR_ : name , STR_ : force text ( e ) } for e in bf errors ] )","call the function _ with an argument string ' ( Hidden field % ( name ) s ) % ( error ) s ' , where ' % ( name ) s ' is replaced with name ,"
except pickle . PickleError :,"if pickle.PickleError exception is caught ,"
"if not hasattr ( f , STR_ ) :","if f doesnt has an 'save_form_data ' attribute ,"
return self . nodelist false . render ( context ),"call the method self.nodelist_false.render with an argument context , return the result ."
"handler . startElement ( "" STR_ "" , { } )",call the method handler.endElement with 2 arguments : string 'author ' and an empty dictionary .
if kwds :,"if kwds is true ,"
EventHandler . modified code = I18N MODIFIED,EventHandler.modified_code is I18N_MODIFIED .
raise CommandError ( STR_ % connection . client . executable name ),"raise an CommandError exception with an argument string 'You appear not to have the % r program installed or on your path . ' ,"
"return formats . localize input ( value , self . format or formats . get format ( self . format key ) [ NUM_ ] )","call the function formats.localize_input with 2 arguments : value and self.format if true , if not ,"
else :,"if not ,"
"choices = list ( chain ( self . choices , choices ) )","call the function chain with 2 arguments : self.choices and choices , convert the result into a list and substitute it for choices ."
os . makedirs ( self . default locale path ),create a directory self.default_locale_path .
return len ( self . get queryset ( ) ),"call the method self.get_queryset , return the length of the result ."
"parser . add argument ( STR_ , default = DEFAULT DB ALIAS , help = STR_ STR_ )","call the method parser.add_argument with 3 arguments : string ' -- database ' , default set to DEFAULT_DB_ALIAS ,"
"value = getattr ( obj , field . rel . field name )","unpacked list field_value as an argument , substitute the result for obj . get field.rel.field_name attribute of the object obj , substitute it for value ."
def parse cookie ( cookie ) :,define the function parse_cookie with cookie as the argument .
"self . stderr = OutputWrapper ( options . get ( STR_ , sys . stderr ) )","self.stderr is an OutputWrapper object instance , created with value under the 'stderr ' key of the options dictionary as an argument ,"
p = i,where ' % s ' is replaced with subject . substitute i for p .
def total ordering ( cls ) :,define the function total_ordering with an argument cls .
confirm = in put ( msg ),call the method input with an argument msg and store the result in confirm .
"def   eq   ( self , other ) :",define the method __eq__ with 2 arguments : self and other .
self . reset ( ),call the method self.reset .
attrs += [ attr . name for attr in self .  moved attributes ],append attr.name to attrs for every attr in self._moved_attributes .
defaults [ STR_ ] = True,"and i is greater than or equal to self.min_num , value under the 'empty_permitted ' key of the defaults dictionary is boolean True ."
return  translations [ language ],"return _translations dictionary value , under the language key ."
"value = super ( TypedChoiceField , self ) . clean ( value )","call the method clean with an argument value from the base class of the class TypedChoiceField , substitute the result for value ."
"def update watch ( sender = None , ** kwargs ) :",define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs .
"def get meta ( self , table name ) :",define the method get_meta with arguments self and table_name .
return attr,and third element of the function sys.exc_info result . return attr .
"self . default validators = validators . ip address validators ( protocol , unpack ipv4 ) [ NUM_ ]","call the method validators.ip_address_validators with arguments protocol , unpack_ipv4 , substitute first element of the result for self.default_validators ."
ip str =  explode shorthand ip string ( ip str ),"call the function _explode_shorthand_ip_string with an argument ip_str , substitute the result for ip_str ."
def copy ( self ) :,define the method copy with an argument self .
for date key in date keys :,"for every date_key in date_keys ,"
except UnicodeDecodeError :,"if UnicodeDecodeError exception is caught ,"
self . close ( ),call the method self.close .
"apps . setdefault ( pattern . app name , [ ] ) . append ( pattern . namespace )","call the method apps.setdefault with 2 arguments : pattern and an empty list , append to the resulting object pattern.namespace ."
"plural re = re . compile ( r "" "" "" STR_ "" "" "" )","call the function re.compile with an argument raw string `` ^\s*plural $ '' , substitute the result for plural_re ."
"from django . core . cache . backends . base import BaseCache , DEFAULT TIMEOUT",from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space .
"string types = str ,",substitute str for string_types .
"TOKEN MAPPING = { TOKEN TEXT : STR_ , TOKEN VAR : STR_ , TOKEN BLOCK : STR_ , TOKEN COMMENT : STR_ , }","TOKEN_MAPPING is a dictionary with 4 initial entries : 'Text ' for TOKEN_TEXT , 'Var ' for TOKEN_VAR , 'Block ' for TOKEN_BLOCK ,"
"def clean ( self , value ) :",define the method clean with arguments self and value .
self . load label ( fixture label ),call the method self.load_label with an argument fixture_label .
"cache = BaseDatabaseCache ( tablename , { } )","cache is an instance of BaseDatabaseCache class , created with arguments : tablename and an empty dictionary ."
with transaction . atomic ( using = connection . alias ) :,"with call to the function transaction.atomic with using set to connection.alias as argument ,"
"exp = self .  expire info . get ( key , - NUM_ )","call the method self._expire_info.get with key and integer -1 as arguments , substitute the result for exp ."
return value,"message , code as a string 'ambiguous_timezone ' and params as params , and third element of the return value of the function sys.exc_info . return value ."
def in itial forms ( self ) :,define the method initial_forms with an argument self .
raise EmptyPage ( STR_ ),raise an EmptyPage exception with string 'That page contains no results ' as an argument .
"def   init   ( self , msg , params = ( ) ) :","define the method __init__ with 3 arguments : self , msg and params set to an empty tuple ."
new name += STR_,append string '_field ' to new_name .
for shell in available shells :,"for every shell in available_shells ,"
if extracted :,"if extracted is true ,"
if args :,"if args is true ,"
def  get closed ( self ) :,define the method _get_closed with argument self .
self . use ipv6 = True,self.use_ipv6 is boolean True .
"def led ( self , left , parser ) :","define the method led with 3 arguments self , left and parser ."
if jan1 weekday == NUM_  or ( jan1 weekday == NUM_  and calendar . is leap ( self . data . year - NUM_ ) ) :,"if jan1_weekday equals integer 5 , or if jan1_weekday equals integer 6 and call to the function calendar.isleap ,"
"def handle app config ( self , app config , ** options ) :","and help set to a string 'Nominates a database to print the SQL for . Defaults to the `` default '' database. ' . define the method handle_app_config with 3 arguments : self , app_config and unpacked dictionary options ."
django . setup ( ),call the django.setup method .
"def   init   ( self , field ) :",define the method __init__ with 2 arguments : self and field .
BASE36 ALPHABET = STR_,BASE36_ALPHABET is a string '0123456789abcdefghijklmnopqrstuvwxyz ' .
"for reference , receivers in obj . unresolved references . items ( ) :","for every reference and receivers in return value of the call of obj.unresolved_references.items method ,"
from django . utils . ipv6 import is  valid ipv6 address,from django.utils.ipv6 import is_valid_ipv6_address into default name space .
in stance . save ( ),call the method instance.save .
"def create table ( self , database , tablename ) :","define the method create_table with arguments self , database and tablename ."
digits . append ( - ),append '- ' to digits .
"from django . http . utils import fix location header , conditional content removal","HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden , HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone , HttpResponseServerError , Http404 , BadHeaderError , JsonResponse into default name space . from django.http.utils import fix_location_header and conditional_content_removal into default name space ."
"for key , value in parse qsl ( query string or , keep blank values = True , encoding = encoding ) :","for every key and value in return value of the parse_qsl with 3 arguments : query_string is it exists or an empty string if not ,"
output . append ( html [ field ] ),"get the value under the field key of the html dictionary , append it to output ."
"parser . add argument ( STR_ , metavar = STR_ , nargs = * , help = STR_ )","call the method parser.add_argument with 4 arguments : string 'args ' , metavar set to string 'app_label [ .ModelName ] ' ,"
elif name == STR_ :,"otherwise if name starts with a string 'string ' ,"
self . stdout . write ( STR_ % dirname ),"replace ' % s ' in string 'ignoring directory % s\n ' with dirname , write it to self.stdout stream ."
self . addr = self . addr [ NUM_ : - NUM_ ],substitute self.addr without the first and last element for self.addr .
"def render node ( self , node , context ) :","define the method render_node with 3 arguments : self , node and context ."
"@ register . filter ( is  safe = True , needs autoescape = True )",return the result . decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
salt = force bytes ( salt ),"call the function force_bytes with an argument salt , substitute the result for salt ."
if not renamed :,"if renamed is boolean False ,"
"def handle ( self , * app labels , ** options ) :","and help is a string 'Specifies file to which the output is written. ' . define the method handle with arguments self , unpacked list app_labels and unpacked dictionary options ."
"if hasattr ( filter func , "" STR_ "" ) :","if filter_func has an attribute `` _decorated_function '' ,"
while NUM_ :,"endless loop ,"
"value = super ( DictWrapper , self ) .   getitem   ( key )","call the method __getitem__ with an argument key from the base class of the class DictWrapper , substitute the result for value ."
fp . write ( msgs ),"with the result renamed to fp , perform the following : write msgs to fp ."
dir suffix = STR_ % os . sep,"if any resulting element is true , return boolean True , otherwise return boolean False . convert os.sep into a string and append '* ' to it , substitute the result for dir_suffix ."
limit choices to = formfield . limit choices to,substitute formfield.limit_choices_to for limit_choices_to .
concrete model = obj .  meta . concrete model,substitute obj._meta.concrete_model for concrete_model .
return data,return data .
if html message :,"message , settings.SERVER_EMAIL , list of second elements of a for every a in settings.Managers and connection set to connection , as arguments , assign the result to mail . if html_message is true ,"
"def get available name ( self , name ) :",define the method get_available_name with arguments self and name .
"if hasattr ( timezone , STR_ ) :","if timezone has an attribute 'normalize ' ,"
self . error list . extend ( message . error list ),extend the self.error_list list with message.error_list .
if name . lower ( ) in ADDRESS HEADERS :,"convert name to lower case , if it is contained in ADDRESS_HEADERS , s"
"def remove tags ( html , tags ) :",define the function remove_tags with 2 arguments : html and tags .
for item in self . items :,"for every item in self.items ,"
"return STR_ % ( id  , first select )","substitute ' % s ' in string ' % s_ % s ' with id_ and first_select , return it ."
"def to python ( self , value ) :",unpacked list args and unpacked dictionary kwargs . define the method to_python with arguments self and value .
from django . forms . fields import *,from django.forms.fields import everything into default name space .
if hextets [ in dex ] == STR_ :,"if value under the index key of the hextets dictionary equals to string ' 0 ' ,"
"if field type not in ( STR_ , STR_ ) :","if field_type is not equal to string 'TextField ( ' or string 'CharField ( ' ,"
"msg = ( "" STR_ "" "" STR_ "" )",msg is an string `` django.utils.text.javascript_quote ( ) is deprecated . Use django.utils.html.escapejs ( ) instead . `` .
return smart text ( field . rel . to .  meta . pk . to python ( value ) ),"call the method field.rel.to._meta.pk.to_python with an argument value , use the result as an argument for the call to the ,"
for fname in self .  list cache files ( ) :,"if fname is contained in self._list_cache_files method return value ,"
"result [ - NUM_ ] = Choice ( [ None , result [ - NUM_ ] ] )","last element of result is an instance of Choice class , created with an argument list with 2 elements : None and last element of result ."
sys . stdout = NullDevice ( ),sys.stdout is an instance of NullDevice class .
return six . text type ( self . data . year ) [ NUM_ : ],"call the function six.text_type with an argument self.data.year , return the result without the first 2 elements ."
return WRAPPER ASSIGNMENTS,return WRAPPER_ASSIGNMENTS .
class FieldError ( Exception ) :,derive the class FieldError from the Exception base class .
if result is not root :,"if result is not root ,"
return list ( reversed ( modules ) ),"reverse the order of modules elements , put them into a list , return it ."
class Textarea ( Widget ) :,derive the class Textarea from the Widget base class .
"def   init   ( self , variables ) :",define the method __init__ with 2 arguments : self and variables .
if in itial forms > self . max num >= NUM_ :,"if initial_forms is grater than self.max_num is grater or equal to integer 0 ,"
return CsrfTokenNode ( ),return an instance of CsrfTokenNode class .
"MONTHS AP = { NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) , NUM_ : pgettext lazy ( STR_ , STR_ ) }","7 for 'jul ' , 8 for 'aug ' , 9 for 'sep ' , 10 for 'oct ' , 11 for 'nov ' and 12 for 'dec ' . MONTHS_AP is an dictionary with 12 entries : result of the function pgettext_lazy with 2 arguments : 'abbrev . month ' and 'Jan . ' for 1 ,"
merge migrations . append ( migration ),substitute the result for migration.ancestry . append migration to merge_migrations .
 mtimes = { },_mtimes is an empty dictionary .
reversed text = STR_ if self . is  reversed else,"if self.is_reversed is true , substitute reversed_text is an string ' reversed ' , if not , reversed_text is an empty string ."
"for name , value in props . items ( ) :","for every name and value in items of props dictionary ,"
"row data = tuple ( d .  get pk val ( ) if hasattr ( d , STR_ ) else d for d in row data )","for every field in unique_check , if field is contained in form.cleaned_data . create a generator that for every d in row_data , if d has an '_get_pk_val ' attribute ,"
return  get timezone name ( get default timezone ( ) ),"call the function get_default_timezone , use the result as an argument for the call to the function _get_timezone_name , return the result ."
"self .  cache . set multi ( safe data , self . get backend timeout ( timeout ) )","call the method self._cache.set_multi with safe_data , self.get_backend_timeout ( timeout ) as arguments ."
"super ( Deserializer , self ) .   init   ( stream or string , ** options )",call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options .
trans bit . append ( bit ),append bit to trans_bit .
"if sys . version info >= ( NUM_ , NUM_ , NUM_ ) :","if sys.version_info is greater than or equal to a tuple with 3 elements : integers 2 , 7 and 2 , respectively ,"
"self . choices . append ( ( full file , f ) )",and only if self.match is None or return value of the method self.match_re.search called with an argument f is true . append a tuple containing 2 elements : full_file and f to self.choices list .
import tempfile,import module tempfile .
if key in d :,"if key is contained in d ,"
"FormSet = modelformset factory ( model , ** kwargs )","extra for 'extra ' , can_delete for 'can_delete ' , can_order for 'can_order ' , fields for 'fields ' , exclude for 'exclude ' , min_num for 'min_num ' , max_num for 'max_num ' , widgets for 'widgets ' , validate_min for 'validate_min ' , validate_max for 'validate_max ' , localized_fields for 'localized_fields ' , labels for 'labels ' , help_texts for 'help_texts ' , and error_messages for 'error_messages ' . call the function modelformset_factory with 2 arguments : model and unpacked dictionary kwargs , substitute the result for FormSet ."
logging config func = import string ( logging config ),"call the function import_string with an argument logging_config , substitute the result for logging_config_func ."
if site in sites2 :,"if site is contained in sites2 ,"
self .  queryset = qs,substitute qs for self._queryset .
"def widget attrs ( self , widget ) :",define the method widget_attrs with arguments self and widget .
"def to python ( self , value ) :",define the method to_python with arguments self and value .
return value [ slice ( * bits ) ],"slice the list value with unpacked list bits as an argument , return the result ."
if len ( app labels ) == NUM_ :,"if length of app_labels is equal to integer 1 ,"
if self . asvar :,"if self.asvar is true ,"
key = args,substitute args for key .
value = self . make bytes ( value ),"call the method self.make_bytes with an argument value , substitute the result for value ."
if not value and self . required :,"if value is false and self.required is true ,"
questioner = MigrationQuestioner ( defaults = { STR_ : True } ),"questioner is an instance of a InteractiveMigrationQuestioner class , created with an argument : defaults set to dictionary with entry :"
"self . stdout . write ( self . style . MIGRATE LABEL ( "" STR_ "" ) + ( "" STR_ "" . join ( executor . loader . unmigrated apps ) ) )","join the executor.loader.unmigrated_apps into a string separated by string ' , ' append it to the end of a string `` Synchronize unmigrated apps : `` ,"
"return type .   new   ( cls , name , ( ) , d )","call the method type.__new__ with 4 arguments : cls , name , empty tuple and d , return the result ."
"def get cache key ( request , key prefix = None , method = STR_ , cache = None ) :","define the function get_cache_key , with request key_prefix set to None , method set to 'GET ' and cache set to None as arguments ."
if last == NUM_ :,"if las equals integer 1 ,"
"os . dup2 ( se . fileno ( ) , sys . stderr . fileno ( ) )",call the method os.dup2 with 2 arguments : result of the method se.fileno and result of the method sys.stderr.fileno .
from django . db . migrations . loader import MigrationLoader,from django.db.migrations.loader import MigrationLoader into default name space .
from django . utils import archive,from django.utils import archive into default name space .
visible issue count += len ( is sues ),increment visible_issue_count for length of issues .
elif callable ( func ) :,"otherwise if func is callable object ,"
from django . core . exceptions import AppRegistryNotReady,from django.core.exceptions import AppRegistryNotReady into default name space .
self . choice cache = None,self.choice_cache is None .
"raise CommandError ( "" STR_ "" + "" STR_ "" + "" STR_ "" )","raise an CommandError exception with an argument string `` Django does n't know which syntax to use for your SQL statements , \n ''"
self . keyOrder . append ( key ),append key to self.keyOrder .
"self . stdout . write ( "" STR_ "" % migration . name )","append migration.name to string ' - ' , write it to self.stdout stream ."
break,break from the endless loop .
from django . core import serializers,from django.core import serializers into default name space .
  imul   = complain,substitute complain for __imul__ .
else :,"substitute the result for proxy . if not ,"
"open method , mode = self . compression formats [ cmp fmt ]","self.parse_name , assign the result to _ , ser_fmt and cmp_fmt , respectively . get the value under the cmp_fmt key of the self.compression_formats dictionary , assign it to open_method and mode ."
"def create var ( self , value ) :",define the method create_var with 2 arguments : self and value .
BASE64 ALPHABET = BASE62 ALPHABET + STR_,"append string '-_ ' to the BASE62_ALPHABET , substitute it for BASE64_ALPHABET ."
"return getattr (  prefixes , "" STR_ "" , / )","get 'value ' attribute of the _prefixes , if it exists , return it , otherwise return '/ ' ."
fmt = get format ( STR_ ),"call the function get_format with an argument string 'DATE_FORMAT ' , substitute it for fmt ."
want unicode = True,want_unicode is boolean True .
"raise TypeError ( "" STR_ "" + illegal formatting . group ( NUM_ ) )","raise an TypeError exception with an argument : result of the method illegal_formatting.group called with an argument ,"
if stream created :,"if stream_created is true ,"
"if ( is in stance ( data , Node ) and not data . negated and ( data . connector == conn type or len ( data ) == NUM_ ) ) :","if data is instance of Node and data.negated is false , and if data.connector equals conn_type or length of data equals integer 1 ,"
"id = "" STR_ "" % self . id if self . id else "" ""","if self.id exists , convert self.id to a string , surround it with round brackets , substitute id for it , otherwise id is an empty string ."
"if is in stance ( val , tuple ) :","if val is an instance of tuple ,"
"if is in stance ( self .  regex , six . string types ) :","if self.regex is not an instance of six.string_types ,"
class PyLibMCCache ( BaseMemcachedCache ) :,derive the class PyLibMCCache from BaseMemcachedCache base class .
title = list  [ i ],substitute i-th element of list for title .
"link prev , link next , key , result = link","substitute link for link_prev , link_next , key and result , respectively ."
"elif action == "" STR_ "" :","otherwise if action equals to string 'apply_success ' ,"
from django . core . serializers . python import Serializer as PythonSerializer,from django.core.serializers.python import Serializer as PythonSerializer into default name space .
for fixture dir in fixture dirs :,"for every fixture_dir in fixture_dirs ,"
"domains = ( STR_ , STR_ )",domains is a tuple with 2 elements : strings 'djangojs ' and 'django ' .
return ZERO,return ZERO .
"chunk = handler . receive data chunk ( chunk , counters [ i ] )","call the method handler.receive_data_chunk with 2 arguments : chunk and i-th element of counters , substitute the result for chunk ."
def use argparse ( self ) :,"define the method use_argparse with an argument self ,"
raise ValueError ( e ),raise an ValueError exception with an argument e .
 encoding = None,_encoding is None .
"return InMemoryUploadedFile ( file = self . file , field name = self . field name , name = self . file name , content type = self . content type , size = file size , charset = self . charset , content type extra = self . content type extra )","initialize the object of a InMemoryUploadedFile class with arguments : file set to self.file , field_name set to self.field_name ,"
self . validators . append ( validators . MaxValueValidator ( max value ) ),"call the method validators.MaxValueValidator with max_value converted into an integer , append the result to list self.validators ."
class DictConfigurator ( BaseConfigurator ) :,derive the class DictConfigurator from the BaseConfigurator base class .
"if is in stance ( obj , datetime . datetime ) :","if obj is an instance of datetime.datetime ,"
SafeString = SafeBytes,substitute SafeBytes for SafeString .
if self . allow files :,"if self.allow_files is true ,"
file  . close ( ),close file_ file descriptor .
return self . parent instance,return self.parent_instance .
"rendering attrs = [ STR_ , STR_ , STR_ ]","rendering_attrs is a list containing 3 strings : 'template_name ' , 'context_data ' and '_post_render_callbacks ' ."
"handler . addQuickElement ( STR_ , rfc3339 date ( item [ STR_ ] ) )","call the method handler.addQuickElement with 2 arguments : string 'published ' and result of the function rfc3339_date ,"
"self . error ( "" STR_ "" % ( rawdata [ k : endpos ] [ : NUM_ ] , ) )","slice the rawdata from k to endpos , then take the first 20 elements of the previous slice ,"
class Warning ( CheckMessage ) :,derive the class Warning from base class CheckMessage .
"fields = fields for model ( opts . model , opts . fields , opts . exclude , opts . widgets , formfield callback , opts . localized fields , opts . labels , opts . help texts , opts . error messages )","call the function fields_for_model with 9 arguments : opts.model , opts.fields , opts.exclude , opts.widgets , formfield_callback ,"
def get language ( ) :,define the function get_language .
logger = logging . getLogger ( name ),"call the method logging.getLogger with an argument name , substitute the result for logger ."
@ classmethod,"classmethod decorator ,"
return NodeList ( ),return an instance of NodeList class .
odds = sum ( LUHN ODD LOOKUP [ in t ( c ) ] for c in candidate [ - NUM_ : : - NUM_ ] ),"for every c in candidate without the last element and in reversed order , convert c into an integer ,"
"def   init   ( self , choices = ( ) , required = True , widget = None , label = None , in itial = None , help text = , * args , ** kwargs ) :","'Select a valid choice . % ( value ) s is not one of the available choices . ' for 'invalid_choice ' . define the method __init__ with 9 arguments : self , choices set to an empty tuple , required set to boolean True , widget set to None ,"
val = Header ( val ) . encode ( ),"call the encode function on the Header class instance , created with argument val , substitute the result for val ."
title =,title is an empty string .
connection = connections [ options . get ( STR_ ) ],"get the value under the 'database ' key of the options dictionary , use it as a key to access the element under the connections dictionary , substitute it for connection ."
"def firstof ( parser , token ) :",define the function firstof with 2 arguments : parser and token .
if new name ! = col name :,"if new_name is not equal to col_name ,"
"if self . compare ( cleaned , self . limit value ) :","call the self.compare method with arguments cleaned and self.limit_value , if it evaluates to true ,"
"ustring re = re . compile ( "" STR_ "" )","call the function re.compile with an argument string `` ( [ \u0080-\uffff ] ) '' , substitute the result for ustring_re ."
return default,return default .
self . find template cache [ key ] = result,substitute result for self.find_template_cache dictionary value under the key key .
line =,line is an empty string .
"def   init   ( self , stream , limit , buf size = NUM_ * NUM_ * NUM_ ) :","def initialization method __init__ with self class instance , stream , limit and buf_size set to integer value of the product 64*1024*1024 ."
return default,"substitute the ' % s ' with table and list containing key , respectively . return default ."
"return mark safe ( formats . number format ( number , abs ( p ) ) )","call the method formats.number_format with 2 arguments : number and absolute value of p ,"
import errno,import module errno .
from django . core import signing,from django.core import signing into default name space .
class X ( object ) :,derive class X from the object base class .
"def   init   ( self , object list , number , paginator ) :","define the method __init__ with 4 arguments : self , object_list , number , and paginator ."
if match :,"host ends with ' . ' and host ends with pattern or host is equal to all but first elements of pattern , substitute boolean true for match , otherwise substitute boolean False for match . if match is true ,"
if cookie == :,"if cookie is an empty string ,"
supported = False,supported is boolean False .
"return self . data . tzinfo . tzname ( self . data ) or "" ""","call the method self.data.tzinfo.tzname with an argument self.data , if it is true , return it , otherwise return an empty string ."
"def   init   ( self , filepath , parsed ) :","define the method __init__ with 3 arguments : self , filepath and parsed ."
"  , content params = cgi . parse header ( environ . get ( STR_ , ) )","get the value under the 'CONTENT_TYPE ' key of environ dictionary , if the key doesnt exist get the empty string ,"
"HITS , MISSES = NUM_ , NUM_","HITS and MISSES are integer 0 and 1 , respectively ."
self . verbosity = in t ( options . get ( STR_ ) ),"get the value under the 'verbosity ' key of the options dictionary , convet it to an integer and substitute for self.verbosity ."
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an exists ( ) method ' .
self .  stream = stream,substitute stream for self._stream .
return tt . tm isdst > NUM_,"if tt.tm_isdst is greater than integer 0 , return the result ."
context extras [ STR_ ] = translation . get language ( ),"call the translation.get_language function , substitute the result for the value under the 'LANGUAGE_CODE ' key of the context_extras dictionary ."
return d [ key ],return value under the key key of d dictionary .
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute the result for key ."
import collections,import module collections .
 active . value = self . old timezone,substitute self.old_timezone for _active.value .
"self . file = TemporaryUploadedFile ( self . file name , self . content type , NUM_ , self . charset , self . content type extra )","self.file is a instance of a class TemporaryUploadedFile initialized with arguments : self.file_name , self.content_type , integer 0 ,"
"addr = Header ( addr , encoding ) . encode ( )","call the encode function on the Header class instance , created with arguments addr and encoding , substitute the result for addr ."
"return Signer ( b STR_ + key , salt = salt )","create the Singer class with 2 arguments : key appended to string 'django.http.cookies ' and salt set to salt , return it ."
if not self . is  bound :,"if self.is_bound is false ,"
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ , params = { STR_ : self . max digits } , )","raise an ValidationError with 3 arguments : value under the 'max_digits ' key of the self.error_messages dictionary ,"
stream or string = stream or string . decode ( STR_ ),"call the method stream_or_string.decode with an argument string 'utf-8 ' , substitute the result for stream_or_string ."
if html :,"if html is true ,"
"return { STR_ : True , True : True , True : True , STR_ : False , False : False , False : False } . get ( value , None )","get the value under the value key of a dictionary with 6 entries : boolean True for ' 2 ' , boolean True for boolean True ,"
from django . utils . timezone import template localtime,from django.utils.timezone import template_localtime into default name space .
"att name , params , not es = self . normalize col name ( column name , used column names , is  relation )","call the method self.normalize_col_name with 3 arguments column_name , used_column_names , is_relation , assign the result to att_name , params and notes , respectively ."
if PY3 :,"if PY3 is true ,"
number = in t ( number ),convert number into an integer and substitute it for number
"def copy plural forms ( self , msgs , locale ) :","define the method copy_plural_forms with arguments self , msgs and locale ."
os . environ [ STR_ ] = options . settings,substitute options.settings for value under the 'DJANGO_SETTINGS_MODULE ' key of the os.environ dictionary .
"field notes . append ( "" STR_ "" )",append string `` Field renamed because it contained more than one ' _ ' in a row . '' to field_notes .
"return getattr (  urlconfs , "" STR_ "" , default )","get the 'value ' attribute of the _urlconfs , if it exists return it , otherwise return defaults ."
answer = None,answer is None .
"return Truncator ( value ) . words ( length , truncate = STR_ )","instantiate class Truncator , with an argument value , call the method words on the result with 2 arguments length ,"
return mark safe ( . join ( bits ) ),"call the function mark_safe with an argument , elements of bits joined into a string , return the result ."
class cached property ( object ) :,derive the class cached_property from the object base class .
if not ext . startswith ( STR_ ) :,"if ext doesnt start with ' . ' character ,"
"super ( SplitHiddenDateTimeWidget , self ) .   init   ( attrs , date format , time format )","call the method __init__ from the base class of the class SplitHiddenDateTimeWidget , with 3 arguments : attrs , date_format , and time_format ."
if deps :,"if deps is true ,"
if not now :,"if now is false ,"
ret = self .  cache . get multi ( new keys ),"call the method self._cache.get_multi with argument new_keys , substitute the result for ret ."
"return iter ( getattr ( d ,  itervalues ) ( ** kw ) )","get _itervalues attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,"
attrs = attrs or { },"if attrs is false , make attrs an empty dictionary ."
"if ( obj . pk is None and hasattr ( Model , STR_ ) and hasattr ( Model .  default manager , STR_ ) ) :","if obj.pk is None , and Model has an 'natural_key ' attribute , and Model._default_manager has and 'get_by_natural_key ' ,"
del bits [ : NUM_ ],delete first element of bits .
"def add ( self , key , value , timeout = DEFAULT TIMEOUT , version = None ) :","define the method add with 5 arguments , self , key , value , timeout defaulting to DEFAULT_TIMEOUT and version defaulting to None ."
return nodelist true output or self . nodelist true . render ( context ),"return nodelist_true_output , if true , if not call the method self.nodelist_true.render with an argument context and return the result ."
fh . write ( migration string ),write migration_string to file fh .
def as p ( self ) :,"' < li % ( html_class_attr ) s > % ( errors ) s % ( label ) s % ( field ) s % ( help_text ) s < /li > ' , error_row set to a a string ' < li > % s < /li > ' , row_ender set to a string ' < /li > ' , help_text_html set to a string , ' < span class= '' helptext '' > % s < /span > ' , and errors_on_separate_row set to boolean False . define the method as_p with an argument self ."
if lang is None :,"if lang is None ,"
return mark safe ( data ),"call the function mark_safe with an argument data , return the result ."
self . in stance = in stance,substitute instance for self.instance .
logger . setLevel (  checkLevel ( level ) ),"call the function _checkLevel with an argument level , use the result as an argument for the call to the method logger.setLevel ."
class MaxValueValidator ( BaseValidator ) :,derive the class MaxValueValidator form the BaseValidator base class .
for slots var in slots :,"for every slots_var in slots ,"
"def to python ( self , value ) :",define the method to_python with 2 arguments : self and value .
def management form ( self ) :,define the method management_form with an argument self .
i += NUM_,"increment i by integer 1 ,"
 wrapped = None,_wrapped is None .
"self . test database = options . get ( STR_ , False )","get the value from the options dictionary under the key 'test_database ' , or False if the key dont exists , substitute it for self.test_database ."
"super ( FloatField , self ) . validate ( value )","call the method validate with an argument value , from the base class of the FloatField class ."
for dirname in dirnames [ : ] :,"for every dirpath , dirnames and filenames in the result , for every dirname in list dirnames ,"
i = open tags . in dex ( tagname ),"get the index of the first occurrence of tagname , substitute it for i ."
"def  handle object ( self , node ) :",define the method _handle_object with arguments self and node .
if self . min value is not None :,"if self.min_value is not None ,"
return self . nodelist empty . render ( context ),"call the method self.nodelist_empty.render with an argument context , return the result ."
"migrations to squash = [ executor . loader . get migration ( al , mn ) for al , mn in executor . loader . graph . forwards plan ( ( migration . app label , migration . name ) ) if al == migration . app label ]","where ' % s ' is replaced with migration_name and app_label . migrations_to_squash is a list created dynamically with elements : return value of the method executor.loader.get_migration called ,"
"def   getitem   ( self , key ) :",define the method __getitem__ with 2 arguments : self and key .
name = os . path . basename ( name ),"call the function os.path.basename with argument name , substitute the result for name ."
request finished . connect ( update watch ),call the method request_finished.connect with argument update_watch .
match = RE DATE . match ( value ),"call the method RE_DATE.match with an argument value , substitute the result for match ."
"def create token ( self , token string , source , in  tag ) :","define the method create_token with 4 arguments : self , token_string , source and in_tag ."
if id for label :,"if id_for_label is true ,"
ns = path . pop ( ),pop the element form the path as substitute the result for ns .
if in teractive :,"reset_sequences set to reset_sequences , allow_cascade set to allow_cascade , substitute the result for sql_list . if interactive is true ,"
handler = self . configure handler ( handlers [ name ] ),"call the method self.configure_handler with an argument value under name key of handlers dictionary , substitute the result for handler ."
self . error list = [ ],self.error_list is an empty list .
class Resolver404 ( Http404 ) :,"string ' % s ' with self._func_path , self.args , self.kwargs , self.url_name , self.app_name and self.namespaces , respectively . derive the class Resolver404 with Http404 as base class ."
"raise ValidationError ( self . message , code = self . code )",raise a ValidationError exception with arguments self.message and code set to self.code .
def autocomplete ( self ) :,define the method autocomplete with an argument self .
if role in PALETTES [ NOCOLOR PALETTE ] and definition :,"if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true ,"
def clear ( self ) :,"define the method clear with self class instance as the argument ,"
from pprint import pformat,from pprint import pformat into default name space .
"return mark safe ( STR_ . join ( [ six . text type ( self . management form ) , forms ] ) )","join return value of the function six.text_type called with an argument self.management_form and forms into a string ,"
for bit in bits :,"for every bit in bits ,"
since = delta . days * NUM_ * NUM_ * NUM_ + delta . seconds,"multiply delta.days , integer 24 , integer 60 and integer 60 add delta.seconds to it , substitute the result for since ."
media = media + field . widget . media,"append field.widget.media to media , substitute the result for media ."
"if is in stance ( level , in t ) :","if level is an instance of int type ,"
FILTER SEPARATOR = |,and 'Comment ' for TOKEN_COMMENT . FILTER_SEPARATOR is a string '| ' .
self . stdout . write ( msg ),write msg to self.stderr stream .
def  assert mutable ( self ) :,define the method _assert_mutable with an argument self .
cc = dict (  to tuple ( el ) for el in cc delim re . split ( response [ STR_ ] ) ),"cc is a dictionary populated with items by calling function _to_tuple with el as an argument ,"
self . localize = localize,substitute localize for self.localize .
if item [ STR_ ] is not None :,"called with an argument value under the 'updateddate ' key of the item dictionary . if value under the 'author_name ' key of the item dictionary is not None ,"
"if not is in stance ( d , datetime . datetime ) :","result of multiplication of integers : 60,60,24,365 , and return value of ungettext_lazy with 2 arguments : ' % d year ' , ' % d years ' , result of multiplication of integers : 60,60,24,30 , and return value of ungettext_lazy with 2 arguments : ' % d month ' , ' % d month ' , result of multiplication of integers : 60,60,24,7 , and return value of ungettext_lazy with 2 arguments : ' % d weeks ' , ' % d weeks ' , result of multiplication of integers : 60,60,24 , and return value of ungettext_lazy with 2 arguments : ' % d days ' , ' % d days ' , result of multiplication of integers : 60,60 , and return value of ungettext_lazy with 2 arguments : ' % d hours ' , ' % d hours ' , result of multiplication of integers : 60 , and return value of ungettext_lazy with 2 arguments : ' % d minutes ' , ' % d minutes ' , if d is not an instance of datetime.datetime ,"
if os . path . exists ( potfile ) :,"if potfile fie exists ,"
"kw [ STR_ ] = kw [ STR_ ] . ljust ( NUM_ , STR_ )","left justify value under the 'microsecond ' key of the kw dictionary , in the field of width 6 , fill the rest with ' 0 ' ,"
"from django . template . debug import DebugLexer , DebugParser",from django.template.debug import DebugLexer and DebugParser .
message = STR_,message is a string 'make sure the name begins with a letter or underscore ' .
"def render ( self , context ) :",define the method render with 2 arguments : self and context .
"super ( FileBasedCache , self ) .   init   ( params )",call method __init__ with argument params from the base class of the FileBaseCache .
if new name . endswith ( STR_ ) :,"if new_name ends with string '_id ' ,"
return FormSet,return FormSet .
message context = context match . group ( NUM_ ),"substitute the result for context_match . call the method context_match.group with an argument integer 1 , substitute the result for message_context ."
if self . obj is None :,"if self.obj is None ,"
"if is in stance ( value , datetime . datetime ) :","if value is an instance of datetime.datetime class ,"
if dirname . startswith ( STR_ ) or dirname == STR_ :,"if dirname starts with character ' . ' or dirname equals a string '__pycache__ ' ,"
"options = sorted ( ( k , v ) for k , v in options if k . startswith ( curr ) )","append tuple containing 2 elements : k and v to a list , for every k and v in options , only if k starts with curr ,"
for fmatch in constant re . findall ( t . contents ) :,"call the method constant_re.findall with an argument t.contents , for every fmatch in the result ,"
html message = reporter . get traceback html ( ) if self . in clude html else None,"unpacked list exc_info . if self.include_html is true , call the method reporter.get_traceback_html and substitute the result for html_message ,"
length = in t ( arg ),substitute arg converted into an integer for length .
for attachment in self . attachments :,"for every attachment in self.attachments ,"
"def render value in context ( value , context ) :",define the function render_value_in_context with 2 arguments : value and context .
"def   init   ( self , producer , length = None ) :","define the method __init__ with 3 arguments : self , producer and length set to None ."
LOCK SH = NUM_,LOCK_SH is a integer 0 .
"to py = super ( ModelMultipleChoiceField , self ) . to python","instantiate base class of the class ModelMultipleChoiceField , substitute filed to_python of the result for to_py ."
"defaults = dict ( defaults .  get kwargs ( ) , ** options )","create dictionary out of the unpacked dictionary options , using defaults._get_kwargs as a mapping function , substitute the result for defaults ."
raise TypeError ( s ),raise an TypeError with an argument s .
"output = [ format html ( STR_ , flatatt ( final attrs ) ) ]",output is a list containing an entry : result of the function format_html called with 2 arguments :
"def removetags ( value , tags ) :",define the function removetags with 2 arguments value and arg .
client = self .  lib . Client ( self .  servers ),call the method self._lib.Client with argument self._servers .
"from django . core . management . base import BaseCommand , CommandError",from django.core.management.base import BaseCommand and CommandError into default name space .
else :,"RemovedInDjango19Warning and stacklevel set to integer 2. if not ,"
"result = middleware . process view ( request , view func , args , kwargs )","call the method middleware.process_view with 4 arguments : request , view_func , args and kwargs , substitute the result for result ."
"if is in stance ( value , ( decimal . Decimal , float ) + six . in teger types ) :","otherwise if value is an instance of decimal.Decimal , float or six.integer_types ,"
cache =  create cache ( alias ),call the function _create_cache with argument alias .
retval = newretval,substitute newretval for retval .
"validate ipv4 address = RegexValidator ( ipv4 re ,   ( STR_ ) , STR_ )","substitute the result for ipv4_re . validate_ipv4_address is a instance of a RegexValidator class , created with 3 arguments : ipv4_re ,"
del form . cleaned data [ field ],delete the form.cleaned_data dictionary entry under the field key .
"def token kwargs ( bits , parser , support legacy = False ) :","define the method token_kwargs : bits , parser and support_legacy set to boolean False ."
self .  current = { },self.current is an empty dictionary .
USE INOTIFY = True,USE_INOTIFY is boolean True .
from  systemrestart import SystemRestart,from _systemrestart import SystemRestart into default name space .
class EmailBackend ( BaseEmailBackend ) :,derive the class EmailBackend from the BaseEmailBackend base class .
pk field = self . model .  meta . pk,substitute self.model._meta.pk for pk_field .
from collections import OrderedDict,from collections import OrderedDict into default name space .
create bound method = types . MethodType,substitute Iterator for create_bound_method .
def   copy   ( self ) :,define the method __copy__ with an argument self .
if in valid var format string :,"if invalid_var_format_string is true ,"
"filename = filename [ : - NUM_ ] + "" STR_ """,truncate last 9 elements of filename and append it string `` .py '' .
table = connections [ db ] . ops . quote name ( self .  table ),"call the ops.quote_name method with argument self._table on the value under the db key of connections dictionary , substitute the result for table ."
if not form . has changed ( ) :,"if function form.has_changed evaluates to false ,"
pk = to python ( pk ),"call the function to_python with an argument pk , substitute the result for pk ."
return TemplateTagNode ( tag ),"where ' % s ' is replaced with tag and TemplateTagNode.mapping converted into a list . return an instance of a TemplateTagNode class , created with an argument tag ."
"handler . endElement ( "" STR_ "" )",call the method handler.endElement with an argument string 'rss ' .
from email . mime . base import MIMEBase,from email.mime.base import MIMEBase into default name space .
"def write ( self , outfile , encoding ) :","define the method write with 3 arguments : self , outfile and encoding ."
if item [ STR_ ] is not None :,"called with an argument value under the 'pubdate ' key of the item dictionary . if value under the 'updateddate ' key of the item dictionary is not None ,"
field params [ STR_ ] = col name,substitute col_name for value under the 'db_column ' key of the field_params dictionary .
if content length < NUM_ :,"if content_length is lesser than integer 0 ,"
if arg :,"if arg is true ,"
"def   init   ( self , * args , ** kwargs ) :","define initialization method __init__ with self class instance , unpacked list args , unpacked dictionary kwargs as arguments ."
from django . utils . formats import get format,from django.utils.formats import get_format into default name space .
"clean = lambda self , x : len ( x )","clean is a lambda function with self and x as arguments , return value is length of x ."
"from django . db import ( connections , router , transaction , DEFAULT DB ALIAS , IntegrityError , DatabaseError )","from django.db import connections , router , transaction , DEFAULT_DB_ALIAS , IntegrityError and DatabaseError into default name space ."
"self . xml . endElement ( "" STR_ "" )",call the method self.xml.endElement with an argument string 'object ' .
"usage . append ( "" "" )",append an empty string to usage .
self .   dt = dt,substitute dt for self.__dt .
return self .  cached loaders,return self._cached_loaders .
return media,return media .
try :,"integer 0 and integer 0. try ,"
new name = STR_ % new name,"convert new_name to a string and append string 'field ' to it , substitute the result for new_name ."
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ , params = { STR_ : self . decimal places } , )","raise an ValidationError with 3 arguments : value under the 'max_decimal_places ' key of the self.error_messages dictionary ,"
from django . core . serializers import base,from django.core.serializers import base into default name space .
"if subject [ i ] in ( STR_ , "" STR_ "" ) :","where ' % s ' is replaced with subject . if i-th element of subject is ' '' ' character or `` ' '' character ,"
"super ( HttpResponse , self ) .   init   ( * args , ** kwargs )","call the __init__ method from the base class of the HttpResponse class , with the arguments : unpacked list args and unpacked dictionary kwargs ."
from threading import Lock,from threading import Lock into default name space .
"nm = Header ( nm , STR_ ) . encode ( )","call the encode function on the Header class instance , created with arguments nm and string 'utf-8 ' , substitute the result for nm ."
if self .  non form errors is None :,"if self._non_form_errors is None ,"
if start > upto :,"if start is greater than upto ,"
decimals = abs ( exponent ),substitute absolute value of the exponent for decimals .
bits = normalize ( p pattern ),"call the function normalize with an argument p_pattern , substitute the result for bits ."
"def   delitem   ( self , key ) :",define the method __delitem__ with 2 arguments : self and key .
"def as string ( self , unixfrom = False ) :",define the method as_string with arguments self and unixfrom set to boolean False .
def python 2 unicode compatible ( klass ) :,"and replace % r with self.obj , return the result . define function python_2_unicode_compatible , with klass as an argument ."
self . update ( updates ),update self dictionary with updates .
"@ register . filter ( "" STR_ "" , is  safe = False )",decorator function register.filter with 2 arguments string `` timeuntil '' and is_safe set to boolean False .
if self . silent :,"if self.silent is true ,"
if use l10n or ( use l10n is None and settings . USE L10N ) :,"if use_l10n is true , or use_l10n is None and settings.USE_L10N is true ,"
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` Malformed arguments to url tag '' .
return self . blocks [ name ] [ - NUM_ ],"get value under the self.blocks dictionary under the name key , return the last element ."
else :,"return value of the function quote called with arguments k and safe , and with return value of the function quote called with arguments v and safe . if not ,"
yield k,yield k .
else :,"substitute the resulting list for app_config . if not ,"
"handler . addQuickElement ( "" STR_ "" , rfc2822 date ( item [ STR_ ] ) )","call the method handler.addQuickElement with 2 arguments : string 'pubDate ' and result of the function rfc2822_date ,"
return get supported language variant ( settings . LANGUAGE CODE ),"call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE , return the result ."
write = property ( lambda self : self . file . write ),"define lambda function that returns self.file.write field , use it as an argument for property function , put the result in write ."
def strip spaces between tags ( value ) :,define the function strip_spaces_between_tags with an argument value .
from django . core . management import call command,from django.core.management import call_command into default name space .
if name is None :,"if name is None ,"
max value = float ( max value ),"convert max_value into an floating point number , substitute it for max_value ."
except Exception as e :,"if Exception , renamed to e , exception is caught ,"
class Command ( BaseCommand ) :,derive class Command from the BaseCommand base class .
def   getstate   ( self ) :,define the method __getstate__ with an argument self .
return data set ! = in itial set,"for every value in data . if data_set is not equal to initial_set return boolean True , otherwise return boolean False ."
except LookupError :,"if exception LookupError is caught ,"
self . write items ( handler ),call the method self.write_items with an argument handler .
return data set ! = in itial set,"if data_set is not equal to initial_set , return boolean True , otherwise return boolean False ."
"name = config . get ( STR_ , )","remove config dictionary element under 'name ' key , if it exists substitute it for name , if not , name is an empty string ."
self . test runner = None,self.test_runner is None .
@ cached property,decorator cached_property .
"def resolve context ( self , context ) :",define the method resolve_context with 2 arguments : self and context .
fks to parent = [ f for f in opts . fields if f . name == fk name ],"fks_to_parent is a list containing f , for every f in opts.fields if f.name equals fk_name ."
"with transaction . atomic ( using = database , savepoint = connection . features . can rollback ddl ) :","call the method transaction.atomic with 2 arguments : using set to database , savepoint set to connection.features.can_rollback_ddl ,"
self . negate = negate,substitute negate for self.negate .
tok = toks [ name ],substitute value under the name key of the toks dictionary for tok .
import re,import module re .
"FormSet = formset factory ( form , formset , extra = extra , min num = min num , max num = max num , can order = can order , can delete = can delete , validate min = validate min , validate max = validate max )","formfield_callback as formfield_callback , widgets as widgets , localized_fields as localized_fields , labels as labels , help_texts as help_texts and error_messages as error_messages , substitute the result for form . call the function formset_factory with 10 arguments : form , formset , extra as extra , min_num as min_num , max_num as max_num ,"
