code,nl
"def   deepcopy   ( self , memo ) :",define the method __deepcopy__ with 2 arguments : self and memo .
code = STR_,code is a string 'min_value '
  unicode   = new method proxy ( unicode ),"call the function new_method_proxy with an argument unicode , substitute the result for __unicode__ ."
stream . unget ( chunk [ - rollback : ] ),call the method stream.unget with last rollback elements of chunk as an argument .
class ArchiveException ( Exception ) :,derive the class ArchiveException from the Exception base class .
final output . extend ( alter sql ),extend final_output with alter_sql .
self . managed = True,self.managed is boolean True .
for item in sorted items :,"for every item in sorted_items ,"
c = [ ],c is an empty list .
widget = SelectMultiple,substitute SelectMultiple for widget .
self .  post parse error = False,self._post_parse_error is boolean False .
return EventHandler . modified code,return EventHandler.modified_code .
class BaseContext ( object ) :,derive the class BaseContext from the object base class .
if self . forms :,"if self.forms is true ,"
cls .  delegate text = six . text type in resultclasses,"if six.text_type is contained in resultclasses , cls._delegate_text is boolean True , otherwise it is boolean False ."
"uclass , lookup , field , unique for = date check","substitute date_check elements to uclass , lookup , field and unique_for , respectively ."
"obj = self .  new instance ( self . children , self . connector , self . negated )","call the method self._new_instance with 3 arguments : self.children , self.connector and self.negated , substitute the result for obj ."
directories . append ( entry ),append entry to the directories list .
"self . required , self . label , self . in itial = required , label , in itial","initial set to None , help_text set to an empty string , error_messages set to None , show_hidden_initial set to boolean False , validators is an empty , localize set to boolean False , label_suffix set to None . substitute required , label and initial for self.required , self.label and self.initial ."
if not response . has header ( STR_ ) :,"for value of dictionary response under the key 'Last-Modified ' . if call to the function response.has_header with 'Expires ' as argument returns boolean False ,"
"def resolve expression ( self , obj , context ) :","define the method resolve_expression with 3 arguments : self , obj and context ."
def  add fallback ( self ) :,define the method _add_fallback with an argument self .
message = trim whitespace ( message ),"call the function trim_whitespace with an argument message , substitute the result for message ."
cache = caches [ settings . CACHE MIDDLEWARE ALIAS ],"get value under the key settings.CACHE_MIDDLEWARE_ALIAS of caches dictionary , substitute with it the cache ."
render context = self . context . render context,substitute self.context.render_context for render_context .
"ctypes , opts = parse header ( content type . encode ( STR_ ) )","call the method boundary with an argument string 'ascii ' , use the result to call to the parse_header function ,"
from django . utils . crypto import get random string,from django.utils.crypto import get_random_string into default name space .
"def   init   ( self , name , value , attrs , choices ) :","define the method __init__ with 5 arguments : self , name , value , attrs and choices ."
for label in labels :,"for every label in labels ,"
app configs = apps . get app configs ( ),"call the method apps.get_app_configs , substitute the result for app_configs ."
for fname in filelist :,"for every fname in filelist ,"
fh . write ( writer . as string ( ) ),"call the method writer.as_string , write the result to fh file ."
" ExpatParser .   init   ( self , * args , ** kwargs )","call the method _ExpatParser.__init__ with arguments self , unpacked list args and unpacked dictionary kwargs ."
"filelist = random . sample ( filelist , in t ( num entries / self .  cull frequency ) )","divide num_entries by self._cull_frequency , convert the result to an integer , call the random.sample function with filelist and previous result as arguments , substitute the result for filelist ."
"error dict . setdefault ( field , [ ] ) . extend ( error list )",call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments : field and an empty list .
parser . add argument ( STR_ ),call the method parser.add_argument with an argument string ' -- pythonpath ' .
def   dir   ( self ) :,define the method __dir__ with an argument self .
default validators = [ validators . validate email ],default_validators is a list with an element validators.validate_email .
compressed = zlib . compress ( data ),"call the function zlib.compress with an argument data , substitute the result for compressed ."
if idstring is None :,"if idstring is None ,"
raise,"raise an exception ,"
msguniq options = [ STR_ ],msguniq_options is an list with elements : string ' -- to-code=utf-8 ' .
class LocalTimezone ( ReferenceLocalTimezone ) :,derive the class LocalTimezone from the ReferenceLocalTimezone base class .
elif self . verbosity > NUM_ :,"otherwise if self.verbosity is greater than integer 0 ,"
if arg is None :,if arg is None
return STR_ . join ( output ),"join elements of output in a string , separated by newlines , return it ."
bits . append ( None ),append None to bits .
"return s . encode ( encoding , errors )","evaluate the member method of s , encode with the encoding and errors as the arguments , return the result ."
terminal char = STR_,terminal_char is an string ' ) ' .
"MIMEMessage .   setitem   ( self , name , val )","call the method MIMEMessage.__setitem__ with arguments self , name and val ."
class Truncator ( SimpleLazyObject ) :,derive the class Truncator form the SimpleLazyObject class .
d = STR_ % datetime safe . new datetime ( date ) . strftime ( STR_ ),"call the function datetime_safe.new_datetime with an argument date , on the result call the method strftime with an argument ,"
self . end object ( obj ),call the method self.end_object with an argument obj .
"def has key ( self , key , version = None ) :","define method has_key with self class instance , key and version set to None as arguments ."
return len ( self . forms ),return the length of self.forms .
return new class,return new_class .
def   html   ( self ) :,define the method __html__ with an argument self .
class DebugNodeList ( NodeList ) :,derive the class DebugNodeList from the NodeList base class .
message = message . error dict,substitute message.error_dict for message .
if ( self . requires system checks and not options . get ( STR_ ) and not options . get ( STR_ ) ) :,"if self.requires_system_checks is true and values under the 'skip_validation ' and 'skip_checks ' keys of the options dictionary are false ,"
"emit post migrate signal ( set ( all models ) , verbosity , in teractive , database )","extend all_models list with the result . call the function emit_post_migrate_signal with 4 arguments : all_models converted into a set , verbosity , interactive and database ."
statement = [ ],statement is an empty list .
self . name = name,substitute name for self.name .
args = args or [ ],"if args in None of boolean False , substitute it for an empty list ."
"def utcoffset ( self , dt ) :",define the method utcoffset with 2 arguments self and dt .
"def get tag uri ( url , date ) :",define the function get_tag_uri with 2 arguments : url and date .
value = p [ i + NUM_ : ] . strip ( ),"decode with an argument string 'ascii ' , substitute the result for name . take elements of p from index i incremented by 1 to the end , strip the result of the whitespaces , substitute it for value ."
self . widget = widget,substitute widget for self.widget .
"def load template source ( self , template name , template dirs = None ) :","define the method load_template_source with 3 arguments : self , template_name and template_dirs set to None ."
"def   getitem   ( self , header ) :",define the method __getitem__ with 2 arguments : self and header .
import stat,import stat .
def pop ( self ) :,define the method pop with an argument self .
return b,return empty bytes string .
"def print  ( * args , ** kwargs ) :",define the function print_ with 2 arguments : unpacked list args and unpacked dictionary kwargs .
"def add arguments ( self , parser ) :",define the method add_aguments with arguments self and parser .
except TemplateSyntaxError as e :,"if TemplateSyntaxError , replaced with e , exception is caught ,"
return self . token,return self.token .
" js escapes = { or d ( STR_ \ \ u005C STR_ \ ) : STR_ , or d ( STR_ ) : STR_ , or d ( > ) : STR_ , or d ( < ) : STR_ , or d ( & ) : STR_ , or d ( = ) : STR_ , or d ( - ) : STR_ , or d ( STR_ ) : STR_ , or d ( STR_ ) : STR_ , or d ( STR_ ) : STR_ }","_js_escapes is a dictionary with 11 initial entries : '\\u005C ' for integer representation of string '\\ ' ,"
if path . exists ( new path ) :,"into a file path , substitute it for new_path . if new_path file path exists ,"
return template,return template .
return { },return an empty dictionary .
"def  get model from node ( self , node , attr ) :","with an argument string 'object ' , return the result . define the method _get_model_from_node with arguments self , node and attr ."
view = parts [ NUM_ ],substitute first element of parts for view .
if value == self . empty value or value in self . empty values :,"if value equals self.empty_value or value is contained in self.empty_values ,"
self . port = port or settings . EMAIL PORT,"if port exists substitute it for self.host , if not substitute settings.EMAIL_PORT for self.port ."
import bz2,import bz2 .
if not os . path . exists ( self .  dir ) :,"if self._dir file path does not exists ,"
self . render value = render value,substitute render_value for self.render_value .
"def sql create ( app config , style , connection ) :","define the function sql_create with 3 arguments : app_config , style and connection ."
import codecs,import module codecs .
line = sio . readline ( ),"call the sio.readline method , substitute the result for line ."
if name . lower ( ) == STR_ :,"if name converted to lower case equals to string 'subject ' ,"
self .  archive . list ( ),call the method self._archive.list .
self .  errors [ field ] . extend ( error list ),extend the value under the field key of the self._errors dictionary with error_list .
excluded apps = set ( ),excluded_apps is an empty set .
import logging,import module logging .
rawdata = self . rawdata,substitute self.rawdata for rawdata .
self . obj = obj,assign obj to the obj field of self instance of this class .
def dec ( func ) :,define the function dec with an argument func .
"raise ValidationError (   ( STR_ ) , code = STR_ )","raise a ValidationError exception with 2 arguments : return value of the function _ with an string argument 'Enter a valid integer . ' ,"
"from django . conf import settings , global settings","from django.conf import settings , global_settings into default name space ."
if is  naive ( obj ) :,call the function is_naive with an argument obj .
from wsgiref . util import FileWrapper,from wsgiref.util import FileWrapper
bits = bits [ : - NUM_ ],remove last 2 elements from bits .
content length = NUM_,content_length is integer 0 .
return decorator,return decorator .
return self .  name,return self._name .
"delattr ( self .  wrapped , name )",delete name attribute from self._wrapped object .
"def appendlist ( self , key , value ) :","define the method appendlist with 3 arguments : self , key and value ."
pass,do nothing .
"for k , v in self .  iteritems ( ) :","call the method self._iteritems , for every k and v in the result ,"
e . django template source = token . source,substitute token.source for e.django_template_source .
"super ( URLValidator , self ) .   init   ( ** kwargs )","call the __init__ method of the base class of the class URLValidator , with unpacked dictionary kwargs as argument ."
def smart urlquote ( url ) :,define the function smart_urlquote with an argument url .
"def fdel ( in stance , name = fdel .   name   ) :",define the function fdel with 2 arguments : instance and name set to fdel.__name__ .
"from django . template import loader , Context , RequestContext","from django.template import loader , Context and RequestContext into default name space ."
"raise NoReverseMatch ( "" STR_ "" % ( lookup view , e ) )","raise an NoReverseMatch exception with an argument string `` Error importing ' % s ' : % s . `` , where ' % s ' is replaced with lookup_view and e , respectively ."
if app label not in executor . loader . migrated apps :,"if app_label is not contained in executor.loader.migrated_apps ,"
"def   init   ( self , var , name , nodelist , extra context = None ) :","define the method __init__ with 5 arguments : self , var , name , nodelist and extra_context set to None ."
"MONTHS 3 = { NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) , NUM_ :   ( STR_ ) }","result of the call to the function _ with an argument string 'February ' for 2 , result of the call to the function _ with an argument string 'March ' for 3 , result of the call to the function _ with an argument string 'April ' for 4 , result of the call to the function _ with an argument string 'May ' for 5 , result of the call to the function _ with an argument string 'June ' for 6 , result of the call to the function _ with an argument string 'July ' for 7 , result of the call to the function _ with an argument string 'August ' for 8 , result of the call to the function _ with an argument string 'September ' for 9 , result of the call to the function _ with an argument string 'October ' for 10 , result of the call to the function _ with an argument string 'November ' for 11 , and result of the call to the function _ with an argument string 'December ' for 12 . MONTHS_3 is an dictionary with 12 entries : result of the call to the function _ with an argument string 'jan ' for 1 ,"
"raise CommandError ( "" STR_ "" % ( migration name , app label ) )","raise CommandError exception with `` More than one migration matches ' % s ' in app ' % s ' . Please be more specific . `` ,"
"raise TemplateEncodingError ( "" STR_ "" "" STR_ "" )",raise an TemplateEncodingError exception with an argument `` Templates can only be constructed from unicode or UTF-8 strings . `` .
class Loader ( BaseLoader ) :,derive the class Loader from the BaseLoader base class .
"def load template source ( self , template name , template dirs = None ) :","define the method load_template_source with 3 arguments : self , template_name , template_dirs set to None ."
"def   init   ( self , permitted methods , * args , ** kwargs ) :","define the method __init__ with 4 arguments : self , permitted_methods , unpacked list args and unpacked dictionary kwargs ."
"def sql custom ( app config , style , connection ) :","define the function sql_custom with 3 arguments : app_config , style and connection ."
"BaseCache .   init   ( self , params )",call the __init__ method with self and params arguments from the base class BaseCache .
if options . get ( STR_ ) :,"get the value under the 'use_default_ignore_patterns ' key of the options dictionary , if it is true ,"
"random . seed ( hashlib . sha256 ( ( "" STR_ "" % ( random . getstate ( ) , time . time ( ) , settings . SECRET KEY ) ) . encode ( STR_ ) ) . digest ( ) )","format string `` % s % s % s '' with 3 elements : result of the function random.getstate , result of the call the the function time.time ,"
cls = None,cls is None .
self .  is rendered = True,self._is_rendered is boolean True .
return list ( chain ( * errors ) ),"only if app_configs is None ot model._meta.app_config is contained in app_configs , error is a list containing all the previous elements . chain all errors elements into a list , return it ."
@ lru cache . lru cache ( maxsize = None ),"method lru_cache.lru_cache with an argument maxsize set to None , as a decorator ,"
"self . stdout . write ( "" STR_ "" % fixture name )","call the method self.stdout.write with an argument string `` Loading ' % s ' fixtures ... '' , where ' % s ' is replaced with fixture_name ."
while NUM_ :,"endless while loop ,"
def non field errors ( self ) :,"' < p % ( html_class_attr ) s > % ( label ) s % ( field ) s % ( help_text ) s < /p > ' , error_row set to a a string ' % s ' , row_ender set to a string ' < /p > ' , help_text_html set to a string , < span class= '' helptext '' > % s < /span > ' and errors_on_separate_row set to boolean True . define the method non_field_errors with an argument self ."
class BaseDatabaseCache ( BaseCache ) :,derive class BaseDatabaseCache from BaseCache base class .
return lib,"where ' % s ' is replaced with library_name and elements of tried_modules joined into a string , separated by ' , ' . return lib ."
def valid ident ( s ) :,define the function valid_ident with an argument s .
"def  new instance ( cls , children = None , connector = None , negated = False ) :","define the method _new_instance with 4 arguments : ( cls , children set to None , connector set to None and negated set to boolean False ."
name . append ( ch ),append ch to result .
if not value :,"if value is false ,"
self . second = parser . expression ( bp ),"call the method parser.expression with an argument bp , substitute it for self.seconds ."
value = unicode value . strip ( ),"strip whitespaces from both ends of unicode_value , substitute the result for value ."
status code = NUM_,status_code is an integer 500 .
"params , varargs , varkw , defaults = getargspec ( func )","call the function getargspec with an argument func , substitute the result for params , varargs , varkw and defaults ."
db = options . get ( STR_ ),"get value under the 'database ' key of the options dictionary , substitute it for db ."
return response,and store it in the value of the dictionary response under the key 'ETag ' . return response
from django . core import mail,from django.core import mail into default name space .
"errors . append ( { STR_ : escape ( message ) if escape html else message , STR_ : error . code or , } )","append to errors list a dictionary created with 2 etries , if escape_html is true , return value of the function escape"
result [ i ] += piece,increment i-th element of result by piece .
pks = options . get ( STR_ ),"get the value under the 'primary_keys ' key of the options dictionary , substitute the result for pks ."
"def emit pre migrate signal ( create models , verbosity , in teractive , db ) :","define the function emit_pre_migrate_signal with 4 arguments : create_models , verbosity , interactive and db ."
data set = set ( force text ( value ) for value in data ),"for every value in data call the function force_text with an argument value , add the results into a set , substitute the resulting set for data_set ."
deprecation warning = renamed method [ NUM_ ],substitute third element of renamed_method for deprecation_warning .
 meta = Options ( table ),_meta is class Options class instance initialized with table argument .
if response is None :,"if response is None ,"
if tok . next :,"if tok.next is true ,"
"self . tokens . in sert ( NUM_ , token )",insert token at the beginning of self.tokens .
class Critical ( CheckMessage ) :,derive the class Critical from base class CheckMessage .
if field . serialize :,"if field.serialize is true ,"
"result . sort ( key = lambda k : k [ NUM_ ] , reverse = True )",sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k .
if not self . timezone :,"if self.timezone is false ,"
data = conditional escape ( arg ) . join ( value ),"call the function conditional_escape with an argument arg , call the method join on the result with an argument value ,"
elif in t ( timeout ) == NUM_ :,"else if timeout converted into an integer equals to integer 0 ,"
"setattr ( Module six moves urllib parse , attr . name , attr )",set attr.name attribute of the Module_six_moves_urllib_parse object to attr .
opt label = option [ NUM_ ],substitute first element of options for opt_label .
sort = complain,substitute complain for sort .
"return fastcgi help ( "" STR_ "" )","call the fastcgi_help function with an argument string `` Invalid combination of host , port , socket . `` , return it ."
"raise TypeError ( "" STR_ "" )",raise an TypeError exception with an argument string `` invalid keyword arguments to print ( ) '' .
"return super ( EmailField , self ) . clean ( value )",call the method clean with an argument value from the base class of the EmailField class .
if p pattern . startswith ( ^ ) :,"if p_pattern starts with a string '^ ' ,"
seqs = connection . in trospection . sequence list ( ) if reset sequences else ( ),"call the method connection.introspection.sequence_list if reset_sequences is true , substitute the result for seqs , if not , seqs is an empty tuple ."
"def handle extensions ( extensions = ( STR_ , ) , ignored = ( STR_ , ) ) :",DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode . define the function handle_extensions with 2 arguments : extensions set to tuple containing string 'html ' and ignored set to tuple containing string 'py ' .
"self .  exception middleware . in sert ( NUM_ , mw instance . process exception )",insert mw_instance.process_exception at the beginning of self._exception_middleware .
t = get template ( file name ),"call the function get_template with an argument file_name , substitute the result for t ."
"def receive data chunk ( self , raw data , start ) :","define the method receive_data_chunk with arguments : self , raw_data and start ."
from django . utils . http import urlquote,from django.utils.http import urlquote into default name space .
class File ( FileProxyMixin ) :,derive the class File from the FileProxyMixin base class .
def parse ( self ) :,define the method parse with an argument self .
import threading,import threading .
return self . has previous ( ) or self . has next ( ),"call the method self.has_previous , if it evaluate to false , call the self.has_next method , return the result ."
context extras [ STR_ ] = True,value under the 'debug ' key of the context_extras dictionary is boolean True .
return ip address validator map [ protocol . lower ( ) ],"convert protocol to lowercase , use it as a key to get a value from the ip_address_validator_map dictionary , return it ."
"from django . utils . translation import ugettext lazy as   , ungettext lazy",from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space .
class WithNode ( Node ) :,derive the class WithNode from Node base class .
if self . args :,"default is boolean False , and help is a string `` Do n't colorize the command output. '' . if self.args is true ,"
"super ( RendererMixin , self ) .   init   ( * args , ** kwargs )","call the method __init__ from the base class of the class RendererMixin , with 2 arguments : unpacked list args ,"
"if is in stance ( v , ( list , tuple ) ) :","if v is an instance of list or tuple type ,"
return parser . parse ( ),"call the method parser.parse , return the result ."
return t . render ( context instance ),"call the function t.render with an argument context_instance , return the result ."
if self .  cull frequency == NUM_ :,if self._cull_frequency equals to integer 0 .
"def cfg convert ( self , value ) :",define the method cfg_convert with 2 arguments : self and value .
"def   init   ( self , name , old mod , new mod , old attr = None , new attr = None ) :","define the method __init__ with 6 arguments : self , name , old_mod , new_mod , old_attr set to None , new_attr set to None ."
parser . delete first token ( ),call the method parser.delete_first_token .
if commit :,"of the obj object . if commit is true ,"
"sys . stderr . write ( "" STR_ "" )",call the method sys.stderr.write with an argument string `` Unable to load the flup package . In order to run django\n '' .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = True , help = STR_ )","call parser.add_argument method with ' -- noinput ' , action set to string 'store_false ' , dest set to string 'interactive ' ,"
if relative dir :,"if relative_dir is true ,"
"if hasattr ( base , STR_ ) :",if base has an attribute 'base_fields ' .
zfile . close ( ),call the method zfile.close .
if not table name filter ( table name ) :,"call the function table_name_filter with an argument table_name , if it evaluates to true ,"
categories = [ force text ( c ) for c in categories ],"categories is a list containing the results of the function force_text , called with an argument c , for every c in categories ."
if value ! = self . empty value :,"if value is not equal self.empty_value ,"
"lines [ i ] = ( "" STR_ "" + width + "" STR_ "" ) % ( i + NUM_ , line )","concatenate string ' % 0 ' , width and string `` d. % s '' , format the previous string with i incremented by 1 and line ,"
"return clean ipv6 address ( value , self . unpack ipv4 )","call the function clean_ipv6_address with arguments value and self.unpack_ipv4 , return the result ."
"return render value in context ( output , context )","call the function render_value_in_context with 2 arguments output and context , return the result ."
final attrs [ STR_ ] = STR_,substitute string 'checked ' for value under the 'checked ' key of final_attrs dictionary .
idstring =,idstring is an empty string .
get function code = operator . attrgetter (  func code ),"call the method operator.attrgetter with an argument _func_code , substitute the result for get_method_code ."
class MultiValueDict ( dict ) :,derive the class MultiValueDict from the dict base class .
commands dict = collections . defaultdict ( lambda : [ ] ),"where ' % s ' is replaced with self.prog_name , an empty string and string `` Available subcommands : '' . call the method collections.defaultdict with a argument : lambda function without arguments that returns an empty list ,"
self . stream . write ( b STR_ ),write a newline character into self.stream file stream .
return . join ( c ),"join elements of c into a string , return it ."
"def write items ( self , handler ) :",define the method write_items with 2 arguments : self and handler .
self . ignore = options . get ( STR_ ),"get the value under the 'ignore ' key of the options dictionary , substitute it for self.ignore ."
raise TypeError ( STR_ STR_ % level ),raise an TypeError exception with an argument string 'Level not an integer or a valid string : % r ' formated with level .
if att name == STR_ and extra params == { STR_ : True } :,"if att_name equals string 'id ' and extra_params equals a dictionary with 1 entry : boolean True for 'primary_key ' ,"
if cache is None :,"if cache is None ,"
elif name is not None and compile function is None :,"otherwise if name is not None and compile_function is None ,"
for loader in self . loaders :,"for every loader in self.loaders ,"
  eq   = new method proxy ( operator . eq ),"new_method_proxy , __class__ is an property object created with previous result as an argument . call the function new_method_proxy with an argument operator.eq , substitute the result for __eq__ ."
"def  text chars ( self , length , truncate , text , truncate len ) :","define the method _text_chars with 5 arguments : self , length , truncate , text and truncate_len ."
"self . in teresting = re . compile ( r STR_ % tag . lower ( ) , re . I )","replace ' % s ' in the string ' < /\s* % s\s* > ' with the result of the function call tag.lower ( ) ,"
construct instance exclude = list ( exclude ),"convert exclude elements to list , substitute it for construct_instance_exclude ."
class Signer ( object ) :,derive the class Signer from the object base class .
class FloatField ( IntegerField ) :,derive the class FloatField from the base class IntegerField class .
class lazy property ( property ) :,derive the class lazy_property from the property base class .
"if not hasattr ( c , STR_ ) and hasattr ( types , STR_ ) and type ( c ) ! = types . ClassType :","if c doesnt have an attribute '__call__ ' , and types has an attribute 'ClassType ' , and type of c is not equal to types.ClassType ,"
"raise ValidationError (   ( STR_ ) , code = STR_ )","raise a ValidationError exception with 2 arguments : return value of the function _ called with an argument string 'Enter a valid IPv4 or IPv6 address . ' , and code set to string 'invalid ' ."
all locales = [ ],all_locales is an empty string .
if self . can delete :,"label set to return value of the function _ called with an string 'Order ' and required as boolean False . if self.can_delete is true ,"
if settings . USE TZ :,"if settings.USE_TZ is true ,"
if min num is None :,"if min_num is None ,"
cls .   dispatch [ klass ] [ funcname ] = method,substitute method for value under the funcname key of the dictionary under the klass key of the cls.__dispatch dictionary .
with self .  lock :,"call the method self._lock , with the return value ,"
code = STR_,code is a string 'limit_value '
if error class is None :,"if error_class is None ,"
"raise ImproperlyConfigured ( "" STR_ "" "" STR_ "" )","or if it doesnt exists if exclude is None . raise an ImproperlyConfigured with an argument string `` Calling modelformset_factory without defining 'fields ' or 'exclude ' ,"
in itial = [ ],initial is an empty list .
except TypeError :,"if TypeError exception is caught ,"
"regex = re . compile ( regex , re . UNICODE )","call the function re.compile with 2 arguments regex , re.UNICODE and substitute the result for regex ."
stat = os . stat ( filename ),"call the os.stat function with argument filename , store the return value in stat ."
if num repl > NUM_ :,"if num_repl is greater than integer 0 ,"
"raise CommandError ( "" STR_ "" % errors )","raise an CommandError with an argument string `` errors happened while running msgmerge\n % s '' , where ' % s ' is replaced with errors ."
data [ field . attname ] = value,"unpacked list field_value as an argument , substitute the result for value . substitute value for value under the field.attname key of the data dictionary ."
self .  dir = os . path . abspath ( dir ),"get absolute directory path of dir , substitute it for self._dir ."
"return meta ( name , bases , d )","call the function meta with 3 arguments : name , base and d ."
"msg += "" STR_ "" % ( "" STR_ "" if visible issue count == NUM_  else "" STR_ "" if visible issue count == NUM_  else "" STR_ "" % visible issue count , len ( all issues ) - visible issue count , )","append string `` System check identified % s ( % s silenced ) . '' to msg , replace first ' % s ' for : string `` no issues '' ,"
class BaseValidator ( object ) :,derive the class BaseValidator form the object base class .
disposition = meta data [ STR_ ] [ NUM_ ],"get the value under the 'content-disposition ' key of the meta_data dictionary , substitute second element of it for disposition ."
while self . exists ( name ) :,"as long as self.exists function with argument name evaluates to boolean True ,"
"def multiple chunks ( self , chunk size = None ) :",define the method multiple_chunks with arguments self and hunk_size set to None .
"return ( p1 . scheme , p1 . hostname , p1 . port ) == ( p2 . scheme , p2 . hostname , p2 . port )","if p2.scheme , p2.hostname and p2.port equals p1.scheme , p1.hostname and p1.port , respectively , return boolean True , otherwise return boolean False ."
"self . attrs , self . choices = attrs , choices",substitute attrs and choices for self.attrs and self.choices
return widget . id for label ( id  ),"if not , substitute self.auto_id for id_ . call the method widget.id_for_label with an argument id_ , return the result ."
if not language code re . search ( accept lang ) :,"call the method language_code_re.search with an argument accept_lang , if it evaluates to false ,"
"def   init   ( self , required = True , widget = None , label = None , in itial = None , help text = , error messages = None , show hidden initial = False , validators = [ ] , localize = False , label suffix = None ) :","define the function __init__ with 11 arguments : self , required set to boolean True , widget set to None , label set to None ,"
resolver = get resolver ( urlconf ),"call the function get_resolver with an argument urlconf , substitute the result for resolver ."
if block is None :,"if block is None ,"
"def file complete ( self , file size ) :",define the method file_complete with arguments self and file_size .
@ stringfilter,"decorator stringfilter ,"
self . errors,call self.errors .
return proxy,return proxy .
"urlquote = allow lazy ( urlquote , six . text type )","and result of the function force_str called with an argument safe , use the result as an argument for the call to the function force_text , return the result . call the function allow_lazy with 2 arguments : urlquote and six.text_type , substitute the result for urlquote ."
return STR_ . join ( statements ),"join statements into a string , separated by newlines , return it ."
return result,return result .
offset = offset + len ( self .   starttag text ),increment the offset by the length of self.__starttag_text .
context extras [ STR_ ] = translation . get language bidi ( ),"call the translation.get_language_bidi function , substitute the result for the value under the 'LANGUAGE_BIDI ' key of the context_extras dictionary ."
fp = six . StringIO ( ),fp is a instance of a class six.StringIO .
if not args :,"if args is true ,"
"self . add filters ( result , filters )",call the method self.add_filters with 2 arguments : result and filters .
self . format string = format string,substitute format_string for self.format_string .
if os . path . is dir ( STR_ ) :,"if 'locale ' is a directory ,"
return self .   copy   ( ),"call the method self.__copy__ , return the result ."
self .  catalog . update ( other .  catalog ),update the self._catalog dictionary with other._catalog .
"def get language from request ( request , check path = False ) :",define the function get_language_from_request with 2 arguments : request and check_path set to boolean False .
template = self . template with initial,substitute self.template_with_initial for template .
response = None,set response to None .
field notes . append ( STR_ STR_ ),"append string 'max_digits and decimal_places have been guessed , as this database handles decimal fields as float ' to field_notes ."
"with io . open ( django po , STR_ , encoding = STR_ ) as fp :","call the function io.open with 3 arguments : django_po , string ' r ' and encoding set to string 'utf-8 ' as arguments ,"
msg [ STR_ ] = STR_ . join ( self . cc ),"join elements of self.cc into a string separated by ' , ' , substitute the result for value under the 'Cc ' key of msg dictionary ."
from django . views import debug,from django.views import debug into default name space .
"return date ( self . year , self . month , self . day )","call the function data with 3 arguments : self.year , self.month and self.day , return the result ."
class EmailValidator ( object ) :,derive the class EmailValidator form the object base class .
self . run validators ( out ),call the method self.run_validators with an argument out .
  dir   = new method proxy ( dir ),"call the function new_method_proxy with an argument dir , substitute the result for __dir__ ."
"elif g [ NUM_ ] == "" STR_ "" :","otherwise if first element of g equals a string `` ' '' ,"
from django . utils . functional import lazy,from django.utils.functional import lazy into default name space .
while b STR_ not in self . buffer and ( size is None or len ( self . buffer ) < size ) :,"while newline character is not contained in self.buffer and , size is None or length of self.buffer is less than size ,"
finally :,"use_natural_foreign_keys set to use_natural_foreign_keys , use_natural_primary_keys set to use_natural_primary_keys , and stream set to stream , if the stream is true , otherwise stream set to self.stdout . finally perform ,"
finally :,"append the result to the '\n ' string , write it to self.stdout . finally perform ,"
def   bool   ( self ) :,define the method __bool__ with an argument self .
if token . token type == NUM_ :,"if token.token_type equals integer 0 ,"
"def   setitem   ( self , name , val ) :","define the method __setitem__ with arguments self , name and val ."
updates = dict ( ),updates is an empty dictionary .
class BadSerializer ( object ) :,derive the class BadSerializer from the object base class .
with connection . constraint checks disabled ( ) :,"call the method connection.constraint_checks_disabled , with the result perform ,"
return self . file . name,return self.file.name .
return error dict,return error_dict .
return self . as widget ( ),"append the result to the result of the method , self.as_widget , return the resulting string . call the method self.as_widget , return the result ."
return caches [ DEFAULT CACHE ALIAS ] == other,"if value under the DEFAULT_CACHE_ALIAS key of caches dictionary equals to other , return boolean True , otherwise return False ."
field notes . append ( STR_ ),append string 'Field name made lowercase . ' to field_notes .
"s2 = time . strftime ( fmt , ( year + NUM_ , ) + timetuple [ NUM_ : ] )","call the function time.strftime with 2 arguments : fmt and and timetuple without the first element ,"
@ lru cache . lru cache ( maxsize = None ),"where ' % s ' is replaced with fixture_name , and RuntimeWarning . decorator method lru_cache.lru_cache with an argument maxsize set to None ."
def clear ( self ) :,"joining string ' % r : % r ' formated with k and v into a string , separated with ' , ' , use it to format a string ' { % s } ' , return it . define the method clear with an argument self ."
nesting = NUM_,nesting is integer 0 .
if t [ NUM_ ] is True :,"if second element of t is boolean True ,"
prev opts = [ x . split ( = ) [ NUM_ ] for x in cwords [ NUM_ : cword - NUM_ ] ],"for every s_opt in parser.option_list . for every x in slice of cwords from the second element to the element at the cword decremented by 1 index ,"
"def strptime ( self , value , format ) :","define the method strptime with arguments self , value and format ."
self .  out = out,substitute out for self._out .
for cat in self . feed [ STR_ ] :,for every cat in value under the 'categories ' key of the self.feed dictionary .
"key = make key ( args , kwds , typed )","call the function make_key with 3 arguments : args , kwds and typed , substitute the result for key ."
"if is in stance ( node , Node ) :","if node is an instance of Node ,"
self .  createdir ( ),call the self._createdir method .
in ner = NonCapture ( result [ start : ] ),"inner is an instance of NonCapture , created with elements of result from start index to the end ."
for i in range ( len ( result ) ) :,"for every i in range of integers from 0 to length of result , not included ,"
for option in option label :,"called with an argument option_value , append the result to output . for every option in option_label ,"
"return self . get ( key , version = version ) is not None","call the self.get method with key and version set to version as arguments , return it if it is not None ."
RAISE ERROR = object ( ),RAISE_ERROR is an instance of object class .
"def add truncation text ( self , text , truncate = None ) :","called with with an argument lambda function which returns result of the force_text function called with an argument text . define the method add_truncation_text with 3 arguments : self , text and truncate set to None ."
from django . utils . html import strip spaces between tags,from django.utils.html import strip_spaces_between_tags .
"self . in put type = attrs . pop ( STR_ , self . in put type )","remover the entry under the 'type ' key of the attrs dictionary , substitute it for self.input_type , if the key doesnt exists ,"
"return bytes ( func ( * self .   args , ** self .   kw ) )","call the function func with 2 arguments : unpacked list self.__args and unpacked dictionary self.__kw ,"
if not nesting :,"if nesting is false ,"
from itertools import chain,from itertools import chain into default name space .
class WSGIRequest ( http . HttpRequest ) :,derive the class WSGIRequest from base class http.HttpRequest .
"if ( is in stance ( args [ NUM_ ] , SafeData ) and getattr (  dec .  decorated function , STR_ , False ) ) :","if first element of args is an instance of SafeData , and 'is_safe ' attribute of dec._decorated_function object is true ,"
elif in trans :,"otherwise if intrans is true ,"
if is  aware ( date ) :,"call the function is_aware with an argument date , if it evaluates to true ,"
"def  convert to charset ( self , value , charset , mime encode = False ) :","define the method _convert_to_charset with 4 arguments : self , value , charset and mime_encode set to boolean False ."
self .   kw = kw,substitute kw for self.__kw .
"def value from datadict ( self , data , files , name ) :","define the method render with 4 arguments : self , name , value and attrs set to None ."
"autoescape = autoescape and not is in stance ( value , SafeData )","if autoescape is true and value is not an instance of SafeData , autoescape is boolean True , otherwise it is boolean False ."
TB = NUM_ << NUM_,"move integer 1 left for 40 bits , substitute the result for TB ."
from django . utils . regex helper import normalize,from django.utils.regex_helper import normalize into default name space .
else :,"for 'maxSpare ' , value under the key 'minspare ' of options dictionary converted to an integer for 'minSpare ' , and value under the key 'maxchildren ' of options dictionary converted to an integer , for 'maxThreads ' . if not ,"
if os . environ . get ( STR_ ) :,if value under the 'DJANGO_SETTINGS_MODULE ' key of os.environ dictionary exists .
if p >= NUM_ :,"if p is greater or equal to integer 0 ,"
"  all   = [ STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , ]","__all__ is a list with 15 elements : strings 'utc ' , 'get_fixed_timezone ' , 'get_default_timezone ' , 'get_default_timezone_name ' ,"
"self = tuple .   new   ( cls , * args , ** kwargs )","call the method tuple.__new__ with 3 arguments : cls , unpacked list args and unpacked dictionary kwargs , substitute the result for self ."
self . unclosed block tag ( parse until ),call the method self.unclosed_block_tag with an argument parse_until .
raise NotImplementedError ( STR_ ),raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_object ( ) method ' .
"new filenames . append ( os . path . join ( dirpath , filename ) )","join dirpath and filename into a path separated by '/ ' , append it to new_filenames ."
"bits = host . rsplit ( STR_ , NUM_ )","split host from the right side into 2 parts at the ' : ' , substitute the result for bits ."
return list ( iter ( self ) ),"append to a list elements of the iterator self , return the resulting list ."
content = . join ( comment ),"join comment elements into a string , substitute it for content ."
self .  setup ( ),call the method self._setup .
"parser . add argument ( STR_ , STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ )","default is a an empty list and help is a string ' ( use multiple -- exclude to exclude multiple apps/models ) . ' . call the method parser.add_argument with 6 arguments : string '-n ' , string ' -- natural ' , action is string 'store_true ' , dest is string 'use_natural_keys ' ,"
"from django . core . management . base import CommandError , BaseCommand",from django.core.management.base import CommandError and BaseCommand into default name space .
"super ( UploadedFile , self ) .   init   ( file , name )","call the __init__ method with arguments file and name , from the base class of the UploadedFile class ."
"sys . path . in sert ( NUM_ , options . pythonpath )",insert options.pythonpath at the beginning of sys.path .
@ deconstructible,"decorator deconstructible ,"
in dexbytes = operator . getitem,substitute operator.getitem for indexbytes .
if parse until :,"if parse_until is true ,"
if not chunk :,"if chunk is empty ,"
tried . append ( filepath ),append filepath to tried .
def S ( self ) :,define the method S with an argument self .
def   str   ( self ) :,define the method __str__ with an argument self .
return  serializers [ format ] . Serializer,"get the value under the format key of the _serializers dictionary , return the Serializer filed of the result ."
"base , tail ext = os . path . splitext ( filename . lower ( ) )","convert filename to lowercase , use the result as an argument for the call to the function os.path.splitext ,"
urlconf = get urlconf ( ),call the function get_urlconf with an argument urlconf .
self . cleaned data = { },self.cleaned_data is an empty dictionary .
"attachment = MIMEBase ( basetype , subtype )","attachment is an instance of a class MIMEBase , created with the arguments basetype and subtype ."
"subclass = type ( "" STR_ "" , ( migrations . Migration , ) , { "" STR_ "" : [ ] , "" STR_ "" : new operations , "" STR_ "" : replaces , } )","subclass is a class named Migration , sub classed from migrations.Migration base class , with fields dependencies set to an empty list ,"
return self .  object dict . get ( pk ),substitute the result for self._object_dict . return the value under the pk key of self._object_dict dictionary .
serializers [ format ] = module,substitute module for the value under the format key of the serializers dictionary .
current = settings . TEMPLATE STRING IF INVALID,substitute settings.TEMPLATE_STRING_IF_INVALID for current .
value = value . pk,substitute value.pk for value .
def close ( self ) :,self._files is an instance of class MultiValueDict . define the method close with an argument self .
path = force text ( path ),"call the function force_text with an argument path , substitute the result for path ."
"from django . utils . dateformat import format , time format",from django.utils.dateformat import format and time_format into default name space .
class RadioFieldRenderer ( ChoiceFieldRenderer ) :,"if id_ is true id_attr set to return value of the function format_html , if not id_attr set to an empty string , content set to result of the function mark_safe with an argument : string created by joining elements of outputs , with '\n ' separator , return the result . derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class ."
self . paths to remove = [ ],self.paths_to_remove is an empty list .
def as ul ( self ) :,"use the result as an argument for the call to the json.dumps function , return the result . define the method as_text with an argument self ."
try :,"substitute the result for self.instance . try ,"
@ deconstructible,"and self.code equals to other.code , return boolean True , otherwise return boolean False . decorator deconstructible ,"
return self . to + self . cc + self . bcc,"add together self.to , self.cc and self.bcc , return the result ."
ch = None,ch is None .
if number equal > NUM_ :,"substitute the length of the resulting list for number_equal . if number_equal is greater than integer 40 ,"
in plural = False,inplural is boolean False .
for var in loopvars :,"joined into a string , separated by whitespaces , substitute the result for loopvars . for every var in loopvars ,"
return value . center ( in t ( arg ) ),"call the method value.center with an argument , arg converted into a integer , return the result ."
if f == STR_ :,"if f equals to string '__pycache__ ' ,"
pass,"do nothing ,"
seconds = self . Z ( ),"call the method self.Z , substitute the result for seconds ."
sub = mapping [ version [ NUM_ ] ] + str ( version [ NUM_ ] ),"use fourth element of version as a key to get the value from mapping dictionary , append to it fourth element of version converted to string , substitute it for sub ."
return timedelta ( NUM_ ),"call the function timedelta with an argument integer 0 , return the result ."
self .  init translation catalog ( ),converted to an integer . call the method self._init_translation_catalog .
"super ( DecimalField , self ) .   init   ( max value , min value , * args , ** kwargs )","call the method __init__ from the base class of the class DecimalField , with 4 arguments : max_value , min_value ,"
"raise TypeError ( "" STR_ "" )","raise an TypeError exception with an argument string `` If the flags are set , regex must be a regular expression string . `` ."
def validate integer ( value ) :,define the function validate_integer with an argument value .
kwargs [ STR_ ] = self . get queryset ( ) [ i ],"call the method self.get_queryset , substitute i-th element of the result for value under the 'instance ' key of kwargs dictionary ."
"from django . template . base import ( Library , add to builtins , builtins , get library , get templatetags modules , get text list , import library , libraries )","from django.template.base import Library , add_to_builtins , builtins , get_library , get_templatetags_modules , get_text_list ,"
def unlock ( f ) :,define the function unlock with argument f .
"raise ValidationError ( self . error messages [ STR_ ] , code = STR_ , params = params )",raise an ValidationError with 2 arguments : value under the 'max_length ' key of the self.error_messages dictionary and code set to 'max_length ' .
"elif action == "" STR_ "" :",otherwise if action equals to string 'unapply_start ' .
def getvalue ( self ) :,define the method getvalue with an argument self .
if self . alternatives :,"if self.alternatives is true ,"
content =,content is an empty string .
"closing tag , tagname , self closing = tag . groups ( )","call the method tag.groups , substitute the result for closing_tag , tagname and self_closing , respectively ."
def   repr   ( self ) :,define the method __repr__ with an argument self .
"if e . args [ NUM_ ] . startswith ( "" STR_ "" ) :","if e.args list first element starts with string `` Error -5 '' ,"
latest date = item date,substitute item_date for latest_date .
return Operator,return Operator .
if is sues :,"if issues is true ,"
if len ( value ) ! = NUM_ :,"if length of value is not equal to integer 1 ,"
"return node class ( takes context , args , kwargs )","substitute the result for args and kwargs , respectively . call the function node_class with 3 arguments : takes_context , args and kwargs ."
if recursive :,"if recursive is true ,"
" func defaults = "" STR_ """,_func_defaults is a string `` func_defaults '' .
self .  raw ipv6 = bool ( self . use ipv6 ),"convert self.use_ipv6 to boolean , substitute it for self._raw_ipv6 ."
yield buf,yield buf as return value of the generator .
if current len <= length :,"if current_len is smaller than or equal to length ,"
raise ImproperlyConfigured ( STR_ % self . file path ),"raise an ImproperlyConfigured exception with argument string 'Could not write to directory : % s ' , replace ' % s ' with self.file_path ."
if formatter :,"if formatter is true ,"
klass = node . clone ( ),"call the method node.clone , substitute the result for klass ."
"self . stdout . write ( "" STR_ "" % humanize ( fixture dir ) )","call the method self.stdout.write with an argument string `` Checking % s for fixtures ... '' ,"
return datetime . now ( ),"call the method datetime.now , return the result ."
return any ( form . has changed ( ) for form in self ),"for every form in self call the method form.has_changed if any of the results evaluates to true , return boolean True ,"
from   future   import absolute import,from __future__ import absolute_ into default name space .
field dict = OrderedDict ( field list ),"field_dict is an instance of OrderedDict class , created with an argument field_list ."
"super ( TypedMultipleChoiceField , self ) . validate ( value )",call the method validate with an argument value from the base class of the class TypedMultipleChoiceField .
in ternal use only = False,internal_use_only is boolean False .
if settings . FORCE SCRIPT NAME is not None :,"if settings.FORCE_SCRIPT_NAME is not None ,"
"self . stream = kwargs . pop ( STR_ , sys . stdout )","pop the value under the 'stream ' key of the kwargs dictionary , if it exists replace it for self.stream , if not replace sys.stdout for self.stream ."
month = months [ date . month - NUM_ ],"decrement date.month by integer 1 , use the result as an key to obtain the value from the months dictionary , substitute it for month ."
raise CommandError ( STR_ STR_ % options [ STR_ ] ),"raise an CommandError exception with an argument string ' '' % s '' is not a valid port number or address : port pair . ' ,"
"if is in stance ( arg , Promise ) :","for every arg in the result , if arg is an instance of Promise class ,"
return STR_,return string 'rd ' .
if run syncdb and executor . loader . unmigrated apps :,"use the result as an argument for the call to the self.stdout.write method . if run_syncdb and executor.loader.unmigrated_apps exist ,"
text = text [ NUM_ : ],remove first element of text .
"yield "" STR_ ""","yield string `` # Feel free to rename the models , but do n't rename db_table values or field names . '' as the result ."
"name =  resolve name ( name [ level : ] , package , level )","call the function _resolve_name with 3 arguments : name list elements from the level index to the end , package and level ,"
" iterlists = "" STR_ """,_iterlists is a string `` lists '' .
def is  hidden ( self ) :,define the method is_hidden with an argument self .
if labels and f . name in labels :,"if labels is true and f.name is contained in labels ,"
if hextet . count ( STR_ ) == NUM_ :,"if count of occurrence of ' . ' in ip_str is equal to integer 3 ,"
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to integer 1 ,"
for migration in migrations to squash :,"for every migration in migrations_to_squash ,"
"def start object ( self , obj ) :",define the method start_object with arguments self and obj .
if command . verbosity > NUM_ :,"if command.verbosity is greater than integer 1 ,"
"from django . utils . encoding import force text , python 2 unicode compatible",from django.utils.encoding import force_text and python_2_unicode_compatible into default name space .
from django . utils import translation,django.utils import translation into default namespace .
charset = msg . get charset ( ) . get output charset ( ) if msg . get charset ( ) else STR_,"if method msg.get_charset evaluates to true , call the get_output_charset method on the return value of the msg.get_charset method , substitute the result for charset , otherwise if it is false , substitute the string 'utf-8 ' for charset ."
"return self . filter ( name , func , ** flags )","if not , substitute func.__name__ for name . call the method self.filter with 3 arguments : name , func and unpacked dictionary flags ."
"url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )","call the function urlunsplit with a tuple containing 5 elements : scheme , netloc , path , query and fragment , as an argument , substitute the result for url ."
"from django . utils . encoding import force text , filepath to uri",from django.utils.encoding import force_text and filepath_to_uri into default name space .
if day of year <= ( NUM_ - jan1 weekday ) and jan1 weekday > NUM_ :,"if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4 ,"
msgs = STR_ . join ( lines ),"join elements of lines into a string , separated by newline characters , substitute it for msgs ."
"super ( Command , self ) . handle ( STR_ , project name , target , ** options )","call the handle method of the base class of the Command class , with 4 arguments : string 'project ' , project_name , target ,"
return connection . send messages ( messages ),"for every subject , message , sender and recipient in datatuple , store the results in the messages list . return evaluated result of the method connection.send_messages with messages as argument ."
if app config . models module is None :,"if app_config.models_module is None ,"
"parser . add argument ( STR_ , metavar = STR_ , nargs = * , help = STR_ )","call the method parser.add_argument with 4 arguments : string 'args ' , metavar set to string 'test_label ' , nargs set to string '* ' ,"
try :,"try ,"
"if not callable ( getattr ( template , STR_ , None ) ) :","get 'render ' attribute of template object , if it is callable ,"
return ugettext lazy ( value ),"call the function ugettext_lazy with an argument value , return the result ."
"@ register . filter ( "" STR_ "" , is  safe = True , needs autoescape = True )","decorator function register.filter with 3 arguments string `` slice '' , is_safe set to boolean True and needs_autoescape set to True ."
toks = self . toks,substitute self.toks for toks .
split . append ( bit ),append bit to split .
else :,"substitute it for max_age , if not , max_age is integer 0. if not ,"
"self .  set ( key , pickled , timeout )","call the method self._set with key , pickled and timeout as arguments ."
"for state , rules in states . items ( ) :","call the method states.items , for every state and rules in the result ,"
locales = all locales,substitute all_locales for locales .
"renderer = kwargs . pop ( STR_ , None )","remove entry under 'render ' key of the kwargs dictionary and substitute it for renderer , if the key doesnt exists , renderer is None ."
except SystemExit :,"if SystemExit exception is caught ,"
"self . pk field = kwargs . pop ( "" STR_ "" , False )","remove element from kwargs dictionary under the key 'pk_field ' , substitute it for self.pk_field if it exists ,"
"def complain ( self , * wargs , ** kwargs ) :","define the method complain with 3 arguments : self , unpacked dictionary wargs and unpacked dictionary kwargs ."
overlapped = OVERLAPPED ( ),"call the OVERLAPPED function , substitute the result for overlapped ."
if not lib :,"if lib is false ,"
class Command ( BaseCommand ) :,derive the class Command from the BaseCommand class .
def negate ( self ) :,define the method negate with an argument self .
self . backout . append ( self . pointer ),append self.pointer to self.backout .
"s = force text ( s ) . strip ( ) . replace ( , STR_ )","call the function force_text with an argument s , strip the result of whitespaces from both ends ,"
in valid apps = [ ],invalid_apps is an empty list .
"value = environ . get ( str ( key ) , str ( default ) )","convert key and default to strings , get the value under the key string key of the environ dictionary , if it does not exists use the ,"
"raise CommandError ( "" STR_ "" "" STR_ "" "" STR_ "" % po path )","raise CommandError exception with string `` The % s file has a BOM ( Byte Order Mark ) . Django only supports .po files encoded in UTF-8 and without any BOM . `` , with ' % s ' replaced with po_path , as argument ."
"raise CommandError ( "" STR_ "" % app label )","raise a exception of CommandError class , with string `` App ' % s ' does not have migrations '' with ' % s ' replaced with app_label as the argument ."
def open ( self ) :,define the method open with argument self .
"check for migrations ( app config , connection )",call the function check_for_migrations with an arguments app_config and connection .
"return datetime . datetime . strptime ( force str ( value ) , format ) . date ( )","call the method datetime.datetime.strptime with 2 arguments : result of the function force_str called with an argument value ,"
"response = view func ( request , * args , ** kwargs )","call the function view_func with 3 arguments : request , unpacked list args , unpacked dictionary kwargs , substitute the result for response ."
"new migration = subclass ( "" STR_ "" % migration . name , app label )","dependencies set to new_operations and replaces set to replaces . call the function subclass with 2 arguments string `` 0001_squashed_ % s '' , where ' % s ' is replaced with migration.name and app_label ,"
"for attr , value in list ( attrs . items ( ) ) :","convert items of attrs dictionary to list of tuples , for every attr and value in it ,"
"form = modelform factory ( model , form = form , fields = fields , exclude = exclude , formfield callback = formfield callback , widgets = widgets , localized fields = localized fields , labels = labels , help texts = help texts , error messages = error messages )","explicitly is prohibited . '' call the function modelform_factory with 10 arguments : model , form as form , fields as fields , exclude as exclude ,"
known models = set ( model for model in connection . in trospection . in stalled models ( tables ) if model not in app models ),"if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value ,"
from django . core . exceptions import ImproperlyConfigured,from django.core.exceptions import ImproperlyConfigured into default name space .
"app label , migration name = options [ STR_ ] , options [ STR_ ]","get the values under the keys 'app_label ' and 'migration_name ' of the options dictionary , substitute the results for app_label and migration_name , respectively ."
end text pos = NUM_,end_text_pos is equal to integer 0 .
"self .  leftover = b . join ( [ bytes , self .  leftover ] )","join bytes and self._leftover into a bytes string , substitute it for self._leftover ."
"both after = [ Tok ( "" STR_ "" , r "" STR_ "" ) , ]","both_after is an list with an element instance of Tok class , created with 2 arguments : string 'other ' and raw string ' . ' ."
if sign in self . digits :,"if sign is contained in self.digits ,"
class Lexer ( object ) :,derive the class Lexer form the base class object .
try :,try
value = self .  resolve lookup ( context ),"call the function self._resolve_lookup with an argument context , substitute the result for value ."
if leading :,"if leading is true ,"
"raise AttributeError ( "" STR_ "" )",raise an AttributeError exception with string `` Unable to determine the file 's size . '' as argument .
host = self . META [ STR_ ],"get the value under the 'HTTP_X_FORWARDED_HOST ' key of the self.META dictionary , substitute the result for host ."
consume next = True,consume_next is boolean True .
"with io . open ( potfile , STR_ , encoding = STR_ ) as fp :","call the function io.open with 3 arguments : potfile , string ' a ' and encoding set to string 'utf-8 ' as arguments ,"
"prefix norm , prefix args = normalize ( urlquote (  prefix ) ) [ NUM_ ]","call the function urlquote with an argument _prefix , use the result as an argument for the call to the normalize function ,"
self . content = content,substitute content for self.content .
"def parse starttag ( self , i ) :",define method parse_starttag with self class instance and i as the arguments .
if data in self . empty values :,"if data in self.empty_values is true ,"
"parser . add option ( STR_ , help = STR_ ) ,","call the method parser.add_option with 2 arguments : string ' -- pythonpath ' and help set to string ' A directory to add to the Python path , e.g . `` /home/djangoprojects/myproject '' . ' ."
  setitem   = new method proxy ( operator . setitem ),"call the function new_method_proxy with an argument operator.setitem , substitute the result for __setitem__ ."
raise KeyError ( STR_ % name ),"attribute of the self object for name converted into a string . raise an KeyError with an argument string 'Unknown media type `` % s '' ' , where ' % s ' is replaced with name ."
"def handle merge ( self , loader , conflicts ) :","define the method handle_merge with arguments self , loader and conflicts ."
class TemplateCommand ( BaseCommand ) :,derive the class TemplateCommand from the BaseCommand base class .
words [ i ] = mark safe ( word ),"call the function mark_safe with an argument word , substitute the result for i-th element of words ."
"g = g . strip ( "" STR_ "" )","strip g of `` ' '' from both ends ,"
from django . utils . synch import RWLock,from django.utils.synch import RWLock into default name space .
"def open ( self , mode = None ) :",define the method open with arguments self and mode set to None .
@ contextlib . contextmanager,"contextlib.contextmanager decorator ,"
"return host ,",return host and an empty string .
def unregister serializer ( format ) :,define the function unregister_serializer with an argument format .
return t . render ( Context ( dictionary ) ),"call the method t.render with an argument , instance of Context class , created with an argument dictionary , return the result ."
"def  set size ( self , size ) :",define the method _set_size with arguments self and size .
elif ch == STR_ :,"otherwise if ch equals a string ' ( ' ,"
def   init   ( self ) :,define the method __init__ with an argument self .
self . choices = [ ],self.choices is an empty list .
"if is in stance ( s , SafeData ) :",if s is an instance of SafeData .
def   enter   ( self ) :,define the method __enter__ with argument self .
"messages = [ EmailMessage ( subject , message , sender , recipient , connection = connection ) for subject , message , sender , recipient in datatuple ]","password set to auth_password , fail_silently set to fail_silently as arguments , assign the result to connection . call the EmailMessage function wit subject , message , sender , recipient and connection set to connection ,"
shown = set ( ),shown is an empty set .
parser .   loaded blocks . append ( block name ),"substitute ' % s ' with first element of bits and block_name , respectively . append block_name to parser.__loaded_blocks ."
class Group ( list ) :,derive the class Group from list base class .
return ( ret == NUM_ ),"if ret equals to integer 0 , return boolean True , otherwise return boolean False ."
"def templatetag ( parser , token ) :",define the function templatetag with 2 arguments : parser and token .
"super ( StreamingHttpResponse , self ) .   init   ( * args , ** kwargs )","and unpacked dictionary kwargs . call the __init__ method from the base class of the StreamingHttpResponse class , called with arguments : unpacked list args ,"
self . timezone = None,self.timezone is None .
if threading :,"if threading is true ,"
"return iter ( getattr ( d ,  iterlists ) ( ** kw ) )","get _iterlists attribute of the class d , call the result with an argument unpacked dictionary kw , convert the result to a iterable ,"
elif field type == STR_ and not connection . features . can introspect autofield :,"otherwise if field_type equals a string 'IntegerField ( ' and connection.features.can_introspect_autofield is false ,"
"return  long to bin ( result , hex format string )","substitute the result for result . call the function _long_to_bin with 2 arguments : result and hex_format_string , return the result ."
if len ( args ) ! = len ( params ) + len ( prefix args ) :,"if length of args is not equal to the sum of the lengths of params and prefix_args ,"
os . close ( fd ),close fd file descriptor .
response . streaming content = [ ],response.streaming_content is an empty list .
mapped tokens . append ( self . translate token ( token ) ),"call the method self.translate_token with an argument token , append the result to mapped_tokens ."
if e . args [ NUM_ ] not in not  found :,"if first element of e.args is not contained in not_found ,"
"now = datetime . datetime ( now . year , now . month , now . day )","call the function datetime.datetime with 3 arguments , now.year , now.month and now.day , substitute the result for now ."
"return IfEqualNode ( val1 , val2 , nodelist true , nodelist false , negate )","return an instance of IfEqualNode class , created with 5 arguments : val1 , val2 , nodelist_true , nodelist_false and negate ."
"PALETTES = { NOCOLOR PALETTE : { STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , STR_ : { } , } , DARK PALETTE : { STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ } , STR_ : { STR_ : STR_ } , STR_ : { STR_ : ( STR_ , ) } , STR_ : { STR_ : ( STR_ , ) } , STR_ : { } , STR_ : { STR_ : STR_ } , STR_ : { STR_ : STR_ } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , } , LIGHT PALETTE : { STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ } , STR_ : { STR_ : STR_ } , STR_ : { STR_ : ( STR_ , ) } , STR_ : { STR_ : ( STR_ , ) } , STR_ : { } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , STR_ : { STR_ : STR_ , STR_ : ( STR_ , ) } , } }","PALETTES is a dictionary containing 3 elements , a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE ,"
return val,return val .
"left = t . led ( left , self )",call the method t.led with 2 arguments left and self .
"if hasattr ( self , STR_ ) :","if self has an attribute 'error_dict ' ,"
if not url info . netloc and url info . scheme :,"if url_info.netloc is false and url_info.scheme is true ,"
self .  headers = { },self._headers is an empty dictionary .
seek = property ( lambda self : self . file . seek ),"define lambda function that returns self.file.seek field , use it as an argument for property function , put the result in seek ."
widget value = None,widget_value is None .
out = self . compress ( clean data ),"call the method self.compress with an argument clean_data , substitute the result for out ."
def create nodelist ( self ) :,define the method create_nodelist with an argument self .
if not answer :,"if answer is false ,"
return NUM_,return integer 1 .
" entity re = re . compile ( r "" STR_ "" )","call the method re.compile with an argument raw string `` & ( # ? [ xX ] ? ( ? : [ 0-9a-fA-F ] +|\w { 1,8 } ) ) ; '' , substitute the result for _entity_re ."
if os . path . exists ( self . file path ) and not os . path . is dir ( self . file path ) :,"if self.file_path file path exists and it is not a directory ,"
"from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile",from django.core.files.uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space .
"path , module = name . rsplit ( STR_ , NUM_ )","split string name into two parts from the right side by the separator ' . ' , substitute parts for path and module , respectively ."
age = time . time ( ) - timestamp,"subtract timestamp from the return value of the function time.time , substitute the result for age ."
callable = callable,substitute callable for callable .
return item in list ( self ),"if item is contained in the list of the elements of self , return boolean True , otherwise return boolean False ."
"if self . field . required and hasattr ( self . form , STR_ ) :","if self.field.required is true and self.form has an attribute 'required_css_class ' ,"
"if is in stance ( path , six . string types ) :","if path is an instance of six.string_types ,"
if self . is  bound :,"with an argument i , for 'prefix ' and self.error_class for 'error_class ' . if self.is_bound is true ,"
elif len ( key ) == NUM_  and type ( key [ NUM_ ] ) in fasttypes :,"otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes ,"
"in itial value = self . in itial . get ( name , field . in itial )","get the value under the name key of the self.initial dictionary , if it exists substitute it for initial_value ,"
"if options [ "" STR_ "" ] :","unpacked dictionary daemon_kwargs . if value under the 'pidfile ' of options dictionary exists ,"
"  all   = ( STR_ , )",__all__ is an tuple containing string 'SelectDateWidget ' .
"def tag ( self , name = None , compile function = None ) :","define the method tag with 3 arguments : self , name set to None and compile_function set to None ."
def   nonzero   ( self ) :,define the method __nonzero__ with an argument self .
"capfirst = allow lazy ( capfirst , six . text type )","convert the first element of the result to uppercase , append to it the rest of the result , substitute it for capfirst . call the function allow_lazy with 3 arguments : capfirst and six.text_type ."
"if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :","if type of result is ConvertingDict , ConvertingList or ConvertingTuple ,"
kwargs = { },"kwargs is an empty dictionary ,"
cwords = os . environ [ STR_ ] . split ( ) [ NUM_ : ],"slit by whitespace the value under the 'COMP_WORDS ' key of the os.environ dictionary , substitute the result without the first element for cwords ."
if value :,"if value ,"
"from django . db import router , DEFAULT DB ALIAS",from django.db import router and DEFAULT_DB_ALIAS into default name space .
from django . core import urlresolvers,from django.core import urlresolvers into default name space .
"final attrs = dict ( self . attrs , type = self . in put type , name = self . name , value = self . choice value )","call the method dict with 4 : self.attrs , type as self.input_type , name as self.name , value as self.choice_value ,"
"for key , op in OPERATORS . items ( ) :","and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) or y.eval ( context ) is True , for 'or ' , result of the function inflix called with 2 arguments , integer 7 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) and y.eval ( context ) is True for 'and ' , result of the function prefix called with 2 arguments , integer 8 , and lambda function with 2 arguments context and x , returns boolean True if x.eval ( context ) is True for 'not ' , result of the function inflix called with 2 arguments , integer 9 , and lambda function with 2 arguments context and x , returns boolean True if x.eval ( context ) is contained in y.eval ( context ) for 'in ' , result of the function inflix called with 2 arguments , integer 9 , and lambda function with 2 arguments context and x , returns boolean True if x.eval ( context ) is not contained in y.eval ( context ) , for 'not in ' , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) equals y.eval ( context ) for '= ' , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) equals y.eval ( context ) for '== ' , result of the function inflix called with 2 arguments , integer 10 , and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) doesnt equals y.eval ( context ) for ' ! = ' , result of the function inflix called with 2 arguments , integer 10 and , lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) is greater than y.eval ( context ) for ' > ' , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) is greater than or equal to y.eval ( context ) for ' > = ' , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) is smaller than y.eval ( context ) for ' < ' , result of the function inflix called with 2 arguments , integer 10 and and lambda function with 3 arguments context , x and y , returns boolean True if x.eval ( context ) is smaller than or equal to y.eval ( context ) for ' < = ' , call the function OPERATORS.items , for every key and op in result ,"
self . ignore patterns = list ( set ( ignore patterns ) ),"put elements of ignore_patterns into a set , substitute the length of it for self.ignore_patterns ."
if autoescape :,"if autoescape is true ,"
"for is o input in ISO INPUT FORMATS . get ( format type , ( ) ) :","get the value under the if iso_input not in val key of the ISO_INPUT_FORMATS dictionary , if it doesnt exists return an empty tuple ,"
for file in options [ STR_ ] :,for every file in value under the 'files ' key of the options dictionary .
full path = self . path ( name ),"call the method self.path with argument name , substitute the result for full_path ."
if not in cremental :,"if incremental is true ,"
"is  a tty = hasattr ( sys . stdout , STR_ ) and sys . stdout . is atty ( )","or string 'ANICON ' is in os.environ , substitute the evaluated boolean for supported_platform . if sys.stdout has an attribute named 'isatty ' and call to the sys.stdout.isatty returns boolean True , substitute True for is_a_tty ."
if self . deactivate :,"if self.deactivate is true ,"
if only django :,"if only_django ,"
"handler . addQuickElement ( "" STR_ "" , "" "" , { "" STR_ "" : "" STR_ "" , "" STR_ "" : self . feed [ STR_ ] } )","call the method handler.addQuickElement with 3 arguments : string 'link ' , an empty string and a dictionary with 2 entries :"
new = STR_ + or ig file,"append orig_file to string ' # : ' , substitute it for new ."
if maxsize == NUM_ :,"if maxsize equals integer 0 ,"
"if is in stance ( widget , NumberInput ) and STR_ not in widget . attrs :","if widget is an instance of the NumberInput class , and string 'step ' is not contained in widget.attrs ,"
self . html name = form . add prefix ( name ),"call the method form.add_prefix with an argument self , substitute the result for self.html_name ."
if all issues :,"if all_issues is true ,"
if process all :,"if process_all is true ,"
"def set ( self , key , value , timeout = DEFAULT TIMEOUT , version = None ) :","define the method set with 5 arguments , self class instance , key , value , timeout set to DEFAULT_TIMEOUT and version set to None ."
self .  archive . close ( ),call the method self._archive.close .
if settings . DEBUG and request . META . get ( STR_ ) in settings . INTERNAL IPS :,"if settings.DEBUG is true and value of the request.META dictionary under the 'REMOTE_ADDR ' key is contained in settings.INTERNAL_IPS ,"
"def setlistdefault ( self , key , default list = None ) :","define the method setlistdefault with 3 arguments : self , key and default_list set to None ."
"return IncludeNode ( parser . compile filter ( bits [ NUM_ ] ) , extra context = namemap , is olated context = is olated context )","return an instance of IncludeNode class , created with 3 arguments : return value of the method parser.compile_filter ,"
base36 = [ ],base36 is an empty list .
if reverse :,"iter_format_modules called with 2 arguments : lang and settings.FORMAT_MODULE_PATH , substitute the result for modules . if reverse is true ,"
as bytes = as string,substitute as_string for as_bytes .
is  required = False,is_required is boolean False .
self .  load post and files ( ),call the self._load_post_and_files method .
return . join ( words ),"join elements of words into a string , return it ."
loop dict = context [ STR_ ] = { STR_ : parentloop },loop_dict and value under the 'forloop ' key of the context dictionary are dictionaries with an entry : parentloop for 'parentloop ' .
"in it path = os . path . join ( migrations directory , "" STR_ "" )","join migrations_directory and string `` __init__.py '' into a file path , substitute it for init_path ."
"neg , value = self . convert ( i , self . decimal digits , self . digits , - )","call the self.convert method with i , self.decimal_digits , self.digits and '- ' as arguments , assign the result to the neg and value , respectively ."
if name not in logging .  handlers :,"if name is not contained in logging._handlers ,"
self .  view middleware . append ( mw instance . process view ),append mw_instance.process_view at the end of self._view_middleware .
"def id for label ( self , id  ) :",return the result . define the method id_for_label with 2 arguments : self and id_ .
widget = ClearableFileInput,substitute ClearableFileInput for widget .
"def setlist ( self , key , list  ) :","define the method setlist with 3 arguments : self , key and list_ ."
"super ( Select , self ) .   init   ( attrs )","call the method __init__ from the base class of the class Select , with an argument attrs ."
"elif message context [ NUM_ ] == "" STR_ "" :","otherwise if , first element of message_context is equal to `` ' '' ,"
"dict .   setitem   ( result , copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )","call the method dict.__setitem__ with 3 arguments : result , result of the function copy.deepcopy , called with 2 arguments : key ,"
"def   init   ( self , source ) :",define the method __init__ with 2 arguments : self and source .
if val == [ ] :,if val equals an empty list .
"setattr ( form . in stance , self . fk . get attname ( ) , self . in stance . pk )","use the result as an key to get the value of the form.data dictionary , assign it value None . use return value of the self.fk.get_attname as the name of the attribute of form.instance object to set , set it to self.instance.pk ."
if err log :,"if err_log is true ,"
with self .  lock . writer ( ) :,"call the self._lock.writer method , with the result perform the following ,"
"safe = force bytes ( safe , self . encoding )","call the function force_bytes with 2 arguments : safe and self.encoding , substitute it for safe ."
from django . core . management . sql import sql all,from django.core.management.sql import sql_all into default name space .
"options = params . get ( STR_ , { } )","call the params.get with string 'OPTIONS ' and empty dictionary as arguments , substitute the result for options ."
"self . extend nodelist ( nodelist , var node , token )","call the method self.extend_nodelist with 3 arguments : nodelist , var_node and token ."
label suffix = ( self . field . label suffix if self . field . label suffix is not None else self . form . label suffix ),"if self.field.label_suffix is not None , substitute self.field.label_suffix for label_suffix ,"
for field in self . fields . values ( ) :,"call the method self.fields.values , for every field in result ,"
"from django . utils . functional import curry , Promise",from django.utils.functional import curry and Promise into default name space .
"if self . use natural foreign keys and hasattr ( field . rel . to , STR_ ) :","if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key ' ,"
"def render ( self , context ) :",define the method render with 2 arguments self and context .
"options , args = parser . parse args ( argv [ NUM_ : ] )","call the method parser.parse_args with argv , without the first 2 elements , substitute the result for options and args ."
class AssignmentNode ( TagHelperNode ) :,derive the class AssignmentNode form the base class TagHelperNode .
while len ( line ) > max width :,"while length of line is grater than max_width ,"
"text = STR_ % ( text or , RESET )","if text is true format with it and RESET a string ' % s\x1b [ % sm ' , if not format it with an empty string and RESET , substitute the result for text ."
request class = WSGIRequest,substitute WSGIRequest for request_class .
header = chunk [ : header end ],substitute first header_end elements of chunk list for header .
for medium in extend :,"for every medium in extend ,"
"def label from instance ( self , obj ) :",define the method label_from_instance with 2 arguments : self and obj .
import copy,import module copy .
"source , display name = loader ( name , dirs )","call the function loader with 2 arguments name and dirs , substitute the result for source and display_name , respectively ."
except NameError :,"if NameError exception is caught ,"
if not options [ STR_ ] :,"get the value under the 'no_startup ' key of the options dictionary , if it evaluates to false ,"
def   nonzero   ( self ) :,define the method __nonzero__ with argument self .
"is olated context = options . get ( STR_ , False )","get the value under the key 'only ' of the options dictionary , if it exists substitute the result for isolated_context ,"
"self .  cache . delete multi ( map ( l , keys ) )",call the method self_cache.delete_multi with argument list containing keys mapped through function l .
except ( OSError ) :,"if OSError exception was raised ,"
def is  valid ipv6 address ( ip str ) :,define the function is_valid_ipv6_address with an argument ip_str .
output transaction = False,output_transaction is boolean False .
"if hasattr ( response , STR_ ) and callable ( response . render ) :","with the name of the module callback is in and the view_name , respectively , use it as the argument for the ValueError exception raise . if response has an attribute named 'render ' and response.render is a callable function ,"
arg = in t ( arg ),convert arg to an integer .
"def pop ( self , key , * args ) :","define the method pop with 3 arguments : self , key and unpacked list args ."
class Field ( object ) :,"'EmailField ' , 'FileField ' , 'ImageField ' , 'URLField ' , 'BooleanField ' , 'NullBooleanField ' , 'ChoiceField ' , 'MultipleChoiceField ' , 'ComboField ' , 'MultiValueField ' , 'FloatField ' , 'DecimalField ' , 'SplitDateTimeField ' , 'IPAddressField ' , 'GenericIPAddressField ' , 'FilePathField ' , 'SlugField ' , 'TypedChoiceField ' , 'TypedMultipleChoiceField ' . derive the class Field from the base class object ."
StringIO = BytesIO = StringIO . StringIO,assign StringIO.StringIO to StringIO and BytesIO .
"return { "" STR_ "" : self . ns , "" STR_ "" : self . feed [ STR_ ] }","return a dictionary with 2 entries : value under the 'language ' key of the self.feed dictionary for `` xml : lang '' ,"
if var . startswith ( STR_ ) and var . endswith ( STR_ ) :,"if var starts with ' _ ( ' and var ends with ' ) ' ,"
self . active writers = NUM_,self.active_writers is an integer 0 .
s = s . decode ( STR_ ),"call the method s.decode with an argument string 'utf-8 ' , substitute the result for s ."
"def   exit   ( self , exc type , exc value , traceback ) :","define the method __exit__ with arguments : self , exc_type , exc_value and traceback ."
"def   init   ( self , query string = None , mutable = False , encoding = None ) :","define the method __init__ with 4 arguments : self , query_string is None , mutable is boolean False and encoding set to None ."
i += NUM_,increment i by integer 1 .
"token = Token ( TOKEN COMMENT , content )","substitute the result for content . token is an instance of Token class , created with 2 arguments : TOKEN_COMMENT and content ."
from django . core . exceptions import SuspiciousFileOperation,from django.core.exceptions import SuspiciousFileOperation into default name space .
"args = [ STR_ ] + self . msgattrib options + [ STR_ , pofile , pofile ]","append self.msgattrib_options to a list containing string 'msgattrib ' , append to it a list containing string '-o ' , pofile and pofile ,"
def url patterns ( self ) :,define the method url_patterns with an argument self .
decimal separator = get format ( STR_ ),"call the function get_format with an argument string 'DECIMAL_SEPARATOR ' , substitute the result for decimal_separator ."
"from django . db . models import AutoField , OneToOneField , ForeignKey","from django.db.models import AutoField , OneToOneField and ForeignKey ."
"from django . utils . encoding import force str , force text , DEFAULT LOCALE ENCODING","from django.utils.encoding import force_str , force_text and DEFAULT_LOCALE_ENCODING into default name space ."
if self . fk . rel . field name ! = self . fk . rel . to .  meta . pk . name :,"if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name for 'label ' . if self.fk.rel.field_name is not equal to self.fk.rel.to._meta.pk.name ,"
def  get height ( self ) :,define method _get_height with self class instance as the argument .
obj = mark safe ( new obj ),"call the function mark_safe with an argument new_obj , substitute the result for obj ."
"if not is in stance ( in itial , list ) :","if initial is not an instance of the list type ,"
value = value [ NUM_ : - NUM_ ],strip value of the first and last element .
if not config string :,"if config_string is false ,"
"  all   = ( STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ )","__all__ a tuple containing strings : 'Field ' , 'CharField ' , 'IntegerField ' , 'DateField ' , 'TimeField ' , 'DateTimeField ' , 'RegexField ' ,"
wrapper . cache clear = cache clear,substitute cache_clear for wrapper.cache_clear .
for name in loggers :,"for every name in loggers ,"
output = options . get ( STR_ ),"get the value under the 'output ' key of the options dictionary , substitute the result for output ."
"tag , this value expr , max value expr , max width = bits","assign the bits elements to tag , this_value_expr , max_value_expr and max_width , respectively ."
self . seek ( NUM_ ),call the self.seek method with argument integer 0 .
"def id for label ( self , id  ) :",define the method id_for_label with arguments self and id .
i += NUM_,increment i by one .
elif item type == FILE :,"data , encoding and errors as a string 'replace ' . otherwise if item_type equals FILE ,"
return attrs,return attrs .
return STR_,return string 'th ' .
"return ( format html join ( , STR_ , sorted ( attrs . items ( ) ) ) + format html join ( , STR_ , sorted ( boolean attrs ) ) )","call the function format_html_join twice , first time with 3 elements : an empty string , string ' { 0 } = '' { 1 } '' '"
"raise ImproperlyConfigured ( STR_ % ( regex , six . text type ( e ) ) )","raise an ImproperlyConfigured exception with argument string ' '' % s '' is not a valid regular expression : % s ' ,"
"locale dirs = filter ( os . path . is dir , glob . glob ( STR_ % self . default locale path ) )","call the function glob.glob with an argument : string '/* ' appended to self.default_locale_path converted into a string ,"
gettext .  translations = { },gettext._translations is an empty dictionary .
raise KeyError ( key ),rise an KeyError exception with an argument key .
"except ( OSError , NotImplementedError , AttributeError ) :","if OSError , NotImplementedError or AttributeError exceptions are caught ,"
 mutable = True,_mutable is boolean True .
def W ( self ) :,define the method W with an argument self .
self . queryset = queryset,"prefix set to None , queryset set to None and unpacked dictionary kwargs . substitute queryset for self.queryset ."
if len ( bits ) < NUM_  or bits [ - NUM_ ] ! = as :,"if length of bits is smaller than integer 2 or second last element of bits is not equal to 'as ' ,"
for app config in app configs :,"`` apps registry is ready . Check that you do n't make non-lazy gettext calls at import time. '' . for every app_config in app_configs ,"
form = self . forms [ i ],substitute i-th element of self.forms for form .
if self . show traceback :,"with all occurrences of ' % s ' replaced with app_name and model._meta.object_name and e , respectively . if self.show_traceback is true ,"
else :,"convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments . if not ,"
if settings . is  overridden ( STR_ ) :,"call the function settings.is_overridden with argument string 'ADMINS ' , if it evaluates to boolean True ,"
return i,return i .
"default error messages = { STR_ :   ( STR_ ) , }","default_error_messages is an dictionary with an entry : return value of the function _ called with an argument ,"
mail . send ( fail silently = fail silently ),call the mail.send method with fail_silently set to fail_silently as argument .
"with open ( options [ "" STR_ "" ] , "" STR_ "" ) as fp :","open the file whose name is stored in the value under the 'pidfile ' key of options dictionary and mode ' w ' , with the file descriptor as fp ,"
transfer encoding = meta data . get ( STR_ ),"get the value under the 'content-transfer-encoding ' key of the disposition meta_data , substitute it for transfer_encoding ."
"if current version >= ( NUM_ , NUM_ ) :","if tuple current_version elements are greater or equal to ( 3 , 4 ) , respectively ,"
next = advance iterator,substitute klass.__dict__ for next .
if as form :,"if as_form is true ,"
exp = datetime . fromtimestamp ( timeout ),"call the function datetime.fromtimestamp with argument timeout , substitute it for exp ."
if not self . addr :,"if self.addr is false ,"
"table2model = lambda table name : re . sub ( r STR_ , , table name . title ( ) )","table2model is a lambda function with an argument table_name , return value is the return value of the re.sub method ,"
arg vals = [ ],"arg_vals is an empty list ,"
"def   init   ( self , tokens ) :",define the method __init__ with 2 arguments : self and tokens .
"raise CommandError ( "" STR_ "" % ( fixture name , humanize ( fixture dir ) ) )","raise an CommandError exception with an argument string `` Multiple fixtures named ' % s ' in % s . Aborting . `` , where ' % s ' is replaced with :"
"def emit ( self , record ) :",define the method emit with 2 arguments : self and record .
values = [ parser . compile filter ( bit ) for bit in bits [ NUM_ : ] ],"for every bit in elements of bits without the first element , call the method parser.compile_filter , with an argument bit ,"
"for dirpath , dirnames , filenames in os . walk ( ldir ) :","for dirpath , dirnames and filenames , respectively , in directory tree tuple starting from the ldir ,"
except InvalidTemplateLibrary as e :,"if InvalidTemplateLibrary , renamed to e , exception is caught ,"
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` 'templatetag ' statement takes one argument '' .
"models . signals . post migrate . send ( sender = app config , app config = app config , verbosity = verbosity , in teractive = in teractive , using = db )","call the method models.signals.post_migrate.send with 5 arguments : sender set to app_config , app_config set to app_config ,"
"kwargs = dict ( ( k , config [ k ] ) for k in config if valid ident ( k ) )","kwargs is a dictionary with elements : config dictionary element under k key for k , for every k in result of function valid_ident ,"
connection params [ STR_ ] = self . timeout,set value under the 'timeout ' key of the connection_params to self.timeout .
self . prefix = prefix,substitute prefix for self.prefix .
return list ( self . itervalues ( ) ),"call the method self.itervalues , return list of results ."
except Exception :,"if COOKIES_override is not None , or otherwise generated with the call to the function pformat with an argument request.COOKIES . if Exception exception is caught ,"
" meth self = "" STR_ """,_meth_self is a string `` __self__ '' .
"def add ( self , data , conn type , squash = True ) :","define the method add with 4 arguments : self , data , conn_type and squash set to boolean True ."
"if sys . version info [ : NUM_ ] == ( NUM_ , NUM_ ) :","if fist and second element of sys.version_info equals to integer 3 and 2 , respectively ,"
return context extras,return context_extras .
"def add initial prefix ( self , field name ) :",define the method add_initial_prefix with 2 arguments : self and field_name .
"tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = STR_ )","call the method tempfile.mkdtemp with 2 arguments : prefix set to prefix , suffix set to string '_extract ' , substitute the result for tempdir ."
"tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = STR_ )",call the function tempfile.mkdtemp with arguments : prefix set to prefix and suffix set to string '_download ' .
"if block content [ : NUM_ ] in ( STR_ , STR_ ) :","if first nine elements of block_content is string 'verbatim ' or 'verbatim ' ,"
model fields = Model .  meta . get all field names ( ),"call the method Model._meta.get_all_field_names , substitute the result for model_fields ."
args = list ( args ),"convert args into a list , substitute it for args ."
except OSError :,"if OSError exception is caught ,"
"template = get template from string ( source , or igin , template name )","call the function get_template_from_string with 3 arguments : source , origin and template_name , substitute the result for template ."
return self . is  bound and not self . errors,"if self.is_bound is true and self.errors is false , return boolean True , otherwise return boolean False ."
for path in format module path :,"for every path in format_module_path ,"
"def divisibleby ( value , arg ) :",define the function divisibleby with 2 arguments value and arg .
self . use ipv6 = options . get ( STR_ ),substitute value under the 'use_ipv6 ' key of the options dictionary for self.use_ipv6 .
return self . client address [ NUM_ ],return the first element of self.client_address .
"response = self . apply response fixes ( request , response )","with the name of the type of the self class instance of the middleware_method , raise the ValueError with the previous as the argument . call the method self.apply_response_fixes with the request and response as the arguments , substitute the result for response ."
"def get ( self , key , default = None , version = None ) :","define the method get with 5 arguments , self class instance , key , default set to None and version set to None ."
raise value,raise an exception value .
"def   setitem   ( self , header , value ) :","define the method __setitem__ with 3 arguments : self , header and value ."
"def module has submodule ( package , module name ) :",define the function module_has_submodule with 2 arguments : package and module_name .
"def handle ( self , * args , ** options ) :","default set to False , help containing string 'Show a list of all known migrations and which are applied ' as arguments . define the method handle with self instance of a class , list args , dictionary options as arguments ."
oldroot [ RESULT ] = result,substitute result for value under the RESULT key of the oldroot dictionary .
from io import BytesIO,from io import BytesIO into default name space .
return escape ( output ),call the function escape with an argument output .
"namespaces [ pattern . namespace ] = ( p pattern , pattern )",substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace key of the namespaces dictionary .
"value = list . pop ( self , idx )",remove idx-th element from self list .
if param :,"if param is true ,"
if self . verbosity > NUM_ :,"if self.verbosity is greater than integer 1 ,"
self . compile messages ( locations ),"call the self.compile_messages with locations as argument ,"
"def sql flush ( style , connection , only django = False , reset sequences = True , allow cascade = False ) :","define the function sql_flush with 4 arguments : style , connection , only_django set to boolean False ,"
c = SimpleCookie ( ),c is an instance of the class SimpleCookie .
raise CommandError ( STR_ ),raise an CommandError exception with an argument string 'You must set settings.ALLOWED_HOSTS if DEBUG is False . ' .
"class types = ( type , types . ClassType )",class_types is a tuple with 2 elements : type and types.ClassType .
"return getattr ( trans , real name )","get attribute real_name from the trans object , return it ."
if in cremental :,"if incremental is true ,"
"if hasattr ( self , STR_ ) and self .  regex validator in self . validators :","if self has an '_regex_validator ' attribute and self._regex_validator is contained in self.validators ,"
"raise CommandError ( "" STR_ "" % name )","raise an CommandError exception with an argument string `` Unknown command : % r '' , with ' % r ' replaced by name ."
"sys . stderr . write ( "" STR_ "" % e )","call the method sys.stderr.write with an argument string `` ERROR : % s\n '' , where ' % s ' is replaced by e ."
if name in lib . tags :,"if name is contained in lib.tags ,"
"return NUM_ , ch2",return integer 1 and ch2 .
if field not in self . errors :,"if field is not contained in self.errors ,"
is  dst = False if dt is None else self .  isdst ( dt ),"if dt is None , is_dst is boolean False , otherwise call the method _isdst with an argument dt , substitute the result for is_dst ."
"handler . endElement ( "" STR_ "" )",call the method handler.endElement with an argument string 'author ' .
"except ( ValueError , TypeError ) :","if ValueError or TypeError exceptions occurred ,"
"def debug ( parser , token ) :",define the function debug with 2 arguments : parser and token .
tried modules . append ( taglib module ),append taglib_module to tried_modules .
obj .   class   = cls,substitute cls for obj.__class__ .
return NUM_,return integer 0 .
"obj = STR_ % ( app , model .  meta . object name )","convert app and model._meta.object_name to strings , join them with separating ' . ' character , substitute it for obj ."
def e ( self ) :,define the method e with an argument self .
zfile . write ( s ),and fileobj set to zbuf . call the method zfile.write with an argument s .
if not filename :,"if filename is empty ,"
"from django . utils . encoding import force text , iri to uri",from django.utils.encoding import force_text and iri_to_uri into default name space .
"template , or igin = self . find template ( template name , template dirs )","call the method self.find_template with 2 argumetns : template_name and template_dirs , assign the result to template , origin , respectively ."
"field output . append ( "" STR_ "" % ( "" STR_ "" if not f . null else "" "" ) )","and return value of the function f.db_type called with an argument connection set to connection . if f.null is false , append string append `` NOT NULL '' to field_output , otherwise append `` NULL '' to field_output ."
"def parse ( self , parse until = None ) :",define the emethod parse with 2 arguments : self and parse_until set to None .
self . content = self . rendered content,substitute self.rendered_content for self.content .
from logging import NullHandler,from logging import NullHandler .
current fields . sort ( key = lambda x : x [ NUM_ ] . creation counter ),sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x .
return [ ],return an empty list .
"parent = ( object , )","parent is a tuple with 1 element , object ."
"def prepend token ( self , token ) :",define the function prepend_token with 2 arguments : self and token .
return self . nodelist true . render ( context ),"call the method self.nodelist_true.render with an argument context , return the result ."
if self .  errors is None :,"if self._errors is None ,"
"return any ( "" STR_ "" in klass .   dict   for klass in type ( obj ) .   mro   )","if `` __call__ '' is contained in klass.__dict__ for any klass in __mro__ field of the obj class , return boolean True , otherwise return False ."
"parser . add argument ( STR_ , metavar = STR_ , nargs = + , help = STR_ )","call the method parser.add_argument with 4 arguments : string 'args ' , metavar set to string 'fixture ' , nargs set to '+ ' ,"
pos = NUM_,pos is equal to integer 0 .
"default error messages = { STR_ :   ( STR_ ) , }",default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string 'Enter a valid date/time . ' for 'invalid ' .
if not self . is  required :,"if self.is_required is false ,"
"def   init   ( self , attrs = None , date format = None , time format = None ) :","define the method render with 4 arguments : self , attrs set to None , date_format set to None and time_format set to None ."
"assert not ( cls .  delegate bytes and cls .  delegate text ) , "" STR_ ""","if cls._delegate_bytes and cls._delegate_text are both false , raise an error , with an argument string `` Can not call lazy ( ) with both bytes and text return types . `` ."
"self . feed = { STR_ : to unicode ( title ) , STR_ : iri to uri ( link ) , STR_ : to unicode ( description ) , STR_ : to unicode ( language ) , STR_ : to unicode ( author email ) , STR_ : to unicode ( author name ) , STR_ : iri to uri ( author link ) , STR_ : to unicode ( subtitle ) , STR_ : categories or ( ) , STR_ : iri to uri ( feed url ) , STR_ : to unicode ( feed copyright ) , STR_ : feed guid or link , STR_ : ttl , }","self.feed is an dictionary with 13 initial entries , result of the function to_unicode called with an argument title for 'title ' ,"
from django . template . loader import BaseLoader,from django.template.loader import BaseLoader into default name space .
len ( X ( ) ),"instantiate class X , get its length ."
"output . append ( "" STR_ "" % ( key , user settings [ key ] ) )","replace ' % s ' in string `` # # # % s = % s '' with key and value under the key key of the user_setting dictionary , append it to the output ."
endpos = self . check for whole start tag ( i ),"call the method self.check_for_whole_start_tag with i as an argument , substitute result for the endpos ."
is  templatized = file ext in command . extensions,"if file_ext is contained in command.extensions , is_templatized is boolean True , otherwise it is boolean False ."
return list  [ - NUM_ ],return last element of list_ .
"def as json ( self , escape html = False ) :","for every f and e in list of tuples of self dictionary key , pair entries . define the method as_json with 2 argumens self and escape_html set to boolean False ."
"def run shell ( self , shell = None ) :",define the method run_shell with an arguments self and shell set to None .
class ContextDict ( dict ) :,derive the class ContextDict from the dict base class .
app configs = [ app config ],app_configs is a list containing app_config .
self . value = value,substitute value for self.value .
from django . db . migrations . optimizer import MigrationOptimizer,from django.db.migrations.optimizer import MigrationOptimizer into default name space .
nesting = NUM_,nesting is integer 1 .
from django . utils . safestring import mark safe,from django.utils.safestring import mark_safe into default name space .
"conditions nodelists . append ( ( None , nodelist ) )",append a tuple with 2 elements : None and nodelist to conditions_nodelists .
"def make view atomic ( self , view ) :","define the method make_view_atomic , with self class instance and view as the arguments ."
"return six . text type ( s ) . encode ( encoding , errors )","put the results in a list , join the list elements in a string separated by whitespace separator , return the string as the bytes string . evaluate the method six.text_type ( s ) , on the result call the method encode with the arguments encoding and errors , return the result ."
if exp is not None and exp < time . time ( ) :,"if exp is not None and exp is lesser than return value of the function time.time ,"
"url schemes = [ STR_ , STR_ , STR_ ]","url_schemes is list of strings 'http ' , 'https ' and 'ftp ' ."
"def   init   ( self , location = None , base url = None , file permissions mode = None , directory permissions mode = None ) :","define the method __init__ with 5 arguments : self , location set to None , base_url set to None , file_permissions_mode set to None ,"
"class SafeMIMEMessage ( MIMEMixin , MIMEMessage ) :",derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class .
time str = time str . decode ( STR_ ),"call the method time_str.decode with an argument string 'utf-8 ' , substitute the result for time_str ."
"sub ul renderer = ChoiceFieldRenderer ( name = self . name , value = self . value , attrs = attrs plus , choices = choice label )","sub_ul_renderer is an instance of ChoiceFieldRenderer class , created with 4 arguments : name as self.name , value as self.value ,"
"from django . db import connections , DEFAULT DB ALIAS , migrations","from django.db import connections , DEFAULT_DB_ALIAS and migrations into default name space ."
"return super ( LocalTimezone , self ) .  isdst ( dt )","call the method _isdst with an argument dt from the base class of the class LocalTimezone , return the result ."
return context,return context .
UserModel = get user model ( ),"call the function get_user_model , substitute the result for UserModel ."
return  trans . get language bidi ( ),"call the function _trans.get_language_bidi , return the result ."
if self .  delegate bytes :,"if self._delegate_bytes is true ,"
"return str ( STR_ ) % ( self .   class   .   name   , urlconf repr , self . app name , self . namespace , self . regex . pattern )","replace all ' % s ' in string ' < % s % s ( % s : % s ) % s > ' with self.__class__.__name__ , urlconf_repr , self.app_name ,"
"def become daemon ( our home dir = STR_ , out log = None , err log = None , umask = NUM_ o022 ) :","define the function become_daemon with 4 argument : our_home_dir set to ' . ' , out_log set to None , err_log set to None ,"
language code prefix re = re . compile ( r STR_ ),"substitute the result for language_code_re . call the function re.compile with an argument raw string '^/ ( [ \w- ] + ) ( /| $ ) ' , substitute the result for language_code_prefix_re ."
"def truncatewords ( value , arg ) :",define the function truncatewords with 2 arguments value and arg .
"def tzname ( self , dt ) :",define the method tzname with 2 arguments : self and dt .
return parent,return parent .
for sublist in second item :,"for every sublist in second_item ,"
class DebugLexer ( Lexer ) :,derive the class DebugLexer from the Lexer base class .
"if is in stance ( s , bytes ) or ( is in stance ( s , Promise ) and s .  delegate bytes ) :","if s is an instance of bytes or Promise and s._delegate_bytes is true ,"
except KeyError :,"if KeyError exception is caught ,"
for bit in smart split re . finditer ( text ) :,"call the method smart_split_re.finditer with an argument text , for every bit in result ,"
def  get image dimensions ( self ) :,define the method _get_image_dimensions with self class instance as the argument .
"return self . source error ( token . source , msg )","call the method self.source_error with 2 arguments : token.source and msg , return the result ."
warning = kwargs [ STR_ ],substitute value under 'warning ' key of kwargs dictionary for warning .
"f . save form data ( in stance , cleaned data [ f . name ] )",call the method f.save_form_data with 2 arguments : instance and value under the f.name key of cleaned_data dictionary .
"wsgi opts [ STR_ ] = ( options [ "" STR_ "" ] , in t ( options [ "" STR_ "" ] ) )","set the value under the 'bindAddress ' key of the wsgi_opts dictionary to a tuple containing 2 elements : value under the 'host ' key ,"
"assert is  iterable ( new errors ) , ( "" STR_ "" "" STR_ "" % check )","if new_errors is not an iterable object raise an error with error message `` The function % r did not return a list . All functions registered with the checks registry must return a list . `` , with ' % s ' replaced by value of check ."
if basetype == STR_ :,"if basetype equals a string 'text ' ,"
else :,"It looks like this project was generated using Django 1.5 or earlier . You should ensure your tests are all running & behaving as expected . See https : //docs.djangoproject.com/en/dev/releases/1.6/ # new-test-runner for more information . `` , obj set to None and id set to a string '1_6.W001 ' , put the result into a list and return it . if not ,"
"def writeString ( self , encoding ) :",define the method writeString with 2 arguments self and encoding .
def clear ( self ) :,define the method clear with argument self .
def as table ( self ) :,define the method as_table with an argument self .
"connection = connection or get connection ( username = auth user , password = auth password , fail silently = fail silently )","if connection exists dont change it , if not call the get_connection function with username set to auth_user ,"
self . waiting readers = NUM_,self.waiting_readers is an integer 0 .
def activate ( language ) :,define the function activate with an argument language .
import pyinotify,import pyinotify module .
"DEFAULT LOGGING = { STR_ : NUM_ , STR_ : False , STR_ : { STR_ : { STR_ : STR_ , } , STR_ : { STR_ : STR_ , } , } , STR_ : { STR_ : { STR_ : STR_ , STR_ : [ STR_ ] , class : STR_ , } , STR_ : { class : STR_ , } , STR_ : { STR_ : STR_ , STR_ : [ STR_ ] , class : STR_ } } , STR_ : { STR_ : { STR_ : [ STR_ ] , } , STR_ : { STR_ : [ STR_ ] , STR_ : STR_ , STR_ : False , } , STR_ : { STR_ : [ STR_ ] , STR_ : STR_ , STR_ : False , } , STR_ : { STR_ : [ STR_ ] , } , } }","DEFAULT_LOGGING is a dictionary with 5 initial entries : 1 for 'version ' , False for 'disable_existing_loggers ' ,"
return obj pk,return obj_pk .
supported = True,supported is boolean True .
import os,import module os .
yield STR_ % field desc,"yield string ' % s ' , where ' % s ' is replaced with field_desc ."
class NullDevice :,derive the class NullDevice .
stream or string = stream or string . decode ( STR_ ),"call the method stream_or_string.decode with string 'utf-8 ' as argument , substitute the result for stream_or_string ."
"raise ImportError ( "" STR_ "" )",raise an ImportError exception with an argument string `` No IPython '' .
"if six . PY2 and is in stance ( rawdata , six . text type ) :",if six.PY2 is true and rawdata is an instance of the type six.text_type .
class TemplateIfParser ( IfParser ) :,derive the class TemplateIfParser from IfParser base class .
"old handler = signal . signal ( signal . SIGTTOU , signal . SIG IGN )","call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments , store the result in old_handler ."
formatter = self . config [ STR_ ] [ formatter ],"get the value under formatter key of dictionary under 'formatters ' key of self.config dictionary , substitute the result for formatter ."
"from lib2to3 . pytree import Leaf , Node",from lib2to3.pytree import Leaf and Node into default name space .
settings .  setup ( ),call the method settings._setup .
self .  callback strs = set ( ),self._callback_strs is an empty set .
"def getlist ( self , key , default = None ) :","define the method getlist with 3 arguments : self , key and default set to None ."
return msg,return msg .
"def handle app config ( self , app config , ** options ) :","and help as a string 'Nominates a database to print the SQL for . Defaults to the `` default '' database . ' , as arguments . define the method handle_app_config with self class instance , app_config and dictionary options as arguments ."
if t . token type == TOKEN BLOCK :,"if t.token_type equals TOKEN_BLOCK ,"
delta = expires - expires . utcnow ( ),"call the method expires.utcnow , subtract the result from expires , substitute the result for delta ."
"sys . stdout = open ( out log , STR_ , buffering )","open out_log file in append mode with buffering size of the input buffer , substitute the result for sys.stdout ."
if old style list :,"if old_style_list is true ,"
return base64 . urlsafe b64encode ( s ) . rstrip ( b STR_ ),"call the method base64.urlsafe_b64encode with an argument s , strip the result of the bytes string '\n= ' from the right , return it ."
"regex = property (  get regex ,  set regex )","regex is an property object of this class , with _get_regex getter and _set_regex setter function ."
"def configure handler ( self , config ) :",define the method configure_handler with 2 arguments : self and config .
if new mod is None :,"if new_mod is None ,"
tried modules = [ ],tried_modules is an empty list .
out . write ( STR_ % g ),"format string ' gettext ( % r ) ' with g , write it to out ."
module values = set ( sys . modules . values ( ) ),module_values is a set created from the elements of sys.modules.values method return value .
finally :,"finally , perform ,"
"def extract ( self , to path ) :",define the method extract with 2 arguments self and to_path .
return form,return form .
"self . day none value = ( NUM_ , empty label [ NUM_ ] )",self.day_none_value is a tuple containing 2 elements : integer 0 and third element of empty_label .
"elif message context [ NUM_ ] == "" STR_ "" :","otherwise if first element of message_context equals to character `` ' '' ,"
"self . stdout . write ( self . style . MIGRATE SUCCESS ( "" STR_ "" ) )",wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string `` OK '' as a argument .
"delattr (  MovedItems , name )",delete name attribute of the _MovedItems object .
"def find template ( name , dirs = None ) :",define the function find_template with 2 : template_name and dirs set to None .
return tt . tm isdst > NUM_,"if tt.tm_isdst is greater than intger 0 , return boolean True , otherwise return boolean False ."
raise PageNotAnInteger ( STR_ ),raise an exception PageNotAnInteger with string 'That page number is not an integer ' as an argument .
filter func .  filter name = name,substitute name for filter_func._filter_name .
"handler . addQuickElement ( "" STR_ "" , item [ "" STR_ "" ] )",call the method handler.addQuickElement with 2 arguments : string 'author ' and value under the 'author_email ' key of the item dictionary .
biggest number = NUM_,biggest_number is integer 1 .
"stats [ : ] = [ NUM_ , NUM_ ]",stats is a list with 2 elements : 2 integers 0 .
"def   eq   ( self , other ) :",define private method __eq__ with self class instance and other as arguments .
"ret = UnlockFileEx ( hfile , NUM_ , NUM_ , NUM_ xFFFF0000 , byref ( overlapped ) )","call the LockFileEx function with 5 arguments : hfile , integer 0 , integer 0 , hexadecimal value FFFF0000 , return value of the byref function called with argument overlapped , substitute the result for ret ."
class AdminEmailHandler ( logging . Handler ) :,derive the class AdminEmailHandler from logging.Handler base class .
"from django . utils . encoding import force str , force text",from django.utils.encoding import force_str and force_text into default name space .
return,return an empty string .
def  iteritems ( self ) :,define the method _iteritems with an argument self .
rest = rest [ m . end ( ) : ],"call the method m.end , slice list rest from previous result as starting index to the end , substitute the result for rest ."
compile func .   doc   = func .   doc  ,"name set to function_name , and takes_context set to takes_context and node_class set to SimpleNode . substitute func.__doc__ for compile_func.__doc__ ."
def in t2byte ( i ) :,define the function int2byte with an argument i .
return   ( STR_ ),"call the function _ with an argument string ' p.m . ' , return the result ."
class Select ( Widget ) :,derive the class Select from the Widget base class .
"field list . append ( ( f . name , formfield ) )",append a tuple with 2 elements : f.name and formfield to field_list .
"handler = SimplerXMLGenerator ( outfile , encoding )","handler is an instance of SimplerXMLGenerator class , created with 2 arguments : outfile and encoding ."
"f = os . path . join ( root , f )","join root and f in path , substitute the result for f ."
"if getattr ( ev , STR_ , None ) is None :","if 'filename ' attribute of ev is None ,"
def z ( self ) :,define the method z with an argument self .
if ip str . count ( STR_ ) == NUM_ :,"if count of occurrence of ' : : ' in ip_str equals integer 1 ,"
if locales :,"if locales in not empty ,"
"from django . http . request import ( HttpRequest , QueryDict , RawPostDataException , UnreadablePostError , build request repr )","from django.http.request import HttpRequest , QueryDict , RawPostDataException , UnreadablePostError and build_request_repr into default name space ."
"if is in stance ( message , SafeData ) :","if message is an instance of SafeData ,"
media attrs = kwargs,substitute kwargs for media_attrs .
def   getinitargs   ( self ) :,define the method __getinitargs__ with an argument self .
self . options = options,substitute options for self.options .
self . loaddata ( fixture labels ),call the method self.loaddata with an argument fixture_labels .
help = STR_,help is an string 'Installs the named fixture ( s ) in the database . ' .
"file root , file ext = os . path . splitext ( file name )","call the os.path.splitext with argument file_name , assign the result to the file_root and file_ext respectively ."
logger = root . manager . loggerDict [ log ],"get the value under log key of root.manager.loggerDict dictionary , substitute it for logger ."
"filters . append ( ( filter func , args ) )",append a tuple with 2 arguments : filter_func and args to filters .
"if hasattr ( field . rel . to .  default manager , STR_ ) :","if field.rel.to._default_manager has an 'get_by_natural_key ' attribute ,"
"from django . forms . utils import flatatt , to current timezone",from django.forms.utils import flatatt and to_current_timezone into default name space .
"super ( EmailMultiAlternatives , self ) .   init   ( subject , body , from email , to , bcc , connection , attachments , headers , cc )","call the method __init__ from the base class of the EmailMultiAlternatives class , with 9 arguments : subject , body , from_email , to ,"
shell . mainloop ( ),call the method shell.mainloop .
seen data = set ( ),seen_data is an empty set .
if space == NUM_ :,"if space equals integer 0 ,"
"def start doctype decl ( self , name , sysid , pubid , has internal subset ) :","define the method start_doctype_decl with an arguments self , name , sysid , pubid and has_internal_subset ."
self . in teractive = options . get ( STR_ ),"get the value under the 'interactive ' key of the options dictionary , substitute it for self.interactive ."
from importlib . util import find spec as importlib find,from importlib.util import find_spec as importlib_find .
"def args check ( name , func , provided ) :","define the method args_check with 3 arguments : name , func and provided ."
from django . utils . six . moves import  thread as thread,from django.utils.six.moves import _thread as thread into default name space .
"value = dict . pop ( self , key , default )","remove value under key key of self dictionary , if it doesnt exists return default , substitute the result for value ."
"return SsiNode ( filepath , parsed )","return an instance of a SsiNode class , created with 2 arguments : filepath and parsed ."
"default = bytes to text ( default , self . encoding )","call the method bytes_to_text with 2 arguments : default and self.encoding , substitute the result for default ."
object data = { },object_data is an empty dictionary .
token = parser . next token ( ),"call the method parser.next_token , substitute the result for token ."
FILE INPUT CONTRADICTION = object ( ),FILE_INPUT_CONTRADICTION is an instance of object class .
server port = str ( self . META [ STR_ ] ),"convert the value under the 'SERVER_NAME ' key of the self.META dictionary to a string , substitute result for server_port ."
from django . core import validators,from django.core import validators into default name space .
self . email backend = email backend,substitute email_backend for self.email_backend .
"def get block ( self , name ) :",define the method get_block with 2 arguments self and name .
return arg,return arg .
if t . token type == TOKEN BLOCK and t . contents == STR_ :,"if t.token_type equals TOKEN_BLOCK and t.contents equals 'endcomment ' ,"
"lookup str = callback .   module   + "" STR_ "" + callback .   class   .   name  ","join callback.__module__ , character `` . '' and callback.__class__.__name__ together , substitute the result for lookup_str ."
from django . utils import formats,from django.utils import formats into default name space .
elif f . unique :,"otherwise if f.unique is true ,"
"final attrs = self . build attrs ( attrs , type = self . in put type , name = name )","call the method self.build_attrs with 3 arguments : attrs , type as self.input_type , name as name , substitute the result for final_attrs ."
out . write ( STR_ % STR_ . join ( lineno comment map [ comment lineno cache ] ) ),"join lineno_comment_map dictionary value under the comment_lineno_cache key into a string , separated with ' | ' ,"
"def default key func ( key , key prefix , version ) :","define the function default_key_func with 3 arguments , key , key_prefix and version ."
"e . args = ( "" STR_ "" % e , )","e.args is a tuple , containing 1 element : string `` Problem installing fixtures : % s '' , where ' % s ' is replaced with e ."
"RAW = "" STR_ """,RAW is a string `` raw '' .
def is  checked ( self ) :,"and self.choice_label , return the result . define the method is_checked with an argument self ."
import hashlib,import module hashlib .
"def   init   ( self , states , first ) :","define the method __init__ with 3 arguments self , states and first ."
self . or igin = or igin,substitute origin for self.origin .
"return TemplateLiteral ( self . template parser . compile filter ( value ) , value )","return an instance of TemplateLiteral with 2 arguments : result of the function self.template_parser.compile_filter ,"
from django . utils . encoding import force str,from django.utils.encoding import force_str into default name space .
user settings = module to dict ( settings .  wrapped ),"call the function module_to_dict with an argument settings._wrapped , substitute it for user_settings ."
"with io . open ( potfile , STR_ , encoding = STR_ ) as fp :","call the function io.open with 3 arguments : potfile , string ' w ' and encoding set to string 'utf-8 ' as arguments ,"
"def lazy number ( func , resultclass , number = None , ** kwargs ) :","define the function lazy_number with 4 arguments : func , resultclass , number set to None and unpacked dictionary kwargs ."
if ( field == NON FIELD ERRORS and opts . error messages and NON FIELD ERRORS in opts . error messages ) :,"if field equals NON_FIELD_ERRORS and opts.error_messages is true and NON_FIELD_ERRORS is contained in opts.error_messages ,"
match = self . regex . search ( path ),"call the method self.regex.search with an argument path , substitute the result for match ."
"if is in stance ( data , ( MultiValueDict , MergeDict ) ) :","if data is an instance of MultiValueDict or MergeDict ,"
"urlquote plus = allow lazy ( urlquote plus , six . text type )","and result of the function force_str called with an argument safe , use the result as an argument for the call to the function force_text , return the result . call the function allow_lazy with 2 arguments : urlquote_plus and six.text_type , substitute the result for urlquote_plus ."
"os . makedirs ( self .  dir , NUM_ o700 )",call os.makedirs function with self._dir and hexadecimal 0o700 as arguments .
from argparse import ArgumentParser,from argparse import ArgumentParser into default name space .
"self . handle field ( obj , field )",call the method self.handle_field with arguments obj and filed .
"return lazy ( func , * resultclasses ) ( * args , ** kwargs )","call the function lazy with 2 arguments : func and unpacked list resultclasses , call the result with 2 arguments : unpacked list args ,"
def deactivate all ( ) :,define the function deactivate_all .
self .  add installed apps translations ( ),call the method self._add_installed_apps_translations .
if ch == < :,"if ch equals a string ' < ' ,"
"no settings commands = [ STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , ]","no_settings_commands is a list containing entries : 'help ' , 'version ' , ' -- help ' , ' -- version ' , '-h ' , 'compilemessages ' , 'makemessages ' ,"
potfiles = [ ],potfiles is an empty list .
config = self . config,substitute self.config for config .
self . empty label = empty label,substitute empty_label for self.empty_label .
def next token ( self ) :,define the method next_token with an argument self .
"def copystat ( src , dst ) :",define the function copystat with arguments src and dst .
DEFAULT TIMEOUT = object ( ),DEFAULT_TIMEOUT is a instance of the class object .
"parser . add argument ( STR_ , action = STR_ , dest = STR_ , default = False , help = STR_ )","dest is string 'use_natural_foreign_keys ' , default is boolean False and help is a string 'Use natural foreign keys if they are available. ' . call the method parser.add_argument with 5 arguments : string ' -- natural-primary ' , action set to 'store_true ' ,"
if app path is None :,"if app_path is None ,"
oldroot = root,substitute root for oldroot .
 prefixes . value = prefix,substitute prefix for _prefixes.values .
raise AttributeError,"raise AttributeError exception ,"
"app models = router . get migratable models ( app config , connection . alias , in clude auto created = True )","call the method router.get_migratable_models with argument : app_config , connection.alias and include_auto_created set to True , substitute the result for app_models ."
def length ( value ) :,define the function length with an argument value .
offset = self .   offset . seconds // NUM_,substitute self.__offset.seconds for offset .
if label suffix is None :,"if label_suffix is None ,"
"if is in stance ( stream or string , six . string types ) :",if stream_or_string is an instance of six.string_types type .
if can fail :,"if can fail is true ,"
return WEEKDAYS [ self . data . weekday ( ) ],"call the method self.data.weekday , use the result as an key for obtaining WEEKDAYS dictionary value , return it ."
"MEDIA TYPES = ( STR_ , STR_ )","'PasswordInput ' , 'HiddenInput ' , 'MultipleHiddenInput ' , 'ClearableFileInput ' , 'FileInput ' , 'DateInput ' , 'DateTimeInput ' , 'TimeInput ' , 'Textarea ' , 'CheckboxInput ' , 'Select ' , 'NullBooleanSelect ' , 'SelectMultiple ' , 'RadioSelect ' , 'CheckboxSelectMultiple ' , 'MultiWidget ' , 'SplitDateTimeWidget ' and 'SplitHiddenDateTimeWidget ' . MEDIA_TYPES is a tuple with 2 strings : 'css ' and 'js ' ."
self .  loaders = loaders,substitute loaders for self._loaders .
"def build absolute uri ( self , location = None ) :",define the method build_absolute_uri with an arguments self and location set to None .
"return ungettext ( singular , plural , number )","call the function ungettext with 3 arguments : singular , plural and number , return the result ."
"def   call   ( self , value ) :",define the method __call__ with arguments self and value .
"def   new   ( mcs , name , bases , attrs ) :","define the method __new__ with 4 arguments : mcs , name , bases and attrs ."
value = to current timezone ( value ),"call the function to_current_timezone with an argument value , substitute the result for value ."
def get key func ( key func ) :,define the function get_key_func with argument key_func .
for operation in migration . operations :,"write the result to self.stdout . for every operation in migration.operations ,"
"def migration progress callback ( self , action , migration , fake = False ) :","define the method migration_progress_callback with self class instance , action , migration and fake set to boolean False as arguments ."
"fd , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , dir = dir )","dir set to None as the arguments . call the method tmpfile.mkstemp with suffix set to suffix , prefix set to prefix and dir set to dir , store the result in the fd and name , respective ."
def as ul ( self ) :,"' < tr % ( html_class_attr ) s > < th > % ( label ) s < /th > < td > % ( errors ) s % ( field ) s % ( help_text ) s < /td > < /tr > ' , error_row set to a a string , ' < tr > < td colspan= '' 2 '' > % s < /td > < /tr > ' , row_ender set to a string ' < /td > < /tr > ' , help_text_html set to a string , ' < br / > < span class= '' helptext '' > % s < /span > ' and errors_on_separate_row set to boolean False . define the method as_ul with an argument self ."
"args = [ STR_ , STR_ , domain , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ] + command . xgettext options","append command.xgettext_options to the list containing 10 elements : string 'xgettext ' , string '-d ' , domain , string ' -- language=C ' ,"
cc = STR_ . join ( dictvalue ( el ) for el in cc . items ( ) ),"replace this value with v. call the function dictvalue with el as argument for every el in values of dictionary cc ,"
"path info = get bytes from wsgi ( environ , STR_ , )","call the get_bytes_from_wsgi function with environ , string 'PATH_INFO ' and empty strings as arguments , substitute the result for path_info ."
if len ( bits ) == NUM_ :,"if length of bits equals integer 4 ,"
d = d [ m . groups ( ) [ NUM_ ] ],"call the method m.groups , use the first element of the result as key for obtaining value from d dictionary ,"
class RadioChoiceInput ( ChoiceInput ) :,derive the class RadioChoiceInput from the ChoiceInput base class .
for f in files :,"for every f in files ,"
if app labels :,"if app_labels is true ,"
if len ( value ) >= NUM_  and value [ : NUM_ ] == value [ - NUM_ : ] == b STR_ :,"if length of value is greater or equal to integer 2 and first and last elements of value are an empty string ,"
"raise SuspiciousMultipartForm ( "" STR_ "" "" STR_ "" "" STR_ "" )","raise SuspiciousMultipartForm exception with an argument string , `` The multipart parser got stuck , which should n't happen with ''"
params = params [ NUM_ : ],substitute params without the first element for params .
self . cookies [ key ] [ STR_ ] = True,"get the value under the key key of the self.cookies dictionary , substitute boolean True for 'httponly ' key of the returned dictionary ."
"full file = os . path . join ( self . path , f )","join self.path and f in path , substitute the result for full_file ."
if option [ NUM_ ] :,"if second element of options is true ,"
return self . scheme == STR_,"if self.scheme equals to string 'https ' , return boolean True , otherwise return boolean False ."
"return [ ( , [ ] ) ]",return a list with an element tuple with 2 elements : an empty string and an empty list .
file pos = file . tell ( ),"get the position in bytes from the start of the file , store it in file_pos ."
if message :,"if message is true ,"
"nodelist true = parser . parse ( ( else , STR_ ) )","call the method parser.parse with an argument tuple with 2 elements strings : 'else ' and 'endfilter ' , substitute the result for nodelistelse ."
"class SafeBytes ( bytes , SafeData ) :",derive the class SafeBytes from bytes and SafeData base classes .
"def   init   ( self , name ) :",define the method __init__ with 2 arguments : self and name .
tag = re tag . match ( m . group ( NUM_ ) ),"call the method m.group with an argument integer 0 , use it as an argument for the call to the re_tag.match function ,"
return bytes ( self ) % rhs,"call the function bytes with an argument self , divide the result with rhs and return the reminder of the division ."
num = cursor . fetchone ( ) [ NUM_ ],"fetch one record from the database cursor points at , substitute the first element of return value for num ."
self .  regex validator = validators . RegexValidator ( regex = regex ),"call the method validators.RegexValidator with an argument regex set to regex , substitute it for self._regex_validator ."
if six . PY3 :,"if PY3 field of module six is boolean True ,"
if endbmatch :,"if endbmatch is true ,"
elif t . contents == STR_ :,"otherwise if t.contents equals a string 'comment ' ,"
@ upload handlers . setter,upload_handlers.setter decorator .
common ancestor = level [ NUM_ ],substitute first element of level for common_ancestor .
"id = "" STR_ """,id is a string `` literal '' .
if not os . path . exists ( filename ) :,"if filename path doesnt exists ,"
forms to delete = self . deleted forms,substitute self.deleted_forms for forms_to_delete .
use grouping = settings . USE L10N and settings . USE THOUSAND SEPARATOR,"if settings.USE_L10N is true , substitute settings.USE_THOUSAND_SEPARATOR for use_grouping ,"
from django . core . exceptions import ValidationError,from django.core.exceptions import ValidationError into default name space .
if data in seen data :,"substitute it for data . if data is contained in seen_data ,"
if not is  valid ipv6 address ( value ) :,"call the function is_valid_ipv6_address with an argument value , if it evaluates to false ,"
"def fix location header ( request , response ) :",define function fix_location_header with request and response as arguments .
self . position = NUM_,self.position is an integer 0 .
"def make template fragment key ( fragment name , vary on = None ) :",define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments .
"self . stderr . write ( "" STR_ "" "" STR_ "" % dirpath )","call the self.stderr.write , with string `` The po files under % s are in a seemingly not writable location . mo files will not be updated/created . '' as argument , with ' % s ' replaced by dirpath ."
"if subject [ i ] in ( STR_ , "" STR_ "" ) :","if i-th element of subject is ' '' ' character or `` ' '' character ,"
"self . xml . endElement ( "" STR_ "" )",call the method self.xml.startElement with an argument string 'natural ' .
"kw = dict ( ( k , in t ( v ) ) for k , v in six . iteritems ( match . groupdict ( ) ) )","call the method match.groupdict , use the result as an argument for the call to the function six.iteritems ,"
"raise CommandError ( "" STR_ "" % file path )","raise an CommandError with an argument string `` Unable to find a locale path to store translations for file % s '' ,"
return commands,return commands .
if handlers :,"if handlers is true ,"
def   iter   ( self ) :,define iterator method __iter__ with self as the argument .
@ register . filter ( is  safe = True ),decorator function register.filter with an argument is_safe set to boolean True .
"def   init   ( self , key to list mapping = ( ) ) :",define the method __init__ with 2 arguments : self and key_to_list_mapping set to an empty tuple .
"def   setitem   ( self , key , value ) :","define the method __setitem__ with 3 arguments : self , kay and value ."
format = options . get ( STR_ ),"get the value under the 'format ' key of the options dictionary , substitute the result for format ."
LOCK EX = LOCK SH = LOCK NB = NUM_,"LOCK_EX , LOCK_SH and LOCK_NB are all equal to integer 0 ."
error class = ValueError,substitute ValueError for error_class .
"return super ( Warning , self ) .   init   ( WARNING , * args , ** kwargs )","call the __init__ method with 3 arguments : WARNING , unpacked list args and unpacked dictionary kwargs from the base class of Warning ."
self . validators . append ( validators . MaxLengthValidator ( in t ( max length ) ) ),"call the method validators.MaxLengthValidator with max_length converted into an integer , append the result to list self.validators ."
if old attr is None :,"if old_attr is None ,"
return path info . decode ( UTF 8 ),return path_info.decode method return value called with UTF_8 as the argument .
"if hasattr ( middleware , STR_ ) :","if middleware has an attribute 'process_exception ' ,"
"def validate ( self , value ) :",define the method validate with arguments self and value .
prefix = self . add prefix ( fieldname ),"call the method self.add_prefix with an argument fieldname , substitute it for prefix ."
"for key , value in other dict . items ( ) :","for every key and value in items of other_dict dictionary ,"
mtime = stat . st mtime,substitute stat.st_mtime for mtime .
qs = qs . using ( form . in stance .  state . db ),"call the method qs.using with an argument form.instance._state.db , substitute the result for qs ."
def extract ( self ) :,define the method list with an argument self .
last row = output [ - NUM_ ],substitute last element of output for last_row .
"self . fetch command ( options . args [ NUM_ ] ) . print help ( self . prog name , options . args [ NUM_ ] )","call the method self.fetch_command with first element of options.args as argument , on the result call the method print_help ,"
"msg = STR_ % ( dotted path , class name )","msg is a string 'Module `` % s '' does not define a `` % s '' attribute/class ' formated with dotted_path and class_name , respectively ."
"def  get to python ( self , field ) :",define the method _get_to_python with 2 arguments : self and field .
"raw cookie = get str from wsgi ( self . environ , STR_ , )","call get_str_from_wsgi function with self.environ , string 'HTTP_COOKIE ' and empty string as arguments , substitute it for raw_cookie ."
formfield . queryset = formfield . queryset . complex filter ( limit choices to ),"call the method formfield.queryset.complex_filter with an argument limit_choices_to , substitute the result for formfield.queryset ."
return iter ( self . dict . keys ( ) ),"convert keys of dictionary self.dict into a iterable , return it ."
"url , trimmed = escape ( url ) , escape ( trimmed )","substitute the result for trail . call the function escape with an argument url , substitute the result for url , call the function escape with an argument trimmed ,"
if can fail :,"if can_fail is true ,"
"msg with ctxt = "" STR_ "" % ( context , CONTEXT SEPARATOR , message )","convert to strings and concatenate context , CONTEXT_SEPARATOR and message , substitute the result for msg_with_ctxt ."
if i > sys . maxint :,"if i is greater than sys.maxint ,"
if subcommand in no settings commands :,"if subcommand is contained in no_settings_commands ,"
palette . update ( PALETTES [ part ] ),"get the value under the part key of the PALETTES dictionary , update with it palette dictionary ."
"return "" STR_ "" % ( self . object .  meta . app label , self . object .  meta . object name , self . object . pk )","return a string `` < DeserializedObject : % s. % s ( pk= % s ) > '' , where ' % s ' are replaced with self.object._meta.app_label ,"
"def spaceless ( parser , token ) :",define the function spaceless with 2 arguments : parser and token .
  init   = type .   init  ,substitute type.__init__ for __init__ .
"migration . ancestry = loader . graph . forwards plan ( ( app label , migration name ) )","call the method loader.graph.forwards_plan with argument a tuple , with 2 elements : app_label and migration_name ,"
"s = s . replace ( STR_ , STR_ )",replace every occurrence of '\r ' in s with '\\r ' .
settings . BASE DIR,settings.BASE_DIR .
for name in handlers :,"for every name in handlers ,"
import dummy threading as threading,import dummy_threading as threading .
"output = localize ( output , use l10n = context . use l10n )","call the function localize with 2 arguments : output and use_l10n set to context.use_l10n , substitute the result for output ."
sublist item = title,substitute title for sublist_item .
if this bases is None :,"if this_bases is None ,"
"return source , display name",return source and display_name .
"fields = ( models . CharField ( name = STR_ , max length = NUM_ , unique = True , primary key = True ) , models . TextField ( name = STR_ ) , models . DateTimeField ( name = STR_ , db index = True ) , )",fields is an tuple containing 3 entries : return value of the method models.CharField called with 4 arguments :
in fos = [ e for e in all issues if checks . INFO <= e . level < checks . WARNING and not e . is  silenced ( ) ],"append e to infos list for every e in all_issues , if checks.INFO is lesser or equal to e.level ,"
"def add arguments ( self , parser ) :",define the method add_arguments with 2 arguments self and parser .
except AttributeError :,if AttributeError exception is caught .
for date check in all date checks :,"for every date_check in all_date_checks ,"
migration string = writer . as string ( ),"call the method writer.as_string , substitute the result for migration_string ."
"return getattr ( self ,  assertRaisesRegex ) ( * args , ** kwargs )","get _assertRaisesRegex attribute of the self object , call the result with 2 arguments : unpacked list args ,"
params . update ( kwargs ),call the function params.update with argument kwargs .
"ISO 8859 1 , UTF 8 = str ( STR_ ) , str ( STR_ )","ISO_8859_1 is a string 'iso-8859-1 ' , UTF_8 is a string 'utf-8 ' ."
"self . add error ( None , errors )",call the method self.add_error with 2 arguments : None and errors .
"lexer class , parser class = Lexer , Parser",substitute Lexer and Parser for lexer_class and parser_class .
"self . hide empty = options . get ( STR_ , False )","get the value under the 'hide_empty ' key of the options dictionary , if the key exists substitute it for self.hide_empty ,"
"handler = self . get handler ( * args , ** options )","call the method self.get_handler with 2 arguments unpacked list args and unpacked dictionary options , substitute the result for handler ."
return style,return style .
"token = Token ( TOKEN TEXT , token string )","token is an instance of Token class , created with 2 arguments : TOKEN_TEXT and token_string ."
register = registry . register,substitute registry.register for register .
"if y == m == d == "" STR_ "" :","if y , m and d are all equal to string ' 0 ' ,"
for w in self . widgets :,"for every w in self.widgets ,"
widget = DateInput,substitute DateInput for widget .
"def attach file ( self , path , mimetype = None ) :","define the method attach_file with arguments self , path and mimetype set to None ."
"def main help text ( self , commands only = False ) :",define the method main_help_text with arguments : self class instance and commands_only set to boolean False .
for migration in merge migrations :,"use it as an argument for the call to the method self.style.MIGRATE_HEADING , write the result to self.stdout . for every migration in merge_migrations ,"
self . msgmerge options = self . msgmerge options [ : ] + [ STR_ ],append list containing string ' -- no-wrap ' to self.msgmerge_options
return import string ( app path ),"call the import_string with app_path as an argument , return the result ."
"def  resolve name ( name , package , level ) :","RemovedInDjango19Warning and stacklevel set to integer 2. define the function _resolve_name with 3 arguments : name , package and level ."
args = STR_,args is a string ' [ fixture ... ] ' .
else :,"separated by newline , substitute it for msgs . if not ,"
def pk is not editable ( pk ) :,define the method pk_is_not_editable with an argument pk .
rest = value,substitute value for rest .
"raise CommandError ( "" STR_ "" % ( app label , model label ) )","raise CommandError with an argument string 'Unknown model : % s ' , where ' % s ' is replaced with app_label and model_label , respectively ."
if check not in self . registered checks :,if check is not contained in self.registered_checks .
if len ( bits ) < NUM_ :,"if length of bits is lesser than integer 2 ,"
response [ STR_ ] = STR_ % hashlib . md5 ( response . content ) . hexdigest ( ),"create md5 hash from string response.content in hexadecimal format , surround the hash with double quotes ,"
"help = "" STR_ """,help is a string `` Prints the CREATE INDEX SQL statements for the given model module name ( s ) . `` .
sys . stdout . write ( self . main help text ( ) + STR_ ),"call the method self.main_help_text append new line to it , write it to sys.stdout ."
"raise ValueError ( "" STR_ "" )",raise an ValueError with string `` This file is not accessible via a URL . '' as argument .
if status is not None :,if status is not None .
"TRAILING PUNCTUATION = [ STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ ]","TRAILING_PUNCTUATION is a list with 7 elements : ' . ' , ' , ' , ' : ' , ' ; ' , ' . ) ' , ' '' ' and '\ '' ."
import sys,import module sys .
if not basedirs :,"if basedirs is empty ,"
tt =  time . localtime ( stamp ),"call the method _time.localtime with an argument stamp , substitute the result for tt ."
str number = str number [ NUM_ : ],remove the first element from str_number .
cmd options = vars ( options ),"call the function vars with an argument options , substitute the result for cmd_options ."
if exclude and f . name in exclude :,"if exclude is true and f.name is contained in exclude ,"
def reset ( self ) :,define the method reset with an argument self .
@ register . filter ( is  safe = False ),decorator function register.filter with an argument is_safe set to boolean False .
"return format html ( STR_ , label for , self . tag ( ) , self . choice label )","call the function format_html with 4 arguments : string ' < label { 0 } > { 1 } { 2 } < /label > ' , label_for , result of the method self.tag ,"
if whitelist is not None :,if whitelist is not None
filenames . append ( filename ),append filename to filenames .
Tok . num += NUM_,increment Tok.num with an integer 1 .
"options , args = parser . parse known args ( self . argv [ NUM_ : ] )","call the method parser.parse_known_args wiht an argument self.argv , without the first two elements , assign the result for options ,"
class Command ( CheckCommand ) :,derive class Command from CheckCommand base class .
if not m and p < NUM_ :,"if m is false and p is lesser than integer 0 ,"
"def npgettext ( context , singular , plural , number ) :","define the function npgettext with 4 arguments : context , singular , plural and number ."
return time str + STR_,"append ' Z ' to time_str , return the result ."
if self . verbosity >= NUM_ :,if self.verbosity is greater or equal to integer 1 .
break,break the execution of the smallest enclosing loop .
app config = apps . get app config ( app label ),"call the method apps.get_app_config with an argument app_label , substitute the result for app_config ."
zfile . flush ( ),flush zfile stream buffer .
if os . name == STR_ :,"if os.name equals string 'posix ' ,"
plural form line = force str ( m . group ( STR_ ) ),"call the method m.group with an argument string 'value ' , use the result as an argument for the call to the force_str ,"
rel model = field . rel . to,substitute field.rel.to with rel_model .
"return func ( * args , ** kwargs )",call the function func with 2 arguments : unpacked list args and unpacked dictionary kwargs .
"if hasattr ( field . rel . to .  default manager , STR_ ) :","if field.rel.to._default_manager has an atttribute 'get_by_natural_key ' ,"
def to current timezone ( value ) :,define the function to_current_timezone with an argument value .
raise self . warning,raise self.warning .
commands . update ( { name : app config . name for name in find commands ( path ) } ),"call the method commands.update , with an argument dictionary containing entries : app_config_name for name , for every name in return value of the function find_commands , called with an argument path ."
data = { },data is an empty dictionary .
"size = property (  get size ,  set size )",size is a property object with _get_size as getter method and _set_size as setter method .
year field = STR_,year_field is a string ' % s_year ' .
members = [ member for member in self .  archive . getmembers ( ) if member . name ! = STR_ ],"members is a list with elements member for every member in the result of the function self._archive.getmembers ,"
self . target var = target var,substitute target_var for self.target_var .
"self .  post , self .  files = QueryDict ( , encoding = self .  encoding ) , MultiValueDict ( )","self._post is an instance of QueryDict created with arguments : an empty string and encoding set to self._encoding ,"
"obj .  constructor args = ( args , kwargs )",obj._constructor_args is a tuple with 2 elements : args and kwargs .
"  , ser fmt , cmp fmt = self . parse name ( os . path . basename ( fixture file ) )","call the function os.path.basename with an argument fixture_file , use the result as an argument for the call to the method ,"
"emit post migrate signal ( created models , self . verbosity , self . in teractive , connection . alias )","if the 'fake ' key doesnt exists set fake to boolean False , as arguments . call the method emit_post_migrate_signal with created_models , self.verbosity , self.interactive and connection.alias as arguments ."
"constant string = r "" "" "" STR_ "" "" "" % { STR_ : r STR_ , STR_ : r "" STR_ "" , STR_ : re . escape ( "" STR_ "" ) , STR_ : re . escape ( "" STR_ "" ) , }","constant_string is a raw string `` ( ? : % ( i18n_open ) s % ( strdq ) s % ( i18n_close ) s| % ( i18n_open ) s % ( strsq ) s % ( i18n_close ) s| % ( strdq ) s| % ( strsq ) s ) '' ,"
bf errors = self . error class ( [ conditional escape ( error ) for error in bf . errors ] ),"call the method self.error_class with an argument list containing results of the function conditional_escape ,"
def get objects ( ) :,define the function get_objects .
def content ( self ) :,define the method content with an argument self .
"parser . add argument ( STR_ , help = STR_ )","call the add_argument method on the parser object , with string 'app_label ' , and help set to string 'App label of the application containing the migration . ' as arguments ."
if subcommand cls . use argparse :,"if subcommand_cls.use_argparse is true ,"
def end serialization ( self ) :,define the method end_serialization with an argument self .
from django . core . urlresolvers import set script prefix,from django.core.urlresolvers import set_script_prefix into default name space .
return force str ( signature ),"call the function force_str with an argument signature , return the result ."
if output :,"if output is true ,"
"except ( IndexError , TypeError , ValueError ) :","if IndexError , TypeError or ValueError exception is caught ,"
"def module to dict ( module , omittable = lambda k : k . startswith ( STR_ ) ) :","define the function module_to_dict with 2 arguments : module and omittable as a lambda function with an argument k ,"
return six . text type ( self ) % rhs,"call the function six.text_type with an argument self , divide the result with rhs and return the reminder of the division ."
"schemes = [ STR_ , STR_ , STR_ , STR_ ]","schemes is a list containing 4 initial elements : 'http ' , 'https ' , 'ftp ' and 'ftps ' ."
"if hasattr ( os . path , STR_ ) :","if os.path has an attribute 'samefile ' ,"
return WSGIHandler ( ),return WSGIHandler object .
for line in header . split ( b STR_ ) :,"split header string at string '\r\n ' , for every line in result ,"
if msg :,"if msg is true ,"
 active . value = translation ( language ),"of the _DJANGO_DEPRECATED_LOCALES dictionary , RemovedInDjango19Warning and stacklevel set to integer 2. call the function translation with an argument language , substitute the result for _active.value ."
logger . propagate = True,logger.propagate is boolean True .
if settings . DEBUG :,"and 'request with value request , respectively use the previous as the arguments for the call to the logger.warning function . if settings.DEBUG is True ,"
raise,raise an exception .
"super ( Field , self ) .   init   ( )",call the method __init__ from the base class of the Field class .
templatetags modules candidates += [ STR_ % app config . name for app config in apps . get app configs ( ) ],"add string ' % s.templatetags ' to a list , where ' % s ' is replaced with app_config.name ,"
return fk,"model._meta.app_label , model._meta.object_name , parent_model._meta.app_label , parent_model._meta.object_name , respectively . return fk ."
chunk = next ( self ),"get the next element of iterable self , substitute it for chunk ."
if len ( password ) > in ner . block size :,"if length of password is greater than inner.block_size ,"
attrs [ class ] += + self . form . required css class,"append self.form.required_css_class to a whitespace character , append it to the value under the 'class ' key of the attrs dictionary ."
raise ValueError ( STR_ STR_ % e ),raise an ValueError exception with an argument string `` Unable to configure root logger : % s ' formated with e .
"add move ( MovedModule ( "" STR_ "" , "" STR_ "" ) )","use the result as an argument for the call to the add_move function . call the function MovedModule with 2 arguments : strings `` _thread '' and `` thread '' ,"
"raise ValueError ( "" STR_ "" % key )","raise an ValueError exception with string `` Key ' % s ' not found '' as argument , substitute ' % s ' with key converted into a string ."
if STR_ in config :,"if string ' ( ) ' is contained in config ,"
if ns pattern :,"if ns_pattern is true ,"
if doublecolon len > best doublecolon len :,"if doublecolon_len is greater than best_doublecolon_len ,"
"translation = gettext module . translation ( domain = STR_ , localedir = localedir , languages = [ self .   locale ] , codeset = STR_ , fallback = use null fallback )","call the method gettext_module.translation with 5 arguments : domain set to string 'django ' , localedir set to localedir ,"
from django . utils . encoding import force str,from django.utils.encoding import force_st into default name space .
self . error class = STR_,self.error_class is a string 'errorlist ' .
@ property,"property getter decorator ,"
"start , end = match . span ( )","call the method match.span , substitute the result for start an end , respectively ."
class HttpResponse ( HttpResponseBase ) :,where ' % s ' is replaced with self.__class__.__name__ . derive the class HttpResponse from the HttpResponseBase base class .
regex = re words if words else re chars,"if words is true , substitute re_words for regex , if not substitute re_chars for regex ."
"def to python ( self , data ) :",' '' Upload a valid image . The file you uploaded was either not an image or a corrupted image . '' ' for 'invalid_image ' . define the method to_python with arguments self and data .
"return ( form class is not None and ( hasattr ( form class , STR_ ) and ( form class .  meta . fields is not None or form class .  meta . exclude is not None ) ) )","only if form_class is not None , and if form_class has an attribute '_meta ' and form_class._meta.fields is not None ,"
"return re . sub ( r STR_ , STR_ , force text ( value ) )","call the method re.sub with 3 arguments : raw string ' > \s+ < ' , string ' > < ' and result of the function force_text ,"
if not self . valid value ( val ) :,"call the method self.valid_value with an argument val , if it evaluates to false ,"
else :,"respectively replace ' % s ' with key and elements of the resolved_path joined into a string , separated by ' : ' . if not ,"
value . configurator = self,substitute self for value.configurator .
self . using = options . get ( STR_ ),"get the value under the 'database ' key of the options dictionary , substitute it for self.database ."
"from django . utils . encoding import smart text , force text",from django.utils.encoding import smart_text and force_text into default name space .
self .  lock = threading . RLock ( ),"call the method threading.RLock , substitute the result for self._lock ."
old method name = renamed method [ NUM_ ],substitute first element of renamed_method for old_method_name .
base = Media ( ),base is an instance of Media class .
return name,return name .
"def   getitem   ( self , key ) :",and a result of the method __repr__ called from instance of base class of the MultiValueDict class . define the method __getitem__ with 2 arguments : self and key .
"parser . add argument ( STR_ , nargs = * )",call the method parser.add_argument with 2 arguments : string 'args ' and nargs set to '* ' .
self . can read = threading . Semaphore ( NUM_ ),"call the method threading.Semaphore with an argument integer 0 , substitute the result for self.can_read ."
self .  clean form ( ),call the method self._clean_form .
"default error messages = { STR_ :   ( "" STR_ "" ) , }","default_error_messages is an dictionary with an entry : return value of the function _ called with an argument string ,"
"def  check test runner ( app configs = None , ** kwargs ) :",define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments .
"return [ Warning ( "" STR_ "" , hint = ( "" STR_ "" "" STR_ "" "" STR_ "" "" STR_ "" "" STR_ "" ) , obj = None , id = STR_ , ) ]","call the Warning function with 3 arguments : hint tuple containing one string , Django 1.6 introduced a new default test runner ."
if t is not None :,"if t is not None ,"
"return ( "" % "" + six . text type ( arg ) ) % value","call the function six.text_type with an argument arg , append the result to ' % ' , format the previous with value , return the result ."
from django . db . models import ForeignKey,from django.db.models import ForeignKey .
import glob,import module glob .
class CacheClass ( DatabaseCache ) :,derive the class CacheClass from the DatabaseCache base class .
if value is not result :,"if value is not contained in result ,"
import pickle,import module pickle .
if command . use argparse :,"if command.use_argparse is true ,"
if priority :,"if priority is true ,"
nonlocal root = [ root ],nonlocal_root is an list with an element root .
"  , file ext = os . path . splitext ( self . file )","call the method os.path.splitext with an argument self.file , assign the result to _ and file_ext ."
"class ModelForm ( six . with metaclass ( ModelFormMetaclass , BaseModelForm ) ) :","derive the class ModelForm from the base class in the return value of the method six.with_metaclass , called with 2 arguments :"
self . sign = sign,substitute sign for self.sign .
return r,return r .
return list ( self ) == other,"if other equals list containing elements of self , return boolean True , otherwise return boolean False ."
return,"return an empty string ,"
save . alters data = True,"called with an argument commit , return the result . save.alters_data is boolean True ."
exp = datetime . utcfromtimestamp ( timeout ),"call the function datetime.utcfromtimestamp with argument timeout , substitute it for exp ."
"warnings . warn ( STR_ STR_ , RemovedInDjango19Warning )",call the function warnings.warn with 2 arguments : string ' '' requires_model_validation '' is deprecated '
"if hasattr (  active , "" STR_ "" ) :","if active has an attribute 'value ' ,"
def  fd ( f ) :,define the _fd function with argument f .
"if ( hasattr ( value , STR_ ) and not is in stance ( value , six . text type ) and not hasattr ( value , STR_ ) ) :","if value has an attribute '__iter__ ' and value is not an instance of six.text_type and value doesnt have an attribute '_meta ' ,"
self .  post render callbacks = [ ],self._post_render_callbacks is an empty list .
if value in self . empty values :,"if value is contained in self.empty_values ,"
bottom = ( number - NUM_ ) * self . per page,"decrement number by one , multiply it with self.per_page , substitute the result for bottom ."
def   copy   ( self ) :,"called with 2 arguments : value and memo , for every key and value in result for the method self.items , return the result . define the method __copy__ with an argument self ."
if exp is None or exp > time . time ( ) :,"if exp is None or exp is greater than the return value of the call to the function time.time ,"
return   ( STR_ ),"call the function _ with an argument string 'noon ' , return the result ."
class LocMemCache ( BaseCache ) :,derive the class LocMemCache from the base class BaseCache .
pass,do nothing
"ERRORS = { errno . EACCES : "" STR_ "" , errno . EADDRINUSE : "" STR_ "" , errno . EADDRNOTAVAIL : "" STR_ "" , }","ERRORS is a dictionary with 3 initial entries : string `` You do n't have permission to access that port . '' for errno.EACCES ,"
obj . save ( ),call the method obj.save .
return ( self . paginator . per page * ( self . number - NUM_ ) ) + NUM_,"decrement self.number by one , multiply it by self.paginator.per_page , increment the result by one , return it ."
 standard context processors = None,_standard_context_processors is None .
"statements = sql destroy indexes ( app config , self . style , connection )","call the function sql_destroy_indexes with 3 arguments : app_config , self.style and connection , substitute the result for statements ."
declared fields . pop ( attr ),remove entry at the attr key of the declared_fields dictionary .
"return ( is in stance ( other , RegexValidator ) and self . regex . pattern == other . regex . pattern and self . regex . flags == other . regex . flags and ( self . message == other . message ) and ( self . code == other . code ) and ( self . in verse match == other . in verse match ) )","evaluate the logical expression , if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern ,"
is atty = property ( lambda self : self . file . is atty ),"define lambda function that returns self.file.isatty field , use it as an argument for property function , put the result in isatty ."
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an accessed_time ( ) method ' .
plat = sys . platform,substitute sys.platform for plat .
"def load command class ( app name , name ) :",define the function load_command_class with arguments : app_name and name .
return SafeBytes ( data ),"return an instance of SafeBytes , created with an argument data ."
if result :,"if result is true ,"
"def   contains   ( self , key ) :",define the private method __contains__ with self class instance and key as arguments .
exhaust ( self .  input data ),call the function exhaust with an argument self._input_data .
pos = last = NUM_,pos and last are integer 0 .
result = ungettext ( * msgs with ctxt ),"string created by concatenating context , CONTEXT_SEPARATOR and plural and number . call the function ungettext with unpacked dictionary msgs_with_ctxt , substitute the result for result ."
return avoid wrapping ( value ),"substitute the result for value . call the function avoid_wrapping with an argument value , return the result ."
self .  read started = True,self._read_started is boolean True .
self . keyOrder = list ( data ) if data else [ ],"if data is true , substitute list created from elements of data , substitute it for self.keyOrder , otherwise self.keyOrder is an empty list ."
for middleware method in self .  exception middleware :,"for every middleware_method in self._exception_middleware ,"
from functools import wraps,from functools import wraps into default name space .
return version + delta,"sum version and delta together , return the result ."
return self . hashvalue,return self.hashvalue .
if match :,"if match is true ,"
"if filename . endswith ( ( / , \\' ) ) :

","if filename ends with '/ ' or with '\\ ' ,"
unichr = unichr,"as arguments for the call to the unicode function , return the result . substitute unichr for unichr ."
s . feed ( value ),call the method s.feed with an argument value .
class TimeField ( BaseTemporalField ) :,"and format , call the method date on the result , return the result . derive the class TimeField from the base class BaseTemporalField class ."
template dirs = app template dirs,substitute app_template_dirs for template_dirs .
label for =,label_for is an empty string .
  D2 = r STR_,__D2 is a raw string ' ( ? P < day > [ \d ] \d ) ' .
self . environ = environ,substitute environ for self.environ .
if code in  supported and check for language ( code ) :,"if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true ,"
"for i in range ( NUM_ , self . total form count ( ) ) :","for every i in sequence of integers , from 0 to the result of the method self.total_form_count ,"
"response headers = [ ( str ( k ) , str ( v ) ) for k , v in response . items ( ) ]","convert to k and v to strings for every k and v in return value of the response.item method , response_headers is a list containing all the above iteration elements ."
self . literal = mark safe ( unescape string literal ( var ) ),"call the function unescape_string_literal with an argument var , use it as an argument for the call to the function mark_safe ,"
"raise TemplateSyntaxError ( "" STR_ "" )",raise an TemplateSyntaxError exception with an argument string `` Invalid syntax in widthratio tag . Expecting 'as ' keyword '' .
"handler . addQuickElement ( "" STR_ "" , "" "" , { "" STR_ "" : cat } )","call the method handler.addQuickElement with 3 arguments : string 'category ' , an empty string and a dictionary with an entry :"
"for i , line in enumerate ( lines ) :","for every i and line in enumerated iterable lines ,"
return maybe,return maybe .
message context = message context . strip ( STR_ ),"strip message_context of ' '' ' characters from both ends , substitute the result for message_context ."
if shutdown message :,"if shutdown_message is true ,"
if timezone is None :,"if timezone is None ,"
self . vals . append ( val ),append val to self.vals .
"result = ( template , make origin ( display name , loader , name , dirs ) )","result is an tuple with 2 elements : template and return value of the function make_origin called with 4 arguments : display_name , loader , name and dirs ."
"parser . add argument ( STR_ , dest = STR_ , help = "" STR_ "" "" STR_ "" "" STR_ "" )","dest is 'use_base_manager ' , default is boolean False and help is a string ' ( use multiple -- exclude to exclude multiple apps/models ) . ' . call the method parser.add_argument with 3 arguments : string ' -- pks ' , dest set to string 'primary_keys ' ,"
"def add arguments ( self , parser ) :",define the method add_arguments with arguments self and parser .
def start serialization ( self ) :,define the method start_serialization with an argument self .
"def handle entityref ( self , name ) :",define the method handle_entityref with 2 arguments self and name .
lib = get library ( taglib ),"call the function get_library with an argument taglib , substitute the result for lib ."
if TYPE == RAW :,"if TYPE equals to RAW ,"
msg = self . style . HTTP BAD REQUEST ( msg ),"call the self.style.HTTP_BAD_REQUEST with an argument msg , substitute it for msg ."
guessed filename = params . get ( STR_ ) or used name,"get the value under the 'filename ' key of the params dictionary , if the key exists substitute it for guessed_filename ,"
"def   init   ( self , template string , or igin ) :","define the method __init__ with 3 arguments : self , template_string and origin ."
for t in type ( res ) . mro ( ) :,"get the type of res , call the method mro on the result , for every t in the result ,"
file = BytesIO ( data [ STR_ ] ),file is an instance of BytesIO class created with an argument : value under the 'content ' key of the data dictionary .
"def configure logger ( self , name , config , in cremental = False ) :","define the method configure_logger with 4 arguments : self , name , config , incremental set to boolean False ."
"handler . addQuickElement ( "" STR_ "" , rfc2822 date ( self . latest post date ( ) ) )","call the method handler.addQuickElement with 2 arguments : string 'lastBuildDate ' and result of the function rfc2822_date ,"
yield force text ( message ),"call the force_text with an argument message , yield the result ."
"return list  , False",return list_ and boolean False .
"strip spaces between tags = allow lazy ( strip spaces between tags , six . text type )","called with an argument value , return the result . call the function allow_lazy with 2 arguments : strip_spaces_between_tags , six.text_type , substitute the result for strip_spaces_between_tags ."
default = STR_,default is a string 'DEFAULT ' .
"def do with ( parser , token ) :",define the function do_with with 2 arguments : parser and token .
context . render context [ BLOCK CONTEXT KEY ] = BlockContext ( ),value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary is BlockContext class instance .
"def add arguments ( self , parser ) :","define the method add_arguments , with 2 arguments self and parser ."
self . run validators ( value ),"code set to string 'invalid_choice ' and params as a dictionary with an entry , val for 'value ' . call the method self.run_validators with an argument value ."
"ch , escaped = next ( pattern iter )","get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively ."
self .  size = size,substitute size for self._size .
"def handle ( self , ** options ) :",'Nominates a database to print the SQL for . Defaults to the `` default '' database . ' as the arguments . define the method handle with self class instance and dictionary options as the arguments .
"return STR_ % ( or iginal , self . obj , type ( self . obj ) )","in the string ' % s . You passed in % r ( % s ) ' replace every % s with original and type of the object self.obj as strings , respectively ,"
html class attr =,html_class_attr is an empty string .
while rbp < self . current token . lbp :,"while rbp is smaller than self.current_token.lbp ,"
return x,return x .
compile func .   doc   = func .   doc  ,"defaults set to defaults , name set to function_name , takes_context set to takes_context and node_class set to InclusionNode , substitute the result for compile_func . substitute func.__doc__ for compile_func.__doc__ ."
result = self . configure custom ( config ),"call the method self.configure_custom with an argument config , substitute the result for result ."
"for opname , opfunc in convert [ root ] :","get the value under the root key of the convert dictionary , for every opname and opfunc in the result ,"
end = newline,substitute space for end .
import warnings,import module warnings .
formatted = ( color style ( ) . ERROR ( force str ( e ) ) if e . is  serious ( ) else color style ( ) . WARNING ( force str ( e ) ) for e in is sues ),"if e.is_serious method evaluates to true , call the function color_style , on the result call the method ERROR with result of the force_str called with an argument e , if not call the function color_style on the result call the method ERROR with result of the force_str called with an argument e , for every e in issues , formatted is a tuple containing the previous result ."
if over bytes :,"if over_bytes is true ,"
"raise ValidationError (   ( STR_ ) , code = STR_ )","raise a ValidationError exception with 2 arguments : return value of the function _ called with an argument string 'Enter a valid IPv6 address . ' , and code set to string 'invalid ' ."
from django . utils . encoding import force bytes,from django.utils.encoding import force_bytes into default name space .
quant . append ( ch ),append ch to quant .
"warnings . warn ( warn msg , TranslatorCommentWarning )","formated with c , filemsg and comment_lineno_cache . call the function warnings.warn with 2 arguments : warn_msg and TranslatorCommentWarning ."
"def   init   ( self , * args , ** kwargs ) :","define the method __init__ with arguments self , unpacked list args and unpacked dictionary kwargs ."
self . template cache . clear ( ),call the method self.template_cache.clear .
"from django . utils . encoding import force bytes , python 2 unicode compatible",from django.utils.encoding import force_bytes and python_2_unicode_compatible into default name space .
"conditions nodelists . append ( ( condition , nodelist ) )",append a tuple with 2 elements : condition and nodelist to conditions_nodelists .
message =   ( STR_ ),"call the function _ with the argument string 'Ensure this value is % ( limit_value ) s ( it is % ( show_value ) s ) . ' , substitute the result for message ."
def l ( self ) :,define the method l with an argument self .
return new value,return new_value .
if commands only :,"if commands_only is true ,"
if path . is file ( path to remove ) :,"if path_to_remove is file ,"
self .  expire info [ key ] = self . get backend timeout ( timeout ),"call the self.get_backend_timeout with argument timeout , substitute it for the value under the key key of self._expire_info dictionary ."
for obj in objects :,"and ignorenonexistent set to self.ignore , substitute the result for objects . for every obj in objects ,"
"def   init   ( self , schemes = None , ** kwargs ) :","define the method __init__ with 3 arguments : self , schemes set to None and unpacked dictionary kwargs ."
self . verbosity = in t ( options . get ( STR_ ) ),"get the value under the key 'exclude ' of the options dictionary , convert it to an integer , substitute it for exclude ."
DEFAULT PALETTE = DARK PALETTE,"a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE , and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE . substitute DARK_PALETTE for DEFAULT_PALETTE ."
"def salted hmac ( key salt , value , secret = None ) :","define the function salted_hmac with 3 arguments : key_salt , value and secret set to None ."
"raise ValueError ( STR_ STR_ % ( name , e ) )",raise an ValueError exception with an argument string 'Unable to configure handler % r : % s ' formated with name and e .
self . attr = new attr,substitute new_attr for self.attr .
class BlockContext ( object ) :,derive the class BlockContext from the Exception base class .
"EMPTY VALUES = ( None , , [ ] , ( ) , { } )","EMPTY_VALUES is a tuple containing 5 initial elements : None , empty string , empty list , empty tuple and an empty dictionary ."
"raise CommandError ( "" STR_ "" % ( tablename , force text ( e ) ) )","raise an CommandError with an argument string `` Cache table ' % s ' could not be created.\nThe error was : % s . `` , replace ' % s ' with :"
"def external entity ref handler ( self , context , base , sysid , pubid ) :","define the method external_entity_ref_handler with arguments self , context , base , sysid and pubid ."
for model in model list :,"for every model in model_list ,"
"def next space index ( subject , i ) :",define the next_space_index with 2 arguments : subject and i .
raise NotImplementedError ( STR_ ),raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide an extract ( ) method ' .
conf = settings . CACHES [ backend ],substitute value under the backend key of settings.CACHES dictionary for conf .
return SafeText ( t ),"return an instance of SafeText , created with an argument t ."
piece = . join ( source [ last : pos ] ),"join source list elements from last till pos indexes into a string , substitute the result for piece ."
t -= NUM_,"decrement t by integer 1 ,"
lines . append ( line ),append line to lines .
return lookup view,return lookup_view .
"return in t ( values [ NUM_ ] ) , ch","convert first element of values into a integer , return the result and ch ."
"def sql all ( app config , style , connection ) :","define the function sql_all with 3 arguments : app_config , style and connection ."
"subject = STR_ % ( record . levelname , ( STR_ if request . META . get ( STR_ ) in settings . INTERNAL IPS else STR_ ) , record . getMessage ( ) )","subject is an string ' % s ( % s IP ) : % s ' , formated with record.levelname , string 'internal ' if value under the 'REMOTE_ADDR ' key ,"
"yield SubWidget ( self , name , value , attrs , choices )","yield an instance of SubWidget class created with 5 arguments : self , name , value , attrs and choices ."
if top + self . or phans >= self . count :,"if sum of the top and self.orphans is greater or equal to self.count ,"
neg inf = - NUM_ * NUM_,"multiply 10 to the power of 200 , with 10 to the power of 200 , negative , substitute the result for neg_inf ."
state frame [ self ] = None,value under the self key of state_frame dictionary is None .
"super ( MultiValueDict , self ) .   init   ( key to list mapping )","call the method __init__ from the base class of the class MultiValueDict , with an argument key_to_list_mapping ."
"def   init   ( self , regex , callback , default args = None , name = None ) :","define the method __init__ with 5 arguments : self , regex , callback , default_args set to None and name set to None ."
"from django . utils . encoding import iri to uri , force bytes , force text","from django.utils import iri_to_uri , force_bytes , force_text to the default name space ."
field type = STR_,field_type is a string 'NullBooleanField ( '
"from django . utils . safestring import ( SafeData , EscapeData , mark safe , mark for escaping )","from django.utils.safestring import SafeData , EscapeData , mark_safe and mark_for_escaping into default namespace ."
return apps . get model ( model identifier ),"call the method apps.get_model with an argument model_identifier , return the result ."
self .  queryset = queryset,substitute queryset for self._queryset .
"def   init   ( self , file ) :",define the method __init__ with 2 arguments self and file .
wrapped callback = self . make view atomic ( callback ),"call the method self.make_view_atomic with callback as the argument , substitute the result for the wrapped_callback ."
PY3 = sys . version info [ NUM_ ] == NUM_,"if first element of sys.version_info equals integer 3 , PY3 is boolean True , otherwise it is boolean False ."
if or igin :,"if origin is true ,"
def mark safe ( s ) :,define the function mark_safe with an argument s .
if attr in flags :,"if attr is contained in flags ,"
if callable ( name ) :,"if name is callable object ,"
if not only initial :,"if only_initial is false ,"
message =   ( STR_ ),"call the function _ with an argument string 'Ensure this value is greater than or equal to % ( limit_value ) s. ' , substitute the result for message ."
timestamp = baseconv . base62 . decode ( timestamp ),"call the baseconv.base62.decode method with an argument timestamp , substitute the result for timestamp ."
"if ch ! = \\' :

",if ch is not equal to string '\\ ' .
if verbosity >= NUM_ :,"if verbosity is greater or equal to integer 2 ,"
location = STR_ % self . get full path ( ),"call the method self.get_full_path , append the result to string '// ' , substitute it for location ."
"def   init   ( self , parser , * args , ** kwargs ) :","define the method __init__ with 4 arguments : self , parser , unpacked list args and unpacked dictionary kwargs ."
"raise CommandError ( "" STR_ "" % app config . label )","raise an CommandError exception , with an arguent : string `` App ' % s ' has migrations . Only the sqlmigrate and sqlflush commands can be used when an app has migrations . `` , where ' % s ' is replaced for app_config.label ."
except ImportError :,"if ImportError exception is caught ,"
"for condition , nodelist in self . conditions nodelists :","for every condition and nodelist in self.conditions_nodelists ,"
"path = kwargs . pop ( STR_ , None )","remove elements under the 'path ' key of the kwargs dictionary , if it exists substitute it for path , if not path is None ."
if token . contents == else :,"if token.contents equals string 'else ' ,"
rv = logging .  levelNames [ level ],substitute value under level key of logging._levelNames dictionary for rv .
"if hasattr ( middleware , STR_ ) :","if middleware has an attribute 'process_response ' ,"
self . can write . release ( ),call the method self.can_write.release .
"def  format value ( self , value ) :",define the method _format_value with 2 arguments : self and value .
if id  :,"if id_ is true ,"
"def  existing object ( self , pk ) :",define the method _existing_object with 2 arguments : self and pk .
if secret is None :,"if secret is None ,"
def non form errors ( self ) :,define the method non_form_errors with an argument self .
"super ( NoArgsCommand , self ) .   init   ( )","`` Use BaseCommand instead , which takes no arguments by default . '' and RemovedInDjango20Warning . call the __init__ method from the base class of the NoArgsCommand class ."
"def compile function error ( self , token , e ) :","define the method compile_function_error with 3 arguments : self , token and e ."
return context [ STR_ ],return value under the 'forloop ' key of the context dictionary .
 prefixes = local ( ),"call the function local , substitute the result for _prefixes ."
"for key , value in parse qsl ( query string or , keep blank values = True ) :",for every key and value in parse_gsl with query_string is it exists or an empty string if not and keep_blank_values set to boolean True .
"def   init   ( self , content type = None , status = None , reason = None ) :","define the method __init__ with 4 arguments : self , content_type set to None , status set to None , reason set to None ."
if self . verbosity >= NUM_ :,"if self.verbosity is greater or equal to integer 3 ,"
if  time . daylight :,"if _time.daylight is true ,"
"def sql destroy indexes ( app config , style , connection ) :","define the function sql_destroy_indexes with 3 arguments : app_config , style and connection ."
requires system checks = False,requires_system_checks is boolean False .
parts . append ( decimals ),append decimals to parts .
end -= NUM_,decrement end by one .
key = self . to field name or STR_,"substitute self.to_field_name , if exists , for key , if not substitute string 'pk ' for key ."
self . bcc = list ( bcc ),"put bcc into a list , assign it to self.bcc ."
"six . reraise ( os err exc type , os err exc type ( STR_ % ( args [ NUM_ ] , strerror ) ) , sys . exc info ( ) [ NUM_ ] )","call the method six.reraise 3 with arguments : os_err_exc_type , return value of the function os_err_exc_type ,"
" iteritems = "" STR_ """,_iteritems is a string `` items '' .
class MergeDict ( object ) :,derive the class MergeDict from the object base class .
is  templatized = True,is_templatized is boolean True .
lines = value . split ( STR_ ),"split value by newline characters , substitute the result for lines ."
self . stream . write ( - * NUM_ ),write 79 '- ' characters into self.stream file stream .
m = self . WORD PATTERN . match ( rest ),"match rest string with self.WORD_PATTERN regex , substitute the result for m ."
"self . use natural primary keys = options . pop ( STR_ , False )","if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys . remove the 'use_natural_primary_keys ' key from the options dictionary and substitute it for self.use_natural_primary_keys ,"
"if not hasattr ( content , STR_ ) :","if content has an 'chunks ' attribute ,"
"if token == "" not "" and i + NUM_ < l and tokens [ i + NUM_ ] == "" in "" :","if token equals a string `` not '' and i incremented by 1 is lesser than l ,"
out += STR_ % tag,"replace ' % s ' in string ' < / % s > ' with tag , append the result to out ."
x = in t ( x // len ( to digits ) ),"divide x by length of to_digits , convert floor value of the result to an integer , substitute it for x ."
yield STR_ % table2model ( table name ),"yield string 'from % s import models ' % self.db_module as the result , where `` % s '' is replaced with result of the call to the function ,"
self . cc = [ ],self.cc is an empty list .
m = self . INDEX PATTERN . match ( rest ),"match rest string with self.INDEX_PATTERN regex , substitute the result for m ."
" super ( SimpleLazyObject , self ) .   init   ( )","call the function _super with 2 arguments : class SimpleLazyObject and self , call the method __init__ on the result ."
"final output . extend ( connection . creation . sql for pending references ( refto , style , pending references ) )","call the method connection.creation.sql_for_pending_references with 3 arguments : refo , style and pending_references ,"
def get limit choices to ( self ) :,define the method get_limit_choices_to with arguments self .
def symlinks supported ( ) :,define the method symlinks_supported .
 localtime = None,_localtime is None .
@ staticmethod,"class static method ,"
if callable ( data ) :,"if not , substitute self.field.initial for data . if data is an callable object ,"
if os . path . is file ( fext ) :,"if fext is a file ,"
self .  assert mutable ( ),call the method self._assert_mutable .
in valid apps . append ( app name ),append app_name to the invalid_apps .
"return importlib find ( full module name , package path ) is not None","call the function importlib_find with 2 arguments : full_module_name and package_path , if the result is not None , return boolean True ,"
return iter ( self . file ),return iterator object based on the self.file collection object .
"self . appendlist ( key , value )","keep_blank_values set to boolean True , encoding set to encoding . call the method appendlist with 2 arguments : key and value ."
"key , value = bits [ NUM_ ] , bits [ NUM_ ]","substitute third and first element of bits for key and value , respectively ."
if value is None :,"if value is None ,"
if model in created models :,"if model is contained in created_models ,"
"super ( Command , self ) . add arguments ( parser )","call the method add_arguments from the base class of the Command class , with an argument parser ."
def  get page range ( self ) :,define the method _get_page_range with an argument self .
"prefix , rest = self . split leading dir ( path )","call the method self.split_leading_dir with an argument path , assign the result to prefix and rest , respectively ."
"from django . utils . six . moves . urllib . parse import ( quote , quote plus , unquote , unquote plus , urlparse , urlencode as or iginal urlencode )","from django.utils.six.moves.urllib.parse import quote , quote_plus , unquote , unquote_plus , urlparse , urlencode as original_urlencode ."
self . stdout . flush ( ),flush the output buffer of the self.stdout object .
return value if six . PY2 else value . encode ( ISO 8859 1 ),"default string value , substitute it for value . return value if six.PY2 is true , if not return value.encode ( ISO_8859_1 ) ."
if filename . endswith ( STR_ ) :,"if filename ends with string '.mo ' ,"
"boundarystream = InterBoundaryIter ( self .  stream , self .  separator )","boundarystream is an instance of InterBoundaryIter class , created with self._stream and self._separator as arguments ."
settings . SITE ID,settings.SITE_ID .
shell = IPShell ( argv = [ ] ),"shell is an instance of IPShell class , created with an argument argv as an empty list ."
for base in in spect . getmro ( new class ) :,"call the method inspect.getmro with an argument new_class , for every base in the result ,"
def compress sequence ( sequence ) :,define the function compress_sequence with an argument sequence .
"return time format ( value , arg )","call the function time_format with 2 arguments : value and arg , return the result ."
base = force text ( base ),"call the function force_text with an argument base , substitute the result for base ."
return results,return results .
if ( self . max digits is not None and self . decimal places is not None and whole digits > ( self . max digits - self . decimal places ) ) :,"code set to string 'max_decimal_places ' and params set to a dictionary with an entry : self.decimal_places for 'max ' . if self.max_digits is not None and self.decimal_places is not None and whole_digits is grater than the difference of ,"
self .  current = None,self._current is None .
if only new :,"if only_new is True ,"
in put type = STR_,input_type is a string 'hidden ' .
"return "" STR_ "" % ( self .   class   .   name   , self or "" None "" )","substitute ' % s ' in string ' < % s : % s > ' with self.__class__.__name__ and self , if exists , or string 'None ' if it doesnt , return it ."
self . s = s,substitute s for self.s .
"ch2 , escaped = next ( in put iter )","get the next element of the iterable pattern_iter , assign the result for ch2 and escaped , respectively ."
"parser . add option ( STR_ , STR_ , action = STR_ , dest = STR_ , default = STR_ , type = STR_ , choices = [ STR_ , STR_ , STR_ , STR_ ] , help = STR_ )","usage set to return value of the method self.usage called with an argument subcommand , version set to return value of the method self.get_version . call the method parser.add_option with 8 arguments : string '-v ' , string ' -- verbosity ' , action set to string 'store ' ,"
"re words = re . compile ( r STR_ , re . U | re . S )","call the function re.compile with 2 arguments : raw string ' < .* ? > | ( ( ? : \w [ -\w ] *| & .* ? ; ) + ) ' and bitwise OR performed with 2 operands ,"
boolean attrs = [ ],boolean_attrs is an empty list .
return,substitute the result for value under the self.target_var key of the context dictionary . return an empty string .
if opts :,"if opts is true ,"
if ( self . validate max and self . total form count ( ) - len ( self . deleted forms ) > self . max num ) or self . management form . cleaned data [ TOTAL FORM COUNT ] > self . absolute max :,"if self.validate_max is true , and length of self.deleted_forms subtracted from the return value of the method self.total_form_count ,"
result = NUM_,result is an integer 0 .
"ch , escaped = next ( in put iter )","get the next element of the iterable pattern_iter , assign the result for ch and escaped , respectively ."
raise CommandError ( msg ),raise CommandError exception with msg as argument .
"def   get   ( self , in stance , owner ) :","define the method __get__ with 3 arguments : self , instance and owner ."
def   str   ( self ) :,"join all of the results into a string separated by newline character , return the result . define the method __str__ with an argument self ."
global  supported,use global variable _supported .
block content = token string [ NUM_ : - NUM_ ] . strip ( ),"take elements of token_string from second to second last element and strip the whitespaces surrounding the result ,"
self . find template cache = { },self.find_template_cache is an empty dictionary .
if self . selected fields is None or field . attname [ : - NUM_ ] in self . selected fields :,if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields :
message context = None,message_context is None .
self . prog name = os . path . basename ( self . argv [ NUM_ ] ),"call the function os.path.basename with first element of self.argv as an argument , substitute the result for self.prog_name ."
for exclude in excludes :,"for every exclude in excludes ,"
"f = os . path . join ( root , f )","join root and f into a file , substitute it for f ."
self . clear ( ),call the self.clear method .
"with open ( writer . path , "" STR_ "" ) as fh :","open writer.path file in write mode , with file descriptor as fh , perform the following ,"
"all locales . extend ( map ( os . path . basename , locale dirs ) )",extend all_locales list with the elements of locale_dirs list on which os.path.basename function was applied .
os . setsid ( ),call the method os.setsid .
self . template name = template,substitute template for self.template_name .
"raise CommandError ( "" STR_ "" % app label )","raise CommandError with an argument string 'Unknown application : % s ' , where ' % s ' is replaced with app_label ."
  all   = [ STR_ ],__all__ is an list with an element 'luhn ' .
"g . flatten ( self , unixfrom = unixfrom )",call the method g.flatten with arguments self and unixfrom set to unixfrom .
"yield "" STR_ """,yield string `` # into your database . '' as the result .
"return STR_ % etag . replace ( STR_ \ \ \ \ STR_ "" ' , '\\""' )

","return a string ' '' % s '' ' formated with etag , in which every occurrence of '\\ ' is replaced with '\\\\ ' and every occurrence of ' '' ' ,"
url = smart urlquote ( middle ),"call the function smart_urlquote with an argument middle , substitute the result for url ."
if ( db . settings dict [ STR_ ] and db . alias not in non atomic requests ) :,"if value under the key 'ATOMIC_REQUESTS of db.settings_dic dictionary is True and db.alias is not present in the non_atomic_requests ,"
content length = in t ( meta data . get ( STR_ ) [ NUM_ ] ),"convert to an integer first element of the value under the 'content-length ' key of the meta_data dictionary , substitute it for content_length ."
"raise parser . error class ( "" STR_ "" % self . id )","raise an exception parser.error_class with an argument string `` Not expecting ' % s ' as infix operator in if tag . `` ,"
"raise CommandError ( "" STR_ "" % e )","raise CommandError with an argument string `` Unable to serialize database : % s '' , where ' % s ' is replaced with e ."
"  all   = [ STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , STR_ , ]","__all__ is a list of strings , 'SimpleCookie ' , 'parse_cookie ' , 'HttpRequest ' , 'QueryDict ' , 'RawPostDataException ' ,"
if options . get ( STR_ ) :,"if value under the 'list_tags ' key of options dictionay is true ,"
name = content . name,substitute content.name for name .
class ImageField ( FileField ) :,derive the class ImageField from the base class FileField class .
base64d = b64 encode ( data ),"call the b64_encode function with an argument data , substitute the result for base64d ."
"raise ValueError ( "" STR_ "" )",raise an ValueError exception with an argument string `` Negative base36 conversion input . `` .
"from email import ( charset as Charset , encoders as Encoders , message from string , generator )","from email import charset as Charset , encoders as Encoders , message_from_string and generator ."
if STR_ in exclude :,"if ' . ' is contained in exclude ,"
from django . apps import apps,from django.apps import apps into default name space .
if var . find ( VARIABLE ATTRIBUTE SEPARATOR + STR_ ) > - NUM_  or var [ NUM_ ] == STR_ :,"call the function var.find with an argument : ' _ ' appended to VARIABLE_ATTRIBUTE_SEPARATOR , if the result is greater than integer -1 ,"
from django . core . mail . message import sanitize address,from django.core.mail.message import sanitize_address into default name space .
if app output :,"if app_output is true ,"
" urllib robotparser moved attributes = [ MovedAttribute ( "" STR_ "" , "" STR_ "" , "" STR_ "" ) , ]","_urllib_robotparser_moved_attributes is a list containing an instance of MovedAttribute class , created with 3 argument : strings ,"
self . years = years,substitute years for self.years .
from   future   import unicode literals,from __future__ import unicode_literals into default name space .
raw data = field stream . read ( ),"call the method field_stream.read , substitute the result for raw_data ."
"new filenames = [ filename .   file   for filename in new modules if hasattr ( filename , STR_ ) ]","create the list of paths from which filename module was included for every filename in new_modules , only is filename has '__file__ ' attribute , substitute the resulting list for new_filenames ."
if not value :,"if value is true ,"
"moves = sys . modules [   name   + "" STR_ "" ] =  MovedItems (   name   + "" STR_ "" )","append string '.moves ' to __name__ , use it as an argument to instantiate _MovedItems class , assign it to moves ,"
elif ch == STR_ :,"otherwise if ch equals a string ' : ' ,"
except ValidationError :,"if ValidationError exception is caught ,"
"from django . forms . widgets import ( TextInput , NumberInput , EmailInput , URLInput , HiddenInput , MultipleHiddenInput , ClearableFileInput , CheckboxInput , Select , NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput , SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE INPUT CONTRADICTION )","from django.forms.widgets import TextInput , NumberInput , EmailInput , URLInput , HiddenInput , MultipleHiddenInput , ClearableFileInput ,"
self . pointer = NUM_,self.pointer is integer 0 .
val = self [ key ],substitute value under the key key of self dictionary for val .
pos = self . file . tell ( ),"get the position of the self.file file pointer , substitute it for pos ."
continue,skip this loop iteration .
class Operator ( TokenBase ) :,derive the class Operator from the base class TokenBase .
"raise CommandError ( "" STR_ "" % errors )","raise an CommandError with an argument string `` errors happened while running msgattrib\n % s '' , where ' % s ' is replaced with errors ."
import shutil,import module shutil .
"register serializer ( format , settings . SERIALIZATION MODULES [ format ] , serializers )","call the function register_serializer with 3 arguments : format , value under the format key of the settings.SERIALIZATION_MODULES dictionary and serializers ."
"return get callable ( callback ) , { }","call the function get_callable with an argument callback , return the result and an empty dictionary ."
"if is in stance ( template , ( list , tuple ) ) :","if template is an instance of list or tuple types ,"
"def generic tag compiler ( parser , token , params , varargs , varkw , defaults , name , takes context , node class ) :","define the method generic_tag_compiler with 9 arguments : parser , token , params , varargs , varkw , defaults , name , takes_context ,"
self .  files = MultiValueDict ( ),self._files is an instance of MultiValueDict class .
"raise ValueError ( STR_ % ( h , e ) )",raise an ValueError exception with an argument string 'Unable to add handler % r : % s ' formated with h and e .
for alternative in self . alternatives :,"for every alternative in self.alternatives ,"
self . stdout . write ( errors ),write errors to self.stdout .
output = [ ],output is an empty list .
return False,return boolean False .
return select html,return select_html .
if bits [ NUM_ ] ! = STR_ :,"if third element of bits is not equal to a string 'by ' ,"
"key = self . make key ( key , version = version )","call the method self.make_key with key and version set to version as arguments , substitute it for key ."
style = color style ( ),"call the color_style function , substitute the result for style ."
"return fastcgi help ( "" STR_ "" "" STR_ "" )","call the function fastcgi_help with an argument string `` ERROR : Implementation must be one of prefork or thread . `` , return the result ."
package path = package .   path  ,substitute package.__path__ for package_path .
word split re = re . compile ( r STR_ ),"call the function re.compile with raw string ' ( \s+ ) ' , substitute the result for word_split_re ."
self [ key ] = default,substitute default for value under the key key of self dictionary .
return type ( self ) .   bool   ( self ),"get the type of the self object , on the result call the __bool__ method with an argument self , return the result ."
return WEEKDAYS ABBR [ self . data . weekday ( ) ],"call the method self.data.weekday , use the result as an key for obtaining WEEKDAYS_ABBR dictionary value , return it ."
self .  boundary = boundary,substitute boundary for self._boundary .
" js escapes . update ( ( or d ( STR_ % z ) , STR_ % z ) for z in range ( NUM_ ) )","'\\u0027 ' for integer representation of string '\ ' , '\\u0022 ' for integer representation of string ' '' ' , '\\u003E ' for integer representation of string ' > ' , '\\u003C ' for integer representation of string ' < ' , '\\u0026 ' for integer representation of string ' % ' , '\\u003D ' for integer representation of string '= ' , '\\u002D ' for integer representation of string '- ' , '\\u003B ' for integer representation of string ' ; ' , '\\u2028 ' for integer representation of string '\u2028 ' and '\\u2029 ' for integer representation of string '\u2029 ' . for eery z in range of integers from 0 to 31 , update _js_escapes dictionary with '\\u % 04X ' formated with z ,"
return self .  get image dimensions ( ) [ NUM_ ],return the second element of the return value of the call to the self._det_image_dimensions method .
"return force bytes ( s , encoding , strings only , errors )","evaluate the function force_bytes , with the arguments s , encoding , strings_only and errors , return the result ."
"def   getitem   ( self , in dex ) :",define the method __getitem__ with arguments self and index .
"if hasattr ( self , STR_ ) :","if self has an '_get ' attribute ,"
"self . xml . endElement ( "" STR_ "" )",call the method self.xml.endElement with an argument string `` django-objects '' .
 templatetags modules . append ( templatetag module ),append templatetag_module to _templatetags_modules .
self . file .   enter   ( ),call the file.__enter__ method on self .
opts = in stance .  meta,substitute instance._meta for opts .
return self . getvalue ( ),"call the method self.getvalue , return the result ."
self .  post clean ( ),call the method self._post_clean .
for attr in  urllib response moved attributes :,"strings `` addbase '' , `` urllib '' and `` urllib.response '' , result of the function MovedAttribute , called with 3 arguments : strings `` addclosehook '' , `` urllib '' , `` urllib.response '' , result of the function MovedAttribute , called with 3 arguments : strings `` addinfo '' , `` urllib '' , `` urllib.response '' and result of the function MovedAttribute , called with 3 arguments : strings `` addinfourl '' , `` urllib '' , `` urllib.response '' . for every attr in _urllib_response_moved_attributes ,"
class IfNode ( Node ) :,derive the class IfNode from Node base class .
self .  producer = producer,substitute producer for self._producer .
if data is None :,"if data is None ,"
